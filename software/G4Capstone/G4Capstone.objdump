
G4Capstone.elf:     file format elf32-littlenios2
G4Capstone.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001a0

Program Header:
    LOAD off    0x00001020 vaddr 0x01104020 paddr 0x00800000 align 2**12
         filesz 0x000001a0 memsz 0x000001a0 flags r-x
    LOAD off    0x000021a0 vaddr 0x008001a0 paddr 0x008001a0 align 2**12
         filesz 0x00017034 memsz 0x00017034 flags r-x
    LOAD off    0x000191d4 vaddr 0x008171d4 paddr 0x00818d44 align 2**12
         filesz 0x00001b70 memsz 0x00001b70 flags rw-
    LOAD off    0x0001b8b4 vaddr 0x0081a8b4 paddr 0x0081a8b4 align 2**12
         filesz 0x00000000 memsz 0x00007578 flags rw-
    LOAD off    0x0001b000 vaddr 0x01104000 paddr 0x01104000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01104000  01104000  0001b000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a0  01104020  00800000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00016a54  008001a0  008001a0  000021a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000005e0  00816bf4  00816bf4  00018bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b70  008171d4  00818d44  000191d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00007578  0081a8b4  0081a8b4  0001b8b4  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0001b020  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000e18  00000000  00000000  0001b048  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00002683  00000000  00000000  0001be60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00031ecb  00000000  00000000  0001e4e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009555  00000000  00000000  000503ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001c704  00000000  00000000  00059903  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002970  00000000  00000000  00076008  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000025ce  00000000  00000000  00078978  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000d6b1  00000000  00000000  0007af46  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000885f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009f8  00000000  00000000  00088608  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  0008e0a4  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0008e0aa  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0008e0b6  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0008e0b7  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0008e0b8  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0008e0bc  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0008e0c0  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0008e0c4  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0008e0cf  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0008e0da  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000d  00000000  00000000  0008e0e5  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002d  00000000  00000000  0008e0f2  2**0
                  CONTENTS, READONLY
 29 .jdi          000051db  00000000  00000000  0008e11f  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00057d55  00000000  00000000  000932fa  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01104000 l    d  .entry	00000000 .entry
01104020 l    d  .exceptions	00000000 .exceptions
008001a0 l    d  .text	00000000 .text
00816bf4 l    d  .rodata	00000000 .rodata
008171d4 l    d  .rwdata	00000000 .rwdata
0081a8b4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001d8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00800744 l     F .text	00000058 __sprint_r
00816d96 l     O .rodata	00000010 blanks.3452
00816d86 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
008027c0 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
008041e8 l     F .text	00000058 std
008042f4 l     F .text	00000008 __fp_lock
008042fc l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
008171d4 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
00818c94 l     O .rwdata	00000004 charset
00816dcc l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00816f14 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
008086a8 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
008097d4 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0080a110 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080a170 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080a274 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0080a398 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080a478 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080a5d8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0080a824 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00818cb8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0080aadc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
00818cbc l     O .rwdata	00000004 lockid
0081a8e4 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00818cc0 l     O .rwdata	00000004 lockid
0081a8ec l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0080c514 l     F .text	00000044 OS_InitMisc
0080c558 l     F .text	0000006c OS_InitRdyList
0080c6bc l     F .text	000000e0 OS_InitTCBList
0080c438 l     F .text	000000dc OS_InitEventList
0080c5c4 l     F .text	0000007c OS_InitTaskIdle
0080c640 l     F .text	0000007c OS_InitTaskStat
0080c930 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
0080e850 l     F .text	00000110 OS_FlagTaskRdy
0080e5a8 l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00817b90 l     O .rwdata	0000106c jtag_uart_0
00818bfc l     O .rwdata	00000030 audio_and_video_config_0
00818c2c l     O .rwdata	00000030 audio_0
00818c5c l     O .rwdata	0000002c character_lcd_0
008131c8 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00813478 l     F .text	000002c8 altera_avalon_jtag_uart_irq
00813740 l     F .text	00000114 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00813f58 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 altera_up_avalon_audio_and_video_config.c
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0081573c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00815914 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00815c24 l     F .text	000000f8 alt_file_locked
00815ea8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
008169d0 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00816b84 l     F .text	00000040 alt_sim_halt
008149b4 g     F .text	00000038 alt_up_av_config_reset
00805fd8 g     F .text	00000094 _mprec_log10
00814e58 g     F .text	00000064 alt_up_av_config_read_D5M_cfg_register
00818d0e g     O .rwdata	00000002 OSTaskNameSize
008060c4 g     F .text	00000088 __any_on
0080787c g     F .text	00000070 _isatty_r
00816eec g     O .rodata	00000028 __mprec_tinytens
00814a24 g     F .text	00000030 alt_up_av_config_disable_interrupt
0080a638 g     F .text	000000c8 alt_main
0080061c g     F .text	000000a0 _puts_r
00821b9c g     O .bss	00000100 alt_irq
008078ec g     F .text	00000078 _lseek_r
0080f144 g     F .text	000000d4 OS_MemInit
00818d44 g       *ABS*	00000000 __flash_rwdata_start
008130a4 g     F .text	00000064 OSTimeSet
00815064 g     F .text	00000034 alt_up_character_lcd_send_cmd
008091c8 g     F .text	00000088 __eqdf2
0080b090 g     F .text	000006b4 OSEventPendMulti
008142cc g     F .text	00000070 alt_up_audio_read_fifo_avail
00821e2c g       *ABS*	00000000 __alt_heap_start
00814af4 g     F .text	000000ac alt_up_av_config_write_audio_cfg_register
008164b0 g     F .text	00000020 OSTaskCreateHook
008005a4 g     F .text	00000044 printf
00818ce6 g     O .rwdata	00000002 OSMboxEn
0081433c g     F .text	00000070 alt_up_audio_record_r
0080b798 g     F .text	0000007c OSIntEnter
00807334 g     F .text	00000068 __sseek
00804250 g     F .text	000000a4 __sinit
00818cf6 g     O .rwdata	00000002 OSQEn
00804f5c g     F .text	00000084 _setlocale_r
00804350 g     F .text	0000009c __sfmoreglue
0080ad4c g     F .text	000000d0 __malloc_unlock
0081650c g     F .text	0000001c OSTaskStatHook
0081a8f4 g     O .bss	00000001 OSLockNesting
00818d34 g     O .rwdata	00000002 OSDataSize
0081a8f5 g     O .bss	00000001 OSRunning
00814244 g     F .text	00000088 alt_up_audio_reset_audio_core
00805a54 g     F .text	000000e0 memmove
00816544 g     F .text	0000001c OSInitHookBegin
00818d2c g     O .rwdata	00000002 OSTmrSize
00804340 g     F .text	00000010 _cleanup
0080614c g     F .text	000000bc _Balloc
0081a8f8 g     O .bss	00000004 OSIdleCtr
008092d8 g     F .text	00000088 __gtdf2
0081617c g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
00814fe8 g     F .text	0000007c get_DDRAM_addr
0080cc64 g     F .text	000002e0 OS_TCBInit
01104000 g     F .entry	0000000c __reset
00818d32 g     O .rwdata	00000002 OSTmrWheelTblSize
00800000 g       *ABS*	00000000 __flash_exceptions_start
00818cd2 g     O .rwdata	00000002 OSEventSize
0081a8fc g     O .bss	00000001 OSPrioHighRdy
00807808 g     F .text	00000074 _fstat_r
008164d0 g     F .text	00000020 OSTaskDelHook
0081a8d0 g     O .bss	00000004 errno
0081615c g       .text	00000000 OSStartHighRdy
0081185c g     F .text	00000200 OSTaskCreateExt
0080e0c4 g     F .text	00000068 OSFlagPendGetFlagsRdy
00818d12 g     O .rwdata	00000002 OSTaskStatStkSize
00814208 g     F .text	0000003c alt_up_audio_write_interrupt_pending
0080d0d0 g     F .text	00000334 OSFlagAccept
0080f880 g     F .text	000000c8 OSQFlush
0080f218 g     F .text	00000154 OSQAccept
0081a8dc g     O .bss	00000004 alt_argv
00820c88 g       *ABS*	00000000 _gp
00811688 g     F .text	000001d4 OSTaskCreate
00811114 g     F .text	00000574 OSTaskChangePrio
0081a8f0 g     O .bss	00000004 alt_heapsem
0080cf44 g     F .text	0000018c OSDebugInit
00811a5c g     F .text	0000040c OSTaskDel
00817a10 g     O .rwdata	00000180 alt_fd_list
0081e978 g     O .bss	00000370 OSFlagTbl
0080c214 g     F .text	000000b8 OS_EventTaskRemove
00815864 g     F .text	00000094 alt_find_dev
008059b4 g     F .text	000000a0 memcpy
00818cfc g     O .rwdata	00000002 OSRdyTblSize
008151fc g     F .text	0000004c alt_up_character_lcd_write_fd
00804334 g     F .text	0000000c _cleanup_r
00809470 g     F .text	000000f8 __floatsidf
008159ec g     F .text	00000078 alt_io_redirect
008093e8 g     F .text	00000088 __ltdf2
00816bf4 g       *ABS*	00000000 __DTOR_END__
008006bc g     F .text	00000014 puts
0080ae1c g     F .text	00000130 OSEventNameGet
00818ce0 g     O .rwdata	00000002 OSFlagMax
00805f28 g     F .text	000000b0 __ratio
0080b814 g     F .text	00000100 OSIntExit
00818d1a g     O .rwdata	00000002 OSTCBSize
008147a0 g     F .text	00000060 alt_up_audio_read_fifo_head
0081a8fd g     O .bss	00000001 OSPrioCur
008139bc g     F .text	000002c0 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
008005e8 g     F .text	00000034 _printf_r
01104000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00809910 g     F .text	00000008 __udivsi3
0080a2d4 g     F .text	000000c4 isatty
00818d00 g     O .rwdata	00000002 OSStkWidth
00816dfc g     O .rodata	000000c8 __mprec_tens
00818cf4 g     O .rwdata	00000002 OSPtrSize
00804f38 g     F .text	00000008 __locale_charset
00818cd4 g     O .rwdata	00000002 OSEventTblSize
008160d0 g       .text	00000000 OSCtxSw
0081a8c4 g     O .bss	00000004 __malloc_top_pad
0081a900 g     O .bss	00000004 OSTCBList
0081a8d4 g     O .bss	00000004 alt_fd_list_lock
00814928 g     F .text	0000008c alt_up_av_config_read_data
00818c90 g     O .rwdata	00000004 __mb_cur_max
00804f40 g     F .text	0000000c _localeconv_r
008068b0 g     F .text	0000003c __i2b
0080491c g     F .text	0000049c __sfvwrite_r
0081ece8 g     O .bss	00000c30 OSMemTbl
0081a904 g     O .bss	00000001 OSTickStepState
008072bc g     F .text	00000070 _sbrk_r
00818cf8 g     O .rwdata	00000002 OSQMax
0081f918 g     O .bss	00000800 OSTaskStatStk
0080ed2c g     F .text	0000010c OSMemNameGet
00818cd8 g     O .rwdata	00000002 OSFlagEn
00807964 g     F .text	00000078 _read_r
00818d1e g     O .rwdata	00000002 OSTimeTickHookEn
0080fde4 g     F .text	00000180 OSQPost
0080e960 g     F .text	000000ac OS_FlagUnlink
008175d4 g     O .rwdata	0000000c __lc_ctype
00818cb0 g     O .rwdata	00000004 alt_max_fd
0080c7f0 g     F .text	0000006c OS_MemCopy
00814800 g     F .text	00000060 alt_up_audio_write_fifo_head
0080c85c g     F .text	000000d4 OS_Sched
00809e10 g     F .text	00000138 __unpack_d
008076e4 g     F .text	00000110 _fclose_r
0080ec28 g     F .text	00000104 OSMemGet
00812190 g     F .text	000001c4 OSTaskNameSet
008041b4 g     F .text	00000034 fflush
0081a8c8 g     O .bss	00000004 __malloc_max_sbrked_mem
0081a908 g     O .bss	00000004 OSCtxSwCtr
00816528 g     F .text	0000001c OSTimeTickHook
00815a64 g     F .text	000001c0 alt_irq_register
00818ce2 g     O .rwdata	00000002 OSFlagNameSize
0080c2cc g     F .text	00000104 OS_EventTaskRemoveMulti
00808b38 g     F .text	00000074 __adddf3
0080c0c0 g     F .text	00000154 OS_EventTaskWaitMulti
00805e08 g     F .text	00000120 __b2d
00818cfa g     O .rwdata	00000002 OSQSize
00808048 g     F .text	00000660 __umoddi3
0080a4e4 g     F .text	000000f4 lseek
008109c0 g     F .text	0000027c OSSemPend
00818c8c g     O .rwdata	00000004 _global_impure_ptr
00806c58 g     F .text	000005f4 _realloc_r
00818ce4 g     O .rwdata	00000002 OSLowestPrio
00821e2c g       *ABS*	00000000 __bss_end
00816598 g     F .text	00000020 OSTCBInitHook
00818d2a g     O .rwdata	00000002 OSTmrCfgTicksPerSec
00815fa0 g     F .text	00000110 alt_tick
008079dc g     F .text	0000066c __udivdi3
00818ccc g     O .rwdata	00000002 OSEventEn
00816ec4 g     O .rodata	00000028 __mprec_bigtens
00806b38 g     F .text	00000120 __s2b
00818d26 g     O .rwdata	00000002 OSTmrCfgNameSize
00809640 g     F .text	00000194 __floatunsidf
00805d28 g     F .text	00000060 __mcmp
00814054 g     F .text	00000040 alt_up_audio_open_dev
0080431c g     F .text	00000018 __fp_lock_all
0080e76c g     F .text	000000e4 OS_FlagInit
00814490 g     F .text	00000070 alt_up_audio_play_r
00815f08 g     F .text	00000098 alt_alarm_stop
00818d08 g     O .rwdata	00000002 OSTaskIdleStkSize
0081a944 g     O .bss	00000004 alt_irq_active
0081054c g     F .text	000000c0 OSSemAccept
0080ef58 g     F .text	000000f0 OSMemPut
0080ea0c g     F .text	0000021c OSMemCreate
0081a90c g     O .bss	00000004 OSIdleCtrMax
011040ec g     F .exceptions	000000d4 alt_irq_handler
008179e8 g     O .rwdata	00000028 alt_dev_null
00818d1c g     O .rwdata	00000002 OSTicksPerSec
008154e4 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
008160d0 g       .text	00000000 OSIntCtxSw
0081566c g     F .text	0000001c alt_dcache_flush_all
00805bf4 g     F .text	00000070 __hi0bits
00809568 g     F .text	000000d8 __fixdfsi
0081a910 g     O .bss	00000004 OSTCBFreeList
00818d44 g       *ABS*	00000000 __ram_rwdata_end
00810c3c g     F .text	0000017c OSSemPendAbort
00818ca8 g     O .rwdata	00000008 alt_dev_list
0080a9b8 g     F .text	00000124 write
00818d20 g     O .rwdata	00000002 OSVersionNbr
008171d4 g       *ABS*	00000000 __ram_rodata_end
0080a19c g     F .text	000000d8 fstat
00818cc8 g     O .rwdata	00000004 OSEndiannessTest
00806a18 g     F .text	00000120 __pow5mult
0081a8b8 g     O .bss	00000004 __nlocale_changed
00809918 g     F .text	00000008 __umodsi3
00818cda g     O .rwdata	00000002 OSFlagGrpSize
00821e2c g       *ABS*	00000000 end
00813348 g     F .text	00000130 altera_avalon_jtag_uart_init
0080cad4 g     F .text	000000c8 OS_TaskStat
00816bf0 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00813fcc g     F .text	00000088 alt_avalon_timer_sc_init
00809a7c g     F .text	00000080 __clzsi2
00813c7c g     F .text	000002dc altera_avalon_jtag_uart_write
00804240 g     F .text	00000004 __sfp_lock_acquire
008058d0 g     F .text	000000e4 memchr
0080c79c g     F .text	00000054 OS_MemClr
0081510c g     F .text	00000078 alt_up_character_lcd_write
0080079c g     F .text	00001ec4 ___vfprintf_internal_r
008161a0 g     F .text	00000310 OSTaskStkInit
00804608 g     F .text	00000314 _free_r
0081a978 g     O .bss	00002000 AudioTask_stk
0080be1c g     F .text	00000194 OS_EventTaskRdy
008169d4 g     F .text	000001b0 __call_exitprocs
0081a914 g     O .bss	00000001 OSCPUUsage
0081a8bc g     O .bss	00000004 __mlocale_changed
00818c9c g     O .rwdata	00000004 __malloc_sbrk_base
00800514 g     F .text	00000090 LCDTask
008001a0 g     F .text	0000003c _start
0081a948 g     O .bss	00000004 _alt_tick_rate
0080f948 g     F .text	00000320 OSQPend
00812b54 g     F .text	0000014c OSTimeDly
00814674 g     F .text	0000012c alt_up_audio_write_fifo
00806510 g     F .text	0000014c __lshift
008148c4 g     F .text	00000064 alt_up_av_config_write_data
0081a94c g     O .bss	00000004 _alt_nticks
0080a700 g     F .text	00000124 read
0081313c g     F .text	0000008c alt_sys_init
00815370 g     F .text	000000b0 alt_up_character_lcd_shift_display
00814570 g     F .text	00000104 alt_up_audio_read_fifo
0081689c g     F .text	00000134 __register_exitproc
0081a915 g     O .bss	00000001 OSTaskCtr
00814f84 g     F .text	00000064 alt_up_av_config_write_LTM_cfg_register
0081417c g     F .text	00000050 alt_up_audio_disable_write_interrupt
00812ca0 g     F .text	00000190 OSTimeDlyHMSM
0080665c g     F .text	00000254 __multiply
00815420 g     F .text	00000090 alt_up_character_lcd_erase_pos
00813854 g     F .text	00000074 altera_avalon_jtag_uart_close
00809920 g     F .text	00000038 __mulsi3
008171d4 g       *ABS*	00000000 __ram_rwdata_start
00816bf4 g       *ABS*	00000000 __ram_rodata_start
0081a950 g     O .bss	00000028 __malloc_current_mallinfo
00818cce g     O .rwdata	00000002 OSEventMax
00806208 g     F .text	0000017c __d2b
00810db8 g     F .text	00000128 OSSemPost
0080b9a0 g     F .text	000000e4 OSSchedUnlock
00813200 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
008166d8 g     F .text	00000104 alt_get_fd
0081a918 g     O .bss	00000004 OSMemFreeList
0080baf4 g     F .text	000000ac OSStatInit
0080e4d4 g     F .text	000000d4 OSFlagQuery
00809f48 g     F .text	000000c8 __fpcmp_parts_d
008002b0 g     F .text	00000264 AudioTask
00818d04 g     O .rwdata	00000002 OSTaskCreateExtEn
00807674 g     F .text	00000070 _close_r
00814130 g     F .text	0000004c alt_up_audio_enable_write_interrupt
00816828 g     F .text	00000074 memcmp
0080be00 g     F .text	0000001c OS_Dummy
008132b0 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00821e2c g       *ABS*	00000000 __alt_stack_base
008132f8 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00802684 g     F .text	0000013c __swsetup_r
00820118 g     O .bss	000001e0 OSQTbl
00808f70 g     F .text	00000258 __divdf3
008140e0 g     F .text	00000050 alt_up_audio_disable_read_interrupt
008043ec g     F .text	000000f0 __sfp
0080606c g     F .text	00000058 __copybits
008175e0 g     O .rwdata	00000408 __malloc_av_
0080424c g     F .text	00000004 __sinit_lock_release
0081a91c g     O .bss	00000004 OSTCBHighRdy
00808bac g     F .text	000003c4 __muldf3
00807418 g     F .text	00000060 __sread
0081a920 g     O .bss	00000004 OSQFreeList
008165b8 g     F .text	00000120 alt_find_file
00815688 g     F .text	000000b4 alt_dev_llist_insert
0080ac44 g     F .text	00000108 __malloc_lock
0080a8fc g     F .text	000000bc sbrk
0080af4c g     F .text	00000144 OSEventNameSet
00803fb8 g     F .text	000001fc _fflush_r
008075ac g     F .text	000000c8 _calloc_r
0081a924 g     O .bss	00000001 OSRdyGrp
0081a8b4 g     O .bss	00000004 QUEUE
0081a8b4 g       *ABS*	00000000 __bss_start
00805b34 g     F .text	00000098 memset
008001dc g     F .text	000000d4 main
0081441c g     F .text	00000074 alt_up_audio_write_fifo_space
0081a8e0 g     O .bss	00000004 alt_envp
0081a8cc g     O .bss	00000004 __malloc_max_total_mem
00813258 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00817054 g     O .rodata	00000100 OSUnMapTbl
00818cfe g     O .rwdata	00000002 OSSemEn
008152c0 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
0080e12c g     F .text	000003a8 OSFlagPost
0080732c g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
008077f4 g     F .text	00000014 fclose
0080bfb0 g     F .text	00000110 OS_EventTaskWait
0080cb9c g     F .text	000000c8 OS_TaskStatStkChk
00821c9c g     O .bss	00000190 _atexit0
00811e68 g     F .text	00000170 OSTaskDelReq
00802a04 g     F .text	000015b4 _dtoa_r
00805190 g     F .text	00000740 _malloc_r
00818cb4 g     O .rwdata	00000004 alt_errno
0080ba84 g     F .text	00000070 OSStart
0080abe8 g     F .text	0000005c __env_unlock
00804e80 g     F .text	000000b8 _fwalk
00812354 g     F .text	00000218 OSTaskResume
0080f048 g     F .text	000000fc OSMemQuery
00818d10 g     O .rwdata	00000002 OSTaskStatEn
00818cea g     O .rwdata	00000002 OSMemMax
0080ff64 g     F .text	00000188 OSQPostFront
00809850 g     F .text	00000060 __divsi3
0081a925 g     O .bss	00000003 OSRdyTbl
00818cc4 g     O .rwdata	00000002 OSDebugEn
00816f20 g     O .rodata	00000014 __thenan_df
008150cc g     F .text	00000040 alt_up_character_lcd_open_dev
008044dc g     F .text	0000012c _malloc_trim_r
00816bf4 g       *ABS*	00000000 __CTOR_END__
00818cdc g     O .rwdata	00000002 OSFlagNodeSize
00818d24 g     O .rwdata	00000002 OSTmrCfgMax
00815098 g     F .text	00000034 alt_up_character_lcd_init
00807478 g     F .text	000000bc strcmp
0080f36c g     F .text	00000214 OSQCreate
00811fd8 g     F .text	000001b8 OSTaskNameGet
00816bf4 g       *ABS*	00000000 __flash_rodata_start
008100ec g     F .text	00000234 OSQPostOpt
0080bba0 g     F .text	00000240 OSTimeTick
00818d0c g     O .rwdata	00000002 OSTaskMax
00816bf4 g       *ABS*	00000000 __DTOR_LIST__
0081060c g     F .text	00000114 OSSemCreate
00818d30 g     O .rwdata	00000002 OSTmrWheelSize
00809250 g     F .text	00000088 __nedf2
00818d06 g     O .rwdata	00000002 OSTaskDelEn
01080000 g       *ABS*	00000000 __alt_mem_sram_0
00814860 g     F .text	00000064 alt_up_av_config_open_dev
00810ee0 g     F .text	00000130 OSSemQuery
0080f580 g     F .text	00000300 OSQDel
0080fc68 g     F .text	0000017c OSQPendAbort
00813108 g     F .text	00000034 alt_irq_init
0080a884 g     F .text	00000078 alt_release_fd
008154b0 g     F .text	00000034 alt_up_character_lcd_cursor_off
00816f34 g     O .rodata	00000100 __clz_tab
0081a8c0 g     O .bss	00000004 _PathLocale
008167dc g     F .text	00000014 atexit
00807534 g     F .text	00000078 _write_r
00814abc g     F .text	00000038 alt_up_av_config_read_ready
0080b914 g     F .text	0000008c OSSchedLock
00804fe0 g     F .text	0000001c setlocale
0080d404 g     F .text	0000013c OSFlagCreate
00818c88 g     O .rwdata	00000004 _impure_ptr
0081a8d8 g     O .bss	00000004 alt_argc
00815800 g     F .text	00000064 _do_dtors
00818cd6 g     O .rwdata	00000002 OSEventMultiEn
0081c978 g     O .bss	00002000 LCDTask_stk
0080d540 g     F .text	000002a8 OSFlagDel
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
0081a928 g     O .bss	00000004 OSEventFreeList
01104020 g       .exceptions	00000000 alt_irq_entry
00805d88 g     F .text	00000080 __ulp
0080724c g     F .text	00000040 __isinfd
0080da80 g     F .text	00000644 OSFlagPend
00818d22 g     O .rwdata	00000002 OSTmrEn
00804304 g     F .text	00000018 __fp_unlock_all
00818ca0 g     O .rwdata	00000008 alt_fs_list
0080c9a0 g     F .text	00000080 OS_StrCopy
008143ac g     F .text	00000070 alt_up_audio_record_l
00818cec g     O .rwdata	00000002 OSMemNameSize
00816560 g     F .text	0000001c OSInitHookEnd
01104020 g       *ABS*	00000000 __ram_exceptions_start
00818d18 g     O .rwdata	00000002 OSTCBPrioTblMax
00804f4c g     F .text	00000010 localeconv
00818d14 g     O .rwdata	00000002 OSTaskStatStkChkEn
008149ec g     F .text	00000038 alt_up_av_config_enable_interrupt
00818ce8 g     O .rwdata	00000002 OSMemEn
00818cf2 g     O .rwdata	00000002 OSMutexEn
00814a54 g     F .text	00000068 alt_up_av_config_read_acknowledge
00814df4 g     F .text	00000064 alt_up_av_config_write_DC2_cfg_register
00818d44 g       *ABS*	00000000 _edata
00821e2c g       *ABS*	00000000 _end
0081a92c g     O .bss	00000001 OSIntNesting
011041c0 g       *ABS*	00000000 __ram_exceptions_end
008138c8 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00812e30 g     F .text	00000210 OSTimeDlyResume
0080d92c g     F .text	00000154 OSFlagNameSet
00814500 g     F .text	00000070 alt_up_audio_play_l
0081256c g     F .text	000001fc OSTaskStkChk
00818cee g     O .rwdata	00000002 OSMemSize
0080739c g     F .text	0000007c __swrite
00818c98 g     O .rwdata	00000004 __malloc_trim_threshold
008160b0 g     F .text	00000020 altera_nios2_qsys_irq_init
0081a930 g     O .bss	00000004 OSTCBCur
008167f0 g     F .text	00000038 exit
00818cf0 g     O .rwdata	00000002 OSMemTblSize
00804db8 g     F .text	000000c8 _fwalk_reent
00806384 g     F .text	0000018c __mdiff
00814f20 g     F .text	00000064 alt_up_av_config_read_LTM_cfg_register
008098b0 g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
01104020 g     F .exceptions	00000000 alt_exception
00804244 g     F .text	00000004 __sfp_lock_release
0080b744 g     F .text	00000054 OSInit
00812994 g     F .text	00000144 OSTaskQuery
00815184 g     F .text	00000078 alt_up_character_lcd_string
008104a0 g     F .text	000000ac OS_QInit
0080ca20 g     F .text	00000058 OS_StrLen
0080ee38 g     F .text	00000120 OSMemNameSet
00818d0a g     O .rwdata	00000002 OSTaskProfileEn
0081a934 g     O .bss	00000004 OSTime
008202f8 g     O .bss	00000800 OSTaskIdleStk
00816bc4 g     F .text	0000002c _exit
0080728c g     F .text	00000030 __isnand
00815518 g     F .text	00000154 alt_alarm_start
0080d7e8 g     F .text	00000144 OSFlagNameGet
00813040 g     F .text	00000064 OSTimeGet
00809958 g     F .text	00000124 __muldi3
00804ffc g     F .text	00000194 __smakebuf_r
008006d0 g     F .text	00000074 strlen
008164f0 g     F .text	0000001c OSTaskSwHook
00815d1c g     F .text	0000018c open
00820af8 g     O .bss	00000b40 OSEventTbl
00809360 g     F .text	00000088 __gedf2
00821638 g     O .bss	00000510 OSTCBTbl
00811010 g     F .text	00000104 OSSemSet
00814ba0 g     F .text	000000f8 alt_up_av_config_read_video_cfg_register
008158f8 g     F .text	0000001c alt_icache_flush_all
00815248 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
00818d38 g     O .rwdata	00000004 alt_priority_mask
00810720 g     F .text	000002a0 OSSemDel
0081a938 g     O .bss	00000004 OSFlagFreeList
00818cd0 g     O .rwdata	00000002 OSEventNameSize
00802660 g     F .text	00000024 __vfprintf_internal
0081a93c g     O .bss	00000001 OSStatRdy
00814ebc g     F .text	00000064 alt_up_av_config_write_D5M_cfg_register
00821b48 g     O .bss	00000054 OSTCBPrioTbl
0080ab3c g     F .text	000000ac __env_lock
00818d16 g     O .rwdata	00000002 OSTaskSwHookEn
00808ab8 g     F .text	00000080 __subdf3
00805c64 g     F .text	000000c4 __lo0bits
00818d3c g     O .rwdata	00000008 alt_alarm_list
00818cde g     O .rwdata	00000002 OSFlagWidth
0081579c g     F .text	00000064 _do_ctors
0080a010 g     F .text	00000100 close
0081a8e8 g     O .bss	00000004 alt_envsem
0081a940 g     O .bss	00000004 OSIdleCtrRun
0080bde0 g     F .text	00000020 OSVersion
00818d28 g     O .rwdata	00000002 OSTmrCfgWheelSize
0080a3f8 g     F .text	00000080 alt_load
00814094 g     F .text	0000004c alt_up_audio_enable_read_interrupt
00812ad8 g     F .text	0000007c OS_TaskStkClr
00814c98 g     F .text	000000f8 alt_up_av_config_write_video_cfg_register
00809afc g     F .text	00000314 __pack_d
00818d02 g     O .rwdata	00000002 OSTaskCreateEn
0080c3d0 g     F .text	00000068 OS_EventWaitListInit
0081657c g     F .text	0000001c OSTaskIdleHook
00000000  w      *UND*	00000000 free
00804248 g     F .text	00000004 __sinit_lock_acquire
008068ec g     F .text	0000012c __multadd
00812768 g     F .text	0000022c OSTaskSuspend
00805bcc g     F .text	00000028 _Bfree
00814d90 g     F .text	00000064 alt_up_av_config_read_DC2_cfg_register
0080ca78 g     F .text	0000005c OS_TaskIdle
00818d2e g     O .rwdata	00000002 OSTmrTblSize
008141cc g     F .text	0000003c alt_up_audio_read_interrupt_pending
00810320 g     F .text	00000180 OSQQuery



Disassembly of section .entry:

01104000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1104000:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
 1104004:	08406814 	ori	at,at,416
    jmp r1
 1104008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

01104020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1104020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1104024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1104028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 110402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1104030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1104034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1104038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 110403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1104040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1104044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1104048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 110404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1104050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1104054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1104058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 110405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1104060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1104064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1104068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 110406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1104070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1104074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1104078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 110407c:	10000326 	beq	r2,zero,110408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1104080:	20000226 	beq	r4,zero,110408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1104084:	11040ec0 	call	11040ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1104088:	00000306 	br	1104098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 110408c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1104090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1104094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1104098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 110409c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 11040a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 11040a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 11040a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 11040ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 11040b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 11040b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 11040b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 11040bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 11040c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 11040c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 11040c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 11040cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 11040d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 11040d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 11040d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 11040dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 11040e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 11040e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 11040e8:	ef80083a 	eret

011040ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 11040ec:	defff904 	addi	sp,sp,-28
 11040f0:	dfc00615 	stw	ra,24(sp)
 11040f4:	df000515 	stw	fp,20(sp)
 11040f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 11040fc:	080b7980 	call	80b798 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1104100:	0005313a 	rdctl	r2,ipending
 1104104:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1104108:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 110410c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 1104110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1104114:	00800044 	movi	r2,1
 1104118:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 110411c:	e0ffff17 	ldw	r3,-4(fp)
 1104120:	e0bffe17 	ldw	r2,-8(fp)
 1104124:	1884703a 	and	r2,r3,r2
 1104128:	1005003a 	cmpeq	r2,r2,zero
 110412c:	1000171e 	bne	r2,zero,110418c <alt_irq_handler+0xa0>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 1104130:	e0bffd17 	ldw	r2,-12(fp)
 1104134:	00c020b4 	movhi	r3,130
 1104138:	18c6e704 	addi	r3,r3,7068
 110413c:	100490fa 	slli	r2,r2,3
 1104140:	10c5883a 	add	r2,r2,r3
 1104144:	11800017 	ldw	r6,0(r2)
 1104148:	e0bffd17 	ldw	r2,-12(fp)
 110414c:	00c020b4 	movhi	r3,130
 1104150:	18c6e704 	addi	r3,r3,7068
 1104154:	100490fa 	slli	r2,r2,3
 1104158:	10c5883a 	add	r2,r2,r3
 110415c:	10800104 	addi	r2,r2,4
 1104160:	11000017 	ldw	r4,0(r2)
 1104164:	e17ffd17 	ldw	r5,-12(fp)
 1104168:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110416c:	0005313a 	rdctl	r2,ipending
 1104170:	e0bffb15 	stw	r2,-20(fp)

  return active;
 1104174:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1104178:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 110417c:	e0bfff17 	ldw	r2,-4(fp)
 1104180:	1004c03a 	cmpne	r2,r2,zero
 1104184:	103fe21e 	bne	r2,zero,1104110 <alt_irq_handler+0x24>
 1104188:	00000706 	br	11041a8 <alt_irq_handler+0xbc>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 110418c:	e0bffe17 	ldw	r2,-8(fp)
 1104190:	1085883a 	add	r2,r2,r2
 1104194:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1104198:	e0bffd17 	ldw	r2,-12(fp)
 110419c:	10800044 	addi	r2,r2,1
 11041a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 11041a4:	003fdd06 	br	110411c <alt_irq_handler+0x30>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 11041a8:	080b8140 	call	80b814 <OSIntExit>
}
 11041ac:	e037883a 	mov	sp,fp
 11041b0:	dfc00117 	ldw	ra,4(sp)
 11041b4:	df000017 	ldw	fp,0(sp)
 11041b8:	dec00204 	addi	sp,sp,8
 11041bc:	f800283a 	ret

Disassembly of section .text:

008001a0 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001a0:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001a4:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001a8:	068020b4 	movhi	gp,130
    ori gp, gp, %lo(_gp)
  8001ac:	d6832214 	ori	gp,gp,3208
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001b0:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8001b4:	10aa2d14 	ori	r2,r2,43188

    movhi r3, %hi(__bss_end)
  8001b8:	00c020b4 	movhi	r3,130
    ori r3, r3, %lo(__bss_end)
  8001bc:	18c78b14 	ori	r3,r3,7724

    beq r2, r3, 1f
  8001c0:	10c00326 	beq	r2,r3,8001d0 <_start+0x30>

0:
    stw zero, (r2)
  8001c4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001c8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001cc:	10fffd36 	bltu	r2,r3,8001c4 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001d0:	080a3f80 	call	80a3f8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001d4:	080a6380 	call	80a638 <alt_main>

008001d8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001d8:	003fff06 	br	8001d8 <alt_after_alt_main>

008001dc <main>:
OS_STK    LCDTask_stk[TASK_STACKSIZE];



int main(void)
{
  8001dc:	defff704 	addi	sp,sp,-36
  8001e0:	dfc00815 	stw	ra,32(sp)
  8001e4:	df000715 	stw	fp,28(sp)
  8001e8:	df000704 	addi	fp,sp,28
	alt_up_character_lcd_dev * lcd=alt_up_character_lcd_open_dev(CHARACTER_LCD_0_NAME);
  8001ec:	01002074 	movhi	r4,129
  8001f0:	211afd04 	addi	r4,r4,27636
  8001f4:	08150cc0 	call	8150cc <alt_up_character_lcd_open_dev>
  8001f8:	e0bffe15 	stw	r2,-8(fp)
	alt_up_character_lcd_init(lcd);
  8001fc:	e13ffe17 	ldw	r4,-8(fp)
  800200:	08150980 	call	815098 <alt_up_character_lcd_init>
	int msg[QUEUE_LENGTH];

	QUEUE=OSQCreate(&msg, QUEUE_LENGTH);
  800204:	e13fff04 	addi	r4,fp,-4
  800208:	01400044 	movi	r5,1
  80020c:	080f36c0 	call	80f36c <OSQCreate>
  800210:	d0a70b15 	stw	r2,-25556(gp)
	OSTaskCreateExt(AudioTask,
  800214:	018020b4 	movhi	r6,130
  800218:	31b25e04 	addi	r6,r6,-13960
  80021c:	00800044 	movi	r2,1
  800220:	d8800015 	stw	r2,0(sp)
  800224:	008020b4 	movhi	r2,130
  800228:	10aa5e04 	addi	r2,r2,-22152
  80022c:	d8800115 	stw	r2,4(sp)
  800230:	00820004 	movi	r2,2048
  800234:	d8800215 	stw	r2,8(sp)
  800238:	d8000315 	stw	zero,12(sp)
  80023c:	d8000415 	stw	zero,16(sp)
  800240:	01002034 	movhi	r4,128
  800244:	2100ac04 	addi	r4,r4,688
  800248:	000b883a 	mov	r5,zero
  80024c:	01c00044 	movi	r7,1
  800250:	081185c0 	call	81185c <OSTaskCreateExt>
			AudioTask_PRIORITY,
			AudioTask_stk,
			TASK_STACKSIZE,
			NULL,
			0);
	OSTaskCreateExt(LCDTask,
  800254:	018020b4 	movhi	r6,130
  800258:	31ba5d04 	addi	r6,r6,-5772
  80025c:	00800084 	movi	r2,2
  800260:	d8800015 	stw	r2,0(sp)
  800264:	008020b4 	movhi	r2,130
  800268:	10b25e04 	addi	r2,r2,-13960
  80026c:	d8800115 	stw	r2,4(sp)
  800270:	00820004 	movi	r2,2048
  800274:	d8800215 	stw	r2,8(sp)
  800278:	d8000315 	stw	zero,12(sp)
  80027c:	d8000415 	stw	zero,16(sp)
  800280:	01002034 	movhi	r4,128
  800284:	21014504 	addi	r4,r4,1300
  800288:	e17ffe17 	ldw	r5,-8(fp)
  80028c:	01c00084 	movi	r7,2
  800290:	081185c0 	call	81185c <OSTaskCreateExt>
			LCDTASK_PRIORITY,
			LCDTask_stk,
			TASK_STACKSIZE,
			NULL,
			0);
	OSStart();
  800294:	080ba840 	call	80ba84 <OSStart>
	return 0;
  800298:	0005883a 	mov	r2,zero
}
  80029c:	e037883a 	mov	sp,fp
  8002a0:	dfc00117 	ldw	ra,4(sp)
  8002a4:	df000017 	ldw	fp,0(sp)
  8002a8:	dec00204 	addi	sp,sp,8
  8002ac:	f800283a 	ret

008002b0 <AudioTask>:

void AudioTask(void *pdata){
  8002b0:	defef804 	addi	sp,sp,-1056
  8002b4:	dfc10715 	stw	ra,1052(sp)
  8002b8:	df010615 	stw	fp,1048(sp)
  8002bc:	df010604 	addi	fp,sp,1048
  8002c0:	e13fff15 	stw	r4,-4(fp)
	alt_up_av_config_dev * audio_config_dev;

	unsigned int l_buf[BUFFER_SIZE];
	unsigned int r_buf[BUFFER_SIZE];

	int i = 0;
  8002c4:	e03efc15 	stw	zero,-1040(fp)
	int writeSizeL = 0;
  8002c8:	e03efb15 	stw	zero,-1044(fp)
	int writeSizeR = 0;
  8002cc:	e03efa15 	stw	zero,-1048(fp)

	/* Open Devices */
	audio_dev = alt_up_audio_open_dev (AUDIO_0_NAME);
  8002d0:	01002074 	movhi	r4,129
  8002d4:	211b0304 	addi	r4,r4,27660
  8002d8:	08140540 	call	814054 <alt_up_audio_open_dev>
  8002dc:	e0befe15 	stw	r2,-1032(fp)
	if ( audio_dev == NULL)
  8002e0:	e0befe17 	ldw	r2,-1032(fp)
  8002e4:	1004c03a 	cmpne	r2,r2,zero
  8002e8:	1000041e 	bne	r2,zero,8002fc <AudioTask+0x4c>
		printf("Error: could not open audio device \n");
  8002ec:	01002074 	movhi	r4,129
  8002f0:	211b0704 	addi	r4,r4,27676
  8002f4:	08006bc0 	call	8006bc <puts>
  8002f8:	00000306 	br	800308 <AudioTask+0x58>
	else
		printf("Opened audio device \n");
  8002fc:	01002074 	movhi	r4,129
  800300:	211b1004 	addi	r4,r4,27712
  800304:	08006bc0 	call	8006bc <puts>

	audio_config_dev = alt_up_av_config_open_dev(AUDIO_AND_VIDEO_CONFIG_0_NAME);
  800308:	01002074 	movhi	r4,129
  80030c:	211b1604 	addi	r4,r4,27736
  800310:	08148600 	call	814860 <alt_up_av_config_open_dev>
  800314:	e0befd15 	stw	r2,-1036(fp)

	if ( audio_config_dev == NULL)
  800318:	e0befd17 	ldw	r2,-1036(fp)
  80031c:	1004c03a 	cmpne	r2,r2,zero
  800320:	1000041e 	bne	r2,zero,800334 <AudioTask+0x84>
		printf("Error: could not open audio config device \n");
  800324:	01002074 	movhi	r4,129
  800328:	211b1e04 	addi	r4,r4,27768
  80032c:	08006bc0 	call	8006bc <puts>
  800330:	00000306 	br	800340 <AudioTask+0x90>
	else
		printf("Opened audio config device \n");
  800334:	01002074 	movhi	r4,129
  800338:	211b2904 	addi	r4,r4,27812
  80033c:	08006bc0 	call	8006bc <puts>

	/* Configure WM8731 */
	alt_up_audio_reset_audio_core(audio_dev);
  800340:	e13efe17 	ldw	r4,-1032(fp)
  800344:	08142440 	call	814244 <alt_up_audio_reset_audio_core>
	alt_up_av_config_reset(audio_config_dev);
  800348:	e13efd17 	ldw	r4,-1036(fp)
  80034c:	08149b40 	call	8149b4 <alt_up_av_config_reset>

	/* Write to configuration registers in the audio codec; see datasheet for what these values mean */
	alt_up_av_config_write_audio_cfg_register(audio_config_dev, AUDIO_REG_LEFT_LINE_IN, LINE_VOLUME_DEFAULT);
  800350:	e13efd17 	ldw	r4,-1036(fp)
  800354:	000b883a 	mov	r5,zero
  800358:	018005c4 	movi	r6,23
  80035c:	0814af40 	call	814af4 <alt_up_av_config_write_audio_cfg_register>
	alt_up_av_config_write_audio_cfg_register(audio_config_dev, AUDIO_REG_RIGHT_LINE_IN, LINE_VOLUME_DEFAULT);
  800360:	e13efd17 	ldw	r4,-1036(fp)
  800364:	01400044 	movi	r5,1
  800368:	018005c4 	movi	r6,23
  80036c:	0814af40 	call	814af4 <alt_up_av_config_write_audio_cfg_register>
	alt_up_av_config_write_audio_cfg_register(audio_config_dev, AUDIO_REG_LEFT_HEADPHONE_OUT,LINE_OUT_VOLUME_DEFAULT);
  800370:	e13efd17 	ldw	r4,-1036(fp)
  800374:	01400084 	movi	r5,2
  800378:	01801e44 	movi	r6,121
  80037c:	0814af40 	call	814af4 <alt_up_av_config_write_audio_cfg_register>
	alt_up_av_config_write_audio_cfg_register(audio_config_dev, AUDIO_REG_RIGHT_HEADPHONE_OUT,LINE_OUT_VOLUME_DEFAULT);
  800380:	e13efd17 	ldw	r4,-1036(fp)
  800384:	014000c4 	movi	r5,3
  800388:	01801e44 	movi	r6,121
  80038c:	0814af40 	call	814af4 <alt_up_av_config_write_audio_cfg_register>
	alt_up_av_config_write_audio_cfg_register(audio_config_dev, AUDIO_REG_ANALOG_AUDIO_PATH_CTRL, 0x02);
  800390:	e13efd17 	ldw	r4,-1036(fp)
  800394:	01400104 	movi	r5,4
  800398:	01800084 	movi	r6,2
  80039c:	0814af40 	call	814af4 <alt_up_av_config_write_audio_cfg_register>
	alt_up_av_config_write_audio_cfg_register(audio_config_dev, AUDIO_REG_DIGITAL_AUDIO_PATH_CTRL, 0x00);
  8003a0:	e13efd17 	ldw	r4,-1036(fp)
  8003a4:	01400144 	movi	r5,5
  8003a8:	000d883a 	mov	r6,zero
  8003ac:	0814af40 	call	814af4 <alt_up_av_config_write_audio_cfg_register>
	alt_up_av_config_write_audio_cfg_register(audio_config_dev, AUDIO_REG_POWER_DOWN_CTRL, 0x00);
  8003b0:	e13efd17 	ldw	r4,-1036(fp)
  8003b4:	01400184 	movi	r5,6
  8003b8:	000d883a 	mov	r6,zero
  8003bc:	0814af40 	call	814af4 <alt_up_av_config_write_audio_cfg_register>
	alt_up_av_config_write_audio_cfg_register(audio_config_dev, AUDIO_REG_SAMPLING_CTRL, 0x04);
  8003c0:	e13efd17 	ldw	r4,-1036(fp)
  8003c4:	01400204 	movi	r5,8
  8003c8:	01800104 	movi	r6,4
  8003cc:	0814af40 	call	814af4 <alt_up_av_config_write_audio_cfg_register>
	alt_up_av_config_write_audio_cfg_register(audio_config_dev, AUDIO_REG_ACTIVE_CTRL, 0x01);
  8003d0:	e13efd17 	ldw	r4,-1036(fp)
  8003d4:	01400244 	movi	r5,9
  8003d8:	01800044 	movi	r6,1
  8003dc:	0814af40 	call	814af4 <alt_up_av_config_write_audio_cfg_register>

	//main loop
	while(1)
	{
		//read the data from the left buffer
		writeSizeL = alt_up_audio_read_fifo(audio_dev, l_buf, BUFFER_SIZE, ALT_UP_AUDIO_LEFT);
  8003e0:	e17eff04 	addi	r5,fp,-1028
  8003e4:	e13efe17 	ldw	r4,-1032(fp)
  8003e8:	01802004 	movi	r6,128
  8003ec:	000f883a 	mov	r7,zero
  8003f0:	08145700 	call	814570 <alt_up_audio_read_fifo>
  8003f4:	e0befb15 	stw	r2,-1044(fp)
		printf("Left Channel,number of words read:%d ",writeSizeL);
  8003f8:	01002074 	movhi	r4,129
  8003fc:	211b3004 	addi	r4,r4,27840
  800400:	e17efb17 	ldw	r5,-1044(fp)
  800404:	08005a40 	call	8005a4 <printf>
		writeSizeR = alt_up_audio_read_fifo(audio_dev, r_buf, BUFFER_SIZE, ALT_UP_AUDIO_RIGHT);
  800408:	e17f7f04 	addi	r5,fp,-516
  80040c:	e13efe17 	ldw	r4,-1032(fp)
  800410:	01802004 	movi	r6,128
  800414:	01c00044 	movi	r7,1
  800418:	08145700 	call	814570 <alt_up_audio_read_fifo>
  80041c:	e0befa15 	stw	r2,-1048(fp)
		printf("Right Channel,number of words read:%d\n",writeSizeR);
  800420:	01002074 	movhi	r4,129
  800424:	211b3a04 	addi	r4,r4,27880
  800428:	e17efa17 	ldw	r5,-1048(fp)
  80042c:	08005a40 	call	8005a4 <printf>
		//shift values to a proper base value
		for (i = 0; i < writeSizeL; i = i+1)
  800430:	e03efc15 	stw	zero,-1040(fp)
  800434:	00001206 	br	800480 <AudioTask+0x1d0>
		{
			l_buf[i] = l_buf[i] + 0x7fff;
  800438:	e13efc17 	ldw	r4,-1040(fp)
  80043c:	e0befc17 	ldw	r2,-1040(fp)
  800440:	1085883a 	add	r2,r2,r2
  800444:	1085883a 	add	r2,r2,r2
  800448:	e0fefa04 	addi	r3,fp,-1048
  80044c:	10c5883a 	add	r2,r2,r3
  800450:	10800504 	addi	r2,r2,20
  800454:	10800017 	ldw	r2,0(r2)
  800458:	10dfffc4 	addi	r3,r2,32767
  80045c:	2105883a 	add	r2,r4,r4
  800460:	1085883a 	add	r2,r2,r2
  800464:	e13efa04 	addi	r4,fp,-1048
  800468:	1105883a 	add	r2,r2,r4
  80046c:	10800504 	addi	r2,r2,20
  800470:	10c00015 	stw	r3,0(r2)
		writeSizeL = alt_up_audio_read_fifo(audio_dev, l_buf, BUFFER_SIZE, ALT_UP_AUDIO_LEFT);
		printf("Left Channel,number of words read:%d ",writeSizeL);
		writeSizeR = alt_up_audio_read_fifo(audio_dev, r_buf, BUFFER_SIZE, ALT_UP_AUDIO_RIGHT);
		printf("Right Channel,number of words read:%d\n",writeSizeR);
		//shift values to a proper base value
		for (i = 0; i < writeSizeL; i = i+1)
  800474:	e0befc17 	ldw	r2,-1040(fp)
  800478:	10800044 	addi	r2,r2,1
  80047c:	e0befc15 	stw	r2,-1040(fp)
  800480:	e0fefc17 	ldw	r3,-1040(fp)
  800484:	e0befb17 	ldw	r2,-1044(fp)
  800488:	18bfeb16 	blt	r3,r2,800438 <AudioTask+0x188>
		{
			l_buf[i] = l_buf[i] + 0x7fff;
		}
		for (i = 0; i < writeSizeL; i = i+1)
  80048c:	e03efc15 	stw	zero,-1040(fp)
  800490:	00001206 	br	8004dc <AudioTask+0x22c>
		{
			r_buf[i] = r_buf[i] + 0x7fff;
  800494:	e13efc17 	ldw	r4,-1040(fp)
  800498:	e0befc17 	ldw	r2,-1040(fp)
  80049c:	1085883a 	add	r2,r2,r2
  8004a0:	1085883a 	add	r2,r2,r2
  8004a4:	e0fefa04 	addi	r3,fp,-1048
  8004a8:	10c5883a 	add	r2,r2,r3
  8004ac:	10808504 	addi	r2,r2,532
  8004b0:	10800017 	ldw	r2,0(r2)
  8004b4:	10dfffc4 	addi	r3,r2,32767
  8004b8:	2105883a 	add	r2,r4,r4
  8004bc:	1085883a 	add	r2,r2,r2
  8004c0:	e13efa04 	addi	r4,fp,-1048
  8004c4:	1105883a 	add	r2,r2,r4
  8004c8:	10808504 	addi	r2,r2,532
  8004cc:	10c00015 	stw	r3,0(r2)
		//shift values to a proper base value
		for (i = 0; i < writeSizeL; i = i+1)
		{
			l_buf[i] = l_buf[i] + 0x7fff;
		}
		for (i = 0; i < writeSizeL; i = i+1)
  8004d0:	e0befc17 	ldw	r2,-1040(fp)
  8004d4:	10800044 	addi	r2,r2,1
  8004d8:	e0befc15 	stw	r2,-1040(fp)
  8004dc:	e0fefc17 	ldw	r3,-1040(fp)
  8004e0:	e0befb17 	ldw	r2,-1044(fp)
  8004e4:	18bfeb16 	blt	r3,r2,800494 <AudioTask+0x1e4>
		{
			r_buf[i] = r_buf[i] + 0x7fff;
		}

		//write data to the L and R buffers; R buffer will receive a copy of L buffer data
		alt_up_audio_write_fifo (audio_dev, r_buf, writeSizeR, ALT_UP_AUDIO_RIGHT);
  8004e8:	e17f7f04 	addi	r5,fp,-516
  8004ec:	e13efe17 	ldw	r4,-1032(fp)
  8004f0:	e1befa17 	ldw	r6,-1048(fp)
  8004f4:	01c00044 	movi	r7,1
  8004f8:	08146740 	call	814674 <alt_up_audio_write_fifo>
		alt_up_audio_write_fifo (audio_dev, l_buf, writeSizeL, ALT_UP_AUDIO_LEFT);
  8004fc:	e17eff04 	addi	r5,fp,-1028
  800500:	e13efe17 	ldw	r4,-1032(fp)
  800504:	e1befb17 	ldw	r6,-1044(fp)
  800508:	000f883a 	mov	r7,zero
  80050c:	08146740 	call	814674 <alt_up_audio_write_fifo>

	}
  800510:	003fb306 	br	8003e0 <AudioTask+0x130>

00800514 <LCDTask>:
}

/*LCD*/
void LCDTask(void* pdata)
{
  800514:	defff904 	addi	sp,sp,-28
  800518:	dfc00615 	stw	ra,24(sp)
  80051c:	df000515 	stw	fp,20(sp)
  800520:	df000504 	addi	fp,sp,20
  800524:	e13fff15 	stw	r4,-4(fp)
	printf("Task 2");
  800528:	01002074 	movhi	r4,129
  80052c:	211b4404 	addi	r4,r4,27920
  800530:	08005a40 	call	8005a4 <printf>
	alt_up_character_lcd_dev * lcd=(alt_up_character_lcd_dev *)pdata;
  800534:	e0bfff17 	ldw	r2,-4(fp)
  800538:	e0bffd15 	stw	r2,-12(fp)
  80053c:	00000006 	br	800540 <LCDTask+0x2c>
	INT8U err;
	int old;
	while (1)
	{
		int * msg=(int *) OSQPend(QUEUE, 0, &err);
  800540:	d1270b17 	ldw	r4,-25556(gp)
  800544:	e1bffe04 	addi	r6,fp,-8
  800548:	000b883a 	mov	r5,zero
  80054c:	080f9480 	call	80f948 <OSQPend>
  800550:	e0bffb15 	stw	r2,-20(fp)
		if(err == OS_NO_ERR){
  800554:	e0bffe03 	ldbu	r2,-8(fp)
  800558:	10803fcc 	andi	r2,r2,255
  80055c:	1004c03a 	cmpne	r2,r2,zero
  800560:	103ff71e 	bne	r2,zero,800540 <LCDTask+0x2c>
			alt_up_character_lcd_init(lcd);
  800564:	e13ffd17 	ldw	r4,-12(fp)
  800568:	08150980 	call	815098 <alt_up_character_lcd_init>
			alt_up_character_lcd_set_cursor_pos(lcd, 0, 0);
  80056c:	e13ffd17 	ldw	r4,-12(fp)
  800570:	000b883a 	mov	r5,zero
  800574:	000d883a 	mov	r6,zero
  800578:	08152480 	call	815248 <alt_up_character_lcd_set_cursor_pos>
			alt_up_character_lcd_string(lcd,"Hello World");
  80057c:	e13ffd17 	ldw	r4,-12(fp)
  800580:	01402074 	movhi	r5,129
  800584:	295b4604 	addi	r5,r5,27928
  800588:	08151840 	call	815184 <alt_up_character_lcd_string>
			OSQFlush(QUEUE);
  80058c:	d1270b17 	ldw	r4,-25556(gp)
  800590:	080f8800 	call	80f880 <OSQFlush>
			old=*msg;
  800594:	e0bffb17 	ldw	r2,-20(fp)
  800598:	10800017 	ldw	r2,0(r2)
  80059c:	e0bffc15 	stw	r2,-16(fp)
		}
	}
  8005a0:	003fe706 	br	800540 <LCDTask+0x2c>

008005a4 <printf>:
  8005a4:	defffb04 	addi	sp,sp,-20
  8005a8:	dfc00115 	stw	ra,4(sp)
  8005ac:	d9400215 	stw	r5,8(sp)
  8005b0:	d9800315 	stw	r6,12(sp)
  8005b4:	d9c00415 	stw	r7,16(sp)
  8005b8:	008020b4 	movhi	r2,130
  8005bc:	10a32204 	addi	r2,r2,-29560
  8005c0:	10c00017 	ldw	r3,0(r2)
  8005c4:	200b883a 	mov	r5,r4
  8005c8:	d8800204 	addi	r2,sp,8
  8005cc:	19000217 	ldw	r4,8(r3)
  8005d0:	100d883a 	mov	r6,r2
  8005d4:	d8800015 	stw	r2,0(sp)
  8005d8:	08026600 	call	802660 <__vfprintf_internal>
  8005dc:	dfc00117 	ldw	ra,4(sp)
  8005e0:	dec00504 	addi	sp,sp,20
  8005e4:	f800283a 	ret

008005e8 <_printf_r>:
  8005e8:	defffc04 	addi	sp,sp,-16
  8005ec:	dfc00115 	stw	ra,4(sp)
  8005f0:	d9800215 	stw	r6,8(sp)
  8005f4:	d9c00315 	stw	r7,12(sp)
  8005f8:	280d883a 	mov	r6,r5
  8005fc:	21400217 	ldw	r5,8(r4)
  800600:	d8c00204 	addi	r3,sp,8
  800604:	180f883a 	mov	r7,r3
  800608:	d8c00015 	stw	r3,0(sp)
  80060c:	080079c0 	call	80079c <___vfprintf_internal_r>
  800610:	dfc00117 	ldw	ra,4(sp)
  800614:	dec00404 	addi	sp,sp,16
  800618:	f800283a 	ret

0080061c <_puts_r>:
  80061c:	defff604 	addi	sp,sp,-40
  800620:	dc400715 	stw	r17,28(sp)
  800624:	2023883a 	mov	r17,r4
  800628:	2809883a 	mov	r4,r5
  80062c:	dfc00915 	stw	ra,36(sp)
  800630:	dcc00815 	stw	r19,32(sp)
  800634:	2827883a 	mov	r19,r5
  800638:	08006d00 	call	8006d0 <strlen>
  80063c:	89400217 	ldw	r5,8(r17)
  800640:	00c02074 	movhi	r3,129
  800644:	18db4904 	addi	r3,r3,27940
  800648:	01c00044 	movi	r7,1
  80064c:	12000044 	addi	r8,r2,1
  800650:	d8c00515 	stw	r3,20(sp)
  800654:	d9c00615 	stw	r7,24(sp)
  800658:	d8c00304 	addi	r3,sp,12
  80065c:	01c00084 	movi	r7,2
  800660:	8809883a 	mov	r4,r17
  800664:	d80d883a 	mov	r6,sp
  800668:	d8c00015 	stw	r3,0(sp)
  80066c:	dcc00315 	stw	r19,12(sp)
  800670:	da000215 	stw	r8,8(sp)
  800674:	d9c00115 	stw	r7,4(sp)
  800678:	d8800415 	stw	r2,16(sp)
  80067c:	080491c0 	call	80491c <__sfvwrite_r>
  800680:	00ffffc4 	movi	r3,-1
  800684:	10000626 	beq	r2,zero,8006a0 <_puts_r+0x84>
  800688:	1805883a 	mov	r2,r3
  80068c:	dfc00917 	ldw	ra,36(sp)
  800690:	dcc00817 	ldw	r19,32(sp)
  800694:	dc400717 	ldw	r17,28(sp)
  800698:	dec00a04 	addi	sp,sp,40
  80069c:	f800283a 	ret
  8006a0:	00c00284 	movi	r3,10
  8006a4:	1805883a 	mov	r2,r3
  8006a8:	dfc00917 	ldw	ra,36(sp)
  8006ac:	dcc00817 	ldw	r19,32(sp)
  8006b0:	dc400717 	ldw	r17,28(sp)
  8006b4:	dec00a04 	addi	sp,sp,40
  8006b8:	f800283a 	ret

008006bc <puts>:
  8006bc:	008020b4 	movhi	r2,130
  8006c0:	10a32204 	addi	r2,r2,-29560
  8006c4:	200b883a 	mov	r5,r4
  8006c8:	11000017 	ldw	r4,0(r2)
  8006cc:	080061c1 	jmpi	80061c <_puts_r>

008006d0 <strlen>:
  8006d0:	208000cc 	andi	r2,r4,3
  8006d4:	2011883a 	mov	r8,r4
  8006d8:	1000161e 	bne	r2,zero,800734 <strlen+0x64>
  8006dc:	20c00017 	ldw	r3,0(r4)
  8006e0:	017fbff4 	movhi	r5,65279
  8006e4:	297fbfc4 	addi	r5,r5,-257
  8006e8:	01e02074 	movhi	r7,32897
  8006ec:	39e02004 	addi	r7,r7,-32640
  8006f0:	1945883a 	add	r2,r3,r5
  8006f4:	11c4703a 	and	r2,r2,r7
  8006f8:	00c6303a 	nor	r3,zero,r3
  8006fc:	1886703a 	and	r3,r3,r2
  800700:	18000c1e 	bne	r3,zero,800734 <strlen+0x64>
  800704:	280d883a 	mov	r6,r5
  800708:	380b883a 	mov	r5,r7
  80070c:	21000104 	addi	r4,r4,4
  800710:	20800017 	ldw	r2,0(r4)
  800714:	1187883a 	add	r3,r2,r6
  800718:	1946703a 	and	r3,r3,r5
  80071c:	0084303a 	nor	r2,zero,r2
  800720:	10c4703a 	and	r2,r2,r3
  800724:	103ff926 	beq	r2,zero,80070c <strlen+0x3c>
  800728:	20800007 	ldb	r2,0(r4)
  80072c:	10000326 	beq	r2,zero,80073c <strlen+0x6c>
  800730:	21000044 	addi	r4,r4,1
  800734:	20800007 	ldb	r2,0(r4)
  800738:	103ffd1e 	bne	r2,zero,800730 <strlen+0x60>
  80073c:	2205c83a 	sub	r2,r4,r8
  800740:	f800283a 	ret

00800744 <__sprint_r>:
  800744:	30800217 	ldw	r2,8(r6)
  800748:	defffe04 	addi	sp,sp,-8
  80074c:	dc000015 	stw	r16,0(sp)
  800750:	dfc00115 	stw	ra,4(sp)
  800754:	3021883a 	mov	r16,r6
  800758:	0007883a 	mov	r3,zero
  80075c:	1000061e 	bne	r2,zero,800778 <__sprint_r+0x34>
  800760:	1805883a 	mov	r2,r3
  800764:	30000115 	stw	zero,4(r6)
  800768:	dfc00117 	ldw	ra,4(sp)
  80076c:	dc000017 	ldw	r16,0(sp)
  800770:	dec00204 	addi	sp,sp,8
  800774:	f800283a 	ret
  800778:	080491c0 	call	80491c <__sfvwrite_r>
  80077c:	1007883a 	mov	r3,r2
  800780:	1805883a 	mov	r2,r3
  800784:	80000115 	stw	zero,4(r16)
  800788:	80000215 	stw	zero,8(r16)
  80078c:	dfc00117 	ldw	ra,4(sp)
  800790:	dc000017 	ldw	r16,0(sp)
  800794:	dec00204 	addi	sp,sp,8
  800798:	f800283a 	ret

0080079c <___vfprintf_internal_r>:
  80079c:	defea404 	addi	sp,sp,-1392
  8007a0:	dd815815 	stw	r22,1376(sp)
  8007a4:	dc015215 	stw	r16,1352(sp)
  8007a8:	d9c15115 	stw	r7,1348(sp)
  8007ac:	dfc15b15 	stw	ra,1388(sp)
  8007b0:	df015a15 	stw	fp,1384(sp)
  8007b4:	ddc15915 	stw	r23,1380(sp)
  8007b8:	dd415715 	stw	r21,1372(sp)
  8007bc:	dd015615 	stw	r20,1368(sp)
  8007c0:	dcc15515 	stw	r19,1364(sp)
  8007c4:	dc815415 	stw	r18,1360(sp)
  8007c8:	dc415315 	stw	r17,1356(sp)
  8007cc:	282d883a 	mov	r22,r5
  8007d0:	3021883a 	mov	r16,r6
  8007d4:	d9014f15 	stw	r4,1340(sp)
  8007d8:	0804f400 	call	804f40 <_localeconv_r>
  8007dc:	10800017 	ldw	r2,0(r2)
  8007e0:	d9c15117 	ldw	r7,1348(sp)
  8007e4:	d8814915 	stw	r2,1316(sp)
  8007e8:	d8814f17 	ldw	r2,1340(sp)
  8007ec:	10000226 	beq	r2,zero,8007f8 <___vfprintf_internal_r+0x5c>
  8007f0:	10800e17 	ldw	r2,56(r2)
  8007f4:	10020d26 	beq	r2,zero,80102c <___vfprintf_internal_r+0x890>
  8007f8:	b080030b 	ldhu	r2,12(r22)
  8007fc:	1080020c 	andi	r2,r2,8
  800800:	10020e26 	beq	r2,zero,80103c <___vfprintf_internal_r+0x8a0>
  800804:	b0800417 	ldw	r2,16(r22)
  800808:	10020c26 	beq	r2,zero,80103c <___vfprintf_internal_r+0x8a0>
  80080c:	b200030b 	ldhu	r8,12(r22)
  800810:	00800284 	movi	r2,10
  800814:	40c0068c 	andi	r3,r8,26
  800818:	18802f1e 	bne	r3,r2,8008d8 <___vfprintf_internal_r+0x13c>
  80081c:	b080038f 	ldh	r2,14(r22)
  800820:	10002d16 	blt	r2,zero,8008d8 <___vfprintf_internal_r+0x13c>
  800824:	b240038b 	ldhu	r9,14(r22)
  800828:	b2800717 	ldw	r10,28(r22)
  80082c:	b2c00917 	ldw	r11,36(r22)
  800830:	d9014f17 	ldw	r4,1340(sp)
  800834:	dc402904 	addi	r17,sp,164
  800838:	d8804004 	addi	r2,sp,256
  80083c:	00c10004 	movi	r3,1024
  800840:	423fff4c 	andi	r8,r8,65533
  800844:	800d883a 	mov	r6,r16
  800848:	880b883a 	mov	r5,r17
  80084c:	da002c0d 	sth	r8,176(sp)
  800850:	da402c8d 	sth	r9,178(sp)
  800854:	da803015 	stw	r10,192(sp)
  800858:	dac03215 	stw	r11,200(sp)
  80085c:	d8802d15 	stw	r2,180(sp)
  800860:	d8c02e15 	stw	r3,184(sp)
  800864:	d8802915 	stw	r2,164(sp)
  800868:	d8c02b15 	stw	r3,172(sp)
  80086c:	d8002f15 	stw	zero,188(sp)
  800870:	080079c0 	call	80079c <___vfprintf_internal_r>
  800874:	d8814b15 	stw	r2,1324(sp)
  800878:	10000416 	blt	r2,zero,80088c <___vfprintf_internal_r+0xf0>
  80087c:	d9014f17 	ldw	r4,1340(sp)
  800880:	880b883a 	mov	r5,r17
  800884:	0803fb80 	call	803fb8 <_fflush_r>
  800888:	1002321e 	bne	r2,zero,801154 <___vfprintf_internal_r+0x9b8>
  80088c:	d8802c0b 	ldhu	r2,176(sp)
  800890:	1080100c 	andi	r2,r2,64
  800894:	10000326 	beq	r2,zero,8008a4 <___vfprintf_internal_r+0x108>
  800898:	b080030b 	ldhu	r2,12(r22)
  80089c:	10801014 	ori	r2,r2,64
  8008a0:	b080030d 	sth	r2,12(r22)
  8008a4:	d8814b17 	ldw	r2,1324(sp)
  8008a8:	dfc15b17 	ldw	ra,1388(sp)
  8008ac:	df015a17 	ldw	fp,1384(sp)
  8008b0:	ddc15917 	ldw	r23,1380(sp)
  8008b4:	dd815817 	ldw	r22,1376(sp)
  8008b8:	dd415717 	ldw	r21,1372(sp)
  8008bc:	dd015617 	ldw	r20,1368(sp)
  8008c0:	dcc15517 	ldw	r19,1364(sp)
  8008c4:	dc815417 	ldw	r18,1360(sp)
  8008c8:	dc415317 	ldw	r17,1356(sp)
  8008cc:	dc015217 	ldw	r16,1352(sp)
  8008d0:	dec15c04 	addi	sp,sp,1392
  8008d4:	f800283a 	ret
  8008d8:	0005883a 	mov	r2,zero
  8008dc:	0007883a 	mov	r3,zero
  8008e0:	dd401904 	addi	r21,sp,100
  8008e4:	d8814215 	stw	r2,1288(sp)
  8008e8:	802f883a 	mov	r23,r16
  8008ec:	d8c14315 	stw	r3,1292(sp)
  8008f0:	d8014b15 	stw	zero,1324(sp)
  8008f4:	d8014815 	stw	zero,1312(sp)
  8008f8:	d8014415 	stw	zero,1296(sp)
  8008fc:	d8014715 	stw	zero,1308(sp)
  800900:	dd400c15 	stw	r21,48(sp)
  800904:	d8000e15 	stw	zero,56(sp)
  800908:	d8000d15 	stw	zero,52(sp)
  80090c:	b8800007 	ldb	r2,0(r23)
  800910:	10001926 	beq	r2,zero,800978 <___vfprintf_internal_r+0x1dc>
  800914:	00c00944 	movi	r3,37
  800918:	10c01726 	beq	r2,r3,800978 <___vfprintf_internal_r+0x1dc>
  80091c:	b821883a 	mov	r16,r23
  800920:	00000106 	br	800928 <___vfprintf_internal_r+0x18c>
  800924:	10c00326 	beq	r2,r3,800934 <___vfprintf_internal_r+0x198>
  800928:	84000044 	addi	r16,r16,1
  80092c:	80800007 	ldb	r2,0(r16)
  800930:	103ffc1e 	bne	r2,zero,800924 <___vfprintf_internal_r+0x188>
  800934:	85e7c83a 	sub	r19,r16,r23
  800938:	98000e26 	beq	r19,zero,800974 <___vfprintf_internal_r+0x1d8>
  80093c:	dc800e17 	ldw	r18,56(sp)
  800940:	dc400d17 	ldw	r17,52(sp)
  800944:	008001c4 	movi	r2,7
  800948:	94e5883a 	add	r18,r18,r19
  80094c:	8c400044 	addi	r17,r17,1
  800950:	adc00015 	stw	r23,0(r21)
  800954:	dc800e15 	stw	r18,56(sp)
  800958:	acc00115 	stw	r19,4(r21)
  80095c:	dc400d15 	stw	r17,52(sp)
  800960:	14428b16 	blt	r2,r17,801390 <___vfprintf_internal_r+0xbf4>
  800964:	ad400204 	addi	r21,r21,8
  800968:	d9014b17 	ldw	r4,1324(sp)
  80096c:	24c9883a 	add	r4,r4,r19
  800970:	d9014b15 	stw	r4,1324(sp)
  800974:	802f883a 	mov	r23,r16
  800978:	b8800007 	ldb	r2,0(r23)
  80097c:	10013c26 	beq	r2,zero,800e70 <___vfprintf_internal_r+0x6d4>
  800980:	bdc00044 	addi	r23,r23,1
  800984:	d8000405 	stb	zero,16(sp)
  800988:	b8c00007 	ldb	r3,0(r23)
  80098c:	04ffffc4 	movi	r19,-1
  800990:	d8014c15 	stw	zero,1328(sp)
  800994:	d8014a15 	stw	zero,1320(sp)
  800998:	d8c14d15 	stw	r3,1332(sp)
  80099c:	bdc00044 	addi	r23,r23,1
  8009a0:	d9414d17 	ldw	r5,1332(sp)
  8009a4:	00801604 	movi	r2,88
  8009a8:	28fff804 	addi	r3,r5,-32
  8009ac:	10c06036 	bltu	r2,r3,800b30 <___vfprintf_internal_r+0x394>
  8009b0:	18c5883a 	add	r2,r3,r3
  8009b4:	1085883a 	add	r2,r2,r2
  8009b8:	00c02034 	movhi	r3,128
  8009bc:	18c27304 	addi	r3,r3,2508
  8009c0:	10c5883a 	add	r2,r2,r3
  8009c4:	11000017 	ldw	r4,0(r2)
  8009c8:	2000683a 	jmp	r4
  8009cc:	00801940 	call	80194 <OSCtxSw_SWITCH_PC+0x80154>
  8009d0:	00800b30 	cmpltui	r2,zero,44
  8009d4:	00800b30 	cmpltui	r2,zero,44
  8009d8:	0080192c 	andhi	r2,zero,100
  8009dc:	00800b30 	cmpltui	r2,zero,44
  8009e0:	00800b30 	cmpltui	r2,zero,44
  8009e4:	00800b30 	cmpltui	r2,zero,44
  8009e8:	00800b30 	cmpltui	r2,zero,44
  8009ec:	00800b30 	cmpltui	r2,zero,44
  8009f0:	00800b30 	cmpltui	r2,zero,44
  8009f4:	0080170c 	andi	r2,zero,92
  8009f8:	0080191c 	xori	r2,zero,100
  8009fc:	00800b30 	cmpltui	r2,zero,44
  800a00:	00801724 	muli	r2,zero,92
  800a04:	008019c4 	movi	r2,103
  800a08:	00800b30 	cmpltui	r2,zero,44
  800a0c:	008019b0 	cmpltui	r2,zero,102
  800a10:	0080196c 	andhi	r2,zero,101
  800a14:	0080196c 	andhi	r2,zero,101
  800a18:	0080196c 	andhi	r2,zero,101
  800a1c:	0080196c 	andhi	r2,zero,101
  800a20:	0080196c 	andhi	r2,zero,101
  800a24:	0080196c 	andhi	r2,zero,101
  800a28:	0080196c 	andhi	r2,zero,101
  800a2c:	0080196c 	andhi	r2,zero,101
  800a30:	0080196c 	andhi	r2,zero,101
  800a34:	00800b30 	cmpltui	r2,zero,44
  800a38:	00800b30 	cmpltui	r2,zero,44
  800a3c:	00800b30 	cmpltui	r2,zero,44
  800a40:	00800b30 	cmpltui	r2,zero,44
  800a44:	00800b30 	cmpltui	r2,zero,44
  800a48:	00800b30 	cmpltui	r2,zero,44
  800a4c:	00800b30 	cmpltui	r2,zero,44
  800a50:	00800b30 	cmpltui	r2,zero,44
  800a54:	00800b30 	cmpltui	r2,zero,44
  800a58:	00800b30 	cmpltui	r2,zero,44
  800a5c:	00801188 	cmpgei	r2,zero,70
  800a60:	008017f4 	movhi	r2,95
  800a64:	00800b30 	cmpltui	r2,zero,44
  800a68:	008017f4 	movhi	r2,95
  800a6c:	00800b30 	cmpltui	r2,zero,44
  800a70:	00800b30 	cmpltui	r2,zero,44
  800a74:	00800b30 	cmpltui	r2,zero,44
  800a78:	00800b30 	cmpltui	r2,zero,44
  800a7c:	00801958 	cmpnei	r2,zero,101
  800a80:	00800b30 	cmpltui	r2,zero,44
  800a84:	00800b30 	cmpltui	r2,zero,44
  800a88:	0080123c 	xorhi	r2,zero,72
  800a8c:	00800b30 	cmpltui	r2,zero,44
  800a90:	00800b30 	cmpltui	r2,zero,44
  800a94:	00800b30 	cmpltui	r2,zero,44
  800a98:	00800b30 	cmpltui	r2,zero,44
  800a9c:	00800b30 	cmpltui	r2,zero,44
  800aa0:	00801288 	cmpgei	r2,zero,74
  800aa4:	00800b30 	cmpltui	r2,zero,44
  800aa8:	00800b30 	cmpltui	r2,zero,44
  800aac:	008018a8 	cmpgeui	r2,zero,98
  800ab0:	00800b30 	cmpltui	r2,zero,44
  800ab4:	00800b30 	cmpltui	r2,zero,44
  800ab8:	00800b30 	cmpltui	r2,zero,44
  800abc:	00800b30 	cmpltui	r2,zero,44
  800ac0:	00800b30 	cmpltui	r2,zero,44
  800ac4:	00800b30 	cmpltui	r2,zero,44
  800ac8:	00800b30 	cmpltui	r2,zero,44
  800acc:	00800b30 	cmpltui	r2,zero,44
  800ad0:	00800b30 	cmpltui	r2,zero,44
  800ad4:	00800b30 	cmpltui	r2,zero,44
  800ad8:	0080187c 	xorhi	r2,zero,97
  800adc:	00801194 	movui	r2,70
  800ae0:	008017f4 	movhi	r2,95
  800ae4:	008017f4 	movhi	r2,95
  800ae8:	008017f4 	movhi	r2,95
  800aec:	008017e0 	cmpeqi	r2,zero,95
  800af0:	00801194 	movui	r2,70
  800af4:	00800b30 	cmpltui	r2,zero,44
  800af8:	00800b30 	cmpltui	r2,zero,44
  800afc:	00801768 	cmpgeui	r2,zero,93
  800b00:	00800b30 	cmpltui	r2,zero,44
  800b04:	00801738 	rdprs	r2,zero,92
  800b08:	00801248 	cmpgei	r2,zero,73
  800b0c:	00801798 	cmpnei	r2,zero,94
  800b10:	00801784 	movi	r2,94
  800b14:	00800b30 	cmpltui	r2,zero,44
  800b18:	00801a2c 	andhi	r2,zero,104
  800b1c:	00800b30 	cmpltui	r2,zero,44
  800b20:	00801294 	movui	r2,74
  800b24:	00800b30 	cmpltui	r2,zero,44
  800b28:	00800b30 	cmpltui	r2,zero,44
  800b2c:	0080190c 	andi	r2,zero,100
  800b30:	d9014d17 	ldw	r4,1332(sp)
  800b34:	2000ce26 	beq	r4,zero,800e70 <___vfprintf_internal_r+0x6d4>
  800b38:	01400044 	movi	r5,1
  800b3c:	d9800f04 	addi	r6,sp,60
  800b40:	d9c14015 	stw	r7,1280(sp)
  800b44:	d9414515 	stw	r5,1300(sp)
  800b48:	d9814115 	stw	r6,1284(sp)
  800b4c:	280f883a 	mov	r7,r5
  800b50:	d9000f05 	stb	r4,60(sp)
  800b54:	d8000405 	stb	zero,16(sp)
  800b58:	d8014615 	stw	zero,1304(sp)
  800b5c:	d8c14c17 	ldw	r3,1328(sp)
  800b60:	1880008c 	andi	r2,r3,2
  800b64:	1005003a 	cmpeq	r2,r2,zero
  800b68:	d8815015 	stw	r2,1344(sp)
  800b6c:	1000031e 	bne	r2,zero,800b7c <___vfprintf_internal_r+0x3e0>
  800b70:	d9014517 	ldw	r4,1300(sp)
  800b74:	21000084 	addi	r4,r4,2
  800b78:	d9014515 	stw	r4,1300(sp)
  800b7c:	d9414c17 	ldw	r5,1328(sp)
  800b80:	2940210c 	andi	r5,r5,132
  800b84:	d9414e15 	stw	r5,1336(sp)
  800b88:	28002d1e 	bne	r5,zero,800c40 <___vfprintf_internal_r+0x4a4>
  800b8c:	d9814a17 	ldw	r6,1320(sp)
  800b90:	d8814517 	ldw	r2,1300(sp)
  800b94:	30a1c83a 	sub	r16,r6,r2
  800b98:	0400290e 	bge	zero,r16,800c40 <___vfprintf_internal_r+0x4a4>
  800b9c:	00800404 	movi	r2,16
  800ba0:	14045e0e 	bge	r2,r16,801d1c <___vfprintf_internal_r+0x1580>
  800ba4:	dc800e17 	ldw	r18,56(sp)
  800ba8:	dc400d17 	ldw	r17,52(sp)
  800bac:	1027883a 	mov	r19,r2
  800bb0:	07002074 	movhi	fp,129
  800bb4:	e71b6584 	addi	fp,fp,28054
  800bb8:	050001c4 	movi	r20,7
  800bbc:	00000306 	br	800bcc <___vfprintf_internal_r+0x430>
  800bc0:	843ffc04 	addi	r16,r16,-16
  800bc4:	ad400204 	addi	r21,r21,8
  800bc8:	9c00130e 	bge	r19,r16,800c18 <___vfprintf_internal_r+0x47c>
  800bcc:	94800404 	addi	r18,r18,16
  800bd0:	8c400044 	addi	r17,r17,1
  800bd4:	af000015 	stw	fp,0(r21)
  800bd8:	acc00115 	stw	r19,4(r21)
  800bdc:	dc800e15 	stw	r18,56(sp)
  800be0:	dc400d15 	stw	r17,52(sp)
  800be4:	a47ff60e 	bge	r20,r17,800bc0 <___vfprintf_internal_r+0x424>
  800be8:	d9014f17 	ldw	r4,1340(sp)
  800bec:	b00b883a 	mov	r5,r22
  800bf0:	d9800c04 	addi	r6,sp,48
  800bf4:	d9c15115 	stw	r7,1348(sp)
  800bf8:	08007440 	call	800744 <__sprint_r>
  800bfc:	d9c15117 	ldw	r7,1348(sp)
  800c00:	10009e1e 	bne	r2,zero,800e7c <___vfprintf_internal_r+0x6e0>
  800c04:	843ffc04 	addi	r16,r16,-16
  800c08:	dc800e17 	ldw	r18,56(sp)
  800c0c:	dc400d17 	ldw	r17,52(sp)
  800c10:	dd401904 	addi	r21,sp,100
  800c14:	9c3fed16 	blt	r19,r16,800bcc <___vfprintf_internal_r+0x430>
  800c18:	9425883a 	add	r18,r18,r16
  800c1c:	8c400044 	addi	r17,r17,1
  800c20:	008001c4 	movi	r2,7
  800c24:	af000015 	stw	fp,0(r21)
  800c28:	ac000115 	stw	r16,4(r21)
  800c2c:	dc800e15 	stw	r18,56(sp)
  800c30:	dc400d15 	stw	r17,52(sp)
  800c34:	1441f516 	blt	r2,r17,80140c <___vfprintf_internal_r+0xc70>
  800c38:	ad400204 	addi	r21,r21,8
  800c3c:	00000206 	br	800c48 <___vfprintf_internal_r+0x4ac>
  800c40:	dc800e17 	ldw	r18,56(sp)
  800c44:	dc400d17 	ldw	r17,52(sp)
  800c48:	d8800407 	ldb	r2,16(sp)
  800c4c:	10000b26 	beq	r2,zero,800c7c <___vfprintf_internal_r+0x4e0>
  800c50:	00800044 	movi	r2,1
  800c54:	94800044 	addi	r18,r18,1
  800c58:	8c400044 	addi	r17,r17,1
  800c5c:	a8800115 	stw	r2,4(r21)
  800c60:	d8c00404 	addi	r3,sp,16
  800c64:	008001c4 	movi	r2,7
  800c68:	a8c00015 	stw	r3,0(r21)
  800c6c:	dc800e15 	stw	r18,56(sp)
  800c70:	dc400d15 	stw	r17,52(sp)
  800c74:	1441da16 	blt	r2,r17,8013e0 <___vfprintf_internal_r+0xc44>
  800c78:	ad400204 	addi	r21,r21,8
  800c7c:	d9015017 	ldw	r4,1344(sp)
  800c80:	20000b1e 	bne	r4,zero,800cb0 <___vfprintf_internal_r+0x514>
  800c84:	d8800444 	addi	r2,sp,17
  800c88:	94800084 	addi	r18,r18,2
  800c8c:	8c400044 	addi	r17,r17,1
  800c90:	a8800015 	stw	r2,0(r21)
  800c94:	00c00084 	movi	r3,2
  800c98:	008001c4 	movi	r2,7
  800c9c:	a8c00115 	stw	r3,4(r21)
  800ca0:	dc800e15 	stw	r18,56(sp)
  800ca4:	dc400d15 	stw	r17,52(sp)
  800ca8:	1441c216 	blt	r2,r17,8013b4 <___vfprintf_internal_r+0xc18>
  800cac:	ad400204 	addi	r21,r21,8
  800cb0:	d9414e17 	ldw	r5,1336(sp)
  800cb4:	00802004 	movi	r2,128
  800cb8:	2880b126 	beq	r5,r2,800f80 <___vfprintf_internal_r+0x7e4>
  800cbc:	d8c14617 	ldw	r3,1304(sp)
  800cc0:	19e1c83a 	sub	r16,r3,r7
  800cc4:	0400260e 	bge	zero,r16,800d60 <___vfprintf_internal_r+0x5c4>
  800cc8:	00800404 	movi	r2,16
  800ccc:	1403cf0e 	bge	r2,r16,801c0c <___vfprintf_internal_r+0x1470>
  800cd0:	1027883a 	mov	r19,r2
  800cd4:	07002074 	movhi	fp,129
  800cd8:	e71b6184 	addi	fp,fp,28038
  800cdc:	050001c4 	movi	r20,7
  800ce0:	00000306 	br	800cf0 <___vfprintf_internal_r+0x554>
  800ce4:	843ffc04 	addi	r16,r16,-16
  800ce8:	ad400204 	addi	r21,r21,8
  800cec:	9c00130e 	bge	r19,r16,800d3c <___vfprintf_internal_r+0x5a0>
  800cf0:	94800404 	addi	r18,r18,16
  800cf4:	8c400044 	addi	r17,r17,1
  800cf8:	af000015 	stw	fp,0(r21)
  800cfc:	acc00115 	stw	r19,4(r21)
  800d00:	dc800e15 	stw	r18,56(sp)
  800d04:	dc400d15 	stw	r17,52(sp)
  800d08:	a47ff60e 	bge	r20,r17,800ce4 <___vfprintf_internal_r+0x548>
  800d0c:	d9014f17 	ldw	r4,1340(sp)
  800d10:	b00b883a 	mov	r5,r22
  800d14:	d9800c04 	addi	r6,sp,48
  800d18:	d9c15115 	stw	r7,1348(sp)
  800d1c:	08007440 	call	800744 <__sprint_r>
  800d20:	d9c15117 	ldw	r7,1348(sp)
  800d24:	1000551e 	bne	r2,zero,800e7c <___vfprintf_internal_r+0x6e0>
  800d28:	843ffc04 	addi	r16,r16,-16
  800d2c:	dc800e17 	ldw	r18,56(sp)
  800d30:	dc400d17 	ldw	r17,52(sp)
  800d34:	dd401904 	addi	r21,sp,100
  800d38:	9c3fed16 	blt	r19,r16,800cf0 <___vfprintf_internal_r+0x554>
  800d3c:	9425883a 	add	r18,r18,r16
  800d40:	8c400044 	addi	r17,r17,1
  800d44:	008001c4 	movi	r2,7
  800d48:	af000015 	stw	fp,0(r21)
  800d4c:	ac000115 	stw	r16,4(r21)
  800d50:	dc800e15 	stw	r18,56(sp)
  800d54:	dc400d15 	stw	r17,52(sp)
  800d58:	14418216 	blt	r2,r17,801364 <___vfprintf_internal_r+0xbc8>
  800d5c:	ad400204 	addi	r21,r21,8
  800d60:	d9014c17 	ldw	r4,1328(sp)
  800d64:	2080400c 	andi	r2,r4,256
  800d68:	10004a1e 	bne	r2,zero,800e94 <___vfprintf_internal_r+0x6f8>
  800d6c:	d9414117 	ldw	r5,1284(sp)
  800d70:	91e5883a 	add	r18,r18,r7
  800d74:	8c400044 	addi	r17,r17,1
  800d78:	008001c4 	movi	r2,7
  800d7c:	a9400015 	stw	r5,0(r21)
  800d80:	a9c00115 	stw	r7,4(r21)
  800d84:	dc800e15 	stw	r18,56(sp)
  800d88:	dc400d15 	stw	r17,52(sp)
  800d8c:	14416716 	blt	r2,r17,80132c <___vfprintf_internal_r+0xb90>
  800d90:	a8c00204 	addi	r3,r21,8
  800d94:	d9814c17 	ldw	r6,1328(sp)
  800d98:	3080010c 	andi	r2,r6,4
  800d9c:	10002826 	beq	r2,zero,800e40 <___vfprintf_internal_r+0x6a4>
  800da0:	d8814a17 	ldw	r2,1320(sp)
  800da4:	d9014517 	ldw	r4,1300(sp)
  800da8:	1121c83a 	sub	r16,r2,r4
  800dac:	0400240e 	bge	zero,r16,800e40 <___vfprintf_internal_r+0x6a4>
  800db0:	00800404 	movi	r2,16
  800db4:	1404550e 	bge	r2,r16,801f0c <___vfprintf_internal_r+0x1770>
  800db8:	dc400d17 	ldw	r17,52(sp)
  800dbc:	1027883a 	mov	r19,r2
  800dc0:	07002074 	movhi	fp,129
  800dc4:	e71b6584 	addi	fp,fp,28054
  800dc8:	050001c4 	movi	r20,7
  800dcc:	00000306 	br	800ddc <___vfprintf_internal_r+0x640>
  800dd0:	843ffc04 	addi	r16,r16,-16
  800dd4:	18c00204 	addi	r3,r3,8
  800dd8:	9c00110e 	bge	r19,r16,800e20 <___vfprintf_internal_r+0x684>
  800ddc:	94800404 	addi	r18,r18,16
  800de0:	8c400044 	addi	r17,r17,1
  800de4:	1f000015 	stw	fp,0(r3)
  800de8:	1cc00115 	stw	r19,4(r3)
  800dec:	dc800e15 	stw	r18,56(sp)
  800df0:	dc400d15 	stw	r17,52(sp)
  800df4:	a47ff60e 	bge	r20,r17,800dd0 <___vfprintf_internal_r+0x634>
  800df8:	d9014f17 	ldw	r4,1340(sp)
  800dfc:	b00b883a 	mov	r5,r22
  800e00:	d9800c04 	addi	r6,sp,48
  800e04:	08007440 	call	800744 <__sprint_r>
  800e08:	10001c1e 	bne	r2,zero,800e7c <___vfprintf_internal_r+0x6e0>
  800e0c:	843ffc04 	addi	r16,r16,-16
  800e10:	dc800e17 	ldw	r18,56(sp)
  800e14:	dc400d17 	ldw	r17,52(sp)
  800e18:	d8c01904 	addi	r3,sp,100
  800e1c:	9c3fef16 	blt	r19,r16,800ddc <___vfprintf_internal_r+0x640>
  800e20:	9425883a 	add	r18,r18,r16
  800e24:	8c400044 	addi	r17,r17,1
  800e28:	008001c4 	movi	r2,7
  800e2c:	1f000015 	stw	fp,0(r3)
  800e30:	1c000115 	stw	r16,4(r3)
  800e34:	dc800e15 	stw	r18,56(sp)
  800e38:	dc400d15 	stw	r17,52(sp)
  800e3c:	1440cb16 	blt	r2,r17,80116c <___vfprintf_internal_r+0x9d0>
  800e40:	d8814a17 	ldw	r2,1320(sp)
  800e44:	d9414517 	ldw	r5,1300(sp)
  800e48:	1140010e 	bge	r2,r5,800e50 <___vfprintf_internal_r+0x6b4>
  800e4c:	2805883a 	mov	r2,r5
  800e50:	d9814b17 	ldw	r6,1324(sp)
  800e54:	308d883a 	add	r6,r6,r2
  800e58:	d9814b15 	stw	r6,1324(sp)
  800e5c:	90013b1e 	bne	r18,zero,80134c <___vfprintf_internal_r+0xbb0>
  800e60:	d9c14017 	ldw	r7,1280(sp)
  800e64:	dd401904 	addi	r21,sp,100
  800e68:	d8000d15 	stw	zero,52(sp)
  800e6c:	003ea706 	br	80090c <___vfprintf_internal_r+0x170>
  800e70:	d8800e17 	ldw	r2,56(sp)
  800e74:	1005451e 	bne	r2,zero,80238c <___vfprintf_internal_r+0x1bf0>
  800e78:	d8000d15 	stw	zero,52(sp)
  800e7c:	b080030b 	ldhu	r2,12(r22)
  800e80:	1080100c 	andi	r2,r2,64
  800e84:	103e8726 	beq	r2,zero,8008a4 <___vfprintf_internal_r+0x108>
  800e88:	00bfffc4 	movi	r2,-1
  800e8c:	d8814b15 	stw	r2,1324(sp)
  800e90:	003e8406 	br	8008a4 <___vfprintf_internal_r+0x108>
  800e94:	d9814d17 	ldw	r6,1332(sp)
  800e98:	00801944 	movi	r2,101
  800e9c:	11806e16 	blt	r2,r6,801058 <___vfprintf_internal_r+0x8bc>
  800ea0:	d9414717 	ldw	r5,1308(sp)
  800ea4:	00c00044 	movi	r3,1
  800ea8:	1943490e 	bge	r3,r5,801bd0 <___vfprintf_internal_r+0x1434>
  800eac:	d8814117 	ldw	r2,1284(sp)
  800eb0:	94800044 	addi	r18,r18,1
  800eb4:	8c400044 	addi	r17,r17,1
  800eb8:	a8800015 	stw	r2,0(r21)
  800ebc:	008001c4 	movi	r2,7
  800ec0:	a8c00115 	stw	r3,4(r21)
  800ec4:	dc800e15 	stw	r18,56(sp)
  800ec8:	dc400d15 	stw	r17,52(sp)
  800ecc:	1441ca16 	blt	r2,r17,8015f8 <___vfprintf_internal_r+0xe5c>
  800ed0:	a8c00204 	addi	r3,r21,8
  800ed4:	d9014917 	ldw	r4,1316(sp)
  800ed8:	00800044 	movi	r2,1
  800edc:	94800044 	addi	r18,r18,1
  800ee0:	8c400044 	addi	r17,r17,1
  800ee4:	18800115 	stw	r2,4(r3)
  800ee8:	008001c4 	movi	r2,7
  800eec:	19000015 	stw	r4,0(r3)
  800ef0:	dc800e15 	stw	r18,56(sp)
  800ef4:	dc400d15 	stw	r17,52(sp)
  800ef8:	1441b616 	blt	r2,r17,8015d4 <___vfprintf_internal_r+0xe38>
  800efc:	1cc00204 	addi	r19,r3,8
  800f00:	d9014217 	ldw	r4,1288(sp)
  800f04:	d9414317 	ldw	r5,1292(sp)
  800f08:	000d883a 	mov	r6,zero
  800f0c:	000f883a 	mov	r7,zero
  800f10:	08092500 	call	809250 <__nedf2>
  800f14:	10017426 	beq	r2,zero,8014e8 <___vfprintf_internal_r+0xd4c>
  800f18:	d9414717 	ldw	r5,1308(sp)
  800f1c:	d9814117 	ldw	r6,1284(sp)
  800f20:	8c400044 	addi	r17,r17,1
  800f24:	2c85883a 	add	r2,r5,r18
  800f28:	14bfffc4 	addi	r18,r2,-1
  800f2c:	28bfffc4 	addi	r2,r5,-1
  800f30:	30c00044 	addi	r3,r6,1
  800f34:	98800115 	stw	r2,4(r19)
  800f38:	008001c4 	movi	r2,7
  800f3c:	98c00015 	stw	r3,0(r19)
  800f40:	dc800e15 	stw	r18,56(sp)
  800f44:	dc400d15 	stw	r17,52(sp)
  800f48:	14418e16 	blt	r2,r17,801584 <___vfprintf_internal_r+0xde8>
  800f4c:	9cc00204 	addi	r19,r19,8
  800f50:	d9414817 	ldw	r5,1312(sp)
  800f54:	d8800804 	addi	r2,sp,32
  800f58:	8c400044 	addi	r17,r17,1
  800f5c:	9165883a 	add	r18,r18,r5
  800f60:	98800015 	stw	r2,0(r19)
  800f64:	008001c4 	movi	r2,7
  800f68:	99400115 	stw	r5,4(r19)
  800f6c:	dc800e15 	stw	r18,56(sp)
  800f70:	dc400d15 	stw	r17,52(sp)
  800f74:	1440ed16 	blt	r2,r17,80132c <___vfprintf_internal_r+0xb90>
  800f78:	98c00204 	addi	r3,r19,8
  800f7c:	003f8506 	br	800d94 <___vfprintf_internal_r+0x5f8>
  800f80:	d9814a17 	ldw	r6,1320(sp)
  800f84:	d8814517 	ldw	r2,1300(sp)
  800f88:	30a1c83a 	sub	r16,r6,r2
  800f8c:	043f4b0e 	bge	zero,r16,800cbc <___vfprintf_internal_r+0x520>
  800f90:	00800404 	movi	r2,16
  800f94:	14043a0e 	bge	r2,r16,802080 <___vfprintf_internal_r+0x18e4>
  800f98:	1027883a 	mov	r19,r2
  800f9c:	07002074 	movhi	fp,129
  800fa0:	e71b6184 	addi	fp,fp,28038
  800fa4:	050001c4 	movi	r20,7
  800fa8:	00000306 	br	800fb8 <___vfprintf_internal_r+0x81c>
  800fac:	843ffc04 	addi	r16,r16,-16
  800fb0:	ad400204 	addi	r21,r21,8
  800fb4:	9c00130e 	bge	r19,r16,801004 <___vfprintf_internal_r+0x868>
  800fb8:	94800404 	addi	r18,r18,16
  800fbc:	8c400044 	addi	r17,r17,1
  800fc0:	af000015 	stw	fp,0(r21)
  800fc4:	acc00115 	stw	r19,4(r21)
  800fc8:	dc800e15 	stw	r18,56(sp)
  800fcc:	dc400d15 	stw	r17,52(sp)
  800fd0:	a47ff60e 	bge	r20,r17,800fac <___vfprintf_internal_r+0x810>
  800fd4:	d9014f17 	ldw	r4,1340(sp)
  800fd8:	b00b883a 	mov	r5,r22
  800fdc:	d9800c04 	addi	r6,sp,48
  800fe0:	d9c15115 	stw	r7,1348(sp)
  800fe4:	08007440 	call	800744 <__sprint_r>
  800fe8:	d9c15117 	ldw	r7,1348(sp)
  800fec:	103fa31e 	bne	r2,zero,800e7c <___vfprintf_internal_r+0x6e0>
  800ff0:	843ffc04 	addi	r16,r16,-16
  800ff4:	dc800e17 	ldw	r18,56(sp)
  800ff8:	dc400d17 	ldw	r17,52(sp)
  800ffc:	dd401904 	addi	r21,sp,100
  801000:	9c3fed16 	blt	r19,r16,800fb8 <___vfprintf_internal_r+0x81c>
  801004:	9425883a 	add	r18,r18,r16
  801008:	8c400044 	addi	r17,r17,1
  80100c:	008001c4 	movi	r2,7
  801010:	af000015 	stw	fp,0(r21)
  801014:	ac000115 	stw	r16,4(r21)
  801018:	dc800e15 	stw	r18,56(sp)
  80101c:	dc400d15 	stw	r17,52(sp)
  801020:	14416116 	blt	r2,r17,8015a8 <___vfprintf_internal_r+0xe0c>
  801024:	ad400204 	addi	r21,r21,8
  801028:	003f2406 	br	800cbc <___vfprintf_internal_r+0x520>
  80102c:	d9014f17 	ldw	r4,1340(sp)
  801030:	08042500 	call	804250 <__sinit>
  801034:	d9c15117 	ldw	r7,1348(sp)
  801038:	003def06 	br	8007f8 <___vfprintf_internal_r+0x5c>
  80103c:	d9014f17 	ldw	r4,1340(sp)
  801040:	b00b883a 	mov	r5,r22
  801044:	d9c15115 	stw	r7,1348(sp)
  801048:	08026840 	call	802684 <__swsetup_r>
  80104c:	d9c15117 	ldw	r7,1348(sp)
  801050:	103dee26 	beq	r2,zero,80080c <___vfprintf_internal_r+0x70>
  801054:	003f8c06 	br	800e88 <___vfprintf_internal_r+0x6ec>
  801058:	d9014217 	ldw	r4,1288(sp)
  80105c:	d9414317 	ldw	r5,1292(sp)
  801060:	000d883a 	mov	r6,zero
  801064:	000f883a 	mov	r7,zero
  801068:	08091c80 	call	8091c8 <__eqdf2>
  80106c:	1000f21e 	bne	r2,zero,801438 <___vfprintf_internal_r+0xc9c>
  801070:	00802074 	movhi	r2,129
  801074:	109b6104 	addi	r2,r2,28036
  801078:	94800044 	addi	r18,r18,1
  80107c:	8c400044 	addi	r17,r17,1
  801080:	a8800015 	stw	r2,0(r21)
  801084:	00c00044 	movi	r3,1
  801088:	008001c4 	movi	r2,7
  80108c:	a8c00115 	stw	r3,4(r21)
  801090:	dc800e15 	stw	r18,56(sp)
  801094:	dc400d15 	stw	r17,52(sp)
  801098:	14430016 	blt	r2,r17,801c9c <___vfprintf_internal_r+0x1500>
  80109c:	a8c00204 	addi	r3,r21,8
  8010a0:	d8800517 	ldw	r2,20(sp)
  8010a4:	d9014717 	ldw	r4,1308(sp)
  8010a8:	11015c0e 	bge	r2,r4,80161c <___vfprintf_internal_r+0xe80>
  8010ac:	dc400d17 	ldw	r17,52(sp)
  8010b0:	d9814917 	ldw	r6,1316(sp)
  8010b4:	00800044 	movi	r2,1
  8010b8:	94800044 	addi	r18,r18,1
  8010bc:	8c400044 	addi	r17,r17,1
  8010c0:	18800115 	stw	r2,4(r3)
  8010c4:	008001c4 	movi	r2,7
  8010c8:	19800015 	stw	r6,0(r3)
  8010cc:	dc800e15 	stw	r18,56(sp)
  8010d0:	dc400d15 	stw	r17,52(sp)
  8010d4:	14431616 	blt	r2,r17,801d30 <___vfprintf_internal_r+0x1594>
  8010d8:	18c00204 	addi	r3,r3,8
  8010dc:	d8814717 	ldw	r2,1308(sp)
  8010e0:	143fffc4 	addi	r16,r2,-1
  8010e4:	043f2b0e 	bge	zero,r16,800d94 <___vfprintf_internal_r+0x5f8>
  8010e8:	00800404 	movi	r2,16
  8010ec:	1402a80e 	bge	r2,r16,801b90 <___vfprintf_internal_r+0x13f4>
  8010f0:	dc400d17 	ldw	r17,52(sp)
  8010f4:	1027883a 	mov	r19,r2
  8010f8:	07002074 	movhi	fp,129
  8010fc:	e71b6184 	addi	fp,fp,28038
  801100:	050001c4 	movi	r20,7
  801104:	00000306 	br	801114 <___vfprintf_internal_r+0x978>
  801108:	18c00204 	addi	r3,r3,8
  80110c:	843ffc04 	addi	r16,r16,-16
  801110:	9c02a20e 	bge	r19,r16,801b9c <___vfprintf_internal_r+0x1400>
  801114:	94800404 	addi	r18,r18,16
  801118:	8c400044 	addi	r17,r17,1
  80111c:	1f000015 	stw	fp,0(r3)
  801120:	1cc00115 	stw	r19,4(r3)
  801124:	dc800e15 	stw	r18,56(sp)
  801128:	dc400d15 	stw	r17,52(sp)
  80112c:	a47ff60e 	bge	r20,r17,801108 <___vfprintf_internal_r+0x96c>
  801130:	d9014f17 	ldw	r4,1340(sp)
  801134:	b00b883a 	mov	r5,r22
  801138:	d9800c04 	addi	r6,sp,48
  80113c:	08007440 	call	800744 <__sprint_r>
  801140:	103f4e1e 	bne	r2,zero,800e7c <___vfprintf_internal_r+0x6e0>
  801144:	dc800e17 	ldw	r18,56(sp)
  801148:	dc400d17 	ldw	r17,52(sp)
  80114c:	d8c01904 	addi	r3,sp,100
  801150:	003fee06 	br	80110c <___vfprintf_internal_r+0x970>
  801154:	d8802c0b 	ldhu	r2,176(sp)
  801158:	00ffffc4 	movi	r3,-1
  80115c:	d8c14b15 	stw	r3,1324(sp)
  801160:	1080100c 	andi	r2,r2,64
  801164:	103dcc1e 	bne	r2,zero,800898 <___vfprintf_internal_r+0xfc>
  801168:	003dce06 	br	8008a4 <___vfprintf_internal_r+0x108>
  80116c:	d9014f17 	ldw	r4,1340(sp)
  801170:	b00b883a 	mov	r5,r22
  801174:	d9800c04 	addi	r6,sp,48
  801178:	08007440 	call	800744 <__sprint_r>
  80117c:	103f3f1e 	bne	r2,zero,800e7c <___vfprintf_internal_r+0x6e0>
  801180:	dc800e17 	ldw	r18,56(sp)
  801184:	003f2e06 	br	800e40 <___vfprintf_internal_r+0x6a4>
  801188:	d9414c17 	ldw	r5,1328(sp)
  80118c:	29400414 	ori	r5,r5,16
  801190:	d9414c15 	stw	r5,1328(sp)
  801194:	d9814c17 	ldw	r6,1328(sp)
  801198:	3080080c 	andi	r2,r6,32
  80119c:	10014f1e 	bne	r2,zero,8016dc <___vfprintf_internal_r+0xf40>
  8011a0:	d8c14c17 	ldw	r3,1328(sp)
  8011a4:	1880040c 	andi	r2,r3,16
  8011a8:	1002f01e 	bne	r2,zero,801d6c <___vfprintf_internal_r+0x15d0>
  8011ac:	d9014c17 	ldw	r4,1328(sp)
  8011b0:	2080100c 	andi	r2,r4,64
  8011b4:	1002ed26 	beq	r2,zero,801d6c <___vfprintf_internal_r+0x15d0>
  8011b8:	3880000f 	ldh	r2,0(r7)
  8011bc:	39c00104 	addi	r7,r7,4
  8011c0:	d9c14015 	stw	r7,1280(sp)
  8011c4:	1023d7fa 	srai	r17,r2,31
  8011c8:	1021883a 	mov	r16,r2
  8011cc:	88037816 	blt	r17,zero,801fb0 <___vfprintf_internal_r+0x1814>
  8011d0:	01000044 	movi	r4,1
  8011d4:	98000416 	blt	r19,zero,8011e8 <___vfprintf_internal_r+0xa4c>
  8011d8:	d8c14c17 	ldw	r3,1328(sp)
  8011dc:	00bfdfc4 	movi	r2,-129
  8011e0:	1886703a 	and	r3,r3,r2
  8011e4:	d8c14c15 	stw	r3,1328(sp)
  8011e8:	8444b03a 	or	r2,r16,r17
  8011ec:	10022c1e 	bne	r2,zero,801aa0 <___vfprintf_internal_r+0x1304>
  8011f0:	98022b1e 	bne	r19,zero,801aa0 <___vfprintf_internal_r+0x1304>
  8011f4:	20803fcc 	andi	r2,r4,255
  8011f8:	1002a126 	beq	r2,zero,801c80 <___vfprintf_internal_r+0x14e4>
  8011fc:	d8c01904 	addi	r3,sp,100
  801200:	dd000f04 	addi	r20,sp,60
  801204:	d8c14115 	stw	r3,1284(sp)
  801208:	d8c14117 	ldw	r3,1284(sp)
  80120c:	dcc14515 	stw	r19,1300(sp)
  801210:	a0c5c83a 	sub	r2,r20,r3
  801214:	11c00a04 	addi	r7,r2,40
  801218:	99c0010e 	bge	r19,r7,801220 <___vfprintf_internal_r+0xa84>
  80121c:	d9c14515 	stw	r7,1300(sp)
  801220:	dcc14615 	stw	r19,1304(sp)
  801224:	d8800407 	ldb	r2,16(sp)
  801228:	103e4c26 	beq	r2,zero,800b5c <___vfprintf_internal_r+0x3c0>
  80122c:	d8814517 	ldw	r2,1300(sp)
  801230:	10800044 	addi	r2,r2,1
  801234:	d8814515 	stw	r2,1300(sp)
  801238:	003e4806 	br	800b5c <___vfprintf_internal_r+0x3c0>
  80123c:	d9814c17 	ldw	r6,1328(sp)
  801240:	31800414 	ori	r6,r6,16
  801244:	d9814c15 	stw	r6,1328(sp)
  801248:	d8c14c17 	ldw	r3,1328(sp)
  80124c:	1880080c 	andi	r2,r3,32
  801250:	1001271e 	bne	r2,zero,8016f0 <___vfprintf_internal_r+0xf54>
  801254:	d9414c17 	ldw	r5,1328(sp)
  801258:	2880040c 	andi	r2,r5,16
  80125c:	1002bc1e 	bne	r2,zero,801d50 <___vfprintf_internal_r+0x15b4>
  801260:	d9814c17 	ldw	r6,1328(sp)
  801264:	3080100c 	andi	r2,r6,64
  801268:	1002b926 	beq	r2,zero,801d50 <___vfprintf_internal_r+0x15b4>
  80126c:	3c00000b 	ldhu	r16,0(r7)
  801270:	0009883a 	mov	r4,zero
  801274:	39c00104 	addi	r7,r7,4
  801278:	0023883a 	mov	r17,zero
  80127c:	d9c14015 	stw	r7,1280(sp)
  801280:	d8000405 	stb	zero,16(sp)
  801284:	003fd306 	br	8011d4 <___vfprintf_internal_r+0xa38>
  801288:	d9014c17 	ldw	r4,1328(sp)
  80128c:	21000414 	ori	r4,r4,16
  801290:	d9014c15 	stw	r4,1328(sp)
  801294:	d9414c17 	ldw	r5,1328(sp)
  801298:	2880080c 	andi	r2,r5,32
  80129c:	1001081e 	bne	r2,zero,8016c0 <___vfprintf_internal_r+0xf24>
  8012a0:	d8c14c17 	ldw	r3,1328(sp)
  8012a4:	1880040c 	andi	r2,r3,16
  8012a8:	1002b61e 	bne	r2,zero,801d84 <___vfprintf_internal_r+0x15e8>
  8012ac:	d9014c17 	ldw	r4,1328(sp)
  8012b0:	2080100c 	andi	r2,r4,64
  8012b4:	1002b326 	beq	r2,zero,801d84 <___vfprintf_internal_r+0x15e8>
  8012b8:	3c00000b 	ldhu	r16,0(r7)
  8012bc:	01000044 	movi	r4,1
  8012c0:	39c00104 	addi	r7,r7,4
  8012c4:	0023883a 	mov	r17,zero
  8012c8:	d9c14015 	stw	r7,1280(sp)
  8012cc:	d8000405 	stb	zero,16(sp)
  8012d0:	003fc006 	br	8011d4 <___vfprintf_internal_r+0xa38>
  8012d4:	d9014f17 	ldw	r4,1340(sp)
  8012d8:	b00b883a 	mov	r5,r22
  8012dc:	d9800c04 	addi	r6,sp,48
  8012e0:	08007440 	call	800744 <__sprint_r>
  8012e4:	103ee51e 	bne	r2,zero,800e7c <___vfprintf_internal_r+0x6e0>
  8012e8:	dc800e17 	ldw	r18,56(sp)
  8012ec:	d8c01904 	addi	r3,sp,100
  8012f0:	d9814c17 	ldw	r6,1328(sp)
  8012f4:	3080004c 	andi	r2,r6,1
  8012f8:	1005003a 	cmpeq	r2,r2,zero
  8012fc:	103ea51e 	bne	r2,zero,800d94 <___vfprintf_internal_r+0x5f8>
  801300:	00800044 	movi	r2,1
  801304:	dc400d17 	ldw	r17,52(sp)
  801308:	18800115 	stw	r2,4(r3)
  80130c:	d8814917 	ldw	r2,1316(sp)
  801310:	94800044 	addi	r18,r18,1
  801314:	8c400044 	addi	r17,r17,1
  801318:	18800015 	stw	r2,0(r3)
  80131c:	008001c4 	movi	r2,7
  801320:	dc800e15 	stw	r18,56(sp)
  801324:	dc400d15 	stw	r17,52(sp)
  801328:	1442240e 	bge	r2,r17,801bbc <___vfprintf_internal_r+0x1420>
  80132c:	d9014f17 	ldw	r4,1340(sp)
  801330:	b00b883a 	mov	r5,r22
  801334:	d9800c04 	addi	r6,sp,48
  801338:	08007440 	call	800744 <__sprint_r>
  80133c:	103ecf1e 	bne	r2,zero,800e7c <___vfprintf_internal_r+0x6e0>
  801340:	dc800e17 	ldw	r18,56(sp)
  801344:	d8c01904 	addi	r3,sp,100
  801348:	003e9206 	br	800d94 <___vfprintf_internal_r+0x5f8>
  80134c:	d9014f17 	ldw	r4,1340(sp)
  801350:	b00b883a 	mov	r5,r22
  801354:	d9800c04 	addi	r6,sp,48
  801358:	08007440 	call	800744 <__sprint_r>
  80135c:	103ec026 	beq	r2,zero,800e60 <___vfprintf_internal_r+0x6c4>
  801360:	003ec606 	br	800e7c <___vfprintf_internal_r+0x6e0>
  801364:	d9014f17 	ldw	r4,1340(sp)
  801368:	b00b883a 	mov	r5,r22
  80136c:	d9800c04 	addi	r6,sp,48
  801370:	d9c15115 	stw	r7,1348(sp)
  801374:	08007440 	call	800744 <__sprint_r>
  801378:	d9c15117 	ldw	r7,1348(sp)
  80137c:	103ebf1e 	bne	r2,zero,800e7c <___vfprintf_internal_r+0x6e0>
  801380:	dc800e17 	ldw	r18,56(sp)
  801384:	dc400d17 	ldw	r17,52(sp)
  801388:	dd401904 	addi	r21,sp,100
  80138c:	003e7406 	br	800d60 <___vfprintf_internal_r+0x5c4>
  801390:	d9014f17 	ldw	r4,1340(sp)
  801394:	b00b883a 	mov	r5,r22
  801398:	d9800c04 	addi	r6,sp,48
  80139c:	d9c15115 	stw	r7,1348(sp)
  8013a0:	08007440 	call	800744 <__sprint_r>
  8013a4:	d9c15117 	ldw	r7,1348(sp)
  8013a8:	103eb41e 	bne	r2,zero,800e7c <___vfprintf_internal_r+0x6e0>
  8013ac:	dd401904 	addi	r21,sp,100
  8013b0:	003d6d06 	br	800968 <___vfprintf_internal_r+0x1cc>
  8013b4:	d9014f17 	ldw	r4,1340(sp)
  8013b8:	b00b883a 	mov	r5,r22
  8013bc:	d9800c04 	addi	r6,sp,48
  8013c0:	d9c15115 	stw	r7,1348(sp)
  8013c4:	08007440 	call	800744 <__sprint_r>
  8013c8:	d9c15117 	ldw	r7,1348(sp)
  8013cc:	103eab1e 	bne	r2,zero,800e7c <___vfprintf_internal_r+0x6e0>
  8013d0:	dc800e17 	ldw	r18,56(sp)
  8013d4:	dc400d17 	ldw	r17,52(sp)
  8013d8:	dd401904 	addi	r21,sp,100
  8013dc:	003e3406 	br	800cb0 <___vfprintf_internal_r+0x514>
  8013e0:	d9014f17 	ldw	r4,1340(sp)
  8013e4:	b00b883a 	mov	r5,r22
  8013e8:	d9800c04 	addi	r6,sp,48
  8013ec:	d9c15115 	stw	r7,1348(sp)
  8013f0:	08007440 	call	800744 <__sprint_r>
  8013f4:	d9c15117 	ldw	r7,1348(sp)
  8013f8:	103ea01e 	bne	r2,zero,800e7c <___vfprintf_internal_r+0x6e0>
  8013fc:	dc800e17 	ldw	r18,56(sp)
  801400:	dc400d17 	ldw	r17,52(sp)
  801404:	dd401904 	addi	r21,sp,100
  801408:	003e1c06 	br	800c7c <___vfprintf_internal_r+0x4e0>
  80140c:	d9014f17 	ldw	r4,1340(sp)
  801410:	b00b883a 	mov	r5,r22
  801414:	d9800c04 	addi	r6,sp,48
  801418:	d9c15115 	stw	r7,1348(sp)
  80141c:	08007440 	call	800744 <__sprint_r>
  801420:	d9c15117 	ldw	r7,1348(sp)
  801424:	103e951e 	bne	r2,zero,800e7c <___vfprintf_internal_r+0x6e0>
  801428:	dc800e17 	ldw	r18,56(sp)
  80142c:	dc400d17 	ldw	r17,52(sp)
  801430:	dd401904 	addi	r21,sp,100
  801434:	003e0406 	br	800c48 <___vfprintf_internal_r+0x4ac>
  801438:	d9000517 	ldw	r4,20(sp)
  80143c:	0102580e 	bge	zero,r4,801da0 <___vfprintf_internal_r+0x1604>
  801440:	d9814717 	ldw	r6,1308(sp)
  801444:	21807a16 	blt	r4,r6,801630 <___vfprintf_internal_r+0xe94>
  801448:	d8814117 	ldw	r2,1284(sp)
  80144c:	91a5883a 	add	r18,r18,r6
  801450:	8c400044 	addi	r17,r17,1
  801454:	a8800015 	stw	r2,0(r21)
  801458:	008001c4 	movi	r2,7
  80145c:	a9800115 	stw	r6,4(r21)
  801460:	dc800e15 	stw	r18,56(sp)
  801464:	dc400d15 	stw	r17,52(sp)
  801468:	1442fc16 	blt	r2,r17,80205c <___vfprintf_internal_r+0x18c0>
  80146c:	a8c00204 	addi	r3,r21,8
  801470:	d9414717 	ldw	r5,1308(sp)
  801474:	2161c83a 	sub	r16,r4,r5
  801478:	043f9d0e 	bge	zero,r16,8012f0 <___vfprintf_internal_r+0xb54>
  80147c:	00800404 	movi	r2,16
  801480:	1402190e 	bge	r2,r16,801ce8 <___vfprintf_internal_r+0x154c>
  801484:	dc400d17 	ldw	r17,52(sp)
  801488:	1027883a 	mov	r19,r2
  80148c:	07002074 	movhi	fp,129
  801490:	e71b6184 	addi	fp,fp,28038
  801494:	050001c4 	movi	r20,7
  801498:	00000306 	br	8014a8 <___vfprintf_internal_r+0xd0c>
  80149c:	18c00204 	addi	r3,r3,8
  8014a0:	843ffc04 	addi	r16,r16,-16
  8014a4:	9c02130e 	bge	r19,r16,801cf4 <___vfprintf_internal_r+0x1558>
  8014a8:	94800404 	addi	r18,r18,16
  8014ac:	8c400044 	addi	r17,r17,1
  8014b0:	1f000015 	stw	fp,0(r3)
  8014b4:	1cc00115 	stw	r19,4(r3)
  8014b8:	dc800e15 	stw	r18,56(sp)
  8014bc:	dc400d15 	stw	r17,52(sp)
  8014c0:	a47ff60e 	bge	r20,r17,80149c <___vfprintf_internal_r+0xd00>
  8014c4:	d9014f17 	ldw	r4,1340(sp)
  8014c8:	b00b883a 	mov	r5,r22
  8014cc:	d9800c04 	addi	r6,sp,48
  8014d0:	08007440 	call	800744 <__sprint_r>
  8014d4:	103e691e 	bne	r2,zero,800e7c <___vfprintf_internal_r+0x6e0>
  8014d8:	dc800e17 	ldw	r18,56(sp)
  8014dc:	dc400d17 	ldw	r17,52(sp)
  8014e0:	d8c01904 	addi	r3,sp,100
  8014e4:	003fee06 	br	8014a0 <___vfprintf_internal_r+0xd04>
  8014e8:	d8814717 	ldw	r2,1308(sp)
  8014ec:	143fffc4 	addi	r16,r2,-1
  8014f0:	043e970e 	bge	zero,r16,800f50 <___vfprintf_internal_r+0x7b4>
  8014f4:	00800404 	movi	r2,16
  8014f8:	1400180e 	bge	r2,r16,80155c <___vfprintf_internal_r+0xdc0>
  8014fc:	1029883a 	mov	r20,r2
  801500:	07002074 	movhi	fp,129
  801504:	e71b6184 	addi	fp,fp,28038
  801508:	054001c4 	movi	r21,7
  80150c:	00000306 	br	80151c <___vfprintf_internal_r+0xd80>
  801510:	9cc00204 	addi	r19,r19,8
  801514:	843ffc04 	addi	r16,r16,-16
  801518:	a400120e 	bge	r20,r16,801564 <___vfprintf_internal_r+0xdc8>
  80151c:	94800404 	addi	r18,r18,16
  801520:	8c400044 	addi	r17,r17,1
  801524:	9f000015 	stw	fp,0(r19)
  801528:	9d000115 	stw	r20,4(r19)
  80152c:	dc800e15 	stw	r18,56(sp)
  801530:	dc400d15 	stw	r17,52(sp)
  801534:	ac7ff60e 	bge	r21,r17,801510 <___vfprintf_internal_r+0xd74>
  801538:	d9014f17 	ldw	r4,1340(sp)
  80153c:	b00b883a 	mov	r5,r22
  801540:	d9800c04 	addi	r6,sp,48
  801544:	08007440 	call	800744 <__sprint_r>
  801548:	103e4c1e 	bne	r2,zero,800e7c <___vfprintf_internal_r+0x6e0>
  80154c:	dc800e17 	ldw	r18,56(sp)
  801550:	dc400d17 	ldw	r17,52(sp)
  801554:	dcc01904 	addi	r19,sp,100
  801558:	003fee06 	br	801514 <___vfprintf_internal_r+0xd78>
  80155c:	07002074 	movhi	fp,129
  801560:	e71b6184 	addi	fp,fp,28038
  801564:	9425883a 	add	r18,r18,r16
  801568:	8c400044 	addi	r17,r17,1
  80156c:	008001c4 	movi	r2,7
  801570:	9f000015 	stw	fp,0(r19)
  801574:	9c000115 	stw	r16,4(r19)
  801578:	dc800e15 	stw	r18,56(sp)
  80157c:	dc400d15 	stw	r17,52(sp)
  801580:	147e720e 	bge	r2,r17,800f4c <___vfprintf_internal_r+0x7b0>
  801584:	d9014f17 	ldw	r4,1340(sp)
  801588:	b00b883a 	mov	r5,r22
  80158c:	d9800c04 	addi	r6,sp,48
  801590:	08007440 	call	800744 <__sprint_r>
  801594:	103e391e 	bne	r2,zero,800e7c <___vfprintf_internal_r+0x6e0>
  801598:	dc800e17 	ldw	r18,56(sp)
  80159c:	dc400d17 	ldw	r17,52(sp)
  8015a0:	dcc01904 	addi	r19,sp,100
  8015a4:	003e6a06 	br	800f50 <___vfprintf_internal_r+0x7b4>
  8015a8:	d9014f17 	ldw	r4,1340(sp)
  8015ac:	b00b883a 	mov	r5,r22
  8015b0:	d9800c04 	addi	r6,sp,48
  8015b4:	d9c15115 	stw	r7,1348(sp)
  8015b8:	08007440 	call	800744 <__sprint_r>
  8015bc:	d9c15117 	ldw	r7,1348(sp)
  8015c0:	103e2e1e 	bne	r2,zero,800e7c <___vfprintf_internal_r+0x6e0>
  8015c4:	dc800e17 	ldw	r18,56(sp)
  8015c8:	dc400d17 	ldw	r17,52(sp)
  8015cc:	dd401904 	addi	r21,sp,100
  8015d0:	003dba06 	br	800cbc <___vfprintf_internal_r+0x520>
  8015d4:	d9014f17 	ldw	r4,1340(sp)
  8015d8:	b00b883a 	mov	r5,r22
  8015dc:	d9800c04 	addi	r6,sp,48
  8015e0:	08007440 	call	800744 <__sprint_r>
  8015e4:	103e251e 	bne	r2,zero,800e7c <___vfprintf_internal_r+0x6e0>
  8015e8:	dc800e17 	ldw	r18,56(sp)
  8015ec:	dc400d17 	ldw	r17,52(sp)
  8015f0:	dcc01904 	addi	r19,sp,100
  8015f4:	003e4206 	br	800f00 <___vfprintf_internal_r+0x764>
  8015f8:	d9014f17 	ldw	r4,1340(sp)
  8015fc:	b00b883a 	mov	r5,r22
  801600:	d9800c04 	addi	r6,sp,48
  801604:	08007440 	call	800744 <__sprint_r>
  801608:	103e1c1e 	bne	r2,zero,800e7c <___vfprintf_internal_r+0x6e0>
  80160c:	dc800e17 	ldw	r18,56(sp)
  801610:	dc400d17 	ldw	r17,52(sp)
  801614:	d8c01904 	addi	r3,sp,100
  801618:	003e2e06 	br	800ed4 <___vfprintf_internal_r+0x738>
  80161c:	d9414c17 	ldw	r5,1328(sp)
  801620:	2880004c 	andi	r2,r5,1
  801624:	1005003a 	cmpeq	r2,r2,zero
  801628:	103dda1e 	bne	r2,zero,800d94 <___vfprintf_internal_r+0x5f8>
  80162c:	003e9f06 	br	8010ac <___vfprintf_internal_r+0x910>
  801630:	d8c14117 	ldw	r3,1284(sp)
  801634:	9125883a 	add	r18,r18,r4
  801638:	8c400044 	addi	r17,r17,1
  80163c:	008001c4 	movi	r2,7
  801640:	a8c00015 	stw	r3,0(r21)
  801644:	a9000115 	stw	r4,4(r21)
  801648:	dc800e15 	stw	r18,56(sp)
  80164c:	dc400d15 	stw	r17,52(sp)
  801650:	14426c16 	blt	r2,r17,802004 <___vfprintf_internal_r+0x1868>
  801654:	a8c00204 	addi	r3,r21,8
  801658:	d9414917 	ldw	r5,1316(sp)
  80165c:	00800044 	movi	r2,1
  801660:	94800044 	addi	r18,r18,1
  801664:	8c400044 	addi	r17,r17,1
  801668:	18800115 	stw	r2,4(r3)
  80166c:	008001c4 	movi	r2,7
  801670:	19400015 	stw	r5,0(r3)
  801674:	dc800e15 	stw	r18,56(sp)
  801678:	dc400d15 	stw	r17,52(sp)
  80167c:	2021883a 	mov	r16,r4
  801680:	14425616 	blt	r2,r17,801fdc <___vfprintf_internal_r+0x1840>
  801684:	19400204 	addi	r5,r3,8
  801688:	d9814717 	ldw	r6,1308(sp)
  80168c:	8c400044 	addi	r17,r17,1
  801690:	dc400d15 	stw	r17,52(sp)
  801694:	3107c83a 	sub	r3,r6,r4
  801698:	d9014117 	ldw	r4,1284(sp)
  80169c:	90e5883a 	add	r18,r18,r3
  8016a0:	28c00115 	stw	r3,4(r5)
  8016a4:	8105883a 	add	r2,r16,r4
  8016a8:	28800015 	stw	r2,0(r5)
  8016ac:	008001c4 	movi	r2,7
  8016b0:	dc800e15 	stw	r18,56(sp)
  8016b4:	147f1d16 	blt	r2,r17,80132c <___vfprintf_internal_r+0xb90>
  8016b8:	28c00204 	addi	r3,r5,8
  8016bc:	003db506 	br	800d94 <___vfprintf_internal_r+0x5f8>
  8016c0:	3c000017 	ldw	r16,0(r7)
  8016c4:	3c400117 	ldw	r17,4(r7)
  8016c8:	39800204 	addi	r6,r7,8
  8016cc:	01000044 	movi	r4,1
  8016d0:	d9814015 	stw	r6,1280(sp)
  8016d4:	d8000405 	stb	zero,16(sp)
  8016d8:	003ebe06 	br	8011d4 <___vfprintf_internal_r+0xa38>
  8016dc:	3c000017 	ldw	r16,0(r7)
  8016e0:	3c400117 	ldw	r17,4(r7)
  8016e4:	38800204 	addi	r2,r7,8
  8016e8:	d8814015 	stw	r2,1280(sp)
  8016ec:	003eb706 	br	8011cc <___vfprintf_internal_r+0xa30>
  8016f0:	3c000017 	ldw	r16,0(r7)
  8016f4:	3c400117 	ldw	r17,4(r7)
  8016f8:	39000204 	addi	r4,r7,8
  8016fc:	d9014015 	stw	r4,1280(sp)
  801700:	0009883a 	mov	r4,zero
  801704:	d8000405 	stb	zero,16(sp)
  801708:	003eb206 	br	8011d4 <___vfprintf_internal_r+0xa38>
  80170c:	38c00017 	ldw	r3,0(r7)
  801710:	39c00104 	addi	r7,r7,4
  801714:	d8c14a15 	stw	r3,1320(sp)
  801718:	1800d70e 	bge	r3,zero,801a78 <___vfprintf_internal_r+0x12dc>
  80171c:	00c7c83a 	sub	r3,zero,r3
  801720:	d8c14a15 	stw	r3,1320(sp)
  801724:	d9014c17 	ldw	r4,1328(sp)
  801728:	b8c00007 	ldb	r3,0(r23)
  80172c:	21000114 	ori	r4,r4,4
  801730:	d9014c15 	stw	r4,1328(sp)
  801734:	003c9806 	br	800998 <___vfprintf_internal_r+0x1fc>
  801738:	d9814c17 	ldw	r6,1328(sp)
  80173c:	3080080c 	andi	r2,r6,32
  801740:	1001f626 	beq	r2,zero,801f1c <___vfprintf_internal_r+0x1780>
  801744:	d9014b17 	ldw	r4,1324(sp)
  801748:	38800017 	ldw	r2,0(r7)
  80174c:	39c00104 	addi	r7,r7,4
  801750:	d9c14015 	stw	r7,1280(sp)
  801754:	2007d7fa 	srai	r3,r4,31
  801758:	d9c14017 	ldw	r7,1280(sp)
  80175c:	11000015 	stw	r4,0(r2)
  801760:	10c00115 	stw	r3,4(r2)
  801764:	003c6906 	br	80090c <___vfprintf_internal_r+0x170>
  801768:	b8c00007 	ldb	r3,0(r23)
  80176c:	00801b04 	movi	r2,108
  801770:	18825526 	beq	r3,r2,8020c8 <___vfprintf_internal_r+0x192c>
  801774:	d9414c17 	ldw	r5,1328(sp)
  801778:	29400414 	ori	r5,r5,16
  80177c:	d9414c15 	stw	r5,1328(sp)
  801780:	003c8506 	br	800998 <___vfprintf_internal_r+0x1fc>
  801784:	d9814c17 	ldw	r6,1328(sp)
  801788:	b8c00007 	ldb	r3,0(r23)
  80178c:	31800814 	ori	r6,r6,32
  801790:	d9814c15 	stw	r6,1328(sp)
  801794:	003c8006 	br	800998 <___vfprintf_internal_r+0x1fc>
  801798:	d8814c17 	ldw	r2,1328(sp)
  80179c:	3c000017 	ldw	r16,0(r7)
  8017a0:	00c01e04 	movi	r3,120
  8017a4:	10800094 	ori	r2,r2,2
  8017a8:	d8814c15 	stw	r2,1328(sp)
  8017ac:	39c00104 	addi	r7,r7,4
  8017b0:	01402074 	movhi	r5,129
  8017b4:	295b4a04 	addi	r5,r5,27944
  8017b8:	00800c04 	movi	r2,48
  8017bc:	0023883a 	mov	r17,zero
  8017c0:	01000084 	movi	r4,2
  8017c4:	d9c14015 	stw	r7,1280(sp)
  8017c8:	d8c14d15 	stw	r3,1332(sp)
  8017cc:	d9414415 	stw	r5,1296(sp)
  8017d0:	d8800445 	stb	r2,17(sp)
  8017d4:	d8c00485 	stb	r3,18(sp)
  8017d8:	d8000405 	stb	zero,16(sp)
  8017dc:	003e7d06 	br	8011d4 <___vfprintf_internal_r+0xa38>
  8017e0:	d8814c17 	ldw	r2,1328(sp)
  8017e4:	b8c00007 	ldb	r3,0(r23)
  8017e8:	10801014 	ori	r2,r2,64
  8017ec:	d8814c15 	stw	r2,1328(sp)
  8017f0:	003c6906 	br	800998 <___vfprintf_internal_r+0x1fc>
  8017f4:	d9414c17 	ldw	r5,1328(sp)
  8017f8:	2880020c 	andi	r2,r5,8
  8017fc:	1001e526 	beq	r2,zero,801f94 <___vfprintf_internal_r+0x17f8>
  801800:	39800017 	ldw	r6,0(r7)
  801804:	38800204 	addi	r2,r7,8
  801808:	d8814015 	stw	r2,1280(sp)
  80180c:	d9814215 	stw	r6,1288(sp)
  801810:	39c00117 	ldw	r7,4(r7)
  801814:	d9c14315 	stw	r7,1292(sp)
  801818:	d9014217 	ldw	r4,1288(sp)
  80181c:	d9414317 	ldw	r5,1292(sp)
  801820:	080724c0 	call	80724c <__isinfd>
  801824:	10021d26 	beq	r2,zero,80209c <___vfprintf_internal_r+0x1900>
  801828:	d9014217 	ldw	r4,1288(sp)
  80182c:	d9414317 	ldw	r5,1292(sp)
  801830:	000d883a 	mov	r6,zero
  801834:	000f883a 	mov	r7,zero
  801838:	08093e80 	call	8093e8 <__ltdf2>
  80183c:	1002d016 	blt	r2,zero,802380 <___vfprintf_internal_r+0x1be4>
  801840:	d9414d17 	ldw	r5,1332(sp)
  801844:	008011c4 	movi	r2,71
  801848:	11421016 	blt	r2,r5,80208c <___vfprintf_internal_r+0x18f0>
  80184c:	01802074 	movhi	r6,129
  801850:	319b4f04 	addi	r6,r6,27964
  801854:	d9814115 	stw	r6,1284(sp)
  801858:	d9014c17 	ldw	r4,1328(sp)
  80185c:	00c000c4 	movi	r3,3
  801860:	00bfdfc4 	movi	r2,-129
  801864:	2088703a 	and	r4,r4,r2
  801868:	180f883a 	mov	r7,r3
  80186c:	d8c14515 	stw	r3,1300(sp)
  801870:	d9014c15 	stw	r4,1328(sp)
  801874:	d8014615 	stw	zero,1304(sp)
  801878:	003e6a06 	br	801224 <___vfprintf_internal_r+0xa88>
  80187c:	38800017 	ldw	r2,0(r7)
  801880:	00c00044 	movi	r3,1
  801884:	39c00104 	addi	r7,r7,4
  801888:	d9c14015 	stw	r7,1280(sp)
  80188c:	d9000f04 	addi	r4,sp,60
  801890:	180f883a 	mov	r7,r3
  801894:	d8c14515 	stw	r3,1300(sp)
  801898:	d9014115 	stw	r4,1284(sp)
  80189c:	d8800f05 	stb	r2,60(sp)
  8018a0:	d8000405 	stb	zero,16(sp)
  8018a4:	003cac06 	br	800b58 <___vfprintf_internal_r+0x3bc>
  8018a8:	01402074 	movhi	r5,129
  8018ac:	295b5504 	addi	r5,r5,27988
  8018b0:	d9414415 	stw	r5,1296(sp)
  8018b4:	d9814c17 	ldw	r6,1328(sp)
  8018b8:	3080080c 	andi	r2,r6,32
  8018bc:	1000ff26 	beq	r2,zero,801cbc <___vfprintf_internal_r+0x1520>
  8018c0:	3c000017 	ldw	r16,0(r7)
  8018c4:	3c400117 	ldw	r17,4(r7)
  8018c8:	38800204 	addi	r2,r7,8
  8018cc:	d8814015 	stw	r2,1280(sp)
  8018d0:	d9414c17 	ldw	r5,1328(sp)
  8018d4:	2880004c 	andi	r2,r5,1
  8018d8:	1005003a 	cmpeq	r2,r2,zero
  8018dc:	1000b91e 	bne	r2,zero,801bc4 <___vfprintf_internal_r+0x1428>
  8018e0:	8444b03a 	or	r2,r16,r17
  8018e4:	1000b726 	beq	r2,zero,801bc4 <___vfprintf_internal_r+0x1428>
  8018e8:	d9814d17 	ldw	r6,1332(sp)
  8018ec:	29400094 	ori	r5,r5,2
  8018f0:	00800c04 	movi	r2,48
  8018f4:	01000084 	movi	r4,2
  8018f8:	d9414c15 	stw	r5,1328(sp)
  8018fc:	d8800445 	stb	r2,17(sp)
  801900:	d9800485 	stb	r6,18(sp)
  801904:	d8000405 	stb	zero,16(sp)
  801908:	003e3206 	br	8011d4 <___vfprintf_internal_r+0xa38>
  80190c:	01802074 	movhi	r6,129
  801910:	319b4a04 	addi	r6,r6,27944
  801914:	d9814415 	stw	r6,1296(sp)
  801918:	003fe606 	br	8018b4 <___vfprintf_internal_r+0x1118>
  80191c:	00800ac4 	movi	r2,43
  801920:	d8800405 	stb	r2,16(sp)
  801924:	b8c00007 	ldb	r3,0(r23)
  801928:	003c1b06 	br	800998 <___vfprintf_internal_r+0x1fc>
  80192c:	d8814c17 	ldw	r2,1328(sp)
  801930:	b8c00007 	ldb	r3,0(r23)
  801934:	10800054 	ori	r2,r2,1
  801938:	d8814c15 	stw	r2,1328(sp)
  80193c:	003c1606 	br	800998 <___vfprintf_internal_r+0x1fc>
  801940:	d8800407 	ldb	r2,16(sp)
  801944:	10004c1e 	bne	r2,zero,801a78 <___vfprintf_internal_r+0x12dc>
  801948:	00800804 	movi	r2,32
  80194c:	d8800405 	stb	r2,16(sp)
  801950:	b8c00007 	ldb	r3,0(r23)
  801954:	003c1006 	br	800998 <___vfprintf_internal_r+0x1fc>
  801958:	d9814c17 	ldw	r6,1328(sp)
  80195c:	b8c00007 	ldb	r3,0(r23)
  801960:	31800214 	ori	r6,r6,8
  801964:	d9814c15 	stw	r6,1328(sp)
  801968:	003c0b06 	br	800998 <___vfprintf_internal_r+0x1fc>
  80196c:	0009883a 	mov	r4,zero
  801970:	04000244 	movi	r16,9
  801974:	01400284 	movi	r5,10
  801978:	d9c15115 	stw	r7,1348(sp)
  80197c:	08099200 	call	809920 <__mulsi3>
  801980:	b9000007 	ldb	r4,0(r23)
  801984:	d8c14d17 	ldw	r3,1332(sp)
  801988:	bdc00044 	addi	r23,r23,1
  80198c:	d9014d15 	stw	r4,1332(sp)
  801990:	d9414d17 	ldw	r5,1332(sp)
  801994:	1885883a 	add	r2,r3,r2
  801998:	113ff404 	addi	r4,r2,-48
  80199c:	28bff404 	addi	r2,r5,-48
  8019a0:	d9c15117 	ldw	r7,1348(sp)
  8019a4:	80bff32e 	bgeu	r16,r2,801974 <___vfprintf_internal_r+0x11d8>
  8019a8:	d9014a15 	stw	r4,1320(sp)
  8019ac:	003bfc06 	br	8009a0 <___vfprintf_internal_r+0x204>
  8019b0:	d8814c17 	ldw	r2,1328(sp)
  8019b4:	b8c00007 	ldb	r3,0(r23)
  8019b8:	10802014 	ori	r2,r2,128
  8019bc:	d8814c15 	stw	r2,1328(sp)
  8019c0:	003bf506 	br	800998 <___vfprintf_internal_r+0x1fc>
  8019c4:	b8c00007 	ldb	r3,0(r23)
  8019c8:	00800a84 	movi	r2,42
  8019cc:	bdc00044 	addi	r23,r23,1
  8019d0:	18831826 	beq	r3,r2,802634 <___vfprintf_internal_r+0x1e98>
  8019d4:	d8c14d15 	stw	r3,1332(sp)
  8019d8:	18bff404 	addi	r2,r3,-48
  8019dc:	00c00244 	movi	r3,9
  8019e0:	18827b36 	bltu	r3,r2,8023d0 <___vfprintf_internal_r+0x1c34>
  8019e4:	1821883a 	mov	r16,r3
  8019e8:	0009883a 	mov	r4,zero
  8019ec:	01400284 	movi	r5,10
  8019f0:	d9c15115 	stw	r7,1348(sp)
  8019f4:	08099200 	call	809920 <__mulsi3>
  8019f8:	d9414d17 	ldw	r5,1332(sp)
  8019fc:	b9800007 	ldb	r6,0(r23)
  801a00:	d9c15117 	ldw	r7,1348(sp)
  801a04:	1145883a 	add	r2,r2,r5
  801a08:	113ff404 	addi	r4,r2,-48
  801a0c:	30bff404 	addi	r2,r6,-48
  801a10:	d9814d15 	stw	r6,1332(sp)
  801a14:	bdc00044 	addi	r23,r23,1
  801a18:	80bff42e 	bgeu	r16,r2,8019ec <___vfprintf_internal_r+0x1250>
  801a1c:	2027883a 	mov	r19,r4
  801a20:	203bdf0e 	bge	r4,zero,8009a0 <___vfprintf_internal_r+0x204>
  801a24:	04ffffc4 	movi	r19,-1
  801a28:	003bdd06 	br	8009a0 <___vfprintf_internal_r+0x204>
  801a2c:	d8000405 	stb	zero,16(sp)
  801a30:	39800017 	ldw	r6,0(r7)
  801a34:	39c00104 	addi	r7,r7,4
  801a38:	d9c14015 	stw	r7,1280(sp)
  801a3c:	d9814115 	stw	r6,1284(sp)
  801a40:	3001c926 	beq	r6,zero,802168 <___vfprintf_internal_r+0x19cc>
  801a44:	98000e16 	blt	r19,zero,801a80 <___vfprintf_internal_r+0x12e4>
  801a48:	d9014117 	ldw	r4,1284(sp)
  801a4c:	000b883a 	mov	r5,zero
  801a50:	980d883a 	mov	r6,r19
  801a54:	08058d00 	call	8058d0 <memchr>
  801a58:	10025926 	beq	r2,zero,8023c0 <___vfprintf_internal_r+0x1c24>
  801a5c:	d8c14117 	ldw	r3,1284(sp)
  801a60:	10cfc83a 	sub	r7,r2,r3
  801a64:	99c19e16 	blt	r19,r7,8020e0 <___vfprintf_internal_r+0x1944>
  801a68:	d9c14515 	stw	r7,1300(sp)
  801a6c:	38000916 	blt	r7,zero,801a94 <___vfprintf_internal_r+0x12f8>
  801a70:	d8014615 	stw	zero,1304(sp)
  801a74:	003deb06 	br	801224 <___vfprintf_internal_r+0xa88>
  801a78:	b8c00007 	ldb	r3,0(r23)
  801a7c:	003bc606 	br	800998 <___vfprintf_internal_r+0x1fc>
  801a80:	d9014117 	ldw	r4,1284(sp)
  801a84:	08006d00 	call	8006d0 <strlen>
  801a88:	d8814515 	stw	r2,1300(sp)
  801a8c:	100f883a 	mov	r7,r2
  801a90:	103ff70e 	bge	r2,zero,801a70 <___vfprintf_internal_r+0x12d4>
  801a94:	d8014515 	stw	zero,1300(sp)
  801a98:	d8014615 	stw	zero,1304(sp)
  801a9c:	003de106 	br	801224 <___vfprintf_internal_r+0xa88>
  801aa0:	20c03fcc 	andi	r3,r4,255
  801aa4:	00800044 	movi	r2,1
  801aa8:	18802d26 	beq	r3,r2,801b60 <___vfprintf_internal_r+0x13c4>
  801aac:	18800e36 	bltu	r3,r2,801ae8 <___vfprintf_internal_r+0x134c>
  801ab0:	00800084 	movi	r2,2
  801ab4:	1880fa26 	beq	r3,r2,801ea0 <___vfprintf_internal_r+0x1704>
  801ab8:	01002074 	movhi	r4,129
  801abc:	211b5a04 	addi	r4,r4,28008
  801ac0:	08006d00 	call	8006d0 <strlen>
  801ac4:	100f883a 	mov	r7,r2
  801ac8:	dcc14515 	stw	r19,1300(sp)
  801acc:	9880010e 	bge	r19,r2,801ad4 <___vfprintf_internal_r+0x1338>
  801ad0:	d8814515 	stw	r2,1300(sp)
  801ad4:	00802074 	movhi	r2,129
  801ad8:	109b5a04 	addi	r2,r2,28008
  801adc:	dcc14615 	stw	r19,1304(sp)
  801ae0:	d8814115 	stw	r2,1284(sp)
  801ae4:	003dcf06 	br	801224 <___vfprintf_internal_r+0xa88>
  801ae8:	d9401904 	addi	r5,sp,100
  801aec:	dd000f04 	addi	r20,sp,60
  801af0:	d9414115 	stw	r5,1284(sp)
  801af4:	880a977a 	slli	r5,r17,29
  801af8:	d9814117 	ldw	r6,1284(sp)
  801afc:	8004d0fa 	srli	r2,r16,3
  801b00:	8806d0fa 	srli	r3,r17,3
  801b04:	810001cc 	andi	r4,r16,7
  801b08:	2884b03a 	or	r2,r5,r2
  801b0c:	31bfffc4 	addi	r6,r6,-1
  801b10:	21000c04 	addi	r4,r4,48
  801b14:	d9814115 	stw	r6,1284(sp)
  801b18:	10cab03a 	or	r5,r2,r3
  801b1c:	31000005 	stb	r4,0(r6)
  801b20:	1021883a 	mov	r16,r2
  801b24:	1823883a 	mov	r17,r3
  801b28:	283ff21e 	bne	r5,zero,801af4 <___vfprintf_internal_r+0x1358>
  801b2c:	d8c14c17 	ldw	r3,1328(sp)
  801b30:	1880004c 	andi	r2,r3,1
  801b34:	1005003a 	cmpeq	r2,r2,zero
  801b38:	103db31e 	bne	r2,zero,801208 <___vfprintf_internal_r+0xa6c>
  801b3c:	20803fcc 	andi	r2,r4,255
  801b40:	1080201c 	xori	r2,r2,128
  801b44:	10bfe004 	addi	r2,r2,-128
  801b48:	00c00c04 	movi	r3,48
  801b4c:	10fdae26 	beq	r2,r3,801208 <___vfprintf_internal_r+0xa6c>
  801b50:	31bfffc4 	addi	r6,r6,-1
  801b54:	d9814115 	stw	r6,1284(sp)
  801b58:	30c00005 	stb	r3,0(r6)
  801b5c:	003daa06 	br	801208 <___vfprintf_internal_r+0xa6c>
  801b60:	88800068 	cmpgeui	r2,r17,1
  801b64:	10002c1e 	bne	r2,zero,801c18 <___vfprintf_internal_r+0x147c>
  801b68:	8800021e 	bne	r17,zero,801b74 <___vfprintf_internal_r+0x13d8>
  801b6c:	00800244 	movi	r2,9
  801b70:	14002936 	bltu	r2,r16,801c18 <___vfprintf_internal_r+0x147c>
  801b74:	d90018c4 	addi	r4,sp,99
  801b78:	dd000f04 	addi	r20,sp,60
  801b7c:	d9014115 	stw	r4,1284(sp)
  801b80:	d9014117 	ldw	r4,1284(sp)
  801b84:	80800c04 	addi	r2,r16,48
  801b88:	20800005 	stb	r2,0(r4)
  801b8c:	003d9e06 	br	801208 <___vfprintf_internal_r+0xa6c>
  801b90:	dc400d17 	ldw	r17,52(sp)
  801b94:	07002074 	movhi	fp,129
  801b98:	e71b6184 	addi	fp,fp,28038
  801b9c:	9425883a 	add	r18,r18,r16
  801ba0:	8c400044 	addi	r17,r17,1
  801ba4:	008001c4 	movi	r2,7
  801ba8:	1f000015 	stw	fp,0(r3)
  801bac:	1c000115 	stw	r16,4(r3)
  801bb0:	dc800e15 	stw	r18,56(sp)
  801bb4:	dc400d15 	stw	r17,52(sp)
  801bb8:	147ddc16 	blt	r2,r17,80132c <___vfprintf_internal_r+0xb90>
  801bbc:	18c00204 	addi	r3,r3,8
  801bc0:	003c7406 	br	800d94 <___vfprintf_internal_r+0x5f8>
  801bc4:	01000084 	movi	r4,2
  801bc8:	d8000405 	stb	zero,16(sp)
  801bcc:	003d8106 	br	8011d4 <___vfprintf_internal_r+0xa38>
  801bd0:	d9814c17 	ldw	r6,1328(sp)
  801bd4:	30c4703a 	and	r2,r6,r3
  801bd8:	1005003a 	cmpeq	r2,r2,zero
  801bdc:	103cb326 	beq	r2,zero,800eac <___vfprintf_internal_r+0x710>
  801be0:	d9014117 	ldw	r4,1284(sp)
  801be4:	94800044 	addi	r18,r18,1
  801be8:	8c400044 	addi	r17,r17,1
  801bec:	008001c4 	movi	r2,7
  801bf0:	a9000015 	stw	r4,0(r21)
  801bf4:	a8c00115 	stw	r3,4(r21)
  801bf8:	dc800e15 	stw	r18,56(sp)
  801bfc:	dc400d15 	stw	r17,52(sp)
  801c00:	147e6016 	blt	r2,r17,801584 <___vfprintf_internal_r+0xde8>
  801c04:	acc00204 	addi	r19,r21,8
  801c08:	003cd106 	br	800f50 <___vfprintf_internal_r+0x7b4>
  801c0c:	07002074 	movhi	fp,129
  801c10:	e71b6184 	addi	fp,fp,28038
  801c14:	003c4906 	br	800d3c <___vfprintf_internal_r+0x5a0>
  801c18:	dd000f04 	addi	r20,sp,60
  801c1c:	dc801904 	addi	r18,sp,100
  801c20:	8009883a 	mov	r4,r16
  801c24:	880b883a 	mov	r5,r17
  801c28:	01800284 	movi	r6,10
  801c2c:	000f883a 	mov	r7,zero
  801c30:	08080480 	call	808048 <__umoddi3>
  801c34:	12000c04 	addi	r8,r2,48
  801c38:	94bfffc4 	addi	r18,r18,-1
  801c3c:	8009883a 	mov	r4,r16
  801c40:	880b883a 	mov	r5,r17
  801c44:	01800284 	movi	r6,10
  801c48:	000f883a 	mov	r7,zero
  801c4c:	92000005 	stb	r8,0(r18)
  801c50:	08079dc0 	call	8079dc <__udivdi3>
  801c54:	1009883a 	mov	r4,r2
  801c58:	1021883a 	mov	r16,r2
  801c5c:	18800068 	cmpgeui	r2,r3,1
  801c60:	1823883a 	mov	r17,r3
  801c64:	103fee1e 	bne	r2,zero,801c20 <___vfprintf_internal_r+0x1484>
  801c68:	1800021e 	bne	r3,zero,801c74 <___vfprintf_internal_r+0x14d8>
  801c6c:	00800244 	movi	r2,9
  801c70:	113feb36 	bltu	r2,r4,801c20 <___vfprintf_internal_r+0x1484>
  801c74:	94bfffc4 	addi	r18,r18,-1
  801c78:	dc814115 	stw	r18,1284(sp)
  801c7c:	003fc006 	br	801b80 <___vfprintf_internal_r+0x13e4>
  801c80:	d9014c17 	ldw	r4,1328(sp)
  801c84:	2080004c 	andi	r2,r4,1
  801c88:	10009a1e 	bne	r2,zero,801ef4 <___vfprintf_internal_r+0x1758>
  801c8c:	d9401904 	addi	r5,sp,100
  801c90:	dd000f04 	addi	r20,sp,60
  801c94:	d9414115 	stw	r5,1284(sp)
  801c98:	003d5b06 	br	801208 <___vfprintf_internal_r+0xa6c>
  801c9c:	d9014f17 	ldw	r4,1340(sp)
  801ca0:	b00b883a 	mov	r5,r22
  801ca4:	d9800c04 	addi	r6,sp,48
  801ca8:	08007440 	call	800744 <__sprint_r>
  801cac:	103c731e 	bne	r2,zero,800e7c <___vfprintf_internal_r+0x6e0>
  801cb0:	dc800e17 	ldw	r18,56(sp)
  801cb4:	d8c01904 	addi	r3,sp,100
  801cb8:	003cf906 	br	8010a0 <___vfprintf_internal_r+0x904>
  801cbc:	d8c14c17 	ldw	r3,1328(sp)
  801cc0:	1880040c 	andi	r2,r3,16
  801cc4:	1000711e 	bne	r2,zero,801e8c <___vfprintf_internal_r+0x16f0>
  801cc8:	d9014c17 	ldw	r4,1328(sp)
  801ccc:	2080100c 	andi	r2,r4,64
  801cd0:	10006e26 	beq	r2,zero,801e8c <___vfprintf_internal_r+0x16f0>
  801cd4:	3c00000b 	ldhu	r16,0(r7)
  801cd8:	0023883a 	mov	r17,zero
  801cdc:	39c00104 	addi	r7,r7,4
  801ce0:	d9c14015 	stw	r7,1280(sp)
  801ce4:	003efa06 	br	8018d0 <___vfprintf_internal_r+0x1134>
  801ce8:	dc400d17 	ldw	r17,52(sp)
  801cec:	07002074 	movhi	fp,129
  801cf0:	e71b6184 	addi	fp,fp,28038
  801cf4:	9425883a 	add	r18,r18,r16
  801cf8:	8c400044 	addi	r17,r17,1
  801cfc:	008001c4 	movi	r2,7
  801d00:	1f000015 	stw	fp,0(r3)
  801d04:	1c000115 	stw	r16,4(r3)
  801d08:	dc800e15 	stw	r18,56(sp)
  801d0c:	dc400d15 	stw	r17,52(sp)
  801d10:	147d7016 	blt	r2,r17,8012d4 <___vfprintf_internal_r+0xb38>
  801d14:	18c00204 	addi	r3,r3,8
  801d18:	003d7506 	br	8012f0 <___vfprintf_internal_r+0xb54>
  801d1c:	dc800e17 	ldw	r18,56(sp)
  801d20:	dc400d17 	ldw	r17,52(sp)
  801d24:	07002074 	movhi	fp,129
  801d28:	e71b6584 	addi	fp,fp,28054
  801d2c:	003bba06 	br	800c18 <___vfprintf_internal_r+0x47c>
  801d30:	d9014f17 	ldw	r4,1340(sp)
  801d34:	b00b883a 	mov	r5,r22
  801d38:	d9800c04 	addi	r6,sp,48
  801d3c:	08007440 	call	800744 <__sprint_r>
  801d40:	103c4e1e 	bne	r2,zero,800e7c <___vfprintf_internal_r+0x6e0>
  801d44:	dc800e17 	ldw	r18,56(sp)
  801d48:	d8c01904 	addi	r3,sp,100
  801d4c:	003ce306 	br	8010dc <___vfprintf_internal_r+0x940>
  801d50:	3c000017 	ldw	r16,0(r7)
  801d54:	0009883a 	mov	r4,zero
  801d58:	39c00104 	addi	r7,r7,4
  801d5c:	0023883a 	mov	r17,zero
  801d60:	d9c14015 	stw	r7,1280(sp)
  801d64:	d8000405 	stb	zero,16(sp)
  801d68:	003d1a06 	br	8011d4 <___vfprintf_internal_r+0xa38>
  801d6c:	38800017 	ldw	r2,0(r7)
  801d70:	39c00104 	addi	r7,r7,4
  801d74:	d9c14015 	stw	r7,1280(sp)
  801d78:	1023d7fa 	srai	r17,r2,31
  801d7c:	1021883a 	mov	r16,r2
  801d80:	003d1206 	br	8011cc <___vfprintf_internal_r+0xa30>
  801d84:	3c000017 	ldw	r16,0(r7)
  801d88:	01000044 	movi	r4,1
  801d8c:	39c00104 	addi	r7,r7,4
  801d90:	0023883a 	mov	r17,zero
  801d94:	d9c14015 	stw	r7,1280(sp)
  801d98:	d8000405 	stb	zero,16(sp)
  801d9c:	003d0d06 	br	8011d4 <___vfprintf_internal_r+0xa38>
  801da0:	00802074 	movhi	r2,129
  801da4:	109b6104 	addi	r2,r2,28036
  801da8:	94800044 	addi	r18,r18,1
  801dac:	8c400044 	addi	r17,r17,1
  801db0:	a8800015 	stw	r2,0(r21)
  801db4:	00c00044 	movi	r3,1
  801db8:	008001c4 	movi	r2,7
  801dbc:	a8c00115 	stw	r3,4(r21)
  801dc0:	dc800e15 	stw	r18,56(sp)
  801dc4:	dc400d15 	stw	r17,52(sp)
  801dc8:	1440ca16 	blt	r2,r17,8020f4 <___vfprintf_internal_r+0x1958>
  801dcc:	a8c00204 	addi	r3,r21,8
  801dd0:	2000061e 	bne	r4,zero,801dec <___vfprintf_internal_r+0x1650>
  801dd4:	d9414717 	ldw	r5,1308(sp)
  801dd8:	2800041e 	bne	r5,zero,801dec <___vfprintf_internal_r+0x1650>
  801ddc:	d9814c17 	ldw	r6,1328(sp)
  801de0:	3080004c 	andi	r2,r6,1
  801de4:	1005003a 	cmpeq	r2,r2,zero
  801de8:	103bea1e 	bne	r2,zero,800d94 <___vfprintf_internal_r+0x5f8>
  801dec:	00800044 	movi	r2,1
  801df0:	dc400d17 	ldw	r17,52(sp)
  801df4:	18800115 	stw	r2,4(r3)
  801df8:	d8814917 	ldw	r2,1316(sp)
  801dfc:	94800044 	addi	r18,r18,1
  801e00:	8c400044 	addi	r17,r17,1
  801e04:	18800015 	stw	r2,0(r3)
  801e08:	008001c4 	movi	r2,7
  801e0c:	dc800e15 	stw	r18,56(sp)
  801e10:	dc400d15 	stw	r17,52(sp)
  801e14:	1440ca16 	blt	r2,r17,802140 <___vfprintf_internal_r+0x19a4>
  801e18:	18c00204 	addi	r3,r3,8
  801e1c:	0121c83a 	sub	r16,zero,r4
  801e20:	0400500e 	bge	zero,r16,801f64 <___vfprintf_internal_r+0x17c8>
  801e24:	00800404 	movi	r2,16
  801e28:	1400800e 	bge	r2,r16,80202c <___vfprintf_internal_r+0x1890>
  801e2c:	1027883a 	mov	r19,r2
  801e30:	07002074 	movhi	fp,129
  801e34:	e71b6184 	addi	fp,fp,28038
  801e38:	050001c4 	movi	r20,7
  801e3c:	00000306 	br	801e4c <___vfprintf_internal_r+0x16b0>
  801e40:	18c00204 	addi	r3,r3,8
  801e44:	843ffc04 	addi	r16,r16,-16
  801e48:	9c007a0e 	bge	r19,r16,802034 <___vfprintf_internal_r+0x1898>
  801e4c:	94800404 	addi	r18,r18,16
  801e50:	8c400044 	addi	r17,r17,1
  801e54:	1f000015 	stw	fp,0(r3)
  801e58:	1cc00115 	stw	r19,4(r3)
  801e5c:	dc800e15 	stw	r18,56(sp)
  801e60:	dc400d15 	stw	r17,52(sp)
  801e64:	a47ff60e 	bge	r20,r17,801e40 <___vfprintf_internal_r+0x16a4>
  801e68:	d9014f17 	ldw	r4,1340(sp)
  801e6c:	b00b883a 	mov	r5,r22
  801e70:	d9800c04 	addi	r6,sp,48
  801e74:	08007440 	call	800744 <__sprint_r>
  801e78:	103c001e 	bne	r2,zero,800e7c <___vfprintf_internal_r+0x6e0>
  801e7c:	dc800e17 	ldw	r18,56(sp)
  801e80:	dc400d17 	ldw	r17,52(sp)
  801e84:	d8c01904 	addi	r3,sp,100
  801e88:	003fee06 	br	801e44 <___vfprintf_internal_r+0x16a8>
  801e8c:	3c000017 	ldw	r16,0(r7)
  801e90:	0023883a 	mov	r17,zero
  801e94:	39c00104 	addi	r7,r7,4
  801e98:	d9c14015 	stw	r7,1280(sp)
  801e9c:	003e8c06 	br	8018d0 <___vfprintf_internal_r+0x1134>
  801ea0:	d9401904 	addi	r5,sp,100
  801ea4:	dd000f04 	addi	r20,sp,60
  801ea8:	d9414115 	stw	r5,1284(sp)
  801eac:	d9814417 	ldw	r6,1296(sp)
  801eb0:	880a973a 	slli	r5,r17,28
  801eb4:	8004d13a 	srli	r2,r16,4
  801eb8:	810003cc 	andi	r4,r16,15
  801ebc:	3109883a 	add	r4,r6,r4
  801ec0:	2884b03a 	or	r2,r5,r2
  801ec4:	21400003 	ldbu	r5,0(r4)
  801ec8:	d9014117 	ldw	r4,1284(sp)
  801ecc:	8806d13a 	srli	r3,r17,4
  801ed0:	1021883a 	mov	r16,r2
  801ed4:	213fffc4 	addi	r4,r4,-1
  801ed8:	d9014115 	stw	r4,1284(sp)
  801edc:	d9814117 	ldw	r6,1284(sp)
  801ee0:	10c8b03a 	or	r4,r2,r3
  801ee4:	1823883a 	mov	r17,r3
  801ee8:	31400005 	stb	r5,0(r6)
  801eec:	203fef1e 	bne	r4,zero,801eac <___vfprintf_internal_r+0x1710>
  801ef0:	003cc506 	br	801208 <___vfprintf_internal_r+0xa6c>
  801ef4:	00800c04 	movi	r2,48
  801ef8:	d98018c4 	addi	r6,sp,99
  801efc:	dd000f04 	addi	r20,sp,60
  801f00:	d88018c5 	stb	r2,99(sp)
  801f04:	d9814115 	stw	r6,1284(sp)
  801f08:	003cbf06 	br	801208 <___vfprintf_internal_r+0xa6c>
  801f0c:	dc400d17 	ldw	r17,52(sp)
  801f10:	07002074 	movhi	fp,129
  801f14:	e71b6584 	addi	fp,fp,28054
  801f18:	003bc106 	br	800e20 <___vfprintf_internal_r+0x684>
  801f1c:	d9414c17 	ldw	r5,1328(sp)
  801f20:	2880040c 	andi	r2,r5,16
  801f24:	10007c26 	beq	r2,zero,802118 <___vfprintf_internal_r+0x197c>
  801f28:	38800017 	ldw	r2,0(r7)
  801f2c:	39c00104 	addi	r7,r7,4
  801f30:	d9c14015 	stw	r7,1280(sp)
  801f34:	d9814b17 	ldw	r6,1324(sp)
  801f38:	d9c14017 	ldw	r7,1280(sp)
  801f3c:	11800015 	stw	r6,0(r2)
  801f40:	003a7206 	br	80090c <___vfprintf_internal_r+0x170>
  801f44:	d9014f17 	ldw	r4,1340(sp)
  801f48:	b00b883a 	mov	r5,r22
  801f4c:	d9800c04 	addi	r6,sp,48
  801f50:	08007440 	call	800744 <__sprint_r>
  801f54:	103bc91e 	bne	r2,zero,800e7c <___vfprintf_internal_r+0x6e0>
  801f58:	dc800e17 	ldw	r18,56(sp)
  801f5c:	dc400d17 	ldw	r17,52(sp)
  801f60:	d8c01904 	addi	r3,sp,100
  801f64:	d9014717 	ldw	r4,1308(sp)
  801f68:	d9414117 	ldw	r5,1284(sp)
  801f6c:	8c400044 	addi	r17,r17,1
  801f70:	9125883a 	add	r18,r18,r4
  801f74:	008001c4 	movi	r2,7
  801f78:	19400015 	stw	r5,0(r3)
  801f7c:	19000115 	stw	r4,4(r3)
  801f80:	dc800e15 	stw	r18,56(sp)
  801f84:	dc400d15 	stw	r17,52(sp)
  801f88:	147ce816 	blt	r2,r17,80132c <___vfprintf_internal_r+0xb90>
  801f8c:	18c00204 	addi	r3,r3,8
  801f90:	003b8006 	br	800d94 <___vfprintf_internal_r+0x5f8>
  801f94:	38c00017 	ldw	r3,0(r7)
  801f98:	39000204 	addi	r4,r7,8
  801f9c:	d9014015 	stw	r4,1280(sp)
  801fa0:	d8c14215 	stw	r3,1288(sp)
  801fa4:	39c00117 	ldw	r7,4(r7)
  801fa8:	d9c14315 	stw	r7,1292(sp)
  801fac:	003e1a06 	br	801818 <___vfprintf_internal_r+0x107c>
  801fb0:	0005883a 	mov	r2,zero
  801fb4:	1409c83a 	sub	r4,r2,r16
  801fb8:	1105803a 	cmpltu	r2,r2,r4
  801fbc:	044bc83a 	sub	r5,zero,r17
  801fc0:	2885c83a 	sub	r2,r5,r2
  801fc4:	2021883a 	mov	r16,r4
  801fc8:	1023883a 	mov	r17,r2
  801fcc:	01000044 	movi	r4,1
  801fd0:	00800b44 	movi	r2,45
  801fd4:	d8800405 	stb	r2,16(sp)
  801fd8:	003c7e06 	br	8011d4 <___vfprintf_internal_r+0xa38>
  801fdc:	d9014f17 	ldw	r4,1340(sp)
  801fe0:	b00b883a 	mov	r5,r22
  801fe4:	d9800c04 	addi	r6,sp,48
  801fe8:	08007440 	call	800744 <__sprint_r>
  801fec:	103ba31e 	bne	r2,zero,800e7c <___vfprintf_internal_r+0x6e0>
  801ff0:	dc800e17 	ldw	r18,56(sp)
  801ff4:	dc400d17 	ldw	r17,52(sp)
  801ff8:	d9000517 	ldw	r4,20(sp)
  801ffc:	d9401904 	addi	r5,sp,100
  802000:	003da106 	br	801688 <___vfprintf_internal_r+0xeec>
  802004:	d9014f17 	ldw	r4,1340(sp)
  802008:	b00b883a 	mov	r5,r22
  80200c:	d9800c04 	addi	r6,sp,48
  802010:	08007440 	call	800744 <__sprint_r>
  802014:	103b991e 	bne	r2,zero,800e7c <___vfprintf_internal_r+0x6e0>
  802018:	dc800e17 	ldw	r18,56(sp)
  80201c:	dc400d17 	ldw	r17,52(sp)
  802020:	d9000517 	ldw	r4,20(sp)
  802024:	d8c01904 	addi	r3,sp,100
  802028:	003d8b06 	br	801658 <___vfprintf_internal_r+0xebc>
  80202c:	07002074 	movhi	fp,129
  802030:	e71b6184 	addi	fp,fp,28038
  802034:	9425883a 	add	r18,r18,r16
  802038:	8c400044 	addi	r17,r17,1
  80203c:	008001c4 	movi	r2,7
  802040:	1f000015 	stw	fp,0(r3)
  802044:	1c000115 	stw	r16,4(r3)
  802048:	dc800e15 	stw	r18,56(sp)
  80204c:	dc400d15 	stw	r17,52(sp)
  802050:	147fbc16 	blt	r2,r17,801f44 <___vfprintf_internal_r+0x17a8>
  802054:	18c00204 	addi	r3,r3,8
  802058:	003fc206 	br	801f64 <___vfprintf_internal_r+0x17c8>
  80205c:	d9014f17 	ldw	r4,1340(sp)
  802060:	b00b883a 	mov	r5,r22
  802064:	d9800c04 	addi	r6,sp,48
  802068:	08007440 	call	800744 <__sprint_r>
  80206c:	103b831e 	bne	r2,zero,800e7c <___vfprintf_internal_r+0x6e0>
  802070:	dc800e17 	ldw	r18,56(sp)
  802074:	d9000517 	ldw	r4,20(sp)
  802078:	d8c01904 	addi	r3,sp,100
  80207c:	003cfc06 	br	801470 <___vfprintf_internal_r+0xcd4>
  802080:	07002074 	movhi	fp,129
  802084:	e71b6184 	addi	fp,fp,28038
  802088:	003bde06 	br	801004 <___vfprintf_internal_r+0x868>
  80208c:	00802074 	movhi	r2,129
  802090:	109b5004 	addi	r2,r2,27968
  802094:	d8814115 	stw	r2,1284(sp)
  802098:	003def06 	br	801858 <___vfprintf_internal_r+0x10bc>
  80209c:	d9014217 	ldw	r4,1288(sp)
  8020a0:	d9414317 	ldw	r5,1292(sp)
  8020a4:	080728c0 	call	80728c <__isnand>
  8020a8:	10003926 	beq	r2,zero,802190 <___vfprintf_internal_r+0x19f4>
  8020ac:	d9414d17 	ldw	r5,1332(sp)
  8020b0:	008011c4 	movi	r2,71
  8020b4:	1140ce16 	blt	r2,r5,8023f0 <___vfprintf_internal_r+0x1c54>
  8020b8:	01802074 	movhi	r6,129
  8020bc:	319b5104 	addi	r6,r6,27972
  8020c0:	d9814115 	stw	r6,1284(sp)
  8020c4:	003de406 	br	801858 <___vfprintf_internal_r+0x10bc>
  8020c8:	d9014c17 	ldw	r4,1328(sp)
  8020cc:	bdc00044 	addi	r23,r23,1
  8020d0:	b8c00007 	ldb	r3,0(r23)
  8020d4:	21000814 	ori	r4,r4,32
  8020d8:	d9014c15 	stw	r4,1328(sp)
  8020dc:	003a2e06 	br	800998 <___vfprintf_internal_r+0x1fc>
  8020e0:	dcc14515 	stw	r19,1300(sp)
  8020e4:	98011016 	blt	r19,zero,802528 <___vfprintf_internal_r+0x1d8c>
  8020e8:	980f883a 	mov	r7,r19
  8020ec:	d8014615 	stw	zero,1304(sp)
  8020f0:	003c4c06 	br	801224 <___vfprintf_internal_r+0xa88>
  8020f4:	d9014f17 	ldw	r4,1340(sp)
  8020f8:	b00b883a 	mov	r5,r22
  8020fc:	d9800c04 	addi	r6,sp,48
  802100:	08007440 	call	800744 <__sprint_r>
  802104:	103b5d1e 	bne	r2,zero,800e7c <___vfprintf_internal_r+0x6e0>
  802108:	dc800e17 	ldw	r18,56(sp)
  80210c:	d9000517 	ldw	r4,20(sp)
  802110:	d8c01904 	addi	r3,sp,100
  802114:	003f2e06 	br	801dd0 <___vfprintf_internal_r+0x1634>
  802118:	d8c14c17 	ldw	r3,1328(sp)
  80211c:	1880100c 	andi	r2,r3,64
  802120:	1000a026 	beq	r2,zero,8023a4 <___vfprintf_internal_r+0x1c08>
  802124:	38800017 	ldw	r2,0(r7)
  802128:	39c00104 	addi	r7,r7,4
  80212c:	d9c14015 	stw	r7,1280(sp)
  802130:	d9014b17 	ldw	r4,1324(sp)
  802134:	d9c14017 	ldw	r7,1280(sp)
  802138:	1100000d 	sth	r4,0(r2)
  80213c:	0039f306 	br	80090c <___vfprintf_internal_r+0x170>
  802140:	d9014f17 	ldw	r4,1340(sp)
  802144:	b00b883a 	mov	r5,r22
  802148:	d9800c04 	addi	r6,sp,48
  80214c:	08007440 	call	800744 <__sprint_r>
  802150:	103b4a1e 	bne	r2,zero,800e7c <___vfprintf_internal_r+0x6e0>
  802154:	dc800e17 	ldw	r18,56(sp)
  802158:	dc400d17 	ldw	r17,52(sp)
  80215c:	d9000517 	ldw	r4,20(sp)
  802160:	d8c01904 	addi	r3,sp,100
  802164:	003f2d06 	br	801e1c <___vfprintf_internal_r+0x1680>
  802168:	00800184 	movi	r2,6
  80216c:	14c09a36 	bltu	r2,r19,8023d8 <___vfprintf_internal_r+0x1c3c>
  802170:	dcc14515 	stw	r19,1300(sp)
  802174:	9800010e 	bge	r19,zero,80217c <___vfprintf_internal_r+0x19e0>
  802178:	d8014515 	stw	zero,1300(sp)
  80217c:	00802074 	movhi	r2,129
  802180:	109b5304 	addi	r2,r2,27980
  802184:	980f883a 	mov	r7,r19
  802188:	d8814115 	stw	r2,1284(sp)
  80218c:	003a7206 	br	800b58 <___vfprintf_internal_r+0x3bc>
  802190:	00bfffc4 	movi	r2,-1
  802194:	9880e226 	beq	r19,r2,802520 <___vfprintf_internal_r+0x1d84>
  802198:	d9414d17 	ldw	r5,1332(sp)
  80219c:	008019c4 	movi	r2,103
  8021a0:	2880dc26 	beq	r5,r2,802514 <___vfprintf_internal_r+0x1d78>
  8021a4:	008011c4 	movi	r2,71
  8021a8:	2880da26 	beq	r5,r2,802514 <___vfprintf_internal_r+0x1d78>
  8021ac:	d9414c17 	ldw	r5,1328(sp)
  8021b0:	d9014317 	ldw	r4,1292(sp)
  8021b4:	d9814217 	ldw	r6,1288(sp)
  8021b8:	29404014 	ori	r5,r5,256
  8021bc:	d9414c15 	stw	r5,1328(sp)
  8021c0:	2000cc16 	blt	r4,zero,8024f4 <___vfprintf_internal_r+0x1d58>
  8021c4:	3021883a 	mov	r16,r6
  8021c8:	2023883a 	mov	r17,r4
  8021cc:	0039883a 	mov	fp,zero
  8021d0:	d9414d17 	ldw	r5,1332(sp)
  8021d4:	00801984 	movi	r2,102
  8021d8:	2880b726 	beq	r5,r2,8024b8 <___vfprintf_internal_r+0x1d1c>
  8021dc:	00801184 	movi	r2,70
  8021e0:	2880b526 	beq	r5,r2,8024b8 <___vfprintf_internal_r+0x1d1c>
  8021e4:	00801944 	movi	r2,101
  8021e8:	2880c826 	beq	r5,r2,80250c <___vfprintf_internal_r+0x1d70>
  8021ec:	00801144 	movi	r2,69
  8021f0:	2880c626 	beq	r5,r2,80250c <___vfprintf_internal_r+0x1d70>
  8021f4:	9829883a 	mov	r20,r19
  8021f8:	d9014f17 	ldw	r4,1340(sp)
  8021fc:	d8800504 	addi	r2,sp,20
  802200:	880d883a 	mov	r6,r17
  802204:	d8800115 	stw	r2,4(sp)
  802208:	d8c00604 	addi	r3,sp,24
  80220c:	d8800704 	addi	r2,sp,28
  802210:	800b883a 	mov	r5,r16
  802214:	01c00084 	movi	r7,2
  802218:	d8c00215 	stw	r3,8(sp)
  80221c:	d8800315 	stw	r2,12(sp)
  802220:	dd000015 	stw	r20,0(sp)
  802224:	0802a040 	call	802a04 <_dtoa_r>
  802228:	d9814d17 	ldw	r6,1332(sp)
  80222c:	d8814115 	stw	r2,1284(sp)
  802230:	008019c4 	movi	r2,103
  802234:	30809526 	beq	r6,r2,80248c <___vfprintf_internal_r+0x1cf0>
  802238:	d8c14d17 	ldw	r3,1332(sp)
  80223c:	008011c4 	movi	r2,71
  802240:	18809226 	beq	r3,r2,80248c <___vfprintf_internal_r+0x1cf0>
  802244:	d9414117 	ldw	r5,1284(sp)
  802248:	d9814d17 	ldw	r6,1332(sp)
  80224c:	00801984 	movi	r2,102
  802250:	2d25883a 	add	r18,r5,r20
  802254:	30808626 	beq	r6,r2,802470 <___vfprintf_internal_r+0x1cd4>
  802258:	00801184 	movi	r2,70
  80225c:	30808426 	beq	r6,r2,802470 <___vfprintf_internal_r+0x1cd4>
  802260:	000d883a 	mov	r6,zero
  802264:	000f883a 	mov	r7,zero
  802268:	880b883a 	mov	r5,r17
  80226c:	8009883a 	mov	r4,r16
  802270:	08091c80 	call	8091c8 <__eqdf2>
  802274:	1000751e 	bne	r2,zero,80244c <___vfprintf_internal_r+0x1cb0>
  802278:	9005883a 	mov	r2,r18
  80227c:	dc800715 	stw	r18,28(sp)
  802280:	d9014117 	ldw	r4,1284(sp)
  802284:	d9414d17 	ldw	r5,1332(sp)
  802288:	00c019c4 	movi	r3,103
  80228c:	1125c83a 	sub	r18,r2,r4
  802290:	28c06826 	beq	r5,r3,802434 <___vfprintf_internal_r+0x1c98>
  802294:	008011c4 	movi	r2,71
  802298:	28806626 	beq	r5,r2,802434 <___vfprintf_internal_r+0x1c98>
  80229c:	d9000517 	ldw	r4,20(sp)
  8022a0:	d8c14d17 	ldw	r3,1332(sp)
  8022a4:	00801944 	movi	r2,101
  8022a8:	10c05516 	blt	r2,r3,802400 <___vfprintf_internal_r+0x1c64>
  8022ac:	213fffc4 	addi	r4,r4,-1
  8022b0:	d9000515 	stw	r4,20(sp)
  8022b4:	d8c00805 	stb	r3,32(sp)
  8022b8:	2021883a 	mov	r16,r4
  8022bc:	2000c116 	blt	r4,zero,8025c4 <___vfprintf_internal_r+0x1e28>
  8022c0:	00800ac4 	movi	r2,43
  8022c4:	d8800845 	stb	r2,33(sp)
  8022c8:	00800244 	movi	r2,9
  8022cc:	1400af0e 	bge	r2,r16,80258c <___vfprintf_internal_r+0x1df0>
  8022d0:	1027883a 	mov	r19,r2
  8022d4:	dc400b84 	addi	r17,sp,46
  8022d8:	8009883a 	mov	r4,r16
  8022dc:	01400284 	movi	r5,10
  8022e0:	08098b00 	call	8098b0 <__modsi3>
  8022e4:	10800c04 	addi	r2,r2,48
  8022e8:	8c7fffc4 	addi	r17,r17,-1
  8022ec:	8009883a 	mov	r4,r16
  8022f0:	01400284 	movi	r5,10
  8022f4:	88800005 	stb	r2,0(r17)
  8022f8:	08098500 	call	809850 <__divsi3>
  8022fc:	1021883a 	mov	r16,r2
  802300:	98bff516 	blt	r19,r2,8022d8 <___vfprintf_internal_r+0x1b3c>
  802304:	10c00c04 	addi	r3,r2,48
  802308:	d88009c4 	addi	r2,sp,39
  80230c:	108001c4 	addi	r2,r2,7
  802310:	897fffc4 	addi	r5,r17,-1
  802314:	88ffffc5 	stb	r3,-1(r17)
  802318:	2880a72e 	bgeu	r5,r2,8025b8 <___vfprintf_internal_r+0x1e1c>
  80231c:	1009883a 	mov	r4,r2
  802320:	d9800804 	addi	r6,sp,32
  802324:	d8c00884 	addi	r3,sp,34
  802328:	28800003 	ldbu	r2,0(r5)
  80232c:	29400044 	addi	r5,r5,1
  802330:	18800005 	stb	r2,0(r3)
  802334:	18c00044 	addi	r3,r3,1
  802338:	293ffb36 	bltu	r5,r4,802328 <___vfprintf_internal_r+0x1b8c>
  80233c:	1987c83a 	sub	r3,r3,r6
  802340:	00800044 	movi	r2,1
  802344:	d8c14815 	stw	r3,1312(sp)
  802348:	90cf883a 	add	r7,r18,r3
  80234c:	1480960e 	bge	r2,r18,8025a8 <___vfprintf_internal_r+0x1e0c>
  802350:	39c00044 	addi	r7,r7,1
  802354:	d9c14515 	stw	r7,1300(sp)
  802358:	38003416 	blt	r7,zero,80242c <___vfprintf_internal_r+0x1c90>
  80235c:	e0803fcc 	andi	r2,fp,255
  802360:	1080201c 	xori	r2,r2,128
  802364:	10bfe004 	addi	r2,r2,-128
  802368:	10004e26 	beq	r2,zero,8024a4 <___vfprintf_internal_r+0x1d08>
  80236c:	00800b44 	movi	r2,45
  802370:	dc814715 	stw	r18,1308(sp)
  802374:	d8014615 	stw	zero,1304(sp)
  802378:	d8800405 	stb	r2,16(sp)
  80237c:	003bab06 	br	80122c <___vfprintf_internal_r+0xa90>
  802380:	00800b44 	movi	r2,45
  802384:	d8800405 	stb	r2,16(sp)
  802388:	003d2d06 	br	801840 <___vfprintf_internal_r+0x10a4>
  80238c:	d9014f17 	ldw	r4,1340(sp)
  802390:	b00b883a 	mov	r5,r22
  802394:	d9800c04 	addi	r6,sp,48
  802398:	08007440 	call	800744 <__sprint_r>
  80239c:	103ab71e 	bne	r2,zero,800e7c <___vfprintf_internal_r+0x6e0>
  8023a0:	003ab506 	br	800e78 <___vfprintf_internal_r+0x6dc>
  8023a4:	38800017 	ldw	r2,0(r7)
  8023a8:	39c00104 	addi	r7,r7,4
  8023ac:	d9c14015 	stw	r7,1280(sp)
  8023b0:	d9414b17 	ldw	r5,1324(sp)
  8023b4:	d9c14017 	ldw	r7,1280(sp)
  8023b8:	11400015 	stw	r5,0(r2)
  8023bc:	00395306 	br	80090c <___vfprintf_internal_r+0x170>
  8023c0:	980f883a 	mov	r7,r19
  8023c4:	dcc14515 	stw	r19,1300(sp)
  8023c8:	d8014615 	stw	zero,1304(sp)
  8023cc:	003b9506 	br	801224 <___vfprintf_internal_r+0xa88>
  8023d0:	0027883a 	mov	r19,zero
  8023d4:	00397206 	br	8009a0 <___vfprintf_internal_r+0x204>
  8023d8:	00c02074 	movhi	r3,129
  8023dc:	18db5304 	addi	r3,r3,27980
  8023e0:	100f883a 	mov	r7,r2
  8023e4:	d8814515 	stw	r2,1300(sp)
  8023e8:	d8c14115 	stw	r3,1284(sp)
  8023ec:	0039da06 	br	800b58 <___vfprintf_internal_r+0x3bc>
  8023f0:	00802074 	movhi	r2,129
  8023f4:	109b5204 	addi	r2,r2,27976
  8023f8:	d8814115 	stw	r2,1284(sp)
  8023fc:	003d1606 	br	801858 <___vfprintf_internal_r+0x10bc>
  802400:	d9414d17 	ldw	r5,1332(sp)
  802404:	00801984 	movi	r2,102
  802408:	28804926 	beq	r5,r2,802530 <___vfprintf_internal_r+0x1d94>
  80240c:	200f883a 	mov	r7,r4
  802410:	24805716 	blt	r4,r18,802570 <___vfprintf_internal_r+0x1dd4>
  802414:	d9414c17 	ldw	r5,1328(sp)
  802418:	2880004c 	andi	r2,r5,1
  80241c:	10000126 	beq	r2,zero,802424 <___vfprintf_internal_r+0x1c88>
  802420:	21c00044 	addi	r7,r4,1
  802424:	d9c14515 	stw	r7,1300(sp)
  802428:	383fcc0e 	bge	r7,zero,80235c <___vfprintf_internal_r+0x1bc0>
  80242c:	d8014515 	stw	zero,1300(sp)
  802430:	003fca06 	br	80235c <___vfprintf_internal_r+0x1bc0>
  802434:	d9000517 	ldw	r4,20(sp)
  802438:	00bfff04 	movi	r2,-4
  80243c:	1100480e 	bge	r2,r4,802560 <___vfprintf_internal_r+0x1dc4>
  802440:	99004716 	blt	r19,r4,802560 <___vfprintf_internal_r+0x1dc4>
  802444:	d8c14d15 	stw	r3,1332(sp)
  802448:	003ff006 	br	80240c <___vfprintf_internal_r+0x1c70>
  80244c:	d8800717 	ldw	r2,28(sp)
  802450:	14bf8b2e 	bgeu	r2,r18,802280 <___vfprintf_internal_r+0x1ae4>
  802454:	9007883a 	mov	r3,r18
  802458:	01000c04 	movi	r4,48
  80245c:	11000005 	stb	r4,0(r2)
  802460:	10800044 	addi	r2,r2,1
  802464:	d8800715 	stw	r2,28(sp)
  802468:	18bffc1e 	bne	r3,r2,80245c <___vfprintf_internal_r+0x1cc0>
  80246c:	003f8406 	br	802280 <___vfprintf_internal_r+0x1ae4>
  802470:	d8814117 	ldw	r2,1284(sp)
  802474:	10c00007 	ldb	r3,0(r2)
  802478:	00800c04 	movi	r2,48
  80247c:	18805b26 	beq	r3,r2,8025ec <___vfprintf_internal_r+0x1e50>
  802480:	d9000517 	ldw	r4,20(sp)
  802484:	9125883a 	add	r18,r18,r4
  802488:	003f7506 	br	802260 <___vfprintf_internal_r+0x1ac4>
  80248c:	d9014c17 	ldw	r4,1328(sp)
  802490:	2080004c 	andi	r2,r4,1
  802494:	1005003a 	cmpeq	r2,r2,zero
  802498:	103f6a26 	beq	r2,zero,802244 <___vfprintf_internal_r+0x1aa8>
  80249c:	d8800717 	ldw	r2,28(sp)
  8024a0:	003f7706 	br	802280 <___vfprintf_internal_r+0x1ae4>
  8024a4:	d9c14515 	stw	r7,1300(sp)
  8024a8:	38004d16 	blt	r7,zero,8025e0 <___vfprintf_internal_r+0x1e44>
  8024ac:	dc814715 	stw	r18,1308(sp)
  8024b0:	d8014615 	stw	zero,1304(sp)
  8024b4:	003b5b06 	br	801224 <___vfprintf_internal_r+0xa88>
  8024b8:	d9014f17 	ldw	r4,1340(sp)
  8024bc:	d8800504 	addi	r2,sp,20
  8024c0:	d8800115 	stw	r2,4(sp)
  8024c4:	d8c00604 	addi	r3,sp,24
  8024c8:	d8800704 	addi	r2,sp,28
  8024cc:	800b883a 	mov	r5,r16
  8024d0:	880d883a 	mov	r6,r17
  8024d4:	01c000c4 	movi	r7,3
  8024d8:	d8c00215 	stw	r3,8(sp)
  8024dc:	d8800315 	stw	r2,12(sp)
  8024e0:	dcc00015 	stw	r19,0(sp)
  8024e4:	9829883a 	mov	r20,r19
  8024e8:	0802a040 	call	802a04 <_dtoa_r>
  8024ec:	d8814115 	stw	r2,1284(sp)
  8024f0:	003f5106 	br	802238 <___vfprintf_internal_r+0x1a9c>
  8024f4:	d8c14217 	ldw	r3,1288(sp)
  8024f8:	d9014317 	ldw	r4,1292(sp)
  8024fc:	07000b44 	movi	fp,45
  802500:	1821883a 	mov	r16,r3
  802504:	2460003c 	xorhi	r17,r4,32768
  802508:	003f3106 	br	8021d0 <___vfprintf_internal_r+0x1a34>
  80250c:	9d000044 	addi	r20,r19,1
  802510:	003f3906 	br	8021f8 <___vfprintf_internal_r+0x1a5c>
  802514:	983f251e 	bne	r19,zero,8021ac <___vfprintf_internal_r+0x1a10>
  802518:	04c00044 	movi	r19,1
  80251c:	003f2306 	br	8021ac <___vfprintf_internal_r+0x1a10>
  802520:	04c00184 	movi	r19,6
  802524:	003f2106 	br	8021ac <___vfprintf_internal_r+0x1a10>
  802528:	d8014515 	stw	zero,1300(sp)
  80252c:	003eee06 	br	8020e8 <___vfprintf_internal_r+0x194c>
  802530:	200f883a 	mov	r7,r4
  802534:	0100370e 	bge	zero,r4,802614 <___vfprintf_internal_r+0x1e78>
  802538:	9800031e 	bne	r19,zero,802548 <___vfprintf_internal_r+0x1dac>
  80253c:	d9814c17 	ldw	r6,1328(sp)
  802540:	3080004c 	andi	r2,r6,1
  802544:	103fb726 	beq	r2,zero,802424 <___vfprintf_internal_r+0x1c88>
  802548:	20800044 	addi	r2,r4,1
  80254c:	98a7883a 	add	r19,r19,r2
  802550:	dcc14515 	stw	r19,1300(sp)
  802554:	980f883a 	mov	r7,r19
  802558:	983f800e 	bge	r19,zero,80235c <___vfprintf_internal_r+0x1bc0>
  80255c:	003fb306 	br	80242c <___vfprintf_internal_r+0x1c90>
  802560:	d9814d17 	ldw	r6,1332(sp)
  802564:	31bfff84 	addi	r6,r6,-2
  802568:	d9814d15 	stw	r6,1332(sp)
  80256c:	003f4c06 	br	8022a0 <___vfprintf_internal_r+0x1b04>
  802570:	0100180e 	bge	zero,r4,8025d4 <___vfprintf_internal_r+0x1e38>
  802574:	00800044 	movi	r2,1
  802578:	1485883a 	add	r2,r2,r18
  80257c:	d8814515 	stw	r2,1300(sp)
  802580:	100f883a 	mov	r7,r2
  802584:	103f750e 	bge	r2,zero,80235c <___vfprintf_internal_r+0x1bc0>
  802588:	003fa806 	br	80242c <___vfprintf_internal_r+0x1c90>
  80258c:	80c00c04 	addi	r3,r16,48
  802590:	00800c04 	movi	r2,48
  802594:	d8c008c5 	stb	r3,35(sp)
  802598:	d9800804 	addi	r6,sp,32
  80259c:	d8c00904 	addi	r3,sp,36
  8025a0:	d8800885 	stb	r2,34(sp)
  8025a4:	003f6506 	br	80233c <___vfprintf_internal_r+0x1ba0>
  8025a8:	d9014c17 	ldw	r4,1328(sp)
  8025ac:	2084703a 	and	r2,r4,r2
  8025b0:	103f9c26 	beq	r2,zero,802424 <___vfprintf_internal_r+0x1c88>
  8025b4:	003f6606 	br	802350 <___vfprintf_internal_r+0x1bb4>
  8025b8:	d9800804 	addi	r6,sp,32
  8025bc:	d8c00884 	addi	r3,sp,34
  8025c0:	003f5e06 	br	80233c <___vfprintf_internal_r+0x1ba0>
  8025c4:	00800b44 	movi	r2,45
  8025c8:	0121c83a 	sub	r16,zero,r4
  8025cc:	d8800845 	stb	r2,33(sp)
  8025d0:	003f3d06 	br	8022c8 <___vfprintf_internal_r+0x1b2c>
  8025d4:	00800084 	movi	r2,2
  8025d8:	1105c83a 	sub	r2,r2,r4
  8025dc:	003fe606 	br	802578 <___vfprintf_internal_r+0x1ddc>
  8025e0:	d8014515 	stw	zero,1300(sp)
  8025e4:	dc814715 	stw	r18,1308(sp)
  8025e8:	003fb106 	br	8024b0 <___vfprintf_internal_r+0x1d14>
  8025ec:	000d883a 	mov	r6,zero
  8025f0:	000f883a 	mov	r7,zero
  8025f4:	8009883a 	mov	r4,r16
  8025f8:	880b883a 	mov	r5,r17
  8025fc:	08092500 	call	809250 <__nedf2>
  802600:	103f9f26 	beq	r2,zero,802480 <___vfprintf_internal_r+0x1ce4>
  802604:	00800044 	movi	r2,1
  802608:	1509c83a 	sub	r4,r2,r20
  80260c:	d9000515 	stw	r4,20(sp)
  802610:	003f9b06 	br	802480 <___vfprintf_internal_r+0x1ce4>
  802614:	98000d1e 	bne	r19,zero,80264c <___vfprintf_internal_r+0x1eb0>
  802618:	d8c14c17 	ldw	r3,1328(sp)
  80261c:	1880004c 	andi	r2,r3,1
  802620:	10000a1e 	bne	r2,zero,80264c <___vfprintf_internal_r+0x1eb0>
  802624:	01000044 	movi	r4,1
  802628:	200f883a 	mov	r7,r4
  80262c:	d9014515 	stw	r4,1300(sp)
  802630:	003f4a06 	br	80235c <___vfprintf_internal_r+0x1bc0>
  802634:	3cc00017 	ldw	r19,0(r7)
  802638:	39c00104 	addi	r7,r7,4
  80263c:	983d0e0e 	bge	r19,zero,801a78 <___vfprintf_internal_r+0x12dc>
  802640:	b8c00007 	ldb	r3,0(r23)
  802644:	04ffffc4 	movi	r19,-1
  802648:	0038d306 	br	800998 <___vfprintf_internal_r+0x1fc>
  80264c:	9cc00084 	addi	r19,r19,2
  802650:	dcc14515 	stw	r19,1300(sp)
  802654:	980f883a 	mov	r7,r19
  802658:	983f400e 	bge	r19,zero,80235c <___vfprintf_internal_r+0x1bc0>
  80265c:	003f7306 	br	80242c <___vfprintf_internal_r+0x1c90>

00802660 <__vfprintf_internal>:
  802660:	008020b4 	movhi	r2,130
  802664:	10a32204 	addi	r2,r2,-29560
  802668:	2013883a 	mov	r9,r4
  80266c:	11000017 	ldw	r4,0(r2)
  802670:	2805883a 	mov	r2,r5
  802674:	300f883a 	mov	r7,r6
  802678:	480b883a 	mov	r5,r9
  80267c:	100d883a 	mov	r6,r2
  802680:	080079c1 	jmpi	80079c <___vfprintf_internal_r>

00802684 <__swsetup_r>:
  802684:	008020b4 	movhi	r2,130
  802688:	10a32204 	addi	r2,r2,-29560
  80268c:	10c00017 	ldw	r3,0(r2)
  802690:	defffd04 	addi	sp,sp,-12
  802694:	dc400115 	stw	r17,4(sp)
  802698:	dc000015 	stw	r16,0(sp)
  80269c:	dfc00215 	stw	ra,8(sp)
  8026a0:	2023883a 	mov	r17,r4
  8026a4:	2821883a 	mov	r16,r5
  8026a8:	18000226 	beq	r3,zero,8026b4 <__swsetup_r+0x30>
  8026ac:	18800e17 	ldw	r2,56(r3)
  8026b0:	10001f26 	beq	r2,zero,802730 <__swsetup_r+0xac>
  8026b4:	8100030b 	ldhu	r4,12(r16)
  8026b8:	2080020c 	andi	r2,r4,8
  8026bc:	10002826 	beq	r2,zero,802760 <__swsetup_r+0xdc>
  8026c0:	81400417 	ldw	r5,16(r16)
  8026c4:	28001d26 	beq	r5,zero,80273c <__swsetup_r+0xb8>
  8026c8:	2080004c 	andi	r2,r4,1
  8026cc:	1005003a 	cmpeq	r2,r2,zero
  8026d0:	10000b26 	beq	r2,zero,802700 <__swsetup_r+0x7c>
  8026d4:	2080008c 	andi	r2,r4,2
  8026d8:	10001226 	beq	r2,zero,802724 <__swsetup_r+0xa0>
  8026dc:	0005883a 	mov	r2,zero
  8026e0:	80800215 	stw	r2,8(r16)
  8026e4:	28000b26 	beq	r5,zero,802714 <__swsetup_r+0x90>
  8026e8:	0005883a 	mov	r2,zero
  8026ec:	dfc00217 	ldw	ra,8(sp)
  8026f0:	dc400117 	ldw	r17,4(sp)
  8026f4:	dc000017 	ldw	r16,0(sp)
  8026f8:	dec00304 	addi	sp,sp,12
  8026fc:	f800283a 	ret
  802700:	80800517 	ldw	r2,20(r16)
  802704:	80000215 	stw	zero,8(r16)
  802708:	0085c83a 	sub	r2,zero,r2
  80270c:	80800615 	stw	r2,24(r16)
  802710:	283ff51e 	bne	r5,zero,8026e8 <__swsetup_r+0x64>
  802714:	2080200c 	andi	r2,r4,128
  802718:	103ff326 	beq	r2,zero,8026e8 <__swsetup_r+0x64>
  80271c:	00bfffc4 	movi	r2,-1
  802720:	003ff206 	br	8026ec <__swsetup_r+0x68>
  802724:	80800517 	ldw	r2,20(r16)
  802728:	80800215 	stw	r2,8(r16)
  80272c:	003fed06 	br	8026e4 <__swsetup_r+0x60>
  802730:	1809883a 	mov	r4,r3
  802734:	08042500 	call	804250 <__sinit>
  802738:	003fde06 	br	8026b4 <__swsetup_r+0x30>
  80273c:	20c0a00c 	andi	r3,r4,640
  802740:	00808004 	movi	r2,512
  802744:	18bfe026 	beq	r3,r2,8026c8 <__swsetup_r+0x44>
  802748:	8809883a 	mov	r4,r17
  80274c:	800b883a 	mov	r5,r16
  802750:	0804ffc0 	call	804ffc <__smakebuf_r>
  802754:	8100030b 	ldhu	r4,12(r16)
  802758:	81400417 	ldw	r5,16(r16)
  80275c:	003fda06 	br	8026c8 <__swsetup_r+0x44>
  802760:	2080040c 	andi	r2,r4,16
  802764:	103fed26 	beq	r2,zero,80271c <__swsetup_r+0x98>
  802768:	2080010c 	andi	r2,r4,4
  80276c:	10001226 	beq	r2,zero,8027b8 <__swsetup_r+0x134>
  802770:	81400c17 	ldw	r5,48(r16)
  802774:	28000526 	beq	r5,zero,80278c <__swsetup_r+0x108>
  802778:	80801004 	addi	r2,r16,64
  80277c:	28800226 	beq	r5,r2,802788 <__swsetup_r+0x104>
  802780:	8809883a 	mov	r4,r17
  802784:	08046080 	call	804608 <_free_r>
  802788:	80000c15 	stw	zero,48(r16)
  80278c:	8080030b 	ldhu	r2,12(r16)
  802790:	81400417 	ldw	r5,16(r16)
  802794:	80000115 	stw	zero,4(r16)
  802798:	10bff6cc 	andi	r2,r2,65499
  80279c:	8080030d 	sth	r2,12(r16)
  8027a0:	81400015 	stw	r5,0(r16)
  8027a4:	8080030b 	ldhu	r2,12(r16)
  8027a8:	10800214 	ori	r2,r2,8
  8027ac:	113fffcc 	andi	r4,r2,65535
  8027b0:	8080030d 	sth	r2,12(r16)
  8027b4:	003fc306 	br	8026c4 <__swsetup_r+0x40>
  8027b8:	81400417 	ldw	r5,16(r16)
  8027bc:	003ff906 	br	8027a4 <__swsetup_r+0x120>

008027c0 <quorem>:
  8027c0:	28c00417 	ldw	r3,16(r5)
  8027c4:	20800417 	ldw	r2,16(r4)
  8027c8:	defff104 	addi	sp,sp,-60
  8027cc:	dfc00e15 	stw	ra,56(sp)
  8027d0:	df000d15 	stw	fp,52(sp)
  8027d4:	ddc00c15 	stw	r23,48(sp)
  8027d8:	dd800b15 	stw	r22,44(sp)
  8027dc:	dd400a15 	stw	r21,40(sp)
  8027e0:	dd000915 	stw	r20,36(sp)
  8027e4:	dcc00815 	stw	r19,32(sp)
  8027e8:	dc800715 	stw	r18,28(sp)
  8027ec:	dc400615 	stw	r17,24(sp)
  8027f0:	dc000515 	stw	r16,20(sp)
  8027f4:	d9000315 	stw	r4,12(sp)
  8027f8:	d9400415 	stw	r5,16(sp)
  8027fc:	10c07f16 	blt	r2,r3,8029fc <quorem+0x23c>
  802800:	1d3fffc4 	addi	r20,r3,-1
  802804:	d8c00417 	ldw	r3,16(sp)
  802808:	d9000317 	ldw	r4,12(sp)
  80280c:	a505883a 	add	r2,r20,r20
  802810:	1085883a 	add	r2,r2,r2
  802814:	1cc00504 	addi	r19,r3,20
  802818:	25c00504 	addi	r23,r4,20
  80281c:	98ad883a 	add	r22,r19,r2
  802820:	15c7883a 	add	r3,r2,r23
  802824:	b1400017 	ldw	r5,0(r22)
  802828:	19000017 	ldw	r4,0(r3)
  80282c:	d8c00015 	stw	r3,0(sp)
  802830:	29400044 	addi	r5,r5,1
  802834:	d9000215 	stw	r4,8(sp)
  802838:	08099100 	call	809910 <__udivsi3>
  80283c:	1039883a 	mov	fp,r2
  802840:	10003d1e 	bne	r2,zero,802938 <quorem+0x178>
  802844:	d9400417 	ldw	r5,16(sp)
  802848:	d9000317 	ldw	r4,12(sp)
  80284c:	0805d280 	call	805d28 <__mcmp>
  802850:	10002c16 	blt	r2,zero,802904 <quorem+0x144>
  802854:	e7000044 	addi	fp,fp,1
  802858:	b80f883a 	mov	r7,r23
  80285c:	0011883a 	mov	r8,zero
  802860:	0009883a 	mov	r4,zero
  802864:	99400017 	ldw	r5,0(r19)
  802868:	38c00017 	ldw	r3,0(r7)
  80286c:	9cc00104 	addi	r19,r19,4
  802870:	28bfffcc 	andi	r2,r5,65535
  802874:	2085883a 	add	r2,r4,r2
  802878:	11bfffcc 	andi	r6,r2,65535
  80287c:	193fffcc 	andi	r4,r3,65535
  802880:	1004d43a 	srli	r2,r2,16
  802884:	280ad43a 	srli	r5,r5,16
  802888:	2189c83a 	sub	r4,r4,r6
  80288c:	2209883a 	add	r4,r4,r8
  802890:	1806d43a 	srli	r3,r3,16
  802894:	288b883a 	add	r5,r5,r2
  802898:	200dd43a 	srai	r6,r4,16
  80289c:	28bfffcc 	andi	r2,r5,65535
  8028a0:	1887c83a 	sub	r3,r3,r2
  8028a4:	1987883a 	add	r3,r3,r6
  8028a8:	3900000d 	sth	r4,0(r7)
  8028ac:	38c0008d 	sth	r3,2(r7)
  8028b0:	2808d43a 	srli	r4,r5,16
  8028b4:	39c00104 	addi	r7,r7,4
  8028b8:	1811d43a 	srai	r8,r3,16
  8028bc:	b4ffe92e 	bgeu	r22,r19,802864 <quorem+0xa4>
  8028c0:	a505883a 	add	r2,r20,r20
  8028c4:	1085883a 	add	r2,r2,r2
  8028c8:	b885883a 	add	r2,r23,r2
  8028cc:	10c00017 	ldw	r3,0(r2)
  8028d0:	18000c1e 	bne	r3,zero,802904 <quorem+0x144>
  8028d4:	113fff04 	addi	r4,r2,-4
  8028d8:	b900082e 	bgeu	r23,r4,8028fc <quorem+0x13c>
  8028dc:	10bfff17 	ldw	r2,-4(r2)
  8028e0:	10000326 	beq	r2,zero,8028f0 <quorem+0x130>
  8028e4:	00000506 	br	8028fc <quorem+0x13c>
  8028e8:	20800017 	ldw	r2,0(r4)
  8028ec:	1000031e 	bne	r2,zero,8028fc <quorem+0x13c>
  8028f0:	213fff04 	addi	r4,r4,-4
  8028f4:	a53fffc4 	addi	r20,r20,-1
  8028f8:	b93ffb36 	bltu	r23,r4,8028e8 <quorem+0x128>
  8028fc:	d9000317 	ldw	r4,12(sp)
  802900:	25000415 	stw	r20,16(r4)
  802904:	e005883a 	mov	r2,fp
  802908:	dfc00e17 	ldw	ra,56(sp)
  80290c:	df000d17 	ldw	fp,52(sp)
  802910:	ddc00c17 	ldw	r23,48(sp)
  802914:	dd800b17 	ldw	r22,44(sp)
  802918:	dd400a17 	ldw	r21,40(sp)
  80291c:	dd000917 	ldw	r20,36(sp)
  802920:	dcc00817 	ldw	r19,32(sp)
  802924:	dc800717 	ldw	r18,28(sp)
  802928:	dc400617 	ldw	r17,24(sp)
  80292c:	dc000517 	ldw	r16,20(sp)
  802930:	dec00f04 	addi	sp,sp,60
  802934:	f800283a 	ret
  802938:	b823883a 	mov	r17,r23
  80293c:	9825883a 	mov	r18,r19
  802940:	d8000115 	stw	zero,4(sp)
  802944:	002b883a 	mov	r21,zero
  802948:	94000017 	ldw	r16,0(r18)
  80294c:	e009883a 	mov	r4,fp
  802950:	94800104 	addi	r18,r18,4
  802954:	817fffcc 	andi	r5,r16,65535
  802958:	08099200 	call	809920 <__mulsi3>
  80295c:	800ad43a 	srli	r5,r16,16
  802960:	e009883a 	mov	r4,fp
  802964:	a8a1883a 	add	r16,r21,r2
  802968:	08099200 	call	809920 <__mulsi3>
  80296c:	89000017 	ldw	r4,0(r17)
  802970:	80ffffcc 	andi	r3,r16,65535
  802974:	8020d43a 	srli	r16,r16,16
  802978:	217fffcc 	andi	r5,r4,65535
  80297c:	28cbc83a 	sub	r5,r5,r3
  802980:	d8c00117 	ldw	r3,4(sp)
  802984:	2008d43a 	srli	r4,r4,16
  802988:	1405883a 	add	r2,r2,r16
  80298c:	28cb883a 	add	r5,r5,r3
  802990:	280dd43a 	srai	r6,r5,16
  802994:	10ffffcc 	andi	r3,r2,65535
  802998:	20c9c83a 	sub	r4,r4,r3
  80299c:	2189883a 	add	r4,r4,r6
  8029a0:	8900008d 	sth	r4,2(r17)
  8029a4:	2009d43a 	srai	r4,r4,16
  8029a8:	8940000d 	sth	r5,0(r17)
  8029ac:	102ad43a 	srli	r21,r2,16
  8029b0:	8c400104 	addi	r17,r17,4
  8029b4:	d9000115 	stw	r4,4(sp)
  8029b8:	b4bfe32e 	bgeu	r22,r18,802948 <quorem+0x188>
  8029bc:	d9000217 	ldw	r4,8(sp)
  8029c0:	203fa01e 	bne	r4,zero,802844 <quorem+0x84>
  8029c4:	d8800017 	ldw	r2,0(sp)
  8029c8:	10ffff04 	addi	r3,r2,-4
  8029cc:	b8c0082e 	bgeu	r23,r3,8029f0 <quorem+0x230>
  8029d0:	10bfff17 	ldw	r2,-4(r2)
  8029d4:	10000326 	beq	r2,zero,8029e4 <quorem+0x224>
  8029d8:	00000506 	br	8029f0 <quorem+0x230>
  8029dc:	18800017 	ldw	r2,0(r3)
  8029e0:	1000031e 	bne	r2,zero,8029f0 <quorem+0x230>
  8029e4:	18ffff04 	addi	r3,r3,-4
  8029e8:	a53fffc4 	addi	r20,r20,-1
  8029ec:	b8fffb36 	bltu	r23,r3,8029dc <quorem+0x21c>
  8029f0:	d8c00317 	ldw	r3,12(sp)
  8029f4:	1d000415 	stw	r20,16(r3)
  8029f8:	003f9206 	br	802844 <quorem+0x84>
  8029fc:	0005883a 	mov	r2,zero
  802a00:	003fc106 	br	802908 <quorem+0x148>

00802a04 <_dtoa_r>:
  802a04:	22001017 	ldw	r8,64(r4)
  802a08:	deffda04 	addi	sp,sp,-152
  802a0c:	dd402115 	stw	r21,132(sp)
  802a10:	dd002015 	stw	r20,128(sp)
  802a14:	dc801e15 	stw	r18,120(sp)
  802a18:	dc401d15 	stw	r17,116(sp)
  802a1c:	dfc02515 	stw	ra,148(sp)
  802a20:	df002415 	stw	fp,144(sp)
  802a24:	ddc02315 	stw	r23,140(sp)
  802a28:	dd802215 	stw	r22,136(sp)
  802a2c:	dcc01f15 	stw	r19,124(sp)
  802a30:	dc001c15 	stw	r16,112(sp)
  802a34:	d9001615 	stw	r4,88(sp)
  802a38:	3023883a 	mov	r17,r6
  802a3c:	2829883a 	mov	r20,r5
  802a40:	d9c01715 	stw	r7,92(sp)
  802a44:	dc802817 	ldw	r18,160(sp)
  802a48:	302b883a 	mov	r21,r6
  802a4c:	40000a26 	beq	r8,zero,802a78 <_dtoa_r+0x74>
  802a50:	20801117 	ldw	r2,68(r4)
  802a54:	400b883a 	mov	r5,r8
  802a58:	40800115 	stw	r2,4(r8)
  802a5c:	20c01117 	ldw	r3,68(r4)
  802a60:	00800044 	movi	r2,1
  802a64:	10c4983a 	sll	r2,r2,r3
  802a68:	40800215 	stw	r2,8(r8)
  802a6c:	0805bcc0 	call	805bcc <_Bfree>
  802a70:	d8c01617 	ldw	r3,88(sp)
  802a74:	18001015 	stw	zero,64(r3)
  802a78:	8800a316 	blt	r17,zero,802d08 <_dtoa_r+0x304>
  802a7c:	90000015 	stw	zero,0(r18)
  802a80:	a8dffc2c 	andhi	r3,r21,32752
  802a84:	009ffc34 	movhi	r2,32752
  802a88:	18809126 	beq	r3,r2,802cd0 <_dtoa_r+0x2cc>
  802a8c:	000d883a 	mov	r6,zero
  802a90:	000f883a 	mov	r7,zero
  802a94:	a009883a 	mov	r4,r20
  802a98:	a80b883a 	mov	r5,r21
  802a9c:	dd001215 	stw	r20,72(sp)
  802aa0:	dd401315 	stw	r21,76(sp)
  802aa4:	08092500 	call	809250 <__nedf2>
  802aa8:	1000171e 	bne	r2,zero,802b08 <_dtoa_r+0x104>
  802aac:	d9802717 	ldw	r6,156(sp)
  802ab0:	00800044 	movi	r2,1
  802ab4:	30800015 	stw	r2,0(r6)
  802ab8:	d8802917 	ldw	r2,164(sp)
  802abc:	10029b26 	beq	r2,zero,80352c <_dtoa_r+0xb28>
  802ac0:	d9002917 	ldw	r4,164(sp)
  802ac4:	00802074 	movhi	r2,129
  802ac8:	109b6144 	addi	r2,r2,28037
  802acc:	10ffffc4 	addi	r3,r2,-1
  802ad0:	20800015 	stw	r2,0(r4)
  802ad4:	1805883a 	mov	r2,r3
  802ad8:	dfc02517 	ldw	ra,148(sp)
  802adc:	df002417 	ldw	fp,144(sp)
  802ae0:	ddc02317 	ldw	r23,140(sp)
  802ae4:	dd802217 	ldw	r22,136(sp)
  802ae8:	dd402117 	ldw	r21,132(sp)
  802aec:	dd002017 	ldw	r20,128(sp)
  802af0:	dcc01f17 	ldw	r19,124(sp)
  802af4:	dc801e17 	ldw	r18,120(sp)
  802af8:	dc401d17 	ldw	r17,116(sp)
  802afc:	dc001c17 	ldw	r16,112(sp)
  802b00:	dec02604 	addi	sp,sp,152
  802b04:	f800283a 	ret
  802b08:	d9001617 	ldw	r4,88(sp)
  802b0c:	d9401217 	ldw	r5,72(sp)
  802b10:	d8800104 	addi	r2,sp,4
  802b14:	a80d883a 	mov	r6,r21
  802b18:	d9c00204 	addi	r7,sp,8
  802b1c:	d8800015 	stw	r2,0(sp)
  802b20:	08062080 	call	806208 <__d2b>
  802b24:	d8800715 	stw	r2,28(sp)
  802b28:	a804d53a 	srli	r2,r21,20
  802b2c:	1101ffcc 	andi	r4,r2,2047
  802b30:	20008626 	beq	r4,zero,802d4c <_dtoa_r+0x348>
  802b34:	d8c01217 	ldw	r3,72(sp)
  802b38:	00800434 	movhi	r2,16
  802b3c:	10bfffc4 	addi	r2,r2,-1
  802b40:	ddc00117 	ldw	r23,4(sp)
  802b44:	a884703a 	and	r2,r21,r2
  802b48:	1811883a 	mov	r8,r3
  802b4c:	124ffc34 	orhi	r9,r2,16368
  802b50:	25bf0044 	addi	r22,r4,-1023
  802b54:	d8000815 	stw	zero,32(sp)
  802b58:	0005883a 	mov	r2,zero
  802b5c:	00cffe34 	movhi	r3,16376
  802b60:	480b883a 	mov	r5,r9
  802b64:	4009883a 	mov	r4,r8
  802b68:	180f883a 	mov	r7,r3
  802b6c:	100d883a 	mov	r6,r2
  802b70:	0808ab80 	call	808ab8 <__subdf3>
  802b74:	0218dbf4 	movhi	r8,25455
  802b78:	4210d844 	addi	r8,r8,17249
  802b7c:	024ff4f4 	movhi	r9,16339
  802b80:	4a61e9c4 	addi	r9,r9,-30809
  802b84:	480f883a 	mov	r7,r9
  802b88:	400d883a 	mov	r6,r8
  802b8c:	180b883a 	mov	r5,r3
  802b90:	1009883a 	mov	r4,r2
  802b94:	0808bac0 	call	808bac <__muldf3>
  802b98:	0222d874 	movhi	r8,35681
  802b9c:	42322cc4 	addi	r8,r8,-14157
  802ba0:	024ff1f4 	movhi	r9,16327
  802ba4:	4a628a04 	addi	r9,r9,-30168
  802ba8:	480f883a 	mov	r7,r9
  802bac:	400d883a 	mov	r6,r8
  802bb0:	180b883a 	mov	r5,r3
  802bb4:	1009883a 	mov	r4,r2
  802bb8:	0808b380 	call	808b38 <__adddf3>
  802bbc:	b009883a 	mov	r4,r22
  802bc0:	1021883a 	mov	r16,r2
  802bc4:	1823883a 	mov	r17,r3
  802bc8:	08094700 	call	809470 <__floatsidf>
  802bcc:	021427f4 	movhi	r8,20639
  802bd0:	421e7ec4 	addi	r8,r8,31227
  802bd4:	024ff4f4 	movhi	r9,16339
  802bd8:	4a5104c4 	addi	r9,r9,17427
  802bdc:	480f883a 	mov	r7,r9
  802be0:	400d883a 	mov	r6,r8
  802be4:	180b883a 	mov	r5,r3
  802be8:	1009883a 	mov	r4,r2
  802bec:	0808bac0 	call	808bac <__muldf3>
  802bf0:	180f883a 	mov	r7,r3
  802bf4:	880b883a 	mov	r5,r17
  802bf8:	100d883a 	mov	r6,r2
  802bfc:	8009883a 	mov	r4,r16
  802c00:	0808b380 	call	808b38 <__adddf3>
  802c04:	1009883a 	mov	r4,r2
  802c08:	180b883a 	mov	r5,r3
  802c0c:	1021883a 	mov	r16,r2
  802c10:	1823883a 	mov	r17,r3
  802c14:	08095680 	call	809568 <__fixdfsi>
  802c18:	000d883a 	mov	r6,zero
  802c1c:	000f883a 	mov	r7,zero
  802c20:	8009883a 	mov	r4,r16
  802c24:	880b883a 	mov	r5,r17
  802c28:	d8800d15 	stw	r2,52(sp)
  802c2c:	08093e80 	call	8093e8 <__ltdf2>
  802c30:	10031716 	blt	r2,zero,803890 <_dtoa_r+0xe8c>
  802c34:	d8c00d17 	ldw	r3,52(sp)
  802c38:	00800584 	movi	r2,22
  802c3c:	10c1482e 	bgeu	r2,r3,803160 <_dtoa_r+0x75c>
  802c40:	01000044 	movi	r4,1
  802c44:	d9000c15 	stw	r4,48(sp)
  802c48:	bd85c83a 	sub	r2,r23,r22
  802c4c:	11bfffc4 	addi	r6,r2,-1
  802c50:	30030b16 	blt	r6,zero,803880 <_dtoa_r+0xe7c>
  802c54:	d9800a15 	stw	r6,40(sp)
  802c58:	d8001115 	stw	zero,68(sp)
  802c5c:	d8c00d17 	ldw	r3,52(sp)
  802c60:	1802ff16 	blt	r3,zero,803860 <_dtoa_r+0xe5c>
  802c64:	d9000a17 	ldw	r4,40(sp)
  802c68:	d8c00915 	stw	r3,36(sp)
  802c6c:	d8001015 	stw	zero,64(sp)
  802c70:	20c9883a 	add	r4,r4,r3
  802c74:	d9000a15 	stw	r4,40(sp)
  802c78:	d9001717 	ldw	r4,92(sp)
  802c7c:	00800244 	movi	r2,9
  802c80:	11004636 	bltu	r2,r4,802d9c <_dtoa_r+0x398>
  802c84:	00800144 	movi	r2,5
  802c88:	11020416 	blt	r2,r4,80349c <_dtoa_r+0xa98>
  802c8c:	04400044 	movi	r17,1
  802c90:	d8c01717 	ldw	r3,92(sp)
  802c94:	00800144 	movi	r2,5
  802c98:	10c1ed36 	bltu	r2,r3,803450 <_dtoa_r+0xa4c>
  802c9c:	18c5883a 	add	r2,r3,r3
  802ca0:	1085883a 	add	r2,r2,r2
  802ca4:	00c02034 	movhi	r3,128
  802ca8:	18cb2e04 	addi	r3,r3,11448
  802cac:	10c5883a 	add	r2,r2,r3
  802cb0:	11000017 	ldw	r4,0(r2)
  802cb4:	2000683a 	jmp	r4
  802cb8:	00802da4 	muli	r2,zero,182
  802cbc:	00802da4 	muli	r2,zero,182
  802cc0:	008037a4 	muli	r2,zero,222
  802cc4:	0080377c 	xorhi	r2,zero,221
  802cc8:	008037c0 	call	8037c <OSCtxSw_SWITCH_PC+0x8033c>
  802ccc:	008037cc 	andi	r2,zero,223
  802cd0:	d9002717 	ldw	r4,156(sp)
  802cd4:	0089c3c4 	movi	r2,9999
  802cd8:	20800015 	stw	r2,0(r4)
  802cdc:	a0001026 	beq	r20,zero,802d20 <_dtoa_r+0x31c>
  802ce0:	00c02074 	movhi	r3,129
  802ce4:	18db6d04 	addi	r3,r3,28084
  802ce8:	d9802917 	ldw	r6,164(sp)
  802cec:	303f7926 	beq	r6,zero,802ad4 <_dtoa_r+0xd0>
  802cf0:	188000c7 	ldb	r2,3(r3)
  802cf4:	190000c4 	addi	r4,r3,3
  802cf8:	1000101e 	bne	r2,zero,802d3c <_dtoa_r+0x338>
  802cfc:	d8802917 	ldw	r2,164(sp)
  802d00:	11000015 	stw	r4,0(r2)
  802d04:	003f7306 	br	802ad4 <_dtoa_r+0xd0>
  802d08:	00a00034 	movhi	r2,32768
  802d0c:	10bfffc4 	addi	r2,r2,-1
  802d10:	00c00044 	movi	r3,1
  802d14:	88aa703a 	and	r21,r17,r2
  802d18:	90c00015 	stw	r3,0(r18)
  802d1c:	003f5806 	br	802a80 <_dtoa_r+0x7c>
  802d20:	00800434 	movhi	r2,16
  802d24:	10bfffc4 	addi	r2,r2,-1
  802d28:	a884703a 	and	r2,r21,r2
  802d2c:	103fec1e 	bne	r2,zero,802ce0 <_dtoa_r+0x2dc>
  802d30:	00c02074 	movhi	r3,129
  802d34:	18db6a04 	addi	r3,r3,28072
  802d38:	003feb06 	br	802ce8 <_dtoa_r+0x2e4>
  802d3c:	d8802917 	ldw	r2,164(sp)
  802d40:	19000204 	addi	r4,r3,8
  802d44:	11000015 	stw	r4,0(r2)
  802d48:	003f6206 	br	802ad4 <_dtoa_r+0xd0>
  802d4c:	ddc00117 	ldw	r23,4(sp)
  802d50:	d8800217 	ldw	r2,8(sp)
  802d54:	01000804 	movi	r4,32
  802d58:	b8c10c84 	addi	r3,r23,1074
  802d5c:	18a3883a 	add	r17,r3,r2
  802d60:	2441b80e 	bge	r4,r17,803444 <_dtoa_r+0xa40>
  802d64:	00c01004 	movi	r3,64
  802d68:	1c47c83a 	sub	r3,r3,r17
  802d6c:	88bff804 	addi	r2,r17,-32
  802d70:	a8c6983a 	sll	r3,r21,r3
  802d74:	a084d83a 	srl	r2,r20,r2
  802d78:	1888b03a 	or	r4,r3,r2
  802d7c:	08096400 	call	809640 <__floatunsidf>
  802d80:	1011883a 	mov	r8,r2
  802d84:	00bf8434 	movhi	r2,65040
  802d88:	01000044 	movi	r4,1
  802d8c:	10d3883a 	add	r9,r2,r3
  802d90:	8dbef344 	addi	r22,r17,-1075
  802d94:	d9000815 	stw	r4,32(sp)
  802d98:	003f6f06 	br	802b58 <_dtoa_r+0x154>
  802d9c:	d8001715 	stw	zero,92(sp)
  802da0:	04400044 	movi	r17,1
  802da4:	00bfffc4 	movi	r2,-1
  802da8:	00c00044 	movi	r3,1
  802dac:	d8800e15 	stw	r2,56(sp)
  802db0:	d8002615 	stw	zero,152(sp)
  802db4:	d8800f15 	stw	r2,60(sp)
  802db8:	d8c00b15 	stw	r3,44(sp)
  802dbc:	1021883a 	mov	r16,r2
  802dc0:	d8801617 	ldw	r2,88(sp)
  802dc4:	10001115 	stw	zero,68(r2)
  802dc8:	d8801617 	ldw	r2,88(sp)
  802dcc:	11401117 	ldw	r5,68(r2)
  802dd0:	1009883a 	mov	r4,r2
  802dd4:	080614c0 	call	80614c <_Balloc>
  802dd8:	d8c01617 	ldw	r3,88(sp)
  802ddc:	d8800515 	stw	r2,20(sp)
  802de0:	18801015 	stw	r2,64(r3)
  802de4:	00800384 	movi	r2,14
  802de8:	14006836 	bltu	r2,r16,802f8c <_dtoa_r+0x588>
  802dec:	8805003a 	cmpeq	r2,r17,zero
  802df0:	1000661e 	bne	r2,zero,802f8c <_dtoa_r+0x588>
  802df4:	d9000d17 	ldw	r4,52(sp)
  802df8:	0102300e 	bge	zero,r4,8036bc <_dtoa_r+0xcb8>
  802dfc:	208003cc 	andi	r2,r4,15
  802e00:	100490fa 	slli	r2,r2,3
  802e04:	2025d13a 	srai	r18,r4,4
  802e08:	00c02074 	movhi	r3,129
  802e0c:	18db7f04 	addi	r3,r3,28156
  802e10:	10c5883a 	add	r2,r2,r3
  802e14:	90c0040c 	andi	r3,r18,16
  802e18:	14000017 	ldw	r16,0(r2)
  802e1c:	14400117 	ldw	r17,4(r2)
  802e20:	18036a1e 	bne	r3,zero,803bcc <_dtoa_r+0x11c8>
  802e24:	05800084 	movi	r22,2
  802e28:	90001026 	beq	r18,zero,802e6c <_dtoa_r+0x468>
  802e2c:	04c02074 	movhi	r19,129
  802e30:	9cdbb104 	addi	r19,r19,28356
  802e34:	9080004c 	andi	r2,r18,1
  802e38:	1005003a 	cmpeq	r2,r2,zero
  802e3c:	1000081e 	bne	r2,zero,802e60 <_dtoa_r+0x45c>
  802e40:	99800017 	ldw	r6,0(r19)
  802e44:	99c00117 	ldw	r7,4(r19)
  802e48:	880b883a 	mov	r5,r17
  802e4c:	8009883a 	mov	r4,r16
  802e50:	0808bac0 	call	808bac <__muldf3>
  802e54:	1021883a 	mov	r16,r2
  802e58:	b5800044 	addi	r22,r22,1
  802e5c:	1823883a 	mov	r17,r3
  802e60:	9025d07a 	srai	r18,r18,1
  802e64:	9cc00204 	addi	r19,r19,8
  802e68:	903ff21e 	bne	r18,zero,802e34 <_dtoa_r+0x430>
  802e6c:	a80b883a 	mov	r5,r21
  802e70:	a009883a 	mov	r4,r20
  802e74:	880f883a 	mov	r7,r17
  802e78:	800d883a 	mov	r6,r16
  802e7c:	0808f700 	call	808f70 <__divdf3>
  802e80:	1029883a 	mov	r20,r2
  802e84:	182b883a 	mov	r21,r3
  802e88:	d8c00c17 	ldw	r3,48(sp)
  802e8c:	1805003a 	cmpeq	r2,r3,zero
  802e90:	1000081e 	bne	r2,zero,802eb4 <_dtoa_r+0x4b0>
  802e94:	0005883a 	mov	r2,zero
  802e98:	00cffc34 	movhi	r3,16368
  802e9c:	180f883a 	mov	r7,r3
  802ea0:	a009883a 	mov	r4,r20
  802ea4:	a80b883a 	mov	r5,r21
  802ea8:	100d883a 	mov	r6,r2
  802eac:	08093e80 	call	8093e8 <__ltdf2>
  802eb0:	1003fe16 	blt	r2,zero,803eac <_dtoa_r+0x14a8>
  802eb4:	b009883a 	mov	r4,r22
  802eb8:	08094700 	call	809470 <__floatsidf>
  802ebc:	180b883a 	mov	r5,r3
  802ec0:	1009883a 	mov	r4,r2
  802ec4:	a00d883a 	mov	r6,r20
  802ec8:	a80f883a 	mov	r7,r21
  802ecc:	0808bac0 	call	808bac <__muldf3>
  802ed0:	0011883a 	mov	r8,zero
  802ed4:	02500734 	movhi	r9,16412
  802ed8:	1009883a 	mov	r4,r2
  802edc:	180b883a 	mov	r5,r3
  802ee0:	480f883a 	mov	r7,r9
  802ee4:	400d883a 	mov	r6,r8
  802ee8:	0808b380 	call	808b38 <__adddf3>
  802eec:	d9000f17 	ldw	r4,60(sp)
  802ef0:	102d883a 	mov	r22,r2
  802ef4:	00bf3034 	movhi	r2,64704
  802ef8:	18b9883a 	add	fp,r3,r2
  802efc:	e02f883a 	mov	r23,fp
  802f00:	20028f1e 	bne	r4,zero,803940 <_dtoa_r+0xf3c>
  802f04:	0005883a 	mov	r2,zero
  802f08:	00d00534 	movhi	r3,16404
  802f0c:	a009883a 	mov	r4,r20
  802f10:	a80b883a 	mov	r5,r21
  802f14:	180f883a 	mov	r7,r3
  802f18:	100d883a 	mov	r6,r2
  802f1c:	0808ab80 	call	808ab8 <__subdf3>
  802f20:	1009883a 	mov	r4,r2
  802f24:	e00f883a 	mov	r7,fp
  802f28:	180b883a 	mov	r5,r3
  802f2c:	b00d883a 	mov	r6,r22
  802f30:	1025883a 	mov	r18,r2
  802f34:	1827883a 	mov	r19,r3
  802f38:	08092d80 	call	8092d8 <__gtdf2>
  802f3c:	00834f16 	blt	zero,r2,803c7c <_dtoa_r+0x1278>
  802f40:	e0e0003c 	xorhi	r3,fp,32768
  802f44:	9009883a 	mov	r4,r18
  802f48:	980b883a 	mov	r5,r19
  802f4c:	180f883a 	mov	r7,r3
  802f50:	b00d883a 	mov	r6,r22
  802f54:	08093e80 	call	8093e8 <__ltdf2>
  802f58:	1000080e 	bge	r2,zero,802f7c <_dtoa_r+0x578>
  802f5c:	0027883a 	mov	r19,zero
  802f60:	0025883a 	mov	r18,zero
  802f64:	d8802617 	ldw	r2,152(sp)
  802f68:	df000517 	ldw	fp,20(sp)
  802f6c:	d8000615 	stw	zero,24(sp)
  802f70:	0084303a 	nor	r2,zero,r2
  802f74:	d8800d15 	stw	r2,52(sp)
  802f78:	00019b06 	br	8035e8 <_dtoa_r+0xbe4>
  802f7c:	d9801217 	ldw	r6,72(sp)
  802f80:	d8801317 	ldw	r2,76(sp)
  802f84:	3029883a 	mov	r20,r6
  802f88:	102b883a 	mov	r21,r2
  802f8c:	d8c00217 	ldw	r3,8(sp)
  802f90:	18008516 	blt	r3,zero,8031a8 <_dtoa_r+0x7a4>
  802f94:	d9000d17 	ldw	r4,52(sp)
  802f98:	00800384 	movi	r2,14
  802f9c:	11008216 	blt	r2,r4,8031a8 <_dtoa_r+0x7a4>
  802fa0:	200490fa 	slli	r2,r4,3
  802fa4:	d9802617 	ldw	r6,152(sp)
  802fa8:	00c02074 	movhi	r3,129
  802fac:	18db7f04 	addi	r3,r3,28156
  802fb0:	10c5883a 	add	r2,r2,r3
  802fb4:	14800017 	ldw	r18,0(r2)
  802fb8:	14c00117 	ldw	r19,4(r2)
  802fbc:	30031e16 	blt	r6,zero,803c38 <_dtoa_r+0x1234>
  802fc0:	d9000517 	ldw	r4,20(sp)
  802fc4:	d8c00f17 	ldw	r3,60(sp)
  802fc8:	a823883a 	mov	r17,r21
  802fcc:	a021883a 	mov	r16,r20
  802fd0:	192b883a 	add	r21,r3,r4
  802fd4:	2039883a 	mov	fp,r4
  802fd8:	00000f06 	br	803018 <_dtoa_r+0x614>
  802fdc:	0005883a 	mov	r2,zero
  802fe0:	00d00934 	movhi	r3,16420
  802fe4:	5009883a 	mov	r4,r10
  802fe8:	580b883a 	mov	r5,r11
  802fec:	180f883a 	mov	r7,r3
  802ff0:	100d883a 	mov	r6,r2
  802ff4:	0808bac0 	call	808bac <__muldf3>
  802ff8:	180b883a 	mov	r5,r3
  802ffc:	000d883a 	mov	r6,zero
  803000:	000f883a 	mov	r7,zero
  803004:	1009883a 	mov	r4,r2
  803008:	1021883a 	mov	r16,r2
  80300c:	1823883a 	mov	r17,r3
  803010:	08092500 	call	809250 <__nedf2>
  803014:	10004526 	beq	r2,zero,80312c <_dtoa_r+0x728>
  803018:	900d883a 	mov	r6,r18
  80301c:	980f883a 	mov	r7,r19
  803020:	8009883a 	mov	r4,r16
  803024:	880b883a 	mov	r5,r17
  803028:	0808f700 	call	808f70 <__divdf3>
  80302c:	180b883a 	mov	r5,r3
  803030:	1009883a 	mov	r4,r2
  803034:	08095680 	call	809568 <__fixdfsi>
  803038:	1009883a 	mov	r4,r2
  80303c:	1029883a 	mov	r20,r2
  803040:	08094700 	call	809470 <__floatsidf>
  803044:	180f883a 	mov	r7,r3
  803048:	9009883a 	mov	r4,r18
  80304c:	980b883a 	mov	r5,r19
  803050:	100d883a 	mov	r6,r2
  803054:	0808bac0 	call	808bac <__muldf3>
  803058:	180f883a 	mov	r7,r3
  80305c:	880b883a 	mov	r5,r17
  803060:	8009883a 	mov	r4,r16
  803064:	100d883a 	mov	r6,r2
  803068:	0808ab80 	call	808ab8 <__subdf3>
  80306c:	1015883a 	mov	r10,r2
  803070:	a0800c04 	addi	r2,r20,48
  803074:	e0800005 	stb	r2,0(fp)
  803078:	e7000044 	addi	fp,fp,1
  80307c:	1817883a 	mov	r11,r3
  803080:	e57fd61e 	bne	fp,r21,802fdc <_dtoa_r+0x5d8>
  803084:	500d883a 	mov	r6,r10
  803088:	180f883a 	mov	r7,r3
  80308c:	5009883a 	mov	r4,r10
  803090:	180b883a 	mov	r5,r3
  803094:	0808b380 	call	808b38 <__adddf3>
  803098:	100d883a 	mov	r6,r2
  80309c:	9009883a 	mov	r4,r18
  8030a0:	980b883a 	mov	r5,r19
  8030a4:	180f883a 	mov	r7,r3
  8030a8:	1021883a 	mov	r16,r2
  8030ac:	1823883a 	mov	r17,r3
  8030b0:	08093e80 	call	8093e8 <__ltdf2>
  8030b4:	10000816 	blt	r2,zero,8030d8 <_dtoa_r+0x6d4>
  8030b8:	980b883a 	mov	r5,r19
  8030bc:	800d883a 	mov	r6,r16
  8030c0:	880f883a 	mov	r7,r17
  8030c4:	9009883a 	mov	r4,r18
  8030c8:	08091c80 	call	8091c8 <__eqdf2>
  8030cc:	1000171e 	bne	r2,zero,80312c <_dtoa_r+0x728>
  8030d0:	a080004c 	andi	r2,r20,1
  8030d4:	10001526 	beq	r2,zero,80312c <_dtoa_r+0x728>
  8030d8:	d8800d17 	ldw	r2,52(sp)
  8030dc:	d8800415 	stw	r2,16(sp)
  8030e0:	e009883a 	mov	r4,fp
  8030e4:	213fffc4 	addi	r4,r4,-1
  8030e8:	20c00007 	ldb	r3,0(r4)
  8030ec:	00800e44 	movi	r2,57
  8030f0:	1880081e 	bne	r3,r2,803114 <_dtoa_r+0x710>
  8030f4:	d8800517 	ldw	r2,20(sp)
  8030f8:	113ffa1e 	bne	r2,r4,8030e4 <_dtoa_r+0x6e0>
  8030fc:	d8c00417 	ldw	r3,16(sp)
  803100:	d9800517 	ldw	r6,20(sp)
  803104:	00800c04 	movi	r2,48
  803108:	18c00044 	addi	r3,r3,1
  80310c:	d8c00415 	stw	r3,16(sp)
  803110:	30800005 	stb	r2,0(r6)
  803114:	20800003 	ldbu	r2,0(r4)
  803118:	d8c00417 	ldw	r3,16(sp)
  80311c:	27000044 	addi	fp,r4,1
  803120:	10800044 	addi	r2,r2,1
  803124:	d8c00d15 	stw	r3,52(sp)
  803128:	20800005 	stb	r2,0(r4)
  80312c:	d9001617 	ldw	r4,88(sp)
  803130:	d9400717 	ldw	r5,28(sp)
  803134:	0805bcc0 	call	805bcc <_Bfree>
  803138:	e0000005 	stb	zero,0(fp)
  80313c:	d9800d17 	ldw	r6,52(sp)
  803140:	d8c02717 	ldw	r3,156(sp)
  803144:	d9002917 	ldw	r4,164(sp)
  803148:	30800044 	addi	r2,r6,1
  80314c:	18800015 	stw	r2,0(r3)
  803150:	20029c26 	beq	r4,zero,803bc4 <_dtoa_r+0x11c0>
  803154:	d8c00517 	ldw	r3,20(sp)
  803158:	27000015 	stw	fp,0(r4)
  80315c:	003e5d06 	br	802ad4 <_dtoa_r+0xd0>
  803160:	d9800d17 	ldw	r6,52(sp)
  803164:	00c02074 	movhi	r3,129
  803168:	18db7f04 	addi	r3,r3,28156
  80316c:	d9001217 	ldw	r4,72(sp)
  803170:	300490fa 	slli	r2,r6,3
  803174:	d9401317 	ldw	r5,76(sp)
  803178:	10c5883a 	add	r2,r2,r3
  80317c:	12000017 	ldw	r8,0(r2)
  803180:	12400117 	ldw	r9,4(r2)
  803184:	400d883a 	mov	r6,r8
  803188:	480f883a 	mov	r7,r9
  80318c:	08093e80 	call	8093e8 <__ltdf2>
  803190:	1000030e 	bge	r2,zero,8031a0 <_dtoa_r+0x79c>
  803194:	d8800d17 	ldw	r2,52(sp)
  803198:	10bfffc4 	addi	r2,r2,-1
  80319c:	d8800d15 	stw	r2,52(sp)
  8031a0:	d8000c15 	stw	zero,48(sp)
  8031a4:	003ea806 	br	802c48 <_dtoa_r+0x244>
  8031a8:	d9000b17 	ldw	r4,44(sp)
  8031ac:	202cc03a 	cmpne	r22,r4,zero
  8031b0:	b000c71e 	bne	r22,zero,8034d0 <_dtoa_r+0xacc>
  8031b4:	dc001117 	ldw	r16,68(sp)
  8031b8:	dc801017 	ldw	r18,64(sp)
  8031bc:	0027883a 	mov	r19,zero
  8031c0:	04000b0e 	bge	zero,r16,8031f0 <_dtoa_r+0x7ec>
  8031c4:	d8c00a17 	ldw	r3,40(sp)
  8031c8:	00c0090e 	bge	zero,r3,8031f0 <_dtoa_r+0x7ec>
  8031cc:	8005883a 	mov	r2,r16
  8031d0:	1c011316 	blt	r3,r16,803620 <_dtoa_r+0xc1c>
  8031d4:	d9000a17 	ldw	r4,40(sp)
  8031d8:	d9801117 	ldw	r6,68(sp)
  8031dc:	80a1c83a 	sub	r16,r16,r2
  8031e0:	2089c83a 	sub	r4,r4,r2
  8031e4:	308dc83a 	sub	r6,r6,r2
  8031e8:	d9000a15 	stw	r4,40(sp)
  8031ec:	d9801115 	stw	r6,68(sp)
  8031f0:	d8801017 	ldw	r2,64(sp)
  8031f4:	0080150e 	bge	zero,r2,80324c <_dtoa_r+0x848>
  8031f8:	d8c00b17 	ldw	r3,44(sp)
  8031fc:	1805003a 	cmpeq	r2,r3,zero
  803200:	1001c91e 	bne	r2,zero,803928 <_dtoa_r+0xf24>
  803204:	04800e0e 	bge	zero,r18,803240 <_dtoa_r+0x83c>
  803208:	d9001617 	ldw	r4,88(sp)
  80320c:	980b883a 	mov	r5,r19
  803210:	900d883a 	mov	r6,r18
  803214:	0806a180 	call	806a18 <__pow5mult>
  803218:	d9001617 	ldw	r4,88(sp)
  80321c:	d9800717 	ldw	r6,28(sp)
  803220:	100b883a 	mov	r5,r2
  803224:	1027883a 	mov	r19,r2
  803228:	080665c0 	call	80665c <__multiply>
  80322c:	d9001617 	ldw	r4,88(sp)
  803230:	d9400717 	ldw	r5,28(sp)
  803234:	1023883a 	mov	r17,r2
  803238:	0805bcc0 	call	805bcc <_Bfree>
  80323c:	dc400715 	stw	r17,28(sp)
  803240:	d9001017 	ldw	r4,64(sp)
  803244:	248dc83a 	sub	r6,r4,r18
  803248:	30010e1e 	bne	r6,zero,803684 <_dtoa_r+0xc80>
  80324c:	d9001617 	ldw	r4,88(sp)
  803250:	04400044 	movi	r17,1
  803254:	880b883a 	mov	r5,r17
  803258:	08068b00 	call	8068b0 <__i2b>
  80325c:	d9800917 	ldw	r6,36(sp)
  803260:	1025883a 	mov	r18,r2
  803264:	0180040e 	bge	zero,r6,803278 <_dtoa_r+0x874>
  803268:	d9001617 	ldw	r4,88(sp)
  80326c:	100b883a 	mov	r5,r2
  803270:	0806a180 	call	806a18 <__pow5mult>
  803274:	1025883a 	mov	r18,r2
  803278:	d8801717 	ldw	r2,92(sp)
  80327c:	8880f30e 	bge	r17,r2,80364c <_dtoa_r+0xc48>
  803280:	0023883a 	mov	r17,zero
  803284:	d9800917 	ldw	r6,36(sp)
  803288:	30019e1e 	bne	r6,zero,803904 <_dtoa_r+0xf00>
  80328c:	00c00044 	movi	r3,1
  803290:	d9000a17 	ldw	r4,40(sp)
  803294:	20c5883a 	add	r2,r4,r3
  803298:	10c007cc 	andi	r3,r2,31
  80329c:	1800841e 	bne	r3,zero,8034b0 <_dtoa_r+0xaac>
  8032a0:	00800704 	movi	r2,28
  8032a4:	d9000a17 	ldw	r4,40(sp)
  8032a8:	d9801117 	ldw	r6,68(sp)
  8032ac:	80a1883a 	add	r16,r16,r2
  8032b0:	2089883a 	add	r4,r4,r2
  8032b4:	308d883a 	add	r6,r6,r2
  8032b8:	d9000a15 	stw	r4,40(sp)
  8032bc:	d9801115 	stw	r6,68(sp)
  8032c0:	d8801117 	ldw	r2,68(sp)
  8032c4:	0080050e 	bge	zero,r2,8032dc <_dtoa_r+0x8d8>
  8032c8:	d9400717 	ldw	r5,28(sp)
  8032cc:	d9001617 	ldw	r4,88(sp)
  8032d0:	100d883a 	mov	r6,r2
  8032d4:	08065100 	call	806510 <__lshift>
  8032d8:	d8800715 	stw	r2,28(sp)
  8032dc:	d8c00a17 	ldw	r3,40(sp)
  8032e0:	00c0050e 	bge	zero,r3,8032f8 <_dtoa_r+0x8f4>
  8032e4:	d9001617 	ldw	r4,88(sp)
  8032e8:	900b883a 	mov	r5,r18
  8032ec:	180d883a 	mov	r6,r3
  8032f0:	08065100 	call	806510 <__lshift>
  8032f4:	1025883a 	mov	r18,r2
  8032f8:	d9000c17 	ldw	r4,48(sp)
  8032fc:	2005003a 	cmpeq	r2,r4,zero
  803300:	10016f26 	beq	r2,zero,8038c0 <_dtoa_r+0xebc>
  803304:	d9000f17 	ldw	r4,60(sp)
  803308:	0102170e 	bge	zero,r4,803b68 <_dtoa_r+0x1164>
  80330c:	d9800b17 	ldw	r6,44(sp)
  803310:	3005003a 	cmpeq	r2,r6,zero
  803314:	1000881e 	bne	r2,zero,803538 <_dtoa_r+0xb34>
  803318:	0400050e 	bge	zero,r16,803330 <_dtoa_r+0x92c>
  80331c:	d9001617 	ldw	r4,88(sp)
  803320:	980b883a 	mov	r5,r19
  803324:	800d883a 	mov	r6,r16
  803328:	08065100 	call	806510 <__lshift>
  80332c:	1027883a 	mov	r19,r2
  803330:	8804c03a 	cmpne	r2,r17,zero
  803334:	1002541e 	bne	r2,zero,803c88 <_dtoa_r+0x1284>
  803338:	980b883a 	mov	r5,r19
  80333c:	dd800517 	ldw	r22,20(sp)
  803340:	dcc00615 	stw	r19,24(sp)
  803344:	a700004c 	andi	fp,r20,1
  803348:	2827883a 	mov	r19,r5
  80334c:	d9000717 	ldw	r4,28(sp)
  803350:	900b883a 	mov	r5,r18
  803354:	08027c00 	call	8027c0 <quorem>
  803358:	d9000717 	ldw	r4,28(sp)
  80335c:	d9400617 	ldw	r5,24(sp)
  803360:	1023883a 	mov	r17,r2
  803364:	8dc00c04 	addi	r23,r17,48
  803368:	0805d280 	call	805d28 <__mcmp>
  80336c:	d9001617 	ldw	r4,88(sp)
  803370:	900b883a 	mov	r5,r18
  803374:	980d883a 	mov	r6,r19
  803378:	1029883a 	mov	r20,r2
  80337c:	08063840 	call	806384 <__mdiff>
  803380:	102b883a 	mov	r21,r2
  803384:	10800317 	ldw	r2,12(r2)
  803388:	1001281e 	bne	r2,zero,80382c <_dtoa_r+0xe28>
  80338c:	d9000717 	ldw	r4,28(sp)
  803390:	a80b883a 	mov	r5,r21
  803394:	0805d280 	call	805d28 <__mcmp>
  803398:	d9001617 	ldw	r4,88(sp)
  80339c:	1021883a 	mov	r16,r2
  8033a0:	a80b883a 	mov	r5,r21
  8033a4:	0805bcc0 	call	805bcc <_Bfree>
  8033a8:	8000041e 	bne	r16,zero,8033bc <_dtoa_r+0x9b8>
  8033ac:	d8801717 	ldw	r2,92(sp)
  8033b0:	1000021e 	bne	r2,zero,8033bc <_dtoa_r+0x9b8>
  8033b4:	e004c03a 	cmpne	r2,fp,zero
  8033b8:	10011726 	beq	r2,zero,803818 <_dtoa_r+0xe14>
  8033bc:	a0010616 	blt	r20,zero,8037d8 <_dtoa_r+0xdd4>
  8033c0:	a000041e 	bne	r20,zero,8033d4 <_dtoa_r+0x9d0>
  8033c4:	d8c01717 	ldw	r3,92(sp)
  8033c8:	1800021e 	bne	r3,zero,8033d4 <_dtoa_r+0x9d0>
  8033cc:	e004c03a 	cmpne	r2,fp,zero
  8033d0:	10010126 	beq	r2,zero,8037d8 <_dtoa_r+0xdd4>
  8033d4:	04023d16 	blt	zero,r16,803ccc <_dtoa_r+0x12c8>
  8033d8:	b5c00005 	stb	r23,0(r22)
  8033dc:	d9800517 	ldw	r6,20(sp)
  8033e0:	d9000f17 	ldw	r4,60(sp)
  8033e4:	b5800044 	addi	r22,r22,1
  8033e8:	3105883a 	add	r2,r6,r4
  8033ec:	b0806526 	beq	r22,r2,803584 <_dtoa_r+0xb80>
  8033f0:	d9400717 	ldw	r5,28(sp)
  8033f4:	d9001617 	ldw	r4,88(sp)
  8033f8:	01800284 	movi	r6,10
  8033fc:	000f883a 	mov	r7,zero
  803400:	08068ec0 	call	8068ec <__multadd>
  803404:	d8800715 	stw	r2,28(sp)
  803408:	d8800617 	ldw	r2,24(sp)
  80340c:	14c10c26 	beq	r2,r19,803840 <_dtoa_r+0xe3c>
  803410:	d9400617 	ldw	r5,24(sp)
  803414:	d9001617 	ldw	r4,88(sp)
  803418:	01800284 	movi	r6,10
  80341c:	000f883a 	mov	r7,zero
  803420:	08068ec0 	call	8068ec <__multadd>
  803424:	d9001617 	ldw	r4,88(sp)
  803428:	980b883a 	mov	r5,r19
  80342c:	01800284 	movi	r6,10
  803430:	000f883a 	mov	r7,zero
  803434:	d8800615 	stw	r2,24(sp)
  803438:	08068ec0 	call	8068ec <__multadd>
  80343c:	1027883a 	mov	r19,r2
  803440:	003fc206 	br	80334c <_dtoa_r+0x948>
  803444:	2445c83a 	sub	r2,r4,r17
  803448:	a088983a 	sll	r4,r20,r2
  80344c:	003e4b06 	br	802d7c <_dtoa_r+0x378>
  803450:	01bfffc4 	movi	r6,-1
  803454:	00800044 	movi	r2,1
  803458:	d9800e15 	stw	r6,56(sp)
  80345c:	d9800f15 	stw	r6,60(sp)
  803460:	d8800b15 	stw	r2,44(sp)
  803464:	d8c01617 	ldw	r3,88(sp)
  803468:	008005c4 	movi	r2,23
  80346c:	18001115 	stw	zero,68(r3)
  803470:	1580082e 	bgeu	r2,r22,803494 <_dtoa_r+0xa90>
  803474:	00c00104 	movi	r3,4
  803478:	0009883a 	mov	r4,zero
  80347c:	18c7883a 	add	r3,r3,r3
  803480:	18800504 	addi	r2,r3,20
  803484:	21000044 	addi	r4,r4,1
  803488:	b0bffc2e 	bgeu	r22,r2,80347c <_dtoa_r+0xa78>
  80348c:	d9801617 	ldw	r6,88(sp)
  803490:	31001115 	stw	r4,68(r6)
  803494:	dc000f17 	ldw	r16,60(sp)
  803498:	003e4b06 	br	802dc8 <_dtoa_r+0x3c4>
  80349c:	d9801717 	ldw	r6,92(sp)
  8034a0:	0023883a 	mov	r17,zero
  8034a4:	31bfff04 	addi	r6,r6,-4
  8034a8:	d9801715 	stw	r6,92(sp)
  8034ac:	003df806 	br	802c90 <_dtoa_r+0x28c>
  8034b0:	00800804 	movi	r2,32
  8034b4:	10c9c83a 	sub	r4,r2,r3
  8034b8:	00c00104 	movi	r3,4
  8034bc:	19005a16 	blt	r3,r4,803628 <_dtoa_r+0xc24>
  8034c0:	008000c4 	movi	r2,3
  8034c4:	113f7e16 	blt	r2,r4,8032c0 <_dtoa_r+0x8bc>
  8034c8:	20800704 	addi	r2,r4,28
  8034cc:	003f7506 	br	8032a4 <_dtoa_r+0x8a0>
  8034d0:	d9801717 	ldw	r6,92(sp)
  8034d4:	00800044 	movi	r2,1
  8034d8:	1180a10e 	bge	r2,r6,803760 <_dtoa_r+0xd5c>
  8034dc:	d9800f17 	ldw	r6,60(sp)
  8034e0:	d8c01017 	ldw	r3,64(sp)
  8034e4:	30bfffc4 	addi	r2,r6,-1
  8034e8:	1881c616 	blt	r3,r2,803c04 <_dtoa_r+0x1200>
  8034ec:	18a5c83a 	sub	r18,r3,r2
  8034f0:	d8800f17 	ldw	r2,60(sp)
  8034f4:	10026216 	blt	r2,zero,803e80 <_dtoa_r+0x147c>
  8034f8:	dc001117 	ldw	r16,68(sp)
  8034fc:	1007883a 	mov	r3,r2
  803500:	d9800a17 	ldw	r6,40(sp)
  803504:	d8801117 	ldw	r2,68(sp)
  803508:	d9001617 	ldw	r4,88(sp)
  80350c:	30cd883a 	add	r6,r6,r3
  803510:	10c5883a 	add	r2,r2,r3
  803514:	01400044 	movi	r5,1
  803518:	d9800a15 	stw	r6,40(sp)
  80351c:	d8801115 	stw	r2,68(sp)
  803520:	08068b00 	call	8068b0 <__i2b>
  803524:	1027883a 	mov	r19,r2
  803528:	003f2506 	br	8031c0 <_dtoa_r+0x7bc>
  80352c:	00c02074 	movhi	r3,129
  803530:	18db6104 	addi	r3,r3,28036
  803534:	003d6706 	br	802ad4 <_dtoa_r+0xd0>
  803538:	dd800517 	ldw	r22,20(sp)
  80353c:	04000044 	movi	r16,1
  803540:	00000706 	br	803560 <_dtoa_r+0xb5c>
  803544:	d9400717 	ldw	r5,28(sp)
  803548:	d9001617 	ldw	r4,88(sp)
  80354c:	01800284 	movi	r6,10
  803550:	000f883a 	mov	r7,zero
  803554:	08068ec0 	call	8068ec <__multadd>
  803558:	d8800715 	stw	r2,28(sp)
  80355c:	84000044 	addi	r16,r16,1
  803560:	d9000717 	ldw	r4,28(sp)
  803564:	900b883a 	mov	r5,r18
  803568:	08027c00 	call	8027c0 <quorem>
  80356c:	15c00c04 	addi	r23,r2,48
  803570:	b5c00005 	stb	r23,0(r22)
  803574:	d8c00f17 	ldw	r3,60(sp)
  803578:	b5800044 	addi	r22,r22,1
  80357c:	80fff116 	blt	r16,r3,803544 <_dtoa_r+0xb40>
  803580:	d8000615 	stw	zero,24(sp)
  803584:	d9400717 	ldw	r5,28(sp)
  803588:	d9001617 	ldw	r4,88(sp)
  80358c:	01800044 	movi	r6,1
  803590:	08065100 	call	806510 <__lshift>
  803594:	1009883a 	mov	r4,r2
  803598:	900b883a 	mov	r5,r18
  80359c:	d8800715 	stw	r2,28(sp)
  8035a0:	0805d280 	call	805d28 <__mcmp>
  8035a4:	00803c0e 	bge	zero,r2,803698 <_dtoa_r+0xc94>
  8035a8:	b009883a 	mov	r4,r22
  8035ac:	213fffc4 	addi	r4,r4,-1
  8035b0:	21400003 	ldbu	r5,0(r4)
  8035b4:	00800e44 	movi	r2,57
  8035b8:	28c03fcc 	andi	r3,r5,255
  8035bc:	18c0201c 	xori	r3,r3,128
  8035c0:	18ffe004 	addi	r3,r3,-128
  8035c4:	1881981e 	bne	r3,r2,803c28 <_dtoa_r+0x1224>
  8035c8:	d9800517 	ldw	r6,20(sp)
  8035cc:	21bff71e 	bne	r4,r6,8035ac <_dtoa_r+0xba8>
  8035d0:	d8800d17 	ldw	r2,52(sp)
  8035d4:	37000044 	addi	fp,r6,1
  8035d8:	10800044 	addi	r2,r2,1
  8035dc:	d8800d15 	stw	r2,52(sp)
  8035e0:	00800c44 	movi	r2,49
  8035e4:	30800005 	stb	r2,0(r6)
  8035e8:	d9001617 	ldw	r4,88(sp)
  8035ec:	900b883a 	mov	r5,r18
  8035f0:	0805bcc0 	call	805bcc <_Bfree>
  8035f4:	983ecd26 	beq	r19,zero,80312c <_dtoa_r+0x728>
  8035f8:	d8c00617 	ldw	r3,24(sp)
  8035fc:	18000426 	beq	r3,zero,803610 <_dtoa_r+0xc0c>
  803600:	1cc00326 	beq	r3,r19,803610 <_dtoa_r+0xc0c>
  803604:	d9001617 	ldw	r4,88(sp)
  803608:	180b883a 	mov	r5,r3
  80360c:	0805bcc0 	call	805bcc <_Bfree>
  803610:	d9001617 	ldw	r4,88(sp)
  803614:	980b883a 	mov	r5,r19
  803618:	0805bcc0 	call	805bcc <_Bfree>
  80361c:	003ec306 	br	80312c <_dtoa_r+0x728>
  803620:	1805883a 	mov	r2,r3
  803624:	003eeb06 	br	8031d4 <_dtoa_r+0x7d0>
  803628:	d9800a17 	ldw	r6,40(sp)
  80362c:	d8c01117 	ldw	r3,68(sp)
  803630:	20bfff04 	addi	r2,r4,-4
  803634:	308d883a 	add	r6,r6,r2
  803638:	1887883a 	add	r3,r3,r2
  80363c:	80a1883a 	add	r16,r16,r2
  803640:	d9800a15 	stw	r6,40(sp)
  803644:	d8c01115 	stw	r3,68(sp)
  803648:	003f1d06 	br	8032c0 <_dtoa_r+0x8bc>
  80364c:	a03f0c1e 	bne	r20,zero,803280 <_dtoa_r+0x87c>
  803650:	00800434 	movhi	r2,16
  803654:	10bfffc4 	addi	r2,r2,-1
  803658:	a884703a 	and	r2,r21,r2
  80365c:	103f081e 	bne	r2,zero,803280 <_dtoa_r+0x87c>
  803660:	a89ffc2c 	andhi	r2,r21,32752
  803664:	103f0626 	beq	r2,zero,803280 <_dtoa_r+0x87c>
  803668:	d8c01117 	ldw	r3,68(sp)
  80366c:	d9000a17 	ldw	r4,40(sp)
  803670:	18c00044 	addi	r3,r3,1
  803674:	21000044 	addi	r4,r4,1
  803678:	d8c01115 	stw	r3,68(sp)
  80367c:	d9000a15 	stw	r4,40(sp)
  803680:	003f0006 	br	803284 <_dtoa_r+0x880>
  803684:	d9400717 	ldw	r5,28(sp)
  803688:	d9001617 	ldw	r4,88(sp)
  80368c:	0806a180 	call	806a18 <__pow5mult>
  803690:	d8800715 	stw	r2,28(sp)
  803694:	003eed06 	br	80324c <_dtoa_r+0x848>
  803698:	1000021e 	bne	r2,zero,8036a4 <_dtoa_r+0xca0>
  80369c:	b880004c 	andi	r2,r23,1
  8036a0:	103fc11e 	bne	r2,zero,8035a8 <_dtoa_r+0xba4>
  8036a4:	b5bfffc4 	addi	r22,r22,-1
  8036a8:	b0c00007 	ldb	r3,0(r22)
  8036ac:	00800c04 	movi	r2,48
  8036b0:	18bffc26 	beq	r3,r2,8036a4 <_dtoa_r+0xca0>
  8036b4:	b7000044 	addi	fp,r22,1
  8036b8:	003fcb06 	br	8035e8 <_dtoa_r+0xbe4>
  8036bc:	d9800d17 	ldw	r6,52(sp)
  8036c0:	018fc83a 	sub	r7,zero,r6
  8036c4:	3801f726 	beq	r7,zero,803ea4 <_dtoa_r+0x14a0>
  8036c8:	398003cc 	andi	r6,r7,15
  8036cc:	300c90fa 	slli	r6,r6,3
  8036d0:	01402074 	movhi	r5,129
  8036d4:	295b7f04 	addi	r5,r5,28156
  8036d8:	d9001217 	ldw	r4,72(sp)
  8036dc:	314d883a 	add	r6,r6,r5
  8036e0:	30c00117 	ldw	r3,4(r6)
  8036e4:	30800017 	ldw	r2,0(r6)
  8036e8:	d9401317 	ldw	r5,76(sp)
  8036ec:	3821d13a 	srai	r16,r7,4
  8036f0:	100d883a 	mov	r6,r2
  8036f4:	180f883a 	mov	r7,r3
  8036f8:	0808bac0 	call	808bac <__muldf3>
  8036fc:	1011883a 	mov	r8,r2
  803700:	1813883a 	mov	r9,r3
  803704:	1029883a 	mov	r20,r2
  803708:	182b883a 	mov	r21,r3
  80370c:	8001e526 	beq	r16,zero,803ea4 <_dtoa_r+0x14a0>
  803710:	05800084 	movi	r22,2
  803714:	04402074 	movhi	r17,129
  803718:	8c5bb104 	addi	r17,r17,28356
  80371c:	8080004c 	andi	r2,r16,1
  803720:	1005003a 	cmpeq	r2,r2,zero
  803724:	1000081e 	bne	r2,zero,803748 <_dtoa_r+0xd44>
  803728:	89800017 	ldw	r6,0(r17)
  80372c:	89c00117 	ldw	r7,4(r17)
  803730:	480b883a 	mov	r5,r9
  803734:	4009883a 	mov	r4,r8
  803738:	0808bac0 	call	808bac <__muldf3>
  80373c:	1011883a 	mov	r8,r2
  803740:	b5800044 	addi	r22,r22,1
  803744:	1813883a 	mov	r9,r3
  803748:	8021d07a 	srai	r16,r16,1
  80374c:	8c400204 	addi	r17,r17,8
  803750:	803ff21e 	bne	r16,zero,80371c <_dtoa_r+0xd18>
  803754:	4029883a 	mov	r20,r8
  803758:	482b883a 	mov	r21,r9
  80375c:	003dca06 	br	802e88 <_dtoa_r+0x484>
  803760:	d9000817 	ldw	r4,32(sp)
  803764:	2005003a 	cmpeq	r2,r4,zero
  803768:	1001f61e 	bne	r2,zero,803f44 <_dtoa_r+0x1540>
  80376c:	dc001117 	ldw	r16,68(sp)
  803770:	dc801017 	ldw	r18,64(sp)
  803774:	18c10cc4 	addi	r3,r3,1075
  803778:	003f6106 	br	803500 <_dtoa_r+0xafc>
  80377c:	d8000b15 	stw	zero,44(sp)
  803780:	d9802617 	ldw	r6,152(sp)
  803784:	d8c00d17 	ldw	r3,52(sp)
  803788:	30800044 	addi	r2,r6,1
  80378c:	18ad883a 	add	r22,r3,r2
  803790:	b13fffc4 	addi	r4,r22,-1
  803794:	d9000e15 	stw	r4,56(sp)
  803798:	0581f60e 	bge	zero,r22,803f74 <_dtoa_r+0x1570>
  80379c:	dd800f15 	stw	r22,60(sp)
  8037a0:	003f3006 	br	803464 <_dtoa_r+0xa60>
  8037a4:	d8000b15 	stw	zero,44(sp)
  8037a8:	d9002617 	ldw	r4,152(sp)
  8037ac:	0101eb0e 	bge	zero,r4,803f5c <_dtoa_r+0x1558>
  8037b0:	202d883a 	mov	r22,r4
  8037b4:	d9000e15 	stw	r4,56(sp)
  8037b8:	d9000f15 	stw	r4,60(sp)
  8037bc:	003f2906 	br	803464 <_dtoa_r+0xa60>
  8037c0:	01800044 	movi	r6,1
  8037c4:	d9800b15 	stw	r6,44(sp)
  8037c8:	003ff706 	br	8037a8 <_dtoa_r+0xda4>
  8037cc:	01000044 	movi	r4,1
  8037d0:	d9000b15 	stw	r4,44(sp)
  8037d4:	003fea06 	br	803780 <_dtoa_r+0xd7c>
  8037d8:	04000c0e 	bge	zero,r16,80380c <_dtoa_r+0xe08>
  8037dc:	d9400717 	ldw	r5,28(sp)
  8037e0:	d9001617 	ldw	r4,88(sp)
  8037e4:	01800044 	movi	r6,1
  8037e8:	08065100 	call	806510 <__lshift>
  8037ec:	1009883a 	mov	r4,r2
  8037f0:	900b883a 	mov	r5,r18
  8037f4:	d8800715 	stw	r2,28(sp)
  8037f8:	0805d280 	call	805d28 <__mcmp>
  8037fc:	0081e00e 	bge	zero,r2,803f80 <_dtoa_r+0x157c>
  803800:	bdc00044 	addi	r23,r23,1
  803804:	00800e84 	movi	r2,58
  803808:	b881a226 	beq	r23,r2,803e94 <_dtoa_r+0x1490>
  80380c:	b7000044 	addi	fp,r22,1
  803810:	b5c00005 	stb	r23,0(r22)
  803814:	003f7406 	br	8035e8 <_dtoa_r+0xbe4>
  803818:	00800e44 	movi	r2,57
  80381c:	b8819d26 	beq	r23,r2,803e94 <_dtoa_r+0x1490>
  803820:	053ffa0e 	bge	zero,r20,80380c <_dtoa_r+0xe08>
  803824:	8dc00c44 	addi	r23,r17,49
  803828:	003ff806 	br	80380c <_dtoa_r+0xe08>
  80382c:	d9001617 	ldw	r4,88(sp)
  803830:	a80b883a 	mov	r5,r21
  803834:	04000044 	movi	r16,1
  803838:	0805bcc0 	call	805bcc <_Bfree>
  80383c:	003edf06 	br	8033bc <_dtoa_r+0x9b8>
  803840:	d9001617 	ldw	r4,88(sp)
  803844:	980b883a 	mov	r5,r19
  803848:	01800284 	movi	r6,10
  80384c:	000f883a 	mov	r7,zero
  803850:	08068ec0 	call	8068ec <__multadd>
  803854:	1027883a 	mov	r19,r2
  803858:	d8800615 	stw	r2,24(sp)
  80385c:	003ebb06 	br	80334c <_dtoa_r+0x948>
  803860:	d9801117 	ldw	r6,68(sp)
  803864:	d8800d17 	ldw	r2,52(sp)
  803868:	d8000915 	stw	zero,36(sp)
  80386c:	308dc83a 	sub	r6,r6,r2
  803870:	0087c83a 	sub	r3,zero,r2
  803874:	d9801115 	stw	r6,68(sp)
  803878:	d8c01015 	stw	r3,64(sp)
  80387c:	003cfe06 	br	802c78 <_dtoa_r+0x274>
  803880:	018dc83a 	sub	r6,zero,r6
  803884:	d9801115 	stw	r6,68(sp)
  803888:	d8000a15 	stw	zero,40(sp)
  80388c:	003cf306 	br	802c5c <_dtoa_r+0x258>
  803890:	d9000d17 	ldw	r4,52(sp)
  803894:	08094700 	call	809470 <__floatsidf>
  803898:	880b883a 	mov	r5,r17
  80389c:	8009883a 	mov	r4,r16
  8038a0:	180f883a 	mov	r7,r3
  8038a4:	100d883a 	mov	r6,r2
  8038a8:	08092500 	call	809250 <__nedf2>
  8038ac:	103ce126 	beq	r2,zero,802c34 <_dtoa_r+0x230>
  8038b0:	d9800d17 	ldw	r6,52(sp)
  8038b4:	31bfffc4 	addi	r6,r6,-1
  8038b8:	d9800d15 	stw	r6,52(sp)
  8038bc:	003cdd06 	br	802c34 <_dtoa_r+0x230>
  8038c0:	d9000717 	ldw	r4,28(sp)
  8038c4:	900b883a 	mov	r5,r18
  8038c8:	0805d280 	call	805d28 <__mcmp>
  8038cc:	103e8d0e 	bge	r2,zero,803304 <_dtoa_r+0x900>
  8038d0:	d9400717 	ldw	r5,28(sp)
  8038d4:	d9001617 	ldw	r4,88(sp)
  8038d8:	01800284 	movi	r6,10
  8038dc:	000f883a 	mov	r7,zero
  8038e0:	08068ec0 	call	8068ec <__multadd>
  8038e4:	d9800d17 	ldw	r6,52(sp)
  8038e8:	d8800715 	stw	r2,28(sp)
  8038ec:	31bfffc4 	addi	r6,r6,-1
  8038f0:	d9800d15 	stw	r6,52(sp)
  8038f4:	b001a71e 	bne	r22,zero,803f94 <_dtoa_r+0x1590>
  8038f8:	d8800e17 	ldw	r2,56(sp)
  8038fc:	d8800f15 	stw	r2,60(sp)
  803900:	003e8006 	br	803304 <_dtoa_r+0x900>
  803904:	90800417 	ldw	r2,16(r18)
  803908:	1085883a 	add	r2,r2,r2
  80390c:	1085883a 	add	r2,r2,r2
  803910:	1485883a 	add	r2,r2,r18
  803914:	11000417 	ldw	r4,16(r2)
  803918:	0805bf40 	call	805bf4 <__hi0bits>
  80391c:	00c00804 	movi	r3,32
  803920:	1887c83a 	sub	r3,r3,r2
  803924:	003e5a06 	br	803290 <_dtoa_r+0x88c>
  803928:	d9400717 	ldw	r5,28(sp)
  80392c:	d9801017 	ldw	r6,64(sp)
  803930:	d9001617 	ldw	r4,88(sp)
  803934:	0806a180 	call	806a18 <__pow5mult>
  803938:	d8800715 	stw	r2,28(sp)
  80393c:	003e4306 	br	80324c <_dtoa_r+0x848>
  803940:	d9800f17 	ldw	r6,60(sp)
  803944:	d8800d17 	ldw	r2,52(sp)
  803948:	d9800315 	stw	r6,12(sp)
  80394c:	d8800415 	stw	r2,16(sp)
  803950:	d8c00b17 	ldw	r3,44(sp)
  803954:	1805003a 	cmpeq	r2,r3,zero
  803958:	1000e21e 	bne	r2,zero,803ce4 <_dtoa_r+0x12e0>
  80395c:	d9000317 	ldw	r4,12(sp)
  803960:	0005883a 	mov	r2,zero
  803964:	00cff834 	movhi	r3,16352
  803968:	200c90fa 	slli	r6,r4,3
  80396c:	01002074 	movhi	r4,129
  803970:	211b7f04 	addi	r4,r4,28156
  803974:	180b883a 	mov	r5,r3
  803978:	310d883a 	add	r6,r6,r4
  80397c:	327fff17 	ldw	r9,-4(r6)
  803980:	323ffe17 	ldw	r8,-8(r6)
  803984:	1009883a 	mov	r4,r2
  803988:	480f883a 	mov	r7,r9
  80398c:	400d883a 	mov	r6,r8
  803990:	0808f700 	call	808f70 <__divdf3>
  803994:	180b883a 	mov	r5,r3
  803998:	b00d883a 	mov	r6,r22
  80399c:	b80f883a 	mov	r7,r23
  8039a0:	1009883a 	mov	r4,r2
  8039a4:	0808ab80 	call	808ab8 <__subdf3>
  8039a8:	a80b883a 	mov	r5,r21
  8039ac:	a009883a 	mov	r4,r20
  8039b0:	d8c01915 	stw	r3,100(sp)
  8039b4:	d8801815 	stw	r2,96(sp)
  8039b8:	08095680 	call	809568 <__fixdfsi>
  8039bc:	1009883a 	mov	r4,r2
  8039c0:	1027883a 	mov	r19,r2
  8039c4:	08094700 	call	809470 <__floatsidf>
  8039c8:	a80b883a 	mov	r5,r21
  8039cc:	a009883a 	mov	r4,r20
  8039d0:	180f883a 	mov	r7,r3
  8039d4:	100d883a 	mov	r6,r2
  8039d8:	0808ab80 	call	808ab8 <__subdf3>
  8039dc:	d9801817 	ldw	r6,96(sp)
  8039e0:	1823883a 	mov	r17,r3
  8039e4:	d8801415 	stw	r2,80(sp)
  8039e8:	302d883a 	mov	r22,r6
  8039ec:	d9800517 	ldw	r6,20(sp)
  8039f0:	9cc00c04 	addi	r19,r19,48
  8039f4:	dc401515 	stw	r17,84(sp)
  8039f8:	d8c01917 	ldw	r3,100(sp)
  8039fc:	34c00005 	stb	r19,0(r6)
  803a00:	d8800517 	ldw	r2,20(sp)
  803a04:	d9401917 	ldw	r5,100(sp)
  803a08:	d9801417 	ldw	r6,80(sp)
  803a0c:	b009883a 	mov	r4,r22
  803a10:	880f883a 	mov	r7,r17
  803a14:	182f883a 	mov	r23,r3
  803a18:	17000044 	addi	fp,r2,1
  803a1c:	08092d80 	call	8092d8 <__gtdf2>
  803a20:	00804e16 	blt	zero,r2,803b5c <_dtoa_r+0x1158>
  803a24:	d9801417 	ldw	r6,80(sp)
  803a28:	0005883a 	mov	r2,zero
  803a2c:	00cffc34 	movhi	r3,16368
  803a30:	180b883a 	mov	r5,r3
  803a34:	880f883a 	mov	r7,r17
  803a38:	1009883a 	mov	r4,r2
  803a3c:	0808ab80 	call	808ab8 <__subdf3>
  803a40:	d9401917 	ldw	r5,100(sp)
  803a44:	180f883a 	mov	r7,r3
  803a48:	b009883a 	mov	r4,r22
  803a4c:	100d883a 	mov	r6,r2
  803a50:	08092d80 	call	8092d8 <__gtdf2>
  803a54:	00bda216 	blt	zero,r2,8030e0 <_dtoa_r+0x6dc>
  803a58:	d8c00317 	ldw	r3,12(sp)
  803a5c:	00800044 	movi	r2,1
  803a60:	10c01216 	blt	r2,r3,803aac <_dtoa_r+0x10a8>
  803a64:	003d4506 	br	802f7c <_dtoa_r+0x578>
  803a68:	d9801417 	ldw	r6,80(sp)
  803a6c:	0005883a 	mov	r2,zero
  803a70:	00cffc34 	movhi	r3,16368
  803a74:	180b883a 	mov	r5,r3
  803a78:	880f883a 	mov	r7,r17
  803a7c:	1009883a 	mov	r4,r2
  803a80:	0808ab80 	call	808ab8 <__subdf3>
  803a84:	d9c01b17 	ldw	r7,108(sp)
  803a88:	180b883a 	mov	r5,r3
  803a8c:	1009883a 	mov	r4,r2
  803a90:	b00d883a 	mov	r6,r22
  803a94:	08093e80 	call	8093e8 <__ltdf2>
  803a98:	103d9116 	blt	r2,zero,8030e0 <_dtoa_r+0x6dc>
  803a9c:	d9800517 	ldw	r6,20(sp)
  803aa0:	d9000317 	ldw	r4,12(sp)
  803aa4:	3105883a 	add	r2,r6,r4
  803aa8:	e0bd3426 	beq	fp,r2,802f7c <_dtoa_r+0x578>
  803aac:	04500934 	movhi	r17,16420
  803ab0:	0021883a 	mov	r16,zero
  803ab4:	b80b883a 	mov	r5,r23
  803ab8:	b009883a 	mov	r4,r22
  803abc:	800d883a 	mov	r6,r16
  803ac0:	880f883a 	mov	r7,r17
  803ac4:	0808bac0 	call	808bac <__muldf3>
  803ac8:	d9401517 	ldw	r5,84(sp)
  803acc:	d9001417 	ldw	r4,80(sp)
  803ad0:	880f883a 	mov	r7,r17
  803ad4:	000d883a 	mov	r6,zero
  803ad8:	d8801a15 	stw	r2,104(sp)
  803adc:	d8c01b15 	stw	r3,108(sp)
  803ae0:	0808bac0 	call	808bac <__muldf3>
  803ae4:	180b883a 	mov	r5,r3
  803ae8:	1009883a 	mov	r4,r2
  803aec:	1823883a 	mov	r17,r3
  803af0:	1021883a 	mov	r16,r2
  803af4:	08095680 	call	809568 <__fixdfsi>
  803af8:	1009883a 	mov	r4,r2
  803afc:	102b883a 	mov	r21,r2
  803b00:	08094700 	call	809470 <__floatsidf>
  803b04:	880b883a 	mov	r5,r17
  803b08:	8009883a 	mov	r4,r16
  803b0c:	180f883a 	mov	r7,r3
  803b10:	100d883a 	mov	r6,r2
  803b14:	0808ab80 	call	808ab8 <__subdf3>
  803b18:	1021883a 	mov	r16,r2
  803b1c:	d9001b17 	ldw	r4,108(sp)
  803b20:	1823883a 	mov	r17,r3
  803b24:	dc001415 	stw	r16,80(sp)
  803b28:	ad400c04 	addi	r21,r21,48
  803b2c:	dc401515 	stw	r17,84(sp)
  803b30:	d8801a17 	ldw	r2,104(sp)
  803b34:	e5400005 	stb	r21,0(fp)
  803b38:	202f883a 	mov	r23,r4
  803b3c:	d9c01b17 	ldw	r7,108(sp)
  803b40:	d9001417 	ldw	r4,80(sp)
  803b44:	880b883a 	mov	r5,r17
  803b48:	100d883a 	mov	r6,r2
  803b4c:	102d883a 	mov	r22,r2
  803b50:	e7000044 	addi	fp,fp,1
  803b54:	08093e80 	call	8093e8 <__ltdf2>
  803b58:	103fc30e 	bge	r2,zero,803a68 <_dtoa_r+0x1064>
  803b5c:	d9000417 	ldw	r4,16(sp)
  803b60:	d9000d15 	stw	r4,52(sp)
  803b64:	003d7106 	br	80312c <_dtoa_r+0x728>
  803b68:	d9801717 	ldw	r6,92(sp)
  803b6c:	00800084 	movi	r2,2
  803b70:	11bde60e 	bge	r2,r6,80330c <_dtoa_r+0x908>
  803b74:	203cfb1e 	bne	r4,zero,802f64 <_dtoa_r+0x560>
  803b78:	d9001617 	ldw	r4,88(sp)
  803b7c:	900b883a 	mov	r5,r18
  803b80:	01800144 	movi	r6,5
  803b84:	000f883a 	mov	r7,zero
  803b88:	08068ec0 	call	8068ec <__multadd>
  803b8c:	d9000717 	ldw	r4,28(sp)
  803b90:	100b883a 	mov	r5,r2
  803b94:	1025883a 	mov	r18,r2
  803b98:	0805d280 	call	805d28 <__mcmp>
  803b9c:	00bcf10e 	bge	zero,r2,802f64 <_dtoa_r+0x560>
  803ba0:	d8c00d17 	ldw	r3,52(sp)
  803ba4:	d9000517 	ldw	r4,20(sp)
  803ba8:	d8000615 	stw	zero,24(sp)
  803bac:	18c00044 	addi	r3,r3,1
  803bb0:	d8c00d15 	stw	r3,52(sp)
  803bb4:	00800c44 	movi	r2,49
  803bb8:	27000044 	addi	fp,r4,1
  803bbc:	20800005 	stb	r2,0(r4)
  803bc0:	003e8906 	br	8035e8 <_dtoa_r+0xbe4>
  803bc4:	d8c00517 	ldw	r3,20(sp)
  803bc8:	003bc206 	br	802ad4 <_dtoa_r+0xd0>
  803bcc:	01802074 	movhi	r6,129
  803bd0:	319bb104 	addi	r6,r6,28356
  803bd4:	30c00917 	ldw	r3,36(r6)
  803bd8:	30800817 	ldw	r2,32(r6)
  803bdc:	d9001217 	ldw	r4,72(sp)
  803be0:	d9401317 	ldw	r5,76(sp)
  803be4:	180f883a 	mov	r7,r3
  803be8:	100d883a 	mov	r6,r2
  803bec:	0808f700 	call	808f70 <__divdf3>
  803bf0:	948003cc 	andi	r18,r18,15
  803bf4:	058000c4 	movi	r22,3
  803bf8:	1029883a 	mov	r20,r2
  803bfc:	182b883a 	mov	r21,r3
  803c00:	003c8906 	br	802e28 <_dtoa_r+0x424>
  803c04:	d9001017 	ldw	r4,64(sp)
  803c08:	d9800917 	ldw	r6,36(sp)
  803c0c:	0025883a 	mov	r18,zero
  803c10:	1105c83a 	sub	r2,r2,r4
  803c14:	2089883a 	add	r4,r4,r2
  803c18:	308d883a 	add	r6,r6,r2
  803c1c:	d9001015 	stw	r4,64(sp)
  803c20:	d9800915 	stw	r6,36(sp)
  803c24:	003e3206 	br	8034f0 <_dtoa_r+0xaec>
  803c28:	28800044 	addi	r2,r5,1
  803c2c:	27000044 	addi	fp,r4,1
  803c30:	20800005 	stb	r2,0(r4)
  803c34:	003e6c06 	br	8035e8 <_dtoa_r+0xbe4>
  803c38:	d8800f17 	ldw	r2,60(sp)
  803c3c:	00bce016 	blt	zero,r2,802fc0 <_dtoa_r+0x5bc>
  803c40:	d9800f17 	ldw	r6,60(sp)
  803c44:	303cc51e 	bne	r6,zero,802f5c <_dtoa_r+0x558>
  803c48:	0005883a 	mov	r2,zero
  803c4c:	00d00534 	movhi	r3,16404
  803c50:	980b883a 	mov	r5,r19
  803c54:	180f883a 	mov	r7,r3
  803c58:	9009883a 	mov	r4,r18
  803c5c:	100d883a 	mov	r6,r2
  803c60:	0808bac0 	call	808bac <__muldf3>
  803c64:	180b883a 	mov	r5,r3
  803c68:	a80f883a 	mov	r7,r21
  803c6c:	1009883a 	mov	r4,r2
  803c70:	a00d883a 	mov	r6,r20
  803c74:	08093600 	call	809360 <__gedf2>
  803c78:	103cb80e 	bge	r2,zero,802f5c <_dtoa_r+0x558>
  803c7c:	0027883a 	mov	r19,zero
  803c80:	0025883a 	mov	r18,zero
  803c84:	003fc606 	br	803ba0 <_dtoa_r+0x119c>
  803c88:	99400117 	ldw	r5,4(r19)
  803c8c:	d9001617 	ldw	r4,88(sp)
  803c90:	080614c0 	call	80614c <_Balloc>
  803c94:	99800417 	ldw	r6,16(r19)
  803c98:	11000304 	addi	r4,r2,12
  803c9c:	99400304 	addi	r5,r19,12
  803ca0:	318d883a 	add	r6,r6,r6
  803ca4:	318d883a 	add	r6,r6,r6
  803ca8:	31800204 	addi	r6,r6,8
  803cac:	1023883a 	mov	r17,r2
  803cb0:	08059b40 	call	8059b4 <memcpy>
  803cb4:	d9001617 	ldw	r4,88(sp)
  803cb8:	880b883a 	mov	r5,r17
  803cbc:	01800044 	movi	r6,1
  803cc0:	08065100 	call	806510 <__lshift>
  803cc4:	100b883a 	mov	r5,r2
  803cc8:	003d9c06 	br	80333c <_dtoa_r+0x938>
  803ccc:	00800e44 	movi	r2,57
  803cd0:	b8807026 	beq	r23,r2,803e94 <_dtoa_r+0x1490>
  803cd4:	b8800044 	addi	r2,r23,1
  803cd8:	b7000044 	addi	fp,r22,1
  803cdc:	b0800005 	stb	r2,0(r22)
  803ce0:	003e4106 	br	8035e8 <_dtoa_r+0xbe4>
  803ce4:	d8800317 	ldw	r2,12(sp)
  803ce8:	01802074 	movhi	r6,129
  803cec:	319b7f04 	addi	r6,r6,28156
  803cf0:	b009883a 	mov	r4,r22
  803cf4:	100e90fa 	slli	r7,r2,3
  803cf8:	b80b883a 	mov	r5,r23
  803cfc:	398f883a 	add	r7,r7,r6
  803d00:	38bffe17 	ldw	r2,-8(r7)
  803d04:	d9800517 	ldw	r6,20(sp)
  803d08:	38ffff17 	ldw	r3,-4(r7)
  803d0c:	37000044 	addi	fp,r6,1
  803d10:	180f883a 	mov	r7,r3
  803d14:	100d883a 	mov	r6,r2
  803d18:	0808bac0 	call	808bac <__muldf3>
  803d1c:	a80b883a 	mov	r5,r21
  803d20:	a009883a 	mov	r4,r20
  803d24:	182f883a 	mov	r23,r3
  803d28:	102d883a 	mov	r22,r2
  803d2c:	08095680 	call	809568 <__fixdfsi>
  803d30:	1009883a 	mov	r4,r2
  803d34:	1027883a 	mov	r19,r2
  803d38:	08094700 	call	809470 <__floatsidf>
  803d3c:	a80b883a 	mov	r5,r21
  803d40:	a009883a 	mov	r4,r20
  803d44:	180f883a 	mov	r7,r3
  803d48:	100d883a 	mov	r6,r2
  803d4c:	0808ab80 	call	808ab8 <__subdf3>
  803d50:	180b883a 	mov	r5,r3
  803d54:	d8c00517 	ldw	r3,20(sp)
  803d58:	9cc00c04 	addi	r19,r19,48
  803d5c:	1009883a 	mov	r4,r2
  803d60:	1cc00005 	stb	r19,0(r3)
  803d64:	2021883a 	mov	r16,r4
  803d68:	d9000317 	ldw	r4,12(sp)
  803d6c:	00800044 	movi	r2,1
  803d70:	2823883a 	mov	r17,r5
  803d74:	20802226 	beq	r4,r2,803e00 <_dtoa_r+0x13fc>
  803d78:	1029883a 	mov	r20,r2
  803d7c:	0005883a 	mov	r2,zero
  803d80:	00d00934 	movhi	r3,16420
  803d84:	180f883a 	mov	r7,r3
  803d88:	100d883a 	mov	r6,r2
  803d8c:	880b883a 	mov	r5,r17
  803d90:	8009883a 	mov	r4,r16
  803d94:	0808bac0 	call	808bac <__muldf3>
  803d98:	180b883a 	mov	r5,r3
  803d9c:	1009883a 	mov	r4,r2
  803da0:	1823883a 	mov	r17,r3
  803da4:	1021883a 	mov	r16,r2
  803da8:	08095680 	call	809568 <__fixdfsi>
  803dac:	1009883a 	mov	r4,r2
  803db0:	102b883a 	mov	r21,r2
  803db4:	08094700 	call	809470 <__floatsidf>
  803db8:	880b883a 	mov	r5,r17
  803dbc:	8009883a 	mov	r4,r16
  803dc0:	180f883a 	mov	r7,r3
  803dc4:	100d883a 	mov	r6,r2
  803dc8:	0808ab80 	call	808ab8 <__subdf3>
  803dcc:	180b883a 	mov	r5,r3
  803dd0:	d8c00517 	ldw	r3,20(sp)
  803dd4:	1009883a 	mov	r4,r2
  803dd8:	ad400c04 	addi	r21,r21,48
  803ddc:	1d05883a 	add	r2,r3,r20
  803de0:	15400005 	stb	r21,0(r2)
  803de4:	2021883a 	mov	r16,r4
  803de8:	d9000317 	ldw	r4,12(sp)
  803dec:	a5000044 	addi	r20,r20,1
  803df0:	2823883a 	mov	r17,r5
  803df4:	a13fe11e 	bne	r20,r4,803d7c <_dtoa_r+0x1378>
  803df8:	e505883a 	add	r2,fp,r20
  803dfc:	173fffc4 	addi	fp,r2,-1
  803e00:	0025883a 	mov	r18,zero
  803e04:	04cff834 	movhi	r19,16352
  803e08:	b009883a 	mov	r4,r22
  803e0c:	b80b883a 	mov	r5,r23
  803e10:	900d883a 	mov	r6,r18
  803e14:	980f883a 	mov	r7,r19
  803e18:	0808b380 	call	808b38 <__adddf3>
  803e1c:	180b883a 	mov	r5,r3
  803e20:	1009883a 	mov	r4,r2
  803e24:	800d883a 	mov	r6,r16
  803e28:	880f883a 	mov	r7,r17
  803e2c:	08093e80 	call	8093e8 <__ltdf2>
  803e30:	103cab16 	blt	r2,zero,8030e0 <_dtoa_r+0x6dc>
  803e34:	0009883a 	mov	r4,zero
  803e38:	980b883a 	mov	r5,r19
  803e3c:	b80f883a 	mov	r7,r23
  803e40:	b00d883a 	mov	r6,r22
  803e44:	0808ab80 	call	808ab8 <__subdf3>
  803e48:	180b883a 	mov	r5,r3
  803e4c:	880f883a 	mov	r7,r17
  803e50:	1009883a 	mov	r4,r2
  803e54:	800d883a 	mov	r6,r16
  803e58:	08092d80 	call	8092d8 <__gtdf2>
  803e5c:	00bc470e 	bge	zero,r2,802f7c <_dtoa_r+0x578>
  803e60:	00c00c04 	movi	r3,48
  803e64:	e73fffc4 	addi	fp,fp,-1
  803e68:	e0800007 	ldb	r2,0(fp)
  803e6c:	10fffd26 	beq	r2,r3,803e64 <_dtoa_r+0x1460>
  803e70:	d9800417 	ldw	r6,16(sp)
  803e74:	e7000044 	addi	fp,fp,1
  803e78:	d9800d15 	stw	r6,52(sp)
  803e7c:	003cab06 	br	80312c <_dtoa_r+0x728>
  803e80:	d8c00f17 	ldw	r3,60(sp)
  803e84:	d9001117 	ldw	r4,68(sp)
  803e88:	20e1c83a 	sub	r16,r4,r3
  803e8c:	0007883a 	mov	r3,zero
  803e90:	003d9b06 	br	803500 <_dtoa_r+0xafc>
  803e94:	00800e44 	movi	r2,57
  803e98:	b0800005 	stb	r2,0(r22)
  803e9c:	b5800044 	addi	r22,r22,1
  803ea0:	003dc106 	br	8035a8 <_dtoa_r+0xba4>
  803ea4:	05800084 	movi	r22,2
  803ea8:	003bf706 	br	802e88 <_dtoa_r+0x484>
  803eac:	d9000f17 	ldw	r4,60(sp)
  803eb0:	013c000e 	bge	zero,r4,802eb4 <_dtoa_r+0x4b0>
  803eb4:	d9800e17 	ldw	r6,56(sp)
  803eb8:	01bc300e 	bge	zero,r6,802f7c <_dtoa_r+0x578>
  803ebc:	0005883a 	mov	r2,zero
  803ec0:	00d00934 	movhi	r3,16420
  803ec4:	a80b883a 	mov	r5,r21
  803ec8:	180f883a 	mov	r7,r3
  803ecc:	a009883a 	mov	r4,r20
  803ed0:	100d883a 	mov	r6,r2
  803ed4:	0808bac0 	call	808bac <__muldf3>
  803ed8:	b1000044 	addi	r4,r22,1
  803edc:	1021883a 	mov	r16,r2
  803ee0:	1823883a 	mov	r17,r3
  803ee4:	08094700 	call	809470 <__floatsidf>
  803ee8:	880b883a 	mov	r5,r17
  803eec:	8009883a 	mov	r4,r16
  803ef0:	180f883a 	mov	r7,r3
  803ef4:	100d883a 	mov	r6,r2
  803ef8:	0808bac0 	call	808bac <__muldf3>
  803efc:	0011883a 	mov	r8,zero
  803f00:	02500734 	movhi	r9,16412
  803f04:	180b883a 	mov	r5,r3
  803f08:	480f883a 	mov	r7,r9
  803f0c:	1009883a 	mov	r4,r2
  803f10:	400d883a 	mov	r6,r8
  803f14:	0808b380 	call	808b38 <__adddf3>
  803f18:	102d883a 	mov	r22,r2
  803f1c:	00bf3034 	movhi	r2,64704
  803f20:	10ef883a 	add	r23,r2,r3
  803f24:	d8800d17 	ldw	r2,52(sp)
  803f28:	d8c00e17 	ldw	r3,56(sp)
  803f2c:	8029883a 	mov	r20,r16
  803f30:	10bfffc4 	addi	r2,r2,-1
  803f34:	882b883a 	mov	r21,r17
  803f38:	d8800415 	stw	r2,16(sp)
  803f3c:	d8c00315 	stw	r3,12(sp)
  803f40:	003e8306 	br	803950 <_dtoa_r+0xf4c>
  803f44:	d8800117 	ldw	r2,4(sp)
  803f48:	dc001117 	ldw	r16,68(sp)
  803f4c:	dc801017 	ldw	r18,64(sp)
  803f50:	00c00d84 	movi	r3,54
  803f54:	1887c83a 	sub	r3,r3,r2
  803f58:	003d6906 	br	803500 <_dtoa_r+0xafc>
  803f5c:	01800044 	movi	r6,1
  803f60:	3021883a 	mov	r16,r6
  803f64:	d9800f15 	stw	r6,60(sp)
  803f68:	d9802615 	stw	r6,152(sp)
  803f6c:	d9800e15 	stw	r6,56(sp)
  803f70:	003b9306 	br	802dc0 <_dtoa_r+0x3bc>
  803f74:	b021883a 	mov	r16,r22
  803f78:	dd800f15 	stw	r22,60(sp)
  803f7c:	003b9006 	br	802dc0 <_dtoa_r+0x3bc>
  803f80:	103e221e 	bne	r2,zero,80380c <_dtoa_r+0xe08>
  803f84:	b880004c 	andi	r2,r23,1
  803f88:	1005003a 	cmpeq	r2,r2,zero
  803f8c:	103e1f1e 	bne	r2,zero,80380c <_dtoa_r+0xe08>
  803f90:	003e1b06 	br	803800 <_dtoa_r+0xdfc>
  803f94:	d9001617 	ldw	r4,88(sp)
  803f98:	980b883a 	mov	r5,r19
  803f9c:	01800284 	movi	r6,10
  803fa0:	000f883a 	mov	r7,zero
  803fa4:	08068ec0 	call	8068ec <__multadd>
  803fa8:	d8c00e17 	ldw	r3,56(sp)
  803fac:	1027883a 	mov	r19,r2
  803fb0:	d8c00f15 	stw	r3,60(sp)
  803fb4:	003cd306 	br	803304 <_dtoa_r+0x900>

00803fb8 <_fflush_r>:
  803fb8:	defffb04 	addi	sp,sp,-20
  803fbc:	dcc00315 	stw	r19,12(sp)
  803fc0:	dc800215 	stw	r18,8(sp)
  803fc4:	dfc00415 	stw	ra,16(sp)
  803fc8:	dc400115 	stw	r17,4(sp)
  803fcc:	dc000015 	stw	r16,0(sp)
  803fd0:	2027883a 	mov	r19,r4
  803fd4:	2825883a 	mov	r18,r5
  803fd8:	20000226 	beq	r4,zero,803fe4 <_fflush_r+0x2c>
  803fdc:	20800e17 	ldw	r2,56(r4)
  803fe0:	10005626 	beq	r2,zero,80413c <_fflush_r+0x184>
  803fe4:	9100030b 	ldhu	r4,12(r18)
  803fe8:	20ffffcc 	andi	r3,r4,65535
  803fec:	18e0001c 	xori	r3,r3,32768
  803ff0:	18e00004 	addi	r3,r3,-32768
  803ff4:	1880020c 	andi	r2,r3,8
  803ff8:	1000261e 	bne	r2,zero,804094 <_fflush_r+0xdc>
  803ffc:	90c00117 	ldw	r3,4(r18)
  804000:	20820014 	ori	r2,r4,2048
  804004:	9080030d 	sth	r2,12(r18)
  804008:	1009883a 	mov	r4,r2
  80400c:	00c0400e 	bge	zero,r3,804110 <_fflush_r+0x158>
  804010:	92000a17 	ldw	r8,40(r18)
  804014:	40004026 	beq	r8,zero,804118 <_fflush_r+0x160>
  804018:	2084000c 	andi	r2,r4,4096
  80401c:	10005326 	beq	r2,zero,80416c <_fflush_r+0x1b4>
  804020:	94001417 	ldw	r16,80(r18)
  804024:	9080030b 	ldhu	r2,12(r18)
  804028:	1080010c 	andi	r2,r2,4
  80402c:	1000481e 	bne	r2,zero,804150 <_fflush_r+0x198>
  804030:	91400717 	ldw	r5,28(r18)
  804034:	9809883a 	mov	r4,r19
  804038:	800d883a 	mov	r6,r16
  80403c:	000f883a 	mov	r7,zero
  804040:	403ee83a 	callr	r8
  804044:	8080261e 	bne	r16,r2,8040e0 <_fflush_r+0x128>
  804048:	9080030b 	ldhu	r2,12(r18)
  80404c:	91000417 	ldw	r4,16(r18)
  804050:	90000115 	stw	zero,4(r18)
  804054:	10bdffcc 	andi	r2,r2,63487
  804058:	10ffffcc 	andi	r3,r2,65535
  80405c:	18c4000c 	andi	r3,r3,4096
  804060:	9080030d 	sth	r2,12(r18)
  804064:	91000015 	stw	r4,0(r18)
  804068:	18002b26 	beq	r3,zero,804118 <_fflush_r+0x160>
  80406c:	0007883a 	mov	r3,zero
  804070:	1805883a 	mov	r2,r3
  804074:	94001415 	stw	r16,80(r18)
  804078:	dfc00417 	ldw	ra,16(sp)
  80407c:	dcc00317 	ldw	r19,12(sp)
  804080:	dc800217 	ldw	r18,8(sp)
  804084:	dc400117 	ldw	r17,4(sp)
  804088:	dc000017 	ldw	r16,0(sp)
  80408c:	dec00504 	addi	sp,sp,20
  804090:	f800283a 	ret
  804094:	94400417 	ldw	r17,16(r18)
  804098:	88001f26 	beq	r17,zero,804118 <_fflush_r+0x160>
  80409c:	90800017 	ldw	r2,0(r18)
  8040a0:	18c000cc 	andi	r3,r3,3
  8040a4:	94400015 	stw	r17,0(r18)
  8040a8:	1461c83a 	sub	r16,r2,r17
  8040ac:	18002526 	beq	r3,zero,804144 <_fflush_r+0x18c>
  8040b0:	0005883a 	mov	r2,zero
  8040b4:	90800215 	stw	r2,8(r18)
  8040b8:	0400170e 	bge	zero,r16,804118 <_fflush_r+0x160>
  8040bc:	90c00917 	ldw	r3,36(r18)
  8040c0:	91400717 	ldw	r5,28(r18)
  8040c4:	880d883a 	mov	r6,r17
  8040c8:	800f883a 	mov	r7,r16
  8040cc:	9809883a 	mov	r4,r19
  8040d0:	183ee83a 	callr	r3
  8040d4:	88a3883a 	add	r17,r17,r2
  8040d8:	80a1c83a 	sub	r16,r16,r2
  8040dc:	00bff616 	blt	zero,r2,8040b8 <_fflush_r+0x100>
  8040e0:	9080030b 	ldhu	r2,12(r18)
  8040e4:	00ffffc4 	movi	r3,-1
  8040e8:	10801014 	ori	r2,r2,64
  8040ec:	9080030d 	sth	r2,12(r18)
  8040f0:	1805883a 	mov	r2,r3
  8040f4:	dfc00417 	ldw	ra,16(sp)
  8040f8:	dcc00317 	ldw	r19,12(sp)
  8040fc:	dc800217 	ldw	r18,8(sp)
  804100:	dc400117 	ldw	r17,4(sp)
  804104:	dc000017 	ldw	r16,0(sp)
  804108:	dec00504 	addi	sp,sp,20
  80410c:	f800283a 	ret
  804110:	90800f17 	ldw	r2,60(r18)
  804114:	00bfbe16 	blt	zero,r2,804010 <_fflush_r+0x58>
  804118:	0007883a 	mov	r3,zero
  80411c:	1805883a 	mov	r2,r3
  804120:	dfc00417 	ldw	ra,16(sp)
  804124:	dcc00317 	ldw	r19,12(sp)
  804128:	dc800217 	ldw	r18,8(sp)
  80412c:	dc400117 	ldw	r17,4(sp)
  804130:	dc000017 	ldw	r16,0(sp)
  804134:	dec00504 	addi	sp,sp,20
  804138:	f800283a 	ret
  80413c:	08042500 	call	804250 <__sinit>
  804140:	003fa806 	br	803fe4 <_fflush_r+0x2c>
  804144:	90800517 	ldw	r2,20(r18)
  804148:	90800215 	stw	r2,8(r18)
  80414c:	003fda06 	br	8040b8 <_fflush_r+0x100>
  804150:	90800117 	ldw	r2,4(r18)
  804154:	90c00c17 	ldw	r3,48(r18)
  804158:	80a1c83a 	sub	r16,r16,r2
  80415c:	183fb426 	beq	r3,zero,804030 <_fflush_r+0x78>
  804160:	90800f17 	ldw	r2,60(r18)
  804164:	80a1c83a 	sub	r16,r16,r2
  804168:	003fb106 	br	804030 <_fflush_r+0x78>
  80416c:	91400717 	ldw	r5,28(r18)
  804170:	9809883a 	mov	r4,r19
  804174:	000d883a 	mov	r6,zero
  804178:	01c00044 	movi	r7,1
  80417c:	403ee83a 	callr	r8
  804180:	1021883a 	mov	r16,r2
  804184:	00bfffc4 	movi	r2,-1
  804188:	80800226 	beq	r16,r2,804194 <_fflush_r+0x1dc>
  80418c:	92000a17 	ldw	r8,40(r18)
  804190:	003fa406 	br	804024 <_fflush_r+0x6c>
  804194:	98c00017 	ldw	r3,0(r19)
  804198:	00800744 	movi	r2,29
  80419c:	18bfde26 	beq	r3,r2,804118 <_fflush_r+0x160>
  8041a0:	9080030b 	ldhu	r2,12(r18)
  8041a4:	8007883a 	mov	r3,r16
  8041a8:	10801014 	ori	r2,r2,64
  8041ac:	9080030d 	sth	r2,12(r18)
  8041b0:	003fcf06 	br	8040f0 <_fflush_r+0x138>

008041b4 <fflush>:
  8041b4:	01402034 	movhi	r5,128
  8041b8:	294fee04 	addi	r5,r5,16312
  8041bc:	2007883a 	mov	r3,r4
  8041c0:	20000526 	beq	r4,zero,8041d8 <fflush+0x24>
  8041c4:	008020b4 	movhi	r2,130
  8041c8:	10a32204 	addi	r2,r2,-29560
  8041cc:	11000017 	ldw	r4,0(r2)
  8041d0:	180b883a 	mov	r5,r3
  8041d4:	0803fb81 	jmpi	803fb8 <_fflush_r>
  8041d8:	008020b4 	movhi	r2,130
  8041dc:	10a32304 	addi	r2,r2,-29556
  8041e0:	11000017 	ldw	r4,0(r2)
  8041e4:	0804db81 	jmpi	804db8 <_fwalk_reent>

008041e8 <std>:
  8041e8:	00802034 	movhi	r2,128
  8041ec:	109ccb04 	addi	r2,r2,29484
  8041f0:	20800b15 	stw	r2,44(r4)
  8041f4:	00802034 	movhi	r2,128
  8041f8:	109d0604 	addi	r2,r2,29720
  8041fc:	20800815 	stw	r2,32(r4)
  804200:	00c02034 	movhi	r3,128
  804204:	18dce704 	addi	r3,r3,29596
  804208:	00802034 	movhi	r2,128
  80420c:	109ccd04 	addi	r2,r2,29492
  804210:	2140030d 	sth	r5,12(r4)
  804214:	2180038d 	sth	r6,14(r4)
  804218:	20c00915 	stw	r3,36(r4)
  80421c:	20800a15 	stw	r2,40(r4)
  804220:	20000015 	stw	zero,0(r4)
  804224:	20000115 	stw	zero,4(r4)
  804228:	20000215 	stw	zero,8(r4)
  80422c:	20000415 	stw	zero,16(r4)
  804230:	20000515 	stw	zero,20(r4)
  804234:	20000615 	stw	zero,24(r4)
  804238:	21000715 	stw	r4,28(r4)
  80423c:	f800283a 	ret

00804240 <__sfp_lock_acquire>:
  804240:	f800283a 	ret

00804244 <__sfp_lock_release>:
  804244:	f800283a 	ret

00804248 <__sinit_lock_acquire>:
  804248:	f800283a 	ret

0080424c <__sinit_lock_release>:
  80424c:	f800283a 	ret

00804250 <__sinit>:
  804250:	20800e17 	ldw	r2,56(r4)
  804254:	defffd04 	addi	sp,sp,-12
  804258:	dc400115 	stw	r17,4(sp)
  80425c:	dc000015 	stw	r16,0(sp)
  804260:	dfc00215 	stw	ra,8(sp)
  804264:	04400044 	movi	r17,1
  804268:	01400104 	movi	r5,4
  80426c:	000d883a 	mov	r6,zero
  804270:	2021883a 	mov	r16,r4
  804274:	2200bb04 	addi	r8,r4,748
  804278:	200f883a 	mov	r7,r4
  80427c:	10000526 	beq	r2,zero,804294 <__sinit+0x44>
  804280:	dfc00217 	ldw	ra,8(sp)
  804284:	dc400117 	ldw	r17,4(sp)
  804288:	dc000017 	ldw	r16,0(sp)
  80428c:	dec00304 	addi	sp,sp,12
  804290:	f800283a 	ret
  804294:	21000117 	ldw	r4,4(r4)
  804298:	00802034 	movhi	r2,128
  80429c:	1090cd04 	addi	r2,r2,17204
  8042a0:	00c000c4 	movi	r3,3
  8042a4:	80800f15 	stw	r2,60(r16)
  8042a8:	80c0b915 	stw	r3,740(r16)
  8042ac:	8200ba15 	stw	r8,744(r16)
  8042b0:	84400e15 	stw	r17,56(r16)
  8042b4:	8000b815 	stw	zero,736(r16)
  8042b8:	08041e80 	call	8041e8 <std>
  8042bc:	81000217 	ldw	r4,8(r16)
  8042c0:	880d883a 	mov	r6,r17
  8042c4:	800f883a 	mov	r7,r16
  8042c8:	01400284 	movi	r5,10
  8042cc:	08041e80 	call	8041e8 <std>
  8042d0:	81000317 	ldw	r4,12(r16)
  8042d4:	800f883a 	mov	r7,r16
  8042d8:	01400484 	movi	r5,18
  8042dc:	01800084 	movi	r6,2
  8042e0:	dfc00217 	ldw	ra,8(sp)
  8042e4:	dc400117 	ldw	r17,4(sp)
  8042e8:	dc000017 	ldw	r16,0(sp)
  8042ec:	dec00304 	addi	sp,sp,12
  8042f0:	08041e81 	jmpi	8041e8 <std>

008042f4 <__fp_lock>:
  8042f4:	0005883a 	mov	r2,zero
  8042f8:	f800283a 	ret

008042fc <__fp_unlock>:
  8042fc:	0005883a 	mov	r2,zero
  804300:	f800283a 	ret

00804304 <__fp_unlock_all>:
  804304:	008020b4 	movhi	r2,130
  804308:	10a32204 	addi	r2,r2,-29560
  80430c:	11000017 	ldw	r4,0(r2)
  804310:	01402034 	movhi	r5,128
  804314:	2950bf04 	addi	r5,r5,17148
  804318:	0804e801 	jmpi	804e80 <_fwalk>

0080431c <__fp_lock_all>:
  80431c:	008020b4 	movhi	r2,130
  804320:	10a32204 	addi	r2,r2,-29560
  804324:	11000017 	ldw	r4,0(r2)
  804328:	01402034 	movhi	r5,128
  80432c:	2950bd04 	addi	r5,r5,17140
  804330:	0804e801 	jmpi	804e80 <_fwalk>

00804334 <_cleanup_r>:
  804334:	01402034 	movhi	r5,128
  804338:	295dfd04 	addi	r5,r5,30708
  80433c:	0804e801 	jmpi	804e80 <_fwalk>

00804340 <_cleanup>:
  804340:	008020b4 	movhi	r2,130
  804344:	10a32304 	addi	r2,r2,-29556
  804348:	11000017 	ldw	r4,0(r2)
  80434c:	08043341 	jmpi	804334 <_cleanup_r>

00804350 <__sfmoreglue>:
  804350:	defffc04 	addi	sp,sp,-16
  804354:	dc000015 	stw	r16,0(sp)
  804358:	2821883a 	mov	r16,r5
  80435c:	dc400115 	stw	r17,4(sp)
  804360:	01401704 	movi	r5,92
  804364:	2023883a 	mov	r17,r4
  804368:	8009883a 	mov	r4,r16
  80436c:	dfc00315 	stw	ra,12(sp)
  804370:	dcc00215 	stw	r19,8(sp)
  804374:	08099200 	call	809920 <__mulsi3>
  804378:	11400304 	addi	r5,r2,12
  80437c:	8809883a 	mov	r4,r17
  804380:	1027883a 	mov	r19,r2
  804384:	08051900 	call	805190 <_malloc_r>
  804388:	10c00304 	addi	r3,r2,12
  80438c:	1023883a 	mov	r17,r2
  804390:	1809883a 	mov	r4,r3
  804394:	980d883a 	mov	r6,r19
  804398:	000b883a 	mov	r5,zero
  80439c:	10000b26 	beq	r2,zero,8043cc <__sfmoreglue+0x7c>
  8043a0:	14000115 	stw	r16,4(r2)
  8043a4:	10c00215 	stw	r3,8(r2)
  8043a8:	10000015 	stw	zero,0(r2)
  8043ac:	0805b340 	call	805b34 <memset>
  8043b0:	8805883a 	mov	r2,r17
  8043b4:	dfc00317 	ldw	ra,12(sp)
  8043b8:	dcc00217 	ldw	r19,8(sp)
  8043bc:	dc400117 	ldw	r17,4(sp)
  8043c0:	dc000017 	ldw	r16,0(sp)
  8043c4:	dec00404 	addi	sp,sp,16
  8043c8:	f800283a 	ret
  8043cc:	0023883a 	mov	r17,zero
  8043d0:	8805883a 	mov	r2,r17
  8043d4:	dfc00317 	ldw	ra,12(sp)
  8043d8:	dcc00217 	ldw	r19,8(sp)
  8043dc:	dc400117 	ldw	r17,4(sp)
  8043e0:	dc000017 	ldw	r16,0(sp)
  8043e4:	dec00404 	addi	sp,sp,16
  8043e8:	f800283a 	ret

008043ec <__sfp>:
  8043ec:	defffd04 	addi	sp,sp,-12
  8043f0:	008020b4 	movhi	r2,130
  8043f4:	10a32304 	addi	r2,r2,-29556
  8043f8:	dc000015 	stw	r16,0(sp)
  8043fc:	14000017 	ldw	r16,0(r2)
  804400:	dc400115 	stw	r17,4(sp)
  804404:	dfc00215 	stw	ra,8(sp)
  804408:	80800e17 	ldw	r2,56(r16)
  80440c:	2023883a 	mov	r17,r4
  804410:	10002626 	beq	r2,zero,8044ac <__sfp+0xc0>
  804414:	8400b804 	addi	r16,r16,736
  804418:	80800117 	ldw	r2,4(r16)
  80441c:	81000217 	ldw	r4,8(r16)
  804420:	10ffffc4 	addi	r3,r2,-1
  804424:	18000916 	blt	r3,zero,80444c <__sfp+0x60>
  804428:	2080030f 	ldh	r2,12(r4)
  80442c:	10000b26 	beq	r2,zero,80445c <__sfp+0x70>
  804430:	017fffc4 	movi	r5,-1
  804434:	00000206 	br	804440 <__sfp+0x54>
  804438:	2080030f 	ldh	r2,12(r4)
  80443c:	10000726 	beq	r2,zero,80445c <__sfp+0x70>
  804440:	18ffffc4 	addi	r3,r3,-1
  804444:	21001704 	addi	r4,r4,92
  804448:	197ffb1e 	bne	r3,r5,804438 <__sfp+0x4c>
  80444c:	80800017 	ldw	r2,0(r16)
  804450:	10001926 	beq	r2,zero,8044b8 <__sfp+0xcc>
  804454:	1021883a 	mov	r16,r2
  804458:	003fef06 	br	804418 <__sfp+0x2c>
  80445c:	00bfffc4 	movi	r2,-1
  804460:	00c00044 	movi	r3,1
  804464:	2080038d 	sth	r2,14(r4)
  804468:	20c0030d 	sth	r3,12(r4)
  80446c:	20000015 	stw	zero,0(r4)
  804470:	20000215 	stw	zero,8(r4)
  804474:	20000115 	stw	zero,4(r4)
  804478:	20000415 	stw	zero,16(r4)
  80447c:	20000515 	stw	zero,20(r4)
  804480:	20000615 	stw	zero,24(r4)
  804484:	20000c15 	stw	zero,48(r4)
  804488:	20000d15 	stw	zero,52(r4)
  80448c:	20001115 	stw	zero,68(r4)
  804490:	20001215 	stw	zero,72(r4)
  804494:	2005883a 	mov	r2,r4
  804498:	dfc00217 	ldw	ra,8(sp)
  80449c:	dc400117 	ldw	r17,4(sp)
  8044a0:	dc000017 	ldw	r16,0(sp)
  8044a4:	dec00304 	addi	sp,sp,12
  8044a8:	f800283a 	ret
  8044ac:	8009883a 	mov	r4,r16
  8044b0:	08042500 	call	804250 <__sinit>
  8044b4:	003fd706 	br	804414 <__sfp+0x28>
  8044b8:	8809883a 	mov	r4,r17
  8044bc:	01400104 	movi	r5,4
  8044c0:	08043500 	call	804350 <__sfmoreglue>
  8044c4:	80800015 	stw	r2,0(r16)
  8044c8:	103fe21e 	bne	r2,zero,804454 <__sfp+0x68>
  8044cc:	00800304 	movi	r2,12
  8044d0:	0009883a 	mov	r4,zero
  8044d4:	88800015 	stw	r2,0(r17)
  8044d8:	003fee06 	br	804494 <__sfp+0xa8>

008044dc <_malloc_trim_r>:
  8044dc:	defffb04 	addi	sp,sp,-20
  8044e0:	dcc00315 	stw	r19,12(sp)
  8044e4:	04c02074 	movhi	r19,129
  8044e8:	9cdd7804 	addi	r19,r19,30176
  8044ec:	dc800215 	stw	r18,8(sp)
  8044f0:	dc400115 	stw	r17,4(sp)
  8044f4:	dc000015 	stw	r16,0(sp)
  8044f8:	2823883a 	mov	r17,r5
  8044fc:	2025883a 	mov	r18,r4
  804500:	dfc00415 	stw	ra,16(sp)
  804504:	080ac440 	call	80ac44 <__malloc_lock>
  804508:	98800217 	ldw	r2,8(r19)
  80450c:	9009883a 	mov	r4,r18
  804510:	000b883a 	mov	r5,zero
  804514:	10c00117 	ldw	r3,4(r2)
  804518:	00bfff04 	movi	r2,-4
  80451c:	18a0703a 	and	r16,r3,r2
  804520:	8463c83a 	sub	r17,r16,r17
  804524:	8c43fbc4 	addi	r17,r17,4079
  804528:	8822d33a 	srli	r17,r17,12
  80452c:	0083ffc4 	movi	r2,4095
  804530:	8c7fffc4 	addi	r17,r17,-1
  804534:	8822933a 	slli	r17,r17,12
  804538:	1440060e 	bge	r2,r17,804554 <_malloc_trim_r+0x78>
  80453c:	08072bc0 	call	8072bc <_sbrk_r>
  804540:	98c00217 	ldw	r3,8(r19)
  804544:	9009883a 	mov	r4,r18
  804548:	044bc83a 	sub	r5,zero,r17
  80454c:	80c7883a 	add	r3,r16,r3
  804550:	10c00926 	beq	r2,r3,804578 <_malloc_trim_r+0x9c>
  804554:	080ad4c0 	call	80ad4c <__malloc_unlock>
  804558:	0005883a 	mov	r2,zero
  80455c:	dfc00417 	ldw	ra,16(sp)
  804560:	dcc00317 	ldw	r19,12(sp)
  804564:	dc800217 	ldw	r18,8(sp)
  804568:	dc400117 	ldw	r17,4(sp)
  80456c:	dc000017 	ldw	r16,0(sp)
  804570:	dec00504 	addi	sp,sp,20
  804574:	f800283a 	ret
  804578:	9009883a 	mov	r4,r18
  80457c:	08072bc0 	call	8072bc <_sbrk_r>
  804580:	844dc83a 	sub	r6,r16,r17
  804584:	00ffffc4 	movi	r3,-1
  804588:	9009883a 	mov	r4,r18
  80458c:	000b883a 	mov	r5,zero
  804590:	01c020b4 	movhi	r7,130
  804594:	39ea5404 	addi	r7,r7,-22192
  804598:	31800054 	ori	r6,r6,1
  80459c:	10c00926 	beq	r2,r3,8045c4 <_malloc_trim_r+0xe8>
  8045a0:	38800017 	ldw	r2,0(r7)
  8045a4:	98c00217 	ldw	r3,8(r19)
  8045a8:	9009883a 	mov	r4,r18
  8045ac:	1445c83a 	sub	r2,r2,r17
  8045b0:	38800015 	stw	r2,0(r7)
  8045b4:	19800115 	stw	r6,4(r3)
  8045b8:	080ad4c0 	call	80ad4c <__malloc_unlock>
  8045bc:	00800044 	movi	r2,1
  8045c0:	003fe606 	br	80455c <_malloc_trim_r+0x80>
  8045c4:	08072bc0 	call	8072bc <_sbrk_r>
  8045c8:	99800217 	ldw	r6,8(r19)
  8045cc:	100f883a 	mov	r7,r2
  8045d0:	9009883a 	mov	r4,r18
  8045d4:	1187c83a 	sub	r3,r2,r6
  8045d8:	008003c4 	movi	r2,15
  8045dc:	19400054 	ori	r5,r3,1
  8045e0:	10ffdc0e 	bge	r2,r3,804554 <_malloc_trim_r+0x78>
  8045e4:	008020b4 	movhi	r2,130
  8045e8:	10a32704 	addi	r2,r2,-29540
  8045ec:	10c00017 	ldw	r3,0(r2)
  8045f0:	008020b4 	movhi	r2,130
  8045f4:	10aa5404 	addi	r2,r2,-22192
  8045f8:	31400115 	stw	r5,4(r6)
  8045fc:	38c7c83a 	sub	r3,r7,r3
  804600:	10c00015 	stw	r3,0(r2)
  804604:	003fd306 	br	804554 <_malloc_trim_r+0x78>

00804608 <_free_r>:
  804608:	defffd04 	addi	sp,sp,-12
  80460c:	dc400115 	stw	r17,4(sp)
  804610:	dc000015 	stw	r16,0(sp)
  804614:	dfc00215 	stw	ra,8(sp)
  804618:	2821883a 	mov	r16,r5
  80461c:	2023883a 	mov	r17,r4
  804620:	28005a26 	beq	r5,zero,80478c <_free_r+0x184>
  804624:	080ac440 	call	80ac44 <__malloc_lock>
  804628:	823ffe04 	addi	r8,r16,-8
  80462c:	41400117 	ldw	r5,4(r8)
  804630:	00bfff84 	movi	r2,-2
  804634:	02802074 	movhi	r10,129
  804638:	529d7804 	addi	r10,r10,30176
  80463c:	288e703a 	and	r7,r5,r2
  804640:	41cd883a 	add	r6,r8,r7
  804644:	30c00117 	ldw	r3,4(r6)
  804648:	51000217 	ldw	r4,8(r10)
  80464c:	00bfff04 	movi	r2,-4
  804650:	1892703a 	and	r9,r3,r2
  804654:	5017883a 	mov	r11,r10
  804658:	31006726 	beq	r6,r4,8047f8 <_free_r+0x1f0>
  80465c:	2880004c 	andi	r2,r5,1
  804660:	1005003a 	cmpeq	r2,r2,zero
  804664:	32400115 	stw	r9,4(r6)
  804668:	10001a1e 	bne	r2,zero,8046d4 <_free_r+0xcc>
  80466c:	000b883a 	mov	r5,zero
  804670:	3247883a 	add	r3,r6,r9
  804674:	18800117 	ldw	r2,4(r3)
  804678:	1080004c 	andi	r2,r2,1
  80467c:	1000231e 	bne	r2,zero,80470c <_free_r+0x104>
  804680:	280ac03a 	cmpne	r5,r5,zero
  804684:	3a4f883a 	add	r7,r7,r9
  804688:	2800451e 	bne	r5,zero,8047a0 <_free_r+0x198>
  80468c:	31000217 	ldw	r4,8(r6)
  804690:	00802074 	movhi	r2,129
  804694:	109d7a04 	addi	r2,r2,30184
  804698:	20807b26 	beq	r4,r2,804888 <_free_r+0x280>
  80469c:	30800317 	ldw	r2,12(r6)
  8046a0:	3a07883a 	add	r3,r7,r8
  8046a4:	19c00015 	stw	r7,0(r3)
  8046a8:	11000215 	stw	r4,8(r2)
  8046ac:	20800315 	stw	r2,12(r4)
  8046b0:	38800054 	ori	r2,r7,1
  8046b4:	40800115 	stw	r2,4(r8)
  8046b8:	28001a26 	beq	r5,zero,804724 <_free_r+0x11c>
  8046bc:	8809883a 	mov	r4,r17
  8046c0:	dfc00217 	ldw	ra,8(sp)
  8046c4:	dc400117 	ldw	r17,4(sp)
  8046c8:	dc000017 	ldw	r16,0(sp)
  8046cc:	dec00304 	addi	sp,sp,12
  8046d0:	080ad4c1 	jmpi	80ad4c <__malloc_unlock>
  8046d4:	80bffe17 	ldw	r2,-8(r16)
  8046d8:	50c00204 	addi	r3,r10,8
  8046dc:	4091c83a 	sub	r8,r8,r2
  8046e0:	41000217 	ldw	r4,8(r8)
  8046e4:	388f883a 	add	r7,r7,r2
  8046e8:	20c06126 	beq	r4,r3,804870 <_free_r+0x268>
  8046ec:	40800317 	ldw	r2,12(r8)
  8046f0:	3247883a 	add	r3,r6,r9
  8046f4:	000b883a 	mov	r5,zero
  8046f8:	11000215 	stw	r4,8(r2)
  8046fc:	20800315 	stw	r2,12(r4)
  804700:	18800117 	ldw	r2,4(r3)
  804704:	1080004c 	andi	r2,r2,1
  804708:	103fdd26 	beq	r2,zero,804680 <_free_r+0x78>
  80470c:	38800054 	ori	r2,r7,1
  804710:	3a07883a 	add	r3,r7,r8
  804714:	280ac03a 	cmpne	r5,r5,zero
  804718:	40800115 	stw	r2,4(r8)
  80471c:	19c00015 	stw	r7,0(r3)
  804720:	283fe61e 	bne	r5,zero,8046bc <_free_r+0xb4>
  804724:	00807fc4 	movi	r2,511
  804728:	11c01f2e 	bgeu	r2,r7,8047a8 <_free_r+0x1a0>
  80472c:	3806d27a 	srli	r3,r7,9
  804730:	1800481e 	bne	r3,zero,804854 <_free_r+0x24c>
  804734:	3804d0fa 	srli	r2,r7,3
  804738:	100690fa 	slli	r3,r2,3
  80473c:	1acd883a 	add	r6,r3,r11
  804740:	31400217 	ldw	r5,8(r6)
  804744:	31405926 	beq	r6,r5,8048ac <_free_r+0x2a4>
  804748:	28800117 	ldw	r2,4(r5)
  80474c:	00ffff04 	movi	r3,-4
  804750:	10c4703a 	and	r2,r2,r3
  804754:	3880022e 	bgeu	r7,r2,804760 <_free_r+0x158>
  804758:	29400217 	ldw	r5,8(r5)
  80475c:	317ffa1e 	bne	r6,r5,804748 <_free_r+0x140>
  804760:	29800317 	ldw	r6,12(r5)
  804764:	41800315 	stw	r6,12(r8)
  804768:	41400215 	stw	r5,8(r8)
  80476c:	8809883a 	mov	r4,r17
  804770:	2a000315 	stw	r8,12(r5)
  804774:	32000215 	stw	r8,8(r6)
  804778:	dfc00217 	ldw	ra,8(sp)
  80477c:	dc400117 	ldw	r17,4(sp)
  804780:	dc000017 	ldw	r16,0(sp)
  804784:	dec00304 	addi	sp,sp,12
  804788:	080ad4c1 	jmpi	80ad4c <__malloc_unlock>
  80478c:	dfc00217 	ldw	ra,8(sp)
  804790:	dc400117 	ldw	r17,4(sp)
  804794:	dc000017 	ldw	r16,0(sp)
  804798:	dec00304 	addi	sp,sp,12
  80479c:	f800283a 	ret
  8047a0:	31000217 	ldw	r4,8(r6)
  8047a4:	003fbd06 	br	80469c <_free_r+0x94>
  8047a8:	3806d0fa 	srli	r3,r7,3
  8047ac:	00800044 	movi	r2,1
  8047b0:	51400117 	ldw	r5,4(r10)
  8047b4:	180890fa 	slli	r4,r3,3
  8047b8:	1807d0ba 	srai	r3,r3,2
  8047bc:	22c9883a 	add	r4,r4,r11
  8047c0:	21800217 	ldw	r6,8(r4)
  8047c4:	10c4983a 	sll	r2,r2,r3
  8047c8:	41000315 	stw	r4,12(r8)
  8047cc:	41800215 	stw	r6,8(r8)
  8047d0:	288ab03a 	or	r5,r5,r2
  8047d4:	22000215 	stw	r8,8(r4)
  8047d8:	8809883a 	mov	r4,r17
  8047dc:	51400115 	stw	r5,4(r10)
  8047e0:	32000315 	stw	r8,12(r6)
  8047e4:	dfc00217 	ldw	ra,8(sp)
  8047e8:	dc400117 	ldw	r17,4(sp)
  8047ec:	dc000017 	ldw	r16,0(sp)
  8047f0:	dec00304 	addi	sp,sp,12
  8047f4:	080ad4c1 	jmpi	80ad4c <__malloc_unlock>
  8047f8:	2880004c 	andi	r2,r5,1
  8047fc:	3a4d883a 	add	r6,r7,r9
  804800:	1000071e 	bne	r2,zero,804820 <_free_r+0x218>
  804804:	80bffe17 	ldw	r2,-8(r16)
  804808:	4091c83a 	sub	r8,r8,r2
  80480c:	41000317 	ldw	r4,12(r8)
  804810:	40c00217 	ldw	r3,8(r8)
  804814:	308d883a 	add	r6,r6,r2
  804818:	20c00215 	stw	r3,8(r4)
  80481c:	19000315 	stw	r4,12(r3)
  804820:	008020b4 	movhi	r2,130
  804824:	10a32604 	addi	r2,r2,-29544
  804828:	11000017 	ldw	r4,0(r2)
  80482c:	30c00054 	ori	r3,r6,1
  804830:	52000215 	stw	r8,8(r10)
  804834:	40c00115 	stw	r3,4(r8)
  804838:	313fa036 	bltu	r6,r4,8046bc <_free_r+0xb4>
  80483c:	008020b4 	movhi	r2,130
  804840:	10aa3104 	addi	r2,r2,-22332
  804844:	11400017 	ldw	r5,0(r2)
  804848:	8809883a 	mov	r4,r17
  80484c:	08044dc0 	call	8044dc <_malloc_trim_r>
  804850:	003f9a06 	br	8046bc <_free_r+0xb4>
  804854:	00800104 	movi	r2,4
  804858:	10c0072e 	bgeu	r2,r3,804878 <_free_r+0x270>
  80485c:	00800504 	movi	r2,20
  804860:	10c01936 	bltu	r2,r3,8048c8 <_free_r+0x2c0>
  804864:	188016c4 	addi	r2,r3,91
  804868:	100690fa 	slli	r3,r2,3
  80486c:	003fb306 	br	80473c <_free_r+0x134>
  804870:	01400044 	movi	r5,1
  804874:	003f7e06 	br	804670 <_free_r+0x68>
  804878:	3804d1ba 	srli	r2,r7,6
  80487c:	10800e04 	addi	r2,r2,56
  804880:	100690fa 	slli	r3,r2,3
  804884:	003fad06 	br	80473c <_free_r+0x134>
  804888:	22000315 	stw	r8,12(r4)
  80488c:	22000215 	stw	r8,8(r4)
  804890:	3a05883a 	add	r2,r7,r8
  804894:	38c00054 	ori	r3,r7,1
  804898:	11c00015 	stw	r7,0(r2)
  80489c:	41000215 	stw	r4,8(r8)
  8048a0:	40c00115 	stw	r3,4(r8)
  8048a4:	41000315 	stw	r4,12(r8)
  8048a8:	003f8406 	br	8046bc <_free_r+0xb4>
  8048ac:	1005d0ba 	srai	r2,r2,2
  8048b0:	00c00044 	movi	r3,1
  8048b4:	51000117 	ldw	r4,4(r10)
  8048b8:	1886983a 	sll	r3,r3,r2
  8048bc:	20c8b03a 	or	r4,r4,r3
  8048c0:	51000115 	stw	r4,4(r10)
  8048c4:	003fa706 	br	804764 <_free_r+0x15c>
  8048c8:	00801504 	movi	r2,84
  8048cc:	10c00436 	bltu	r2,r3,8048e0 <_free_r+0x2d8>
  8048d0:	3804d33a 	srli	r2,r7,12
  8048d4:	10801b84 	addi	r2,r2,110
  8048d8:	100690fa 	slli	r3,r2,3
  8048dc:	003f9706 	br	80473c <_free_r+0x134>
  8048e0:	00805504 	movi	r2,340
  8048e4:	10c00436 	bltu	r2,r3,8048f8 <_free_r+0x2f0>
  8048e8:	3804d3fa 	srli	r2,r7,15
  8048ec:	10801dc4 	addi	r2,r2,119
  8048f0:	100690fa 	slli	r3,r2,3
  8048f4:	003f9106 	br	80473c <_free_r+0x134>
  8048f8:	00815504 	movi	r2,1364
  8048fc:	10c0032e 	bgeu	r2,r3,80490c <_free_r+0x304>
  804900:	00801f84 	movi	r2,126
  804904:	00c0fc04 	movi	r3,1008
  804908:	003f8c06 	br	80473c <_free_r+0x134>
  80490c:	3804d4ba 	srli	r2,r7,18
  804910:	10801f04 	addi	r2,r2,124
  804914:	100690fa 	slli	r3,r2,3
  804918:	003f8806 	br	80473c <_free_r+0x134>

0080491c <__sfvwrite_r>:
  80491c:	30800217 	ldw	r2,8(r6)
  804920:	defff504 	addi	sp,sp,-44
  804924:	df000915 	stw	fp,36(sp)
  804928:	dd800715 	stw	r22,28(sp)
  80492c:	dc800315 	stw	r18,12(sp)
  804930:	dfc00a15 	stw	ra,40(sp)
  804934:	ddc00815 	stw	r23,32(sp)
  804938:	dd400615 	stw	r21,24(sp)
  80493c:	dd000515 	stw	r20,20(sp)
  804940:	dcc00415 	stw	r19,16(sp)
  804944:	dc400215 	stw	r17,8(sp)
  804948:	dc000115 	stw	r16,4(sp)
  80494c:	302d883a 	mov	r22,r6
  804950:	2039883a 	mov	fp,r4
  804954:	2825883a 	mov	r18,r5
  804958:	10001c26 	beq	r2,zero,8049cc <__sfvwrite_r+0xb0>
  80495c:	29c0030b 	ldhu	r7,12(r5)
  804960:	3880020c 	andi	r2,r7,8
  804964:	10002726 	beq	r2,zero,804a04 <__sfvwrite_r+0xe8>
  804968:	28800417 	ldw	r2,16(r5)
  80496c:	10002526 	beq	r2,zero,804a04 <__sfvwrite_r+0xe8>
  804970:	3880008c 	andi	r2,r7,2
  804974:	b5400017 	ldw	r21,0(r22)
  804978:	10002826 	beq	r2,zero,804a1c <__sfvwrite_r+0x100>
  80497c:	0021883a 	mov	r16,zero
  804980:	0023883a 	mov	r17,zero
  804984:	880d883a 	mov	r6,r17
  804988:	e009883a 	mov	r4,fp
  80498c:	00810004 	movi	r2,1024
  804990:	80006e26 	beq	r16,zero,804b4c <__sfvwrite_r+0x230>
  804994:	800f883a 	mov	r7,r16
  804998:	91400717 	ldw	r5,28(r18)
  80499c:	1400012e 	bgeu	r2,r16,8049a4 <__sfvwrite_r+0x88>
  8049a0:	100f883a 	mov	r7,r2
  8049a4:	90c00917 	ldw	r3,36(r18)
  8049a8:	183ee83a 	callr	r3
  8049ac:	1007883a 	mov	r3,r2
  8049b0:	80a1c83a 	sub	r16,r16,r2
  8049b4:	88a3883a 	add	r17,r17,r2
  8049b8:	00806d0e 	bge	zero,r2,804b70 <__sfvwrite_r+0x254>
  8049bc:	b0800217 	ldw	r2,8(r22)
  8049c0:	10c5c83a 	sub	r2,r2,r3
  8049c4:	b0800215 	stw	r2,8(r22)
  8049c8:	103fee1e 	bne	r2,zero,804984 <__sfvwrite_r+0x68>
  8049cc:	0009883a 	mov	r4,zero
  8049d0:	2005883a 	mov	r2,r4
  8049d4:	dfc00a17 	ldw	ra,40(sp)
  8049d8:	df000917 	ldw	fp,36(sp)
  8049dc:	ddc00817 	ldw	r23,32(sp)
  8049e0:	dd800717 	ldw	r22,28(sp)
  8049e4:	dd400617 	ldw	r21,24(sp)
  8049e8:	dd000517 	ldw	r20,20(sp)
  8049ec:	dcc00417 	ldw	r19,16(sp)
  8049f0:	dc800317 	ldw	r18,12(sp)
  8049f4:	dc400217 	ldw	r17,8(sp)
  8049f8:	dc000117 	ldw	r16,4(sp)
  8049fc:	dec00b04 	addi	sp,sp,44
  804a00:	f800283a 	ret
  804a04:	08026840 	call	802684 <__swsetup_r>
  804a08:	1000e41e 	bne	r2,zero,804d9c <__sfvwrite_r+0x480>
  804a0c:	91c0030b 	ldhu	r7,12(r18)
  804a10:	b5400017 	ldw	r21,0(r22)
  804a14:	3880008c 	andi	r2,r7,2
  804a18:	103fd81e 	bne	r2,zero,80497c <__sfvwrite_r+0x60>
  804a1c:	3880004c 	andi	r2,r7,1
  804a20:	1005003a 	cmpeq	r2,r2,zero
  804a24:	10005726 	beq	r2,zero,804b84 <__sfvwrite_r+0x268>
  804a28:	0029883a 	mov	r20,zero
  804a2c:	002f883a 	mov	r23,zero
  804a30:	a0004226 	beq	r20,zero,804b3c <__sfvwrite_r+0x220>
  804a34:	3880800c 	andi	r2,r7,512
  804a38:	94000217 	ldw	r16,8(r18)
  804a3c:	10008b26 	beq	r2,zero,804c6c <__sfvwrite_r+0x350>
  804a40:	800d883a 	mov	r6,r16
  804a44:	a400a536 	bltu	r20,r16,804cdc <__sfvwrite_r+0x3c0>
  804a48:	3881200c 	andi	r2,r7,1152
  804a4c:	10002726 	beq	r2,zero,804aec <__sfvwrite_r+0x1d0>
  804a50:	90800517 	ldw	r2,20(r18)
  804a54:	92000417 	ldw	r8,16(r18)
  804a58:	91400017 	ldw	r5,0(r18)
  804a5c:	1087883a 	add	r3,r2,r2
  804a60:	1887883a 	add	r3,r3,r2
  804a64:	1808d7fa 	srli	r4,r3,31
  804a68:	2a21c83a 	sub	r16,r5,r8
  804a6c:	80800044 	addi	r2,r16,1
  804a70:	20c9883a 	add	r4,r4,r3
  804a74:	2027d07a 	srai	r19,r4,1
  804a78:	a085883a 	add	r2,r20,r2
  804a7c:	980d883a 	mov	r6,r19
  804a80:	9880022e 	bgeu	r19,r2,804a8c <__sfvwrite_r+0x170>
  804a84:	1027883a 	mov	r19,r2
  804a88:	100d883a 	mov	r6,r2
  804a8c:	3881000c 	andi	r2,r7,1024
  804a90:	1000b826 	beq	r2,zero,804d74 <__sfvwrite_r+0x458>
  804a94:	300b883a 	mov	r5,r6
  804a98:	e009883a 	mov	r4,fp
  804a9c:	08051900 	call	805190 <_malloc_r>
  804aa0:	10003126 	beq	r2,zero,804b68 <__sfvwrite_r+0x24c>
  804aa4:	91400417 	ldw	r5,16(r18)
  804aa8:	1009883a 	mov	r4,r2
  804aac:	800d883a 	mov	r6,r16
  804ab0:	1023883a 	mov	r17,r2
  804ab4:	08059b40 	call	8059b4 <memcpy>
  804ab8:	90c0030b 	ldhu	r3,12(r18)
  804abc:	00beffc4 	movi	r2,-1025
  804ac0:	1886703a 	and	r3,r3,r2
  804ac4:	18c02014 	ori	r3,r3,128
  804ac8:	90c0030d 	sth	r3,12(r18)
  804acc:	9c07c83a 	sub	r3,r19,r16
  804ad0:	8c05883a 	add	r2,r17,r16
  804ad4:	a00d883a 	mov	r6,r20
  804ad8:	a021883a 	mov	r16,r20
  804adc:	90800015 	stw	r2,0(r18)
  804ae0:	90c00215 	stw	r3,8(r18)
  804ae4:	94400415 	stw	r17,16(r18)
  804ae8:	94c00515 	stw	r19,20(r18)
  804aec:	91000017 	ldw	r4,0(r18)
  804af0:	b80b883a 	mov	r5,r23
  804af4:	a023883a 	mov	r17,r20
  804af8:	0805a540 	call	805a54 <memmove>
  804afc:	90c00217 	ldw	r3,8(r18)
  804b00:	90800017 	ldw	r2,0(r18)
  804b04:	a027883a 	mov	r19,r20
  804b08:	1c07c83a 	sub	r3,r3,r16
  804b0c:	1405883a 	add	r2,r2,r16
  804b10:	90c00215 	stw	r3,8(r18)
  804b14:	a021883a 	mov	r16,r20
  804b18:	90800015 	stw	r2,0(r18)
  804b1c:	b0800217 	ldw	r2,8(r22)
  804b20:	1405c83a 	sub	r2,r2,r16
  804b24:	b0800215 	stw	r2,8(r22)
  804b28:	103fa826 	beq	r2,zero,8049cc <__sfvwrite_r+0xb0>
  804b2c:	a469c83a 	sub	r20,r20,r17
  804b30:	91c0030b 	ldhu	r7,12(r18)
  804b34:	bcef883a 	add	r23,r23,r19
  804b38:	a03fbe1e 	bne	r20,zero,804a34 <__sfvwrite_r+0x118>
  804b3c:	adc00017 	ldw	r23,0(r21)
  804b40:	ad000117 	ldw	r20,4(r21)
  804b44:	ad400204 	addi	r21,r21,8
  804b48:	003fb906 	br	804a30 <__sfvwrite_r+0x114>
  804b4c:	ac400017 	ldw	r17,0(r21)
  804b50:	ac000117 	ldw	r16,4(r21)
  804b54:	ad400204 	addi	r21,r21,8
  804b58:	003f8a06 	br	804984 <__sfvwrite_r+0x68>
  804b5c:	91400417 	ldw	r5,16(r18)
  804b60:	e009883a 	mov	r4,fp
  804b64:	08046080 	call	804608 <_free_r>
  804b68:	00800304 	movi	r2,12
  804b6c:	e0800015 	stw	r2,0(fp)
  804b70:	9080030b 	ldhu	r2,12(r18)
  804b74:	013fffc4 	movi	r4,-1
  804b78:	10801014 	ori	r2,r2,64
  804b7c:	9080030d 	sth	r2,12(r18)
  804b80:	003f9306 	br	8049d0 <__sfvwrite_r+0xb4>
  804b84:	0027883a 	mov	r19,zero
  804b88:	002f883a 	mov	r23,zero
  804b8c:	d8000015 	stw	zero,0(sp)
  804b90:	0029883a 	mov	r20,zero
  804b94:	98001e26 	beq	r19,zero,804c10 <__sfvwrite_r+0x2f4>
  804b98:	d8c00017 	ldw	r3,0(sp)
  804b9c:	1804c03a 	cmpne	r2,r3,zero
  804ba0:	10005e26 	beq	r2,zero,804d1c <__sfvwrite_r+0x400>
  804ba4:	9821883a 	mov	r16,r19
  804ba8:	a4c0012e 	bgeu	r20,r19,804bb0 <__sfvwrite_r+0x294>
  804bac:	a021883a 	mov	r16,r20
  804bb0:	91000017 	ldw	r4,0(r18)
  804bb4:	90800417 	ldw	r2,16(r18)
  804bb8:	91800217 	ldw	r6,8(r18)
  804bbc:	91c00517 	ldw	r7,20(r18)
  804bc0:	1100022e 	bgeu	r2,r4,804bcc <__sfvwrite_r+0x2b0>
  804bc4:	31e3883a 	add	r17,r6,r7
  804bc8:	8c001616 	blt	r17,r16,804c24 <__sfvwrite_r+0x308>
  804bcc:	81c03816 	blt	r16,r7,804cb0 <__sfvwrite_r+0x394>
  804bd0:	90c00917 	ldw	r3,36(r18)
  804bd4:	91400717 	ldw	r5,28(r18)
  804bd8:	e009883a 	mov	r4,fp
  804bdc:	b80d883a 	mov	r6,r23
  804be0:	183ee83a 	callr	r3
  804be4:	1023883a 	mov	r17,r2
  804be8:	00bfe10e 	bge	zero,r2,804b70 <__sfvwrite_r+0x254>
  804bec:	a469c83a 	sub	r20,r20,r17
  804bf0:	a0001826 	beq	r20,zero,804c54 <__sfvwrite_r+0x338>
  804bf4:	b0800217 	ldw	r2,8(r22)
  804bf8:	1445c83a 	sub	r2,r2,r17
  804bfc:	b0800215 	stw	r2,8(r22)
  804c00:	103f7226 	beq	r2,zero,8049cc <__sfvwrite_r+0xb0>
  804c04:	9c67c83a 	sub	r19,r19,r17
  804c08:	bc6f883a 	add	r23,r23,r17
  804c0c:	983fe21e 	bne	r19,zero,804b98 <__sfvwrite_r+0x27c>
  804c10:	adc00017 	ldw	r23,0(r21)
  804c14:	acc00117 	ldw	r19,4(r21)
  804c18:	ad400204 	addi	r21,r21,8
  804c1c:	d8000015 	stw	zero,0(sp)
  804c20:	003fdc06 	br	804b94 <__sfvwrite_r+0x278>
  804c24:	b80b883a 	mov	r5,r23
  804c28:	880d883a 	mov	r6,r17
  804c2c:	0805a540 	call	805a54 <memmove>
  804c30:	90c00017 	ldw	r3,0(r18)
  804c34:	e009883a 	mov	r4,fp
  804c38:	900b883a 	mov	r5,r18
  804c3c:	1c47883a 	add	r3,r3,r17
  804c40:	90c00015 	stw	r3,0(r18)
  804c44:	0803fb80 	call	803fb8 <_fflush_r>
  804c48:	103fc91e 	bne	r2,zero,804b70 <__sfvwrite_r+0x254>
  804c4c:	a469c83a 	sub	r20,r20,r17
  804c50:	a03fe81e 	bne	r20,zero,804bf4 <__sfvwrite_r+0x2d8>
  804c54:	e009883a 	mov	r4,fp
  804c58:	900b883a 	mov	r5,r18
  804c5c:	0803fb80 	call	803fb8 <_fflush_r>
  804c60:	103fc31e 	bne	r2,zero,804b70 <__sfvwrite_r+0x254>
  804c64:	d8000015 	stw	zero,0(sp)
  804c68:	003fe206 	br	804bf4 <__sfvwrite_r+0x2d8>
  804c6c:	91000017 	ldw	r4,0(r18)
  804c70:	90800417 	ldw	r2,16(r18)
  804c74:	1100022e 	bgeu	r2,r4,804c80 <__sfvwrite_r+0x364>
  804c78:	8023883a 	mov	r17,r16
  804c7c:	85003136 	bltu	r16,r20,804d44 <__sfvwrite_r+0x428>
  804c80:	91c00517 	ldw	r7,20(r18)
  804c84:	a1c01836 	bltu	r20,r7,804ce8 <__sfvwrite_r+0x3cc>
  804c88:	90c00917 	ldw	r3,36(r18)
  804c8c:	91400717 	ldw	r5,28(r18)
  804c90:	e009883a 	mov	r4,fp
  804c94:	b80d883a 	mov	r6,r23
  804c98:	183ee83a 	callr	r3
  804c9c:	1021883a 	mov	r16,r2
  804ca0:	00bfb30e 	bge	zero,r2,804b70 <__sfvwrite_r+0x254>
  804ca4:	1023883a 	mov	r17,r2
  804ca8:	1027883a 	mov	r19,r2
  804cac:	003f9b06 	br	804b1c <__sfvwrite_r+0x200>
  804cb0:	b80b883a 	mov	r5,r23
  804cb4:	800d883a 	mov	r6,r16
  804cb8:	0805a540 	call	805a54 <memmove>
  804cbc:	90c00217 	ldw	r3,8(r18)
  804cc0:	90800017 	ldw	r2,0(r18)
  804cc4:	8023883a 	mov	r17,r16
  804cc8:	1c07c83a 	sub	r3,r3,r16
  804ccc:	1405883a 	add	r2,r2,r16
  804cd0:	90c00215 	stw	r3,8(r18)
  804cd4:	90800015 	stw	r2,0(r18)
  804cd8:	003fc406 	br	804bec <__sfvwrite_r+0x2d0>
  804cdc:	a00d883a 	mov	r6,r20
  804ce0:	a021883a 	mov	r16,r20
  804ce4:	003f8106 	br	804aec <__sfvwrite_r+0x1d0>
  804ce8:	b80b883a 	mov	r5,r23
  804cec:	a00d883a 	mov	r6,r20
  804cf0:	0805a540 	call	805a54 <memmove>
  804cf4:	90c00217 	ldw	r3,8(r18)
  804cf8:	90800017 	ldw	r2,0(r18)
  804cfc:	a021883a 	mov	r16,r20
  804d00:	1d07c83a 	sub	r3,r3,r20
  804d04:	1505883a 	add	r2,r2,r20
  804d08:	a023883a 	mov	r17,r20
  804d0c:	a027883a 	mov	r19,r20
  804d10:	90c00215 	stw	r3,8(r18)
  804d14:	90800015 	stw	r2,0(r18)
  804d18:	003f8006 	br	804b1c <__sfvwrite_r+0x200>
  804d1c:	b809883a 	mov	r4,r23
  804d20:	01400284 	movi	r5,10
  804d24:	980d883a 	mov	r6,r19
  804d28:	08058d00 	call	8058d0 <memchr>
  804d2c:	10001726 	beq	r2,zero,804d8c <__sfvwrite_r+0x470>
  804d30:	15c5c83a 	sub	r2,r2,r23
  804d34:	15000044 	addi	r20,r2,1
  804d38:	00800044 	movi	r2,1
  804d3c:	d8800015 	stw	r2,0(sp)
  804d40:	003f9806 	br	804ba4 <__sfvwrite_r+0x288>
  804d44:	b80b883a 	mov	r5,r23
  804d48:	800d883a 	mov	r6,r16
  804d4c:	0805a540 	call	805a54 <memmove>
  804d50:	90c00017 	ldw	r3,0(r18)
  804d54:	e009883a 	mov	r4,fp
  804d58:	900b883a 	mov	r5,r18
  804d5c:	1c07883a 	add	r3,r3,r16
  804d60:	90c00015 	stw	r3,0(r18)
  804d64:	8027883a 	mov	r19,r16
  804d68:	0803fb80 	call	803fb8 <_fflush_r>
  804d6c:	103f6b26 	beq	r2,zero,804b1c <__sfvwrite_r+0x200>
  804d70:	003f7f06 	br	804b70 <__sfvwrite_r+0x254>
  804d74:	400b883a 	mov	r5,r8
  804d78:	e009883a 	mov	r4,fp
  804d7c:	0806c580 	call	806c58 <_realloc_r>
  804d80:	103f7626 	beq	r2,zero,804b5c <__sfvwrite_r+0x240>
  804d84:	1023883a 	mov	r17,r2
  804d88:	003f5006 	br	804acc <__sfvwrite_r+0x1b0>
  804d8c:	00c00044 	movi	r3,1
  804d90:	9d000044 	addi	r20,r19,1
  804d94:	d8c00015 	stw	r3,0(sp)
  804d98:	003f8206 	br	804ba4 <__sfvwrite_r+0x288>
  804d9c:	9080030b 	ldhu	r2,12(r18)
  804da0:	00c00244 	movi	r3,9
  804da4:	013fffc4 	movi	r4,-1
  804da8:	10801014 	ori	r2,r2,64
  804dac:	9080030d 	sth	r2,12(r18)
  804db0:	e0c00015 	stw	r3,0(fp)
  804db4:	003f0606 	br	8049d0 <__sfvwrite_r+0xb4>

00804db8 <_fwalk_reent>:
  804db8:	defff704 	addi	sp,sp,-36
  804dbc:	dcc00315 	stw	r19,12(sp)
  804dc0:	24c0b804 	addi	r19,r4,736
  804dc4:	dd800615 	stw	r22,24(sp)
  804dc8:	dd400515 	stw	r21,20(sp)
  804dcc:	dfc00815 	stw	ra,32(sp)
  804dd0:	ddc00715 	stw	r23,28(sp)
  804dd4:	dd000415 	stw	r20,16(sp)
  804dd8:	dc800215 	stw	r18,8(sp)
  804ddc:	dc400115 	stw	r17,4(sp)
  804de0:	dc000015 	stw	r16,0(sp)
  804de4:	202b883a 	mov	r21,r4
  804de8:	282d883a 	mov	r22,r5
  804dec:	08042400 	call	804240 <__sfp_lock_acquire>
  804df0:	98002126 	beq	r19,zero,804e78 <_fwalk_reent+0xc0>
  804df4:	002f883a 	mov	r23,zero
  804df8:	9c800117 	ldw	r18,4(r19)
  804dfc:	9c000217 	ldw	r16,8(r19)
  804e00:	90bfffc4 	addi	r2,r18,-1
  804e04:	10000d16 	blt	r2,zero,804e3c <_fwalk_reent+0x84>
  804e08:	0023883a 	mov	r17,zero
  804e0c:	053fffc4 	movi	r20,-1
  804e10:	8080030f 	ldh	r2,12(r16)
  804e14:	8c400044 	addi	r17,r17,1
  804e18:	10000626 	beq	r2,zero,804e34 <_fwalk_reent+0x7c>
  804e1c:	8080038f 	ldh	r2,14(r16)
  804e20:	800b883a 	mov	r5,r16
  804e24:	a809883a 	mov	r4,r21
  804e28:	15000226 	beq	r2,r20,804e34 <_fwalk_reent+0x7c>
  804e2c:	b03ee83a 	callr	r22
  804e30:	b8aeb03a 	or	r23,r23,r2
  804e34:	84001704 	addi	r16,r16,92
  804e38:	947ff51e 	bne	r18,r17,804e10 <_fwalk_reent+0x58>
  804e3c:	9cc00017 	ldw	r19,0(r19)
  804e40:	983fed1e 	bne	r19,zero,804df8 <_fwalk_reent+0x40>
  804e44:	08042440 	call	804244 <__sfp_lock_release>
  804e48:	b805883a 	mov	r2,r23
  804e4c:	dfc00817 	ldw	ra,32(sp)
  804e50:	ddc00717 	ldw	r23,28(sp)
  804e54:	dd800617 	ldw	r22,24(sp)
  804e58:	dd400517 	ldw	r21,20(sp)
  804e5c:	dd000417 	ldw	r20,16(sp)
  804e60:	dcc00317 	ldw	r19,12(sp)
  804e64:	dc800217 	ldw	r18,8(sp)
  804e68:	dc400117 	ldw	r17,4(sp)
  804e6c:	dc000017 	ldw	r16,0(sp)
  804e70:	dec00904 	addi	sp,sp,36
  804e74:	f800283a 	ret
  804e78:	002f883a 	mov	r23,zero
  804e7c:	003ff106 	br	804e44 <_fwalk_reent+0x8c>

00804e80 <_fwalk>:
  804e80:	defff804 	addi	sp,sp,-32
  804e84:	dcc00315 	stw	r19,12(sp)
  804e88:	24c0b804 	addi	r19,r4,736
  804e8c:	dd400515 	stw	r21,20(sp)
  804e90:	dfc00715 	stw	ra,28(sp)
  804e94:	dd800615 	stw	r22,24(sp)
  804e98:	dd000415 	stw	r20,16(sp)
  804e9c:	dc800215 	stw	r18,8(sp)
  804ea0:	dc400115 	stw	r17,4(sp)
  804ea4:	dc000015 	stw	r16,0(sp)
  804ea8:	282b883a 	mov	r21,r5
  804eac:	08042400 	call	804240 <__sfp_lock_acquire>
  804eb0:	98001f26 	beq	r19,zero,804f30 <_fwalk+0xb0>
  804eb4:	002d883a 	mov	r22,zero
  804eb8:	9c800117 	ldw	r18,4(r19)
  804ebc:	9c000217 	ldw	r16,8(r19)
  804ec0:	90bfffc4 	addi	r2,r18,-1
  804ec4:	10000c16 	blt	r2,zero,804ef8 <_fwalk+0x78>
  804ec8:	0023883a 	mov	r17,zero
  804ecc:	053fffc4 	movi	r20,-1
  804ed0:	8080030f 	ldh	r2,12(r16)
  804ed4:	8c400044 	addi	r17,r17,1
  804ed8:	10000526 	beq	r2,zero,804ef0 <_fwalk+0x70>
  804edc:	8080038f 	ldh	r2,14(r16)
  804ee0:	8009883a 	mov	r4,r16
  804ee4:	15000226 	beq	r2,r20,804ef0 <_fwalk+0x70>
  804ee8:	a83ee83a 	callr	r21
  804eec:	b0acb03a 	or	r22,r22,r2
  804ef0:	84001704 	addi	r16,r16,92
  804ef4:	947ff61e 	bne	r18,r17,804ed0 <_fwalk+0x50>
  804ef8:	9cc00017 	ldw	r19,0(r19)
  804efc:	983fee1e 	bne	r19,zero,804eb8 <_fwalk+0x38>
  804f00:	08042440 	call	804244 <__sfp_lock_release>
  804f04:	b005883a 	mov	r2,r22
  804f08:	dfc00717 	ldw	ra,28(sp)
  804f0c:	dd800617 	ldw	r22,24(sp)
  804f10:	dd400517 	ldw	r21,20(sp)
  804f14:	dd000417 	ldw	r20,16(sp)
  804f18:	dcc00317 	ldw	r19,12(sp)
  804f1c:	dc800217 	ldw	r18,8(sp)
  804f20:	dc400117 	ldw	r17,4(sp)
  804f24:	dc000017 	ldw	r16,0(sp)
  804f28:	dec00804 	addi	sp,sp,32
  804f2c:	f800283a 	ret
  804f30:	002d883a 	mov	r22,zero
  804f34:	003ff206 	br	804f00 <_fwalk+0x80>

00804f38 <__locale_charset>:
  804f38:	d0a00317 	ldw	r2,-32756(gp)
  804f3c:	f800283a 	ret

00804f40 <_localeconv_r>:
  804f40:	00802074 	movhi	r2,129
  804f44:	109b7304 	addi	r2,r2,28108
  804f48:	f800283a 	ret

00804f4c <localeconv>:
  804f4c:	008020b4 	movhi	r2,130
  804f50:	10a32204 	addi	r2,r2,-29560
  804f54:	11000017 	ldw	r4,0(r2)
  804f58:	0804f401 	jmpi	804f40 <_localeconv_r>

00804f5c <_setlocale_r>:
  804f5c:	defffc04 	addi	sp,sp,-16
  804f60:	00c02074 	movhi	r3,129
  804f64:	18db6e04 	addi	r3,r3,28088
  804f68:	dc800215 	stw	r18,8(sp)
  804f6c:	dc400115 	stw	r17,4(sp)
  804f70:	dc000015 	stw	r16,0(sp)
  804f74:	2023883a 	mov	r17,r4
  804f78:	2825883a 	mov	r18,r5
  804f7c:	dfc00315 	stw	ra,12(sp)
  804f80:	3021883a 	mov	r16,r6
  804f84:	3009883a 	mov	r4,r6
  804f88:	180b883a 	mov	r5,r3
  804f8c:	30000926 	beq	r6,zero,804fb4 <_setlocale_r+0x58>
  804f90:	08074780 	call	807478 <strcmp>
  804f94:	8009883a 	mov	r4,r16
  804f98:	01402074 	movhi	r5,129
  804f9c:	295b5904 	addi	r5,r5,28004
  804fa0:	10000b1e 	bne	r2,zero,804fd0 <_setlocale_r+0x74>
  804fa4:	8c000d15 	stw	r16,52(r17)
  804fa8:	8c800c15 	stw	r18,48(r17)
  804fac:	00c02074 	movhi	r3,129
  804fb0:	18db6e04 	addi	r3,r3,28088
  804fb4:	1805883a 	mov	r2,r3
  804fb8:	dfc00317 	ldw	ra,12(sp)
  804fbc:	dc800217 	ldw	r18,8(sp)
  804fc0:	dc400117 	ldw	r17,4(sp)
  804fc4:	dc000017 	ldw	r16,0(sp)
  804fc8:	dec00404 	addi	sp,sp,16
  804fcc:	f800283a 	ret
  804fd0:	08074780 	call	807478 <strcmp>
  804fd4:	0007883a 	mov	r3,zero
  804fd8:	103ff226 	beq	r2,zero,804fa4 <_setlocale_r+0x48>
  804fdc:	003ff506 	br	804fb4 <_setlocale_r+0x58>

00804fe0 <setlocale>:
  804fe0:	018020b4 	movhi	r6,130
  804fe4:	31a32204 	addi	r6,r6,-29560
  804fe8:	2007883a 	mov	r3,r4
  804fec:	31000017 	ldw	r4,0(r6)
  804ff0:	280d883a 	mov	r6,r5
  804ff4:	180b883a 	mov	r5,r3
  804ff8:	0804f5c1 	jmpi	804f5c <_setlocale_r>

00804ffc <__smakebuf_r>:
  804ffc:	2880030b 	ldhu	r2,12(r5)
  805000:	deffed04 	addi	sp,sp,-76
  805004:	dc401015 	stw	r17,64(sp)
  805008:	1080008c 	andi	r2,r2,2
  80500c:	dc000f15 	stw	r16,60(sp)
  805010:	dfc01215 	stw	ra,72(sp)
  805014:	dc801115 	stw	r18,68(sp)
  805018:	2821883a 	mov	r16,r5
  80501c:	2023883a 	mov	r17,r4
  805020:	10000b26 	beq	r2,zero,805050 <__smakebuf_r+0x54>
  805024:	28c010c4 	addi	r3,r5,67
  805028:	00800044 	movi	r2,1
  80502c:	28800515 	stw	r2,20(r5)
  805030:	28c00415 	stw	r3,16(r5)
  805034:	28c00015 	stw	r3,0(r5)
  805038:	dfc01217 	ldw	ra,72(sp)
  80503c:	dc801117 	ldw	r18,68(sp)
  805040:	dc401017 	ldw	r17,64(sp)
  805044:	dc000f17 	ldw	r16,60(sp)
  805048:	dec01304 	addi	sp,sp,76
  80504c:	f800283a 	ret
  805050:	2940038f 	ldh	r5,14(r5)
  805054:	28002116 	blt	r5,zero,8050dc <__smakebuf_r+0xe0>
  805058:	d80d883a 	mov	r6,sp
  80505c:	08078080 	call	807808 <_fstat_r>
  805060:	10001e16 	blt	r2,zero,8050dc <__smakebuf_r+0xe0>
  805064:	d8800117 	ldw	r2,4(sp)
  805068:	00e00014 	movui	r3,32768
  80506c:	113c000c 	andi	r4,r2,61440
  805070:	20c03126 	beq	r4,r3,805138 <__smakebuf_r+0x13c>
  805074:	8080030b 	ldhu	r2,12(r16)
  805078:	00c80004 	movi	r3,8192
  80507c:	10820014 	ori	r2,r2,2048
  805080:	8080030d 	sth	r2,12(r16)
  805084:	20c01e26 	beq	r4,r3,805100 <__smakebuf_r+0x104>
  805088:	04810004 	movi	r18,1024
  80508c:	8809883a 	mov	r4,r17
  805090:	900b883a 	mov	r5,r18
  805094:	08051900 	call	805190 <_malloc_r>
  805098:	1009883a 	mov	r4,r2
  80509c:	10003126 	beq	r2,zero,805164 <__smakebuf_r+0x168>
  8050a0:	80c0030b 	ldhu	r3,12(r16)
  8050a4:	00802034 	movhi	r2,128
  8050a8:	1090cd04 	addi	r2,r2,17204
  8050ac:	88800f15 	stw	r2,60(r17)
  8050b0:	18c02014 	ori	r3,r3,128
  8050b4:	84800515 	stw	r18,20(r16)
  8050b8:	80c0030d 	sth	r3,12(r16)
  8050bc:	81000415 	stw	r4,16(r16)
  8050c0:	81000015 	stw	r4,0(r16)
  8050c4:	dfc01217 	ldw	ra,72(sp)
  8050c8:	dc801117 	ldw	r18,68(sp)
  8050cc:	dc401017 	ldw	r17,64(sp)
  8050d0:	dc000f17 	ldw	r16,60(sp)
  8050d4:	dec01304 	addi	sp,sp,76
  8050d8:	f800283a 	ret
  8050dc:	80c0030b 	ldhu	r3,12(r16)
  8050e0:	1880200c 	andi	r2,r3,128
  8050e4:	10000426 	beq	r2,zero,8050f8 <__smakebuf_r+0xfc>
  8050e8:	04801004 	movi	r18,64
  8050ec:	18820014 	ori	r2,r3,2048
  8050f0:	8080030d 	sth	r2,12(r16)
  8050f4:	003fe506 	br	80508c <__smakebuf_r+0x90>
  8050f8:	04810004 	movi	r18,1024
  8050fc:	003ffb06 	br	8050ec <__smakebuf_r+0xf0>
  805100:	8140038f 	ldh	r5,14(r16)
  805104:	8809883a 	mov	r4,r17
  805108:	080787c0 	call	80787c <_isatty_r>
  80510c:	103fde26 	beq	r2,zero,805088 <__smakebuf_r+0x8c>
  805110:	8080030b 	ldhu	r2,12(r16)
  805114:	80c010c4 	addi	r3,r16,67
  805118:	04810004 	movi	r18,1024
  80511c:	10800054 	ori	r2,r2,1
  805120:	8080030d 	sth	r2,12(r16)
  805124:	00800044 	movi	r2,1
  805128:	80c00415 	stw	r3,16(r16)
  80512c:	80800515 	stw	r2,20(r16)
  805130:	80c00015 	stw	r3,0(r16)
  805134:	003fd506 	br	80508c <__smakebuf_r+0x90>
  805138:	80c00a17 	ldw	r3,40(r16)
  80513c:	00802034 	movhi	r2,128
  805140:	109ccd04 	addi	r2,r2,29492
  805144:	18bfcb1e 	bne	r3,r2,805074 <__smakebuf_r+0x78>
  805148:	8080030b 	ldhu	r2,12(r16)
  80514c:	00c10004 	movi	r3,1024
  805150:	1825883a 	mov	r18,r3
  805154:	10c4b03a 	or	r2,r2,r3
  805158:	8080030d 	sth	r2,12(r16)
  80515c:	80c01315 	stw	r3,76(r16)
  805160:	003fca06 	br	80508c <__smakebuf_r+0x90>
  805164:	8100030b 	ldhu	r4,12(r16)
  805168:	2080800c 	andi	r2,r4,512
  80516c:	103fb21e 	bne	r2,zero,805038 <__smakebuf_r+0x3c>
  805170:	80c010c4 	addi	r3,r16,67
  805174:	21000094 	ori	r4,r4,2
  805178:	00800044 	movi	r2,1
  80517c:	80800515 	stw	r2,20(r16)
  805180:	8100030d 	sth	r4,12(r16)
  805184:	80c00415 	stw	r3,16(r16)
  805188:	80c00015 	stw	r3,0(r16)
  80518c:	003faa06 	br	805038 <__smakebuf_r+0x3c>

00805190 <_malloc_r>:
  805190:	defff604 	addi	sp,sp,-40
  805194:	28c002c4 	addi	r3,r5,11
  805198:	00800584 	movi	r2,22
  80519c:	dc800215 	stw	r18,8(sp)
  8051a0:	dfc00915 	stw	ra,36(sp)
  8051a4:	df000815 	stw	fp,32(sp)
  8051a8:	ddc00715 	stw	r23,28(sp)
  8051ac:	dd800615 	stw	r22,24(sp)
  8051b0:	dd400515 	stw	r21,20(sp)
  8051b4:	dd000415 	stw	r20,16(sp)
  8051b8:	dcc00315 	stw	r19,12(sp)
  8051bc:	dc400115 	stw	r17,4(sp)
  8051c0:	dc000015 	stw	r16,0(sp)
  8051c4:	2025883a 	mov	r18,r4
  8051c8:	10c01236 	bltu	r2,r3,805214 <_malloc_r+0x84>
  8051cc:	04400404 	movi	r17,16
  8051d0:	8940142e 	bgeu	r17,r5,805224 <_malloc_r+0x94>
  8051d4:	00800304 	movi	r2,12
  8051d8:	0007883a 	mov	r3,zero
  8051dc:	90800015 	stw	r2,0(r18)
  8051e0:	1805883a 	mov	r2,r3
  8051e4:	dfc00917 	ldw	ra,36(sp)
  8051e8:	df000817 	ldw	fp,32(sp)
  8051ec:	ddc00717 	ldw	r23,28(sp)
  8051f0:	dd800617 	ldw	r22,24(sp)
  8051f4:	dd400517 	ldw	r21,20(sp)
  8051f8:	dd000417 	ldw	r20,16(sp)
  8051fc:	dcc00317 	ldw	r19,12(sp)
  805200:	dc800217 	ldw	r18,8(sp)
  805204:	dc400117 	ldw	r17,4(sp)
  805208:	dc000017 	ldw	r16,0(sp)
  80520c:	dec00a04 	addi	sp,sp,40
  805210:	f800283a 	ret
  805214:	00bffe04 	movi	r2,-8
  805218:	18a2703a 	and	r17,r3,r2
  80521c:	883fed16 	blt	r17,zero,8051d4 <_malloc_r+0x44>
  805220:	897fec36 	bltu	r17,r5,8051d4 <_malloc_r+0x44>
  805224:	9009883a 	mov	r4,r18
  805228:	080ac440 	call	80ac44 <__malloc_lock>
  80522c:	00807dc4 	movi	r2,503
  805230:	14402b2e 	bgeu	r2,r17,8052e0 <_malloc_r+0x150>
  805234:	8806d27a 	srli	r3,r17,9
  805238:	18003f1e 	bne	r3,zero,805338 <_malloc_r+0x1a8>
  80523c:	880cd0fa 	srli	r6,r17,3
  805240:	300490fa 	slli	r2,r6,3
  805244:	02c02074 	movhi	r11,129
  805248:	5add7804 	addi	r11,r11,30176
  80524c:	12cb883a 	add	r5,r2,r11
  805250:	2c000317 	ldw	r16,12(r5)
  805254:	580f883a 	mov	r7,r11
  805258:	2c00041e 	bne	r5,r16,80526c <_malloc_r+0xdc>
  80525c:	00000a06 	br	805288 <_malloc_r+0xf8>
  805260:	1800860e 	bge	r3,zero,80547c <_malloc_r+0x2ec>
  805264:	84000317 	ldw	r16,12(r16)
  805268:	2c000726 	beq	r5,r16,805288 <_malloc_r+0xf8>
  80526c:	80800117 	ldw	r2,4(r16)
  805270:	00ffff04 	movi	r3,-4
  805274:	10c8703a 	and	r4,r2,r3
  805278:	2447c83a 	sub	r3,r4,r17
  80527c:	008003c4 	movi	r2,15
  805280:	10fff70e 	bge	r2,r3,805260 <_malloc_r+0xd0>
  805284:	31bfffc4 	addi	r6,r6,-1
  805288:	32400044 	addi	r9,r6,1
  80528c:	02802074 	movhi	r10,129
  805290:	529d7a04 	addi	r10,r10,30184
  805294:	54000217 	ldw	r16,8(r10)
  805298:	8280a026 	beq	r16,r10,80551c <_malloc_r+0x38c>
  80529c:	80800117 	ldw	r2,4(r16)
  8052a0:	00ffff04 	movi	r3,-4
  8052a4:	10ca703a 	and	r5,r2,r3
  8052a8:	2c4dc83a 	sub	r6,r5,r17
  8052ac:	008003c4 	movi	r2,15
  8052b0:	11808316 	blt	r2,r6,8054c0 <_malloc_r+0x330>
  8052b4:	52800315 	stw	r10,12(r10)
  8052b8:	52800215 	stw	r10,8(r10)
  8052bc:	30002916 	blt	r6,zero,805364 <_malloc_r+0x1d4>
  8052c0:	8147883a 	add	r3,r16,r5
  8052c4:	18800117 	ldw	r2,4(r3)
  8052c8:	9009883a 	mov	r4,r18
  8052cc:	10800054 	ori	r2,r2,1
  8052d0:	18800115 	stw	r2,4(r3)
  8052d4:	080ad4c0 	call	80ad4c <__malloc_unlock>
  8052d8:	80c00204 	addi	r3,r16,8
  8052dc:	003fc006 	br	8051e0 <_malloc_r+0x50>
  8052e0:	02c02074 	movhi	r11,129
  8052e4:	5add7804 	addi	r11,r11,30176
  8052e8:	8ac5883a 	add	r2,r17,r11
  8052ec:	14000317 	ldw	r16,12(r2)
  8052f0:	580f883a 	mov	r7,r11
  8052f4:	8806d0fa 	srli	r3,r17,3
  8052f8:	14006c26 	beq	r2,r16,8054ac <_malloc_r+0x31c>
  8052fc:	80c00117 	ldw	r3,4(r16)
  805300:	00bfff04 	movi	r2,-4
  805304:	81800317 	ldw	r6,12(r16)
  805308:	1886703a 	and	r3,r3,r2
  80530c:	80c7883a 	add	r3,r16,r3
  805310:	18800117 	ldw	r2,4(r3)
  805314:	81400217 	ldw	r5,8(r16)
  805318:	9009883a 	mov	r4,r18
  80531c:	10800054 	ori	r2,r2,1
  805320:	18800115 	stw	r2,4(r3)
  805324:	31400215 	stw	r5,8(r6)
  805328:	29800315 	stw	r6,12(r5)
  80532c:	080ad4c0 	call	80ad4c <__malloc_unlock>
  805330:	80c00204 	addi	r3,r16,8
  805334:	003faa06 	br	8051e0 <_malloc_r+0x50>
  805338:	00800104 	movi	r2,4
  80533c:	10c0052e 	bgeu	r2,r3,805354 <_malloc_r+0x1c4>
  805340:	00800504 	movi	r2,20
  805344:	10c07836 	bltu	r2,r3,805528 <_malloc_r+0x398>
  805348:	198016c4 	addi	r6,r3,91
  80534c:	300490fa 	slli	r2,r6,3
  805350:	003fbc06 	br	805244 <_malloc_r+0xb4>
  805354:	8804d1ba 	srli	r2,r17,6
  805358:	11800e04 	addi	r6,r2,56
  80535c:	300490fa 	slli	r2,r6,3
  805360:	003fb806 	br	805244 <_malloc_r+0xb4>
  805364:	00807fc4 	movi	r2,511
  805368:	1140bb36 	bltu	r2,r5,805658 <_malloc_r+0x4c8>
  80536c:	2806d0fa 	srli	r3,r5,3
  805370:	573ffe04 	addi	fp,r10,-8
  805374:	00800044 	movi	r2,1
  805378:	180890fa 	slli	r4,r3,3
  80537c:	1807d0ba 	srai	r3,r3,2
  805380:	e1c00117 	ldw	r7,4(fp)
  805384:	5909883a 	add	r4,r11,r4
  805388:	21400217 	ldw	r5,8(r4)
  80538c:	10c4983a 	sll	r2,r2,r3
  805390:	81000315 	stw	r4,12(r16)
  805394:	81400215 	stw	r5,8(r16)
  805398:	388eb03a 	or	r7,r7,r2
  80539c:	2c000315 	stw	r16,12(r5)
  8053a0:	24000215 	stw	r16,8(r4)
  8053a4:	e1c00115 	stw	r7,4(fp)
  8053a8:	4807883a 	mov	r3,r9
  8053ac:	4800cd16 	blt	r9,zero,8056e4 <_malloc_r+0x554>
  8053b0:	1807d0ba 	srai	r3,r3,2
  8053b4:	00800044 	movi	r2,1
  8053b8:	10c8983a 	sll	r4,r2,r3
  8053bc:	39004436 	bltu	r7,r4,8054d0 <_malloc_r+0x340>
  8053c0:	21c4703a 	and	r2,r4,r7
  8053c4:	10000a1e 	bne	r2,zero,8053f0 <_malloc_r+0x260>
  8053c8:	2109883a 	add	r4,r4,r4
  8053cc:	00bfff04 	movi	r2,-4
  8053d0:	4884703a 	and	r2,r9,r2
  8053d4:	3906703a 	and	r3,r7,r4
  8053d8:	12400104 	addi	r9,r2,4
  8053dc:	1800041e 	bne	r3,zero,8053f0 <_malloc_r+0x260>
  8053e0:	2109883a 	add	r4,r4,r4
  8053e4:	3904703a 	and	r2,r7,r4
  8053e8:	4a400104 	addi	r9,r9,4
  8053ec:	103ffc26 	beq	r2,zero,8053e0 <_malloc_r+0x250>
  8053f0:	480490fa 	slli	r2,r9,3
  8053f4:	4819883a 	mov	r12,r9
  8053f8:	023fff04 	movi	r8,-4
  8053fc:	589b883a 	add	r13,r11,r2
  805400:	6807883a 	mov	r3,r13
  805404:	014003c4 	movi	r5,15
  805408:	1c000317 	ldw	r16,12(r3)
  80540c:	1c00041e 	bne	r3,r16,805420 <_malloc_r+0x290>
  805410:	0000a706 	br	8056b0 <_malloc_r+0x520>
  805414:	3000ab0e 	bge	r6,zero,8056c4 <_malloc_r+0x534>
  805418:	84000317 	ldw	r16,12(r16)
  80541c:	1c00a426 	beq	r3,r16,8056b0 <_malloc_r+0x520>
  805420:	80800117 	ldw	r2,4(r16)
  805424:	1204703a 	and	r2,r2,r8
  805428:	144dc83a 	sub	r6,r2,r17
  80542c:	29bff90e 	bge	r5,r6,805414 <_malloc_r+0x284>
  805430:	81000317 	ldw	r4,12(r16)
  805434:	80c00217 	ldw	r3,8(r16)
  805438:	89400054 	ori	r5,r17,1
  80543c:	8445883a 	add	r2,r16,r17
  805440:	20c00215 	stw	r3,8(r4)
  805444:	19000315 	stw	r4,12(r3)
  805448:	81400115 	stw	r5,4(r16)
  80544c:	1187883a 	add	r3,r2,r6
  805450:	31000054 	ori	r4,r6,1
  805454:	50800315 	stw	r2,12(r10)
  805458:	50800215 	stw	r2,8(r10)
  80545c:	19800015 	stw	r6,0(r3)
  805460:	11000115 	stw	r4,4(r2)
  805464:	12800215 	stw	r10,8(r2)
  805468:	12800315 	stw	r10,12(r2)
  80546c:	9009883a 	mov	r4,r18
  805470:	080ad4c0 	call	80ad4c <__malloc_unlock>
  805474:	80c00204 	addi	r3,r16,8
  805478:	003f5906 	br	8051e0 <_malloc_r+0x50>
  80547c:	8109883a 	add	r4,r16,r4
  805480:	20800117 	ldw	r2,4(r4)
  805484:	80c00217 	ldw	r3,8(r16)
  805488:	81400317 	ldw	r5,12(r16)
  80548c:	10800054 	ori	r2,r2,1
  805490:	20800115 	stw	r2,4(r4)
  805494:	28c00215 	stw	r3,8(r5)
  805498:	19400315 	stw	r5,12(r3)
  80549c:	9009883a 	mov	r4,r18
  8054a0:	080ad4c0 	call	80ad4c <__malloc_unlock>
  8054a4:	80c00204 	addi	r3,r16,8
  8054a8:	003f4d06 	br	8051e0 <_malloc_r+0x50>
  8054ac:	80800204 	addi	r2,r16,8
  8054b0:	14000317 	ldw	r16,12(r2)
  8054b4:	143f911e 	bne	r2,r16,8052fc <_malloc_r+0x16c>
  8054b8:	1a400084 	addi	r9,r3,2
  8054bc:	003f7306 	br	80528c <_malloc_r+0xfc>
  8054c0:	88c00054 	ori	r3,r17,1
  8054c4:	8445883a 	add	r2,r16,r17
  8054c8:	80c00115 	stw	r3,4(r16)
  8054cc:	003fdf06 	br	80544c <_malloc_r+0x2bc>
  8054d0:	e4000217 	ldw	r16,8(fp)
  8054d4:	00bfff04 	movi	r2,-4
  8054d8:	80c00117 	ldw	r3,4(r16)
  8054dc:	802d883a 	mov	r22,r16
  8054e0:	18aa703a 	and	r21,r3,r2
  8054e4:	ac401636 	bltu	r21,r17,805540 <_malloc_r+0x3b0>
  8054e8:	ac49c83a 	sub	r4,r21,r17
  8054ec:	008003c4 	movi	r2,15
  8054f0:	1100130e 	bge	r2,r4,805540 <_malloc_r+0x3b0>
  8054f4:	88800054 	ori	r2,r17,1
  8054f8:	8447883a 	add	r3,r16,r17
  8054fc:	80800115 	stw	r2,4(r16)
  805500:	20800054 	ori	r2,r4,1
  805504:	18800115 	stw	r2,4(r3)
  805508:	e0c00215 	stw	r3,8(fp)
  80550c:	9009883a 	mov	r4,r18
  805510:	080ad4c0 	call	80ad4c <__malloc_unlock>
  805514:	80c00204 	addi	r3,r16,8
  805518:	003f3106 	br	8051e0 <_malloc_r+0x50>
  80551c:	39c00117 	ldw	r7,4(r7)
  805520:	573ffe04 	addi	fp,r10,-8
  805524:	003fa006 	br	8053a8 <_malloc_r+0x218>
  805528:	00801504 	movi	r2,84
  80552c:	10c06736 	bltu	r2,r3,8056cc <_malloc_r+0x53c>
  805530:	8804d33a 	srli	r2,r17,12
  805534:	11801b84 	addi	r6,r2,110
  805538:	300490fa 	slli	r2,r6,3
  80553c:	003f4106 	br	805244 <_malloc_r+0xb4>
  805540:	d0a70f17 	ldw	r2,-25540(gp)
  805544:	d0e00517 	ldw	r3,-32748(gp)
  805548:	053fffc4 	movi	r20,-1
  80554c:	10800404 	addi	r2,r2,16
  805550:	88a7883a 	add	r19,r17,r2
  805554:	1d000326 	beq	r3,r20,805564 <_malloc_r+0x3d4>
  805558:	98c3ffc4 	addi	r3,r19,4095
  80555c:	00bc0004 	movi	r2,-4096
  805560:	18a6703a 	and	r19,r3,r2
  805564:	9009883a 	mov	r4,r18
  805568:	980b883a 	mov	r5,r19
  80556c:	08072bc0 	call	8072bc <_sbrk_r>
  805570:	1009883a 	mov	r4,r2
  805574:	15000426 	beq	r2,r20,805588 <_malloc_r+0x3f8>
  805578:	854b883a 	add	r5,r16,r21
  80557c:	1029883a 	mov	r20,r2
  805580:	11405a2e 	bgeu	r2,r5,8056ec <_malloc_r+0x55c>
  805584:	87000c26 	beq	r16,fp,8055b8 <_malloc_r+0x428>
  805588:	e4000217 	ldw	r16,8(fp)
  80558c:	80c00117 	ldw	r3,4(r16)
  805590:	00bfff04 	movi	r2,-4
  805594:	1884703a 	and	r2,r3,r2
  805598:	14400336 	bltu	r2,r17,8055a8 <_malloc_r+0x418>
  80559c:	1449c83a 	sub	r4,r2,r17
  8055a0:	008003c4 	movi	r2,15
  8055a4:	113fd316 	blt	r2,r4,8054f4 <_malloc_r+0x364>
  8055a8:	9009883a 	mov	r4,r18
  8055ac:	080ad4c0 	call	80ad4c <__malloc_unlock>
  8055b0:	0007883a 	mov	r3,zero
  8055b4:	003f0a06 	br	8051e0 <_malloc_r+0x50>
  8055b8:	05c020b4 	movhi	r23,130
  8055bc:	bdea5404 	addi	r23,r23,-22192
  8055c0:	b8800017 	ldw	r2,0(r23)
  8055c4:	988d883a 	add	r6,r19,r2
  8055c8:	b9800015 	stw	r6,0(r23)
  8055cc:	d0e00517 	ldw	r3,-32748(gp)
  8055d0:	00bfffc4 	movi	r2,-1
  8055d4:	18808e26 	beq	r3,r2,805810 <_malloc_r+0x680>
  8055d8:	2145c83a 	sub	r2,r4,r5
  8055dc:	3085883a 	add	r2,r6,r2
  8055e0:	b8800015 	stw	r2,0(r23)
  8055e4:	20c001cc 	andi	r3,r4,7
  8055e8:	18005f1e 	bne	r3,zero,805768 <_malloc_r+0x5d8>
  8055ec:	000b883a 	mov	r5,zero
  8055f0:	a4c5883a 	add	r2,r20,r19
  8055f4:	1083ffcc 	andi	r2,r2,4095
  8055f8:	00c40004 	movi	r3,4096
  8055fc:	1887c83a 	sub	r3,r3,r2
  805600:	28e7883a 	add	r19,r5,r3
  805604:	9009883a 	mov	r4,r18
  805608:	980b883a 	mov	r5,r19
  80560c:	08072bc0 	call	8072bc <_sbrk_r>
  805610:	1007883a 	mov	r3,r2
  805614:	00bfffc4 	movi	r2,-1
  805618:	18807a26 	beq	r3,r2,805804 <_malloc_r+0x674>
  80561c:	1d05c83a 	sub	r2,r3,r20
  805620:	9885883a 	add	r2,r19,r2
  805624:	10c00054 	ori	r3,r2,1
  805628:	b8800017 	ldw	r2,0(r23)
  80562c:	a021883a 	mov	r16,r20
  805630:	a0c00115 	stw	r3,4(r20)
  805634:	9885883a 	add	r2,r19,r2
  805638:	b8800015 	stw	r2,0(r23)
  80563c:	e5000215 	stw	r20,8(fp)
  805640:	b7003626 	beq	r22,fp,80571c <_malloc_r+0x58c>
  805644:	018003c4 	movi	r6,15
  805648:	35404b36 	bltu	r6,r21,805778 <_malloc_r+0x5e8>
  80564c:	00800044 	movi	r2,1
  805650:	a0800115 	stw	r2,4(r20)
  805654:	003fcd06 	br	80558c <_malloc_r+0x3fc>
  805658:	2808d27a 	srli	r4,r5,9
  80565c:	2000371e 	bne	r4,zero,80573c <_malloc_r+0x5ac>
  805660:	2808d0fa 	srli	r4,r5,3
  805664:	200690fa 	slli	r3,r4,3
  805668:	1ad1883a 	add	r8,r3,r11
  80566c:	41800217 	ldw	r6,8(r8)
  805670:	41805b26 	beq	r8,r6,8057e0 <_malloc_r+0x650>
  805674:	30800117 	ldw	r2,4(r6)
  805678:	00ffff04 	movi	r3,-4
  80567c:	10c4703a 	and	r2,r2,r3
  805680:	2880022e 	bgeu	r5,r2,80568c <_malloc_r+0x4fc>
  805684:	31800217 	ldw	r6,8(r6)
  805688:	41bffa1e 	bne	r8,r6,805674 <_malloc_r+0x4e4>
  80568c:	32000317 	ldw	r8,12(r6)
  805690:	39c00117 	ldw	r7,4(r7)
  805694:	82000315 	stw	r8,12(r16)
  805698:	81800215 	stw	r6,8(r16)
  80569c:	07002074 	movhi	fp,129
  8056a0:	e71d7804 	addi	fp,fp,30176
  8056a4:	34000315 	stw	r16,12(r6)
  8056a8:	44000215 	stw	r16,8(r8)
  8056ac:	003f3e06 	br	8053a8 <_malloc_r+0x218>
  8056b0:	63000044 	addi	r12,r12,1
  8056b4:	608000cc 	andi	r2,r12,3
  8056b8:	10005d26 	beq	r2,zero,805830 <_malloc_r+0x6a0>
  8056bc:	18c00204 	addi	r3,r3,8
  8056c0:	003f5106 	br	805408 <_malloc_r+0x278>
  8056c4:	8089883a 	add	r4,r16,r2
  8056c8:	003f6d06 	br	805480 <_malloc_r+0x2f0>
  8056cc:	00805504 	movi	r2,340
  8056d0:	10c02036 	bltu	r2,r3,805754 <_malloc_r+0x5c4>
  8056d4:	8804d3fa 	srli	r2,r17,15
  8056d8:	11801dc4 	addi	r6,r2,119
  8056dc:	300490fa 	slli	r2,r6,3
  8056e0:	003ed806 	br	805244 <_malloc_r+0xb4>
  8056e4:	48c000c4 	addi	r3,r9,3
  8056e8:	003f3106 	br	8053b0 <_malloc_r+0x220>
  8056ec:	05c020b4 	movhi	r23,130
  8056f0:	bdea5404 	addi	r23,r23,-22192
  8056f4:	b8800017 	ldw	r2,0(r23)
  8056f8:	988d883a 	add	r6,r19,r2
  8056fc:	b9800015 	stw	r6,0(r23)
  805700:	293fb21e 	bne	r5,r4,8055cc <_malloc_r+0x43c>
  805704:	2083ffcc 	andi	r2,r4,4095
  805708:	103fb01e 	bne	r2,zero,8055cc <_malloc_r+0x43c>
  80570c:	e4000217 	ldw	r16,8(fp)
  805710:	9d45883a 	add	r2,r19,r21
  805714:	10800054 	ori	r2,r2,1
  805718:	80800115 	stw	r2,4(r16)
  80571c:	b8c00017 	ldw	r3,0(r23)
  805720:	d0a71017 	ldw	r2,-25536(gp)
  805724:	10c0012e 	bgeu	r2,r3,80572c <_malloc_r+0x59c>
  805728:	d0e71015 	stw	r3,-25536(gp)
  80572c:	d0a71117 	ldw	r2,-25532(gp)
  805730:	10ff962e 	bgeu	r2,r3,80558c <_malloc_r+0x3fc>
  805734:	d0e71115 	stw	r3,-25532(gp)
  805738:	003f9406 	br	80558c <_malloc_r+0x3fc>
  80573c:	00800104 	movi	r2,4
  805740:	11001e36 	bltu	r2,r4,8057bc <_malloc_r+0x62c>
  805744:	2804d1ba 	srli	r2,r5,6
  805748:	11000e04 	addi	r4,r2,56
  80574c:	200690fa 	slli	r3,r4,3
  805750:	003fc506 	br	805668 <_malloc_r+0x4d8>
  805754:	00815504 	movi	r2,1364
  805758:	10c01d2e 	bgeu	r2,r3,8057d0 <_malloc_r+0x640>
  80575c:	01801f84 	movi	r6,126
  805760:	0080fc04 	movi	r2,1008
  805764:	003eb706 	br	805244 <_malloc_r+0xb4>
  805768:	00800204 	movi	r2,8
  80576c:	10cbc83a 	sub	r5,r2,r3
  805770:	2169883a 	add	r20,r4,r5
  805774:	003f9e06 	br	8055f0 <_malloc_r+0x460>
  805778:	00bffe04 	movi	r2,-8
  80577c:	a93ffd04 	addi	r4,r21,-12
  805780:	2088703a 	and	r4,r4,r2
  805784:	b10b883a 	add	r5,r22,r4
  805788:	00c00144 	movi	r3,5
  80578c:	28c00215 	stw	r3,8(r5)
  805790:	28c00115 	stw	r3,4(r5)
  805794:	b0800117 	ldw	r2,4(r22)
  805798:	1080004c 	andi	r2,r2,1
  80579c:	2084b03a 	or	r2,r4,r2
  8057a0:	b0800115 	stw	r2,4(r22)
  8057a4:	313fdd2e 	bgeu	r6,r4,80571c <_malloc_r+0x58c>
  8057a8:	b1400204 	addi	r5,r22,8
  8057ac:	9009883a 	mov	r4,r18
  8057b0:	08046080 	call	804608 <_free_r>
  8057b4:	e4000217 	ldw	r16,8(fp)
  8057b8:	003fd806 	br	80571c <_malloc_r+0x58c>
  8057bc:	00800504 	movi	r2,20
  8057c0:	11001536 	bltu	r2,r4,805818 <_malloc_r+0x688>
  8057c4:	210016c4 	addi	r4,r4,91
  8057c8:	200690fa 	slli	r3,r4,3
  8057cc:	003fa606 	br	805668 <_malloc_r+0x4d8>
  8057d0:	8804d4ba 	srli	r2,r17,18
  8057d4:	11801f04 	addi	r6,r2,124
  8057d8:	300490fa 	slli	r2,r6,3
  8057dc:	003e9906 	br	805244 <_malloc_r+0xb4>
  8057e0:	2009d0ba 	srai	r4,r4,2
  8057e4:	01402074 	movhi	r5,129
  8057e8:	295d7804 	addi	r5,r5,30176
  8057ec:	00c00044 	movi	r3,1
  8057f0:	28800117 	ldw	r2,4(r5)
  8057f4:	1906983a 	sll	r3,r3,r4
  8057f8:	10c4b03a 	or	r2,r2,r3
  8057fc:	28800115 	stw	r2,4(r5)
  805800:	003fa306 	br	805690 <_malloc_r+0x500>
  805804:	0027883a 	mov	r19,zero
  805808:	00c00044 	movi	r3,1
  80580c:	003f8606 	br	805628 <_malloc_r+0x498>
  805810:	d1200515 	stw	r4,-32748(gp)
  805814:	003f7306 	br	8055e4 <_malloc_r+0x454>
  805818:	00801504 	movi	r2,84
  80581c:	11001936 	bltu	r2,r4,805884 <_malloc_r+0x6f4>
  805820:	2804d33a 	srli	r2,r5,12
  805824:	11001b84 	addi	r4,r2,110
  805828:	200690fa 	slli	r3,r4,3
  80582c:	003f8e06 	br	805668 <_malloc_r+0x4d8>
  805830:	480b883a 	mov	r5,r9
  805834:	6807883a 	mov	r3,r13
  805838:	288000cc 	andi	r2,r5,3
  80583c:	18fffe04 	addi	r3,r3,-8
  805840:	297fffc4 	addi	r5,r5,-1
  805844:	10001526 	beq	r2,zero,80589c <_malloc_r+0x70c>
  805848:	18800217 	ldw	r2,8(r3)
  80584c:	10fffa26 	beq	r2,r3,805838 <_malloc_r+0x6a8>
  805850:	2109883a 	add	r4,r4,r4
  805854:	393f1e36 	bltu	r7,r4,8054d0 <_malloc_r+0x340>
  805858:	203f1d26 	beq	r4,zero,8054d0 <_malloc_r+0x340>
  80585c:	21c4703a 	and	r2,r4,r7
  805860:	10000226 	beq	r2,zero,80586c <_malloc_r+0x6dc>
  805864:	6013883a 	mov	r9,r12
  805868:	003ee106 	br	8053f0 <_malloc_r+0x260>
  80586c:	2109883a 	add	r4,r4,r4
  805870:	3904703a 	and	r2,r7,r4
  805874:	63000104 	addi	r12,r12,4
  805878:	103ffc26 	beq	r2,zero,80586c <_malloc_r+0x6dc>
  80587c:	6013883a 	mov	r9,r12
  805880:	003edb06 	br	8053f0 <_malloc_r+0x260>
  805884:	00805504 	movi	r2,340
  805888:	11000836 	bltu	r2,r4,8058ac <_malloc_r+0x71c>
  80588c:	2804d3fa 	srli	r2,r5,15
  805890:	11001dc4 	addi	r4,r2,119
  805894:	200690fa 	slli	r3,r4,3
  805898:	003f7306 	br	805668 <_malloc_r+0x4d8>
  80589c:	0104303a 	nor	r2,zero,r4
  8058a0:	388e703a 	and	r7,r7,r2
  8058a4:	e1c00115 	stw	r7,4(fp)
  8058a8:	003fe906 	br	805850 <_malloc_r+0x6c0>
  8058ac:	00815504 	movi	r2,1364
  8058b0:	1100032e 	bgeu	r2,r4,8058c0 <_malloc_r+0x730>
  8058b4:	01001f84 	movi	r4,126
  8058b8:	00c0fc04 	movi	r3,1008
  8058bc:	003f6a06 	br	805668 <_malloc_r+0x4d8>
  8058c0:	2804d4ba 	srli	r2,r5,18
  8058c4:	11001f04 	addi	r4,r2,124
  8058c8:	200690fa 	slli	r3,r4,3
  8058cc:	003f6606 	br	805668 <_malloc_r+0x4d8>

008058d0 <memchr>:
  8058d0:	008000c4 	movi	r2,3
  8058d4:	29403fcc 	andi	r5,r5,255
  8058d8:	2007883a 	mov	r3,r4
  8058dc:	1180022e 	bgeu	r2,r6,8058e8 <memchr+0x18>
  8058e0:	2084703a 	and	r2,r4,r2
  8058e4:	10000b26 	beq	r2,zero,805914 <memchr+0x44>
  8058e8:	313fffc4 	addi	r4,r6,-1
  8058ec:	3000051e 	bne	r6,zero,805904 <memchr+0x34>
  8058f0:	00002c06 	br	8059a4 <memchr+0xd4>
  8058f4:	213fffc4 	addi	r4,r4,-1
  8058f8:	00bfffc4 	movi	r2,-1
  8058fc:	18c00044 	addi	r3,r3,1
  805900:	20802826 	beq	r4,r2,8059a4 <memchr+0xd4>
  805904:	18800003 	ldbu	r2,0(r3)
  805908:	28bffa1e 	bne	r5,r2,8058f4 <memchr+0x24>
  80590c:	1805883a 	mov	r2,r3
  805910:	f800283a 	ret
  805914:	0011883a 	mov	r8,zero
  805918:	0007883a 	mov	r3,zero
  80591c:	01c00104 	movi	r7,4
  805920:	4004923a 	slli	r2,r8,8
  805924:	18c00044 	addi	r3,r3,1
  805928:	1151883a 	add	r8,r2,r5
  80592c:	19fffc1e 	bne	r3,r7,805920 <memchr+0x50>
  805930:	02bfbff4 	movhi	r10,65279
  805934:	52bfbfc4 	addi	r10,r10,-257
  805938:	02602074 	movhi	r9,32897
  80593c:	4a602004 	addi	r9,r9,-32640
  805940:	02c000c4 	movi	r11,3
  805944:	20800017 	ldw	r2,0(r4)
  805948:	31bfff04 	addi	r6,r6,-4
  80594c:	200f883a 	mov	r7,r4
  805950:	1204f03a 	xor	r2,r2,r8
  805954:	1287883a 	add	r3,r2,r10
  805958:	1a46703a 	and	r3,r3,r9
  80595c:	0084303a 	nor	r2,zero,r2
  805960:	10c4703a 	and	r2,r2,r3
  805964:	10000b26 	beq	r2,zero,805994 <memchr+0xc4>
  805968:	20800003 	ldbu	r2,0(r4)
  80596c:	28800f26 	beq	r5,r2,8059ac <memchr+0xdc>
  805970:	20800043 	ldbu	r2,1(r4)
  805974:	21c00044 	addi	r7,r4,1
  805978:	28800c26 	beq	r5,r2,8059ac <memchr+0xdc>
  80597c:	20800083 	ldbu	r2,2(r4)
  805980:	21c00084 	addi	r7,r4,2
  805984:	28800926 	beq	r5,r2,8059ac <memchr+0xdc>
  805988:	208000c3 	ldbu	r2,3(r4)
  80598c:	21c000c4 	addi	r7,r4,3
  805990:	28800626 	beq	r5,r2,8059ac <memchr+0xdc>
  805994:	21000104 	addi	r4,r4,4
  805998:	59bfea36 	bltu	r11,r6,805944 <memchr+0x74>
  80599c:	2007883a 	mov	r3,r4
  8059a0:	003fd106 	br	8058e8 <memchr+0x18>
  8059a4:	0005883a 	mov	r2,zero
  8059a8:	f800283a 	ret
  8059ac:	3805883a 	mov	r2,r7
  8059b0:	f800283a 	ret

008059b4 <memcpy>:
  8059b4:	01c003c4 	movi	r7,15
  8059b8:	2007883a 	mov	r3,r4
  8059bc:	3980032e 	bgeu	r7,r6,8059cc <memcpy+0x18>
  8059c0:	2904b03a 	or	r2,r5,r4
  8059c4:	108000cc 	andi	r2,r2,3
  8059c8:	10000926 	beq	r2,zero,8059f0 <memcpy+0x3c>
  8059cc:	30000626 	beq	r6,zero,8059e8 <memcpy+0x34>
  8059d0:	30cd883a 	add	r6,r6,r3
  8059d4:	28800003 	ldbu	r2,0(r5)
  8059d8:	29400044 	addi	r5,r5,1
  8059dc:	18800005 	stb	r2,0(r3)
  8059e0:	18c00044 	addi	r3,r3,1
  8059e4:	30fffb1e 	bne	r6,r3,8059d4 <memcpy+0x20>
  8059e8:	2005883a 	mov	r2,r4
  8059ec:	f800283a 	ret
  8059f0:	3811883a 	mov	r8,r7
  8059f4:	200f883a 	mov	r7,r4
  8059f8:	28c00017 	ldw	r3,0(r5)
  8059fc:	31bffc04 	addi	r6,r6,-16
  805a00:	38c00015 	stw	r3,0(r7)
  805a04:	28800117 	ldw	r2,4(r5)
  805a08:	38800115 	stw	r2,4(r7)
  805a0c:	28c00217 	ldw	r3,8(r5)
  805a10:	38c00215 	stw	r3,8(r7)
  805a14:	28800317 	ldw	r2,12(r5)
  805a18:	29400404 	addi	r5,r5,16
  805a1c:	38800315 	stw	r2,12(r7)
  805a20:	39c00404 	addi	r7,r7,16
  805a24:	41bff436 	bltu	r8,r6,8059f8 <memcpy+0x44>
  805a28:	008000c4 	movi	r2,3
  805a2c:	1180072e 	bgeu	r2,r6,805a4c <memcpy+0x98>
  805a30:	1007883a 	mov	r3,r2
  805a34:	28800017 	ldw	r2,0(r5)
  805a38:	31bfff04 	addi	r6,r6,-4
  805a3c:	29400104 	addi	r5,r5,4
  805a40:	38800015 	stw	r2,0(r7)
  805a44:	39c00104 	addi	r7,r7,4
  805a48:	19bffa36 	bltu	r3,r6,805a34 <memcpy+0x80>
  805a4c:	3807883a 	mov	r3,r7
  805a50:	003fde06 	br	8059cc <memcpy+0x18>

00805a54 <memmove>:
  805a54:	2807883a 	mov	r3,r5
  805a58:	2011883a 	mov	r8,r4
  805a5c:	29000c2e 	bgeu	r5,r4,805a90 <memmove+0x3c>
  805a60:	298f883a 	add	r7,r5,r6
  805a64:	21c00a2e 	bgeu	r4,r7,805a90 <memmove+0x3c>
  805a68:	30000726 	beq	r6,zero,805a88 <memmove+0x34>
  805a6c:	2187883a 	add	r3,r4,r6
  805a70:	198dc83a 	sub	r6,r3,r6
  805a74:	39ffffc4 	addi	r7,r7,-1
  805a78:	38800003 	ldbu	r2,0(r7)
  805a7c:	18ffffc4 	addi	r3,r3,-1
  805a80:	18800005 	stb	r2,0(r3)
  805a84:	19bffb1e 	bne	r3,r6,805a74 <memmove+0x20>
  805a88:	2005883a 	mov	r2,r4
  805a8c:	f800283a 	ret
  805a90:	01c003c4 	movi	r7,15
  805a94:	39800a36 	bltu	r7,r6,805ac0 <memmove+0x6c>
  805a98:	303ffb26 	beq	r6,zero,805a88 <memmove+0x34>
  805a9c:	400f883a 	mov	r7,r8
  805aa0:	320d883a 	add	r6,r6,r8
  805aa4:	28800003 	ldbu	r2,0(r5)
  805aa8:	29400044 	addi	r5,r5,1
  805aac:	38800005 	stb	r2,0(r7)
  805ab0:	39c00044 	addi	r7,r7,1
  805ab4:	39bffb1e 	bne	r7,r6,805aa4 <memmove+0x50>
  805ab8:	2005883a 	mov	r2,r4
  805abc:	f800283a 	ret
  805ac0:	1904b03a 	or	r2,r3,r4
  805ac4:	108000cc 	andi	r2,r2,3
  805ac8:	103ff31e 	bne	r2,zero,805a98 <memmove+0x44>
  805acc:	3811883a 	mov	r8,r7
  805ad0:	180b883a 	mov	r5,r3
  805ad4:	200f883a 	mov	r7,r4
  805ad8:	28c00017 	ldw	r3,0(r5)
  805adc:	31bffc04 	addi	r6,r6,-16
  805ae0:	38c00015 	stw	r3,0(r7)
  805ae4:	28800117 	ldw	r2,4(r5)
  805ae8:	38800115 	stw	r2,4(r7)
  805aec:	28c00217 	ldw	r3,8(r5)
  805af0:	38c00215 	stw	r3,8(r7)
  805af4:	28800317 	ldw	r2,12(r5)
  805af8:	29400404 	addi	r5,r5,16
  805afc:	38800315 	stw	r2,12(r7)
  805b00:	39c00404 	addi	r7,r7,16
  805b04:	41bff436 	bltu	r8,r6,805ad8 <memmove+0x84>
  805b08:	008000c4 	movi	r2,3
  805b0c:	1180072e 	bgeu	r2,r6,805b2c <memmove+0xd8>
  805b10:	1007883a 	mov	r3,r2
  805b14:	28800017 	ldw	r2,0(r5)
  805b18:	31bfff04 	addi	r6,r6,-4
  805b1c:	29400104 	addi	r5,r5,4
  805b20:	38800015 	stw	r2,0(r7)
  805b24:	39c00104 	addi	r7,r7,4
  805b28:	19bffa36 	bltu	r3,r6,805b14 <memmove+0xc0>
  805b2c:	3811883a 	mov	r8,r7
  805b30:	003fd906 	br	805a98 <memmove+0x44>

00805b34 <memset>:
  805b34:	008000c4 	movi	r2,3
  805b38:	29403fcc 	andi	r5,r5,255
  805b3c:	2007883a 	mov	r3,r4
  805b40:	1180022e 	bgeu	r2,r6,805b4c <memset+0x18>
  805b44:	2084703a 	and	r2,r4,r2
  805b48:	10000826 	beq	r2,zero,805b6c <memset+0x38>
  805b4c:	30000526 	beq	r6,zero,805b64 <memset+0x30>
  805b50:	2805883a 	mov	r2,r5
  805b54:	30cd883a 	add	r6,r6,r3
  805b58:	18800005 	stb	r2,0(r3)
  805b5c:	18c00044 	addi	r3,r3,1
  805b60:	19bffd1e 	bne	r3,r6,805b58 <memset+0x24>
  805b64:	2005883a 	mov	r2,r4
  805b68:	f800283a 	ret
  805b6c:	2804923a 	slli	r2,r5,8
  805b70:	020003c4 	movi	r8,15
  805b74:	200f883a 	mov	r7,r4
  805b78:	2884b03a 	or	r2,r5,r2
  805b7c:	1006943a 	slli	r3,r2,16
  805b80:	10c6b03a 	or	r3,r2,r3
  805b84:	41800a2e 	bgeu	r8,r6,805bb0 <memset+0x7c>
  805b88:	4005883a 	mov	r2,r8
  805b8c:	31bffc04 	addi	r6,r6,-16
  805b90:	38c00015 	stw	r3,0(r7)
  805b94:	38c00115 	stw	r3,4(r7)
  805b98:	38c00215 	stw	r3,8(r7)
  805b9c:	38c00315 	stw	r3,12(r7)
  805ba0:	39c00404 	addi	r7,r7,16
  805ba4:	11bff936 	bltu	r2,r6,805b8c <memset+0x58>
  805ba8:	008000c4 	movi	r2,3
  805bac:	1180052e 	bgeu	r2,r6,805bc4 <memset+0x90>
  805bb0:	31bfff04 	addi	r6,r6,-4
  805bb4:	008000c4 	movi	r2,3
  805bb8:	38c00015 	stw	r3,0(r7)
  805bbc:	39c00104 	addi	r7,r7,4
  805bc0:	11bffb36 	bltu	r2,r6,805bb0 <memset+0x7c>
  805bc4:	3807883a 	mov	r3,r7
  805bc8:	003fe006 	br	805b4c <memset+0x18>

00805bcc <_Bfree>:
  805bcc:	28000826 	beq	r5,zero,805bf0 <_Bfree+0x24>
  805bd0:	28800117 	ldw	r2,4(r5)
  805bd4:	21001317 	ldw	r4,76(r4)
  805bd8:	1085883a 	add	r2,r2,r2
  805bdc:	1085883a 	add	r2,r2,r2
  805be0:	1105883a 	add	r2,r2,r4
  805be4:	10c00017 	ldw	r3,0(r2)
  805be8:	28c00015 	stw	r3,0(r5)
  805bec:	11400015 	stw	r5,0(r2)
  805bf0:	f800283a 	ret

00805bf4 <__hi0bits>:
  805bf4:	20bfffec 	andhi	r2,r4,65535
  805bf8:	10001426 	beq	r2,zero,805c4c <__hi0bits+0x58>
  805bfc:	0007883a 	mov	r3,zero
  805c00:	20bfc02c 	andhi	r2,r4,65280
  805c04:	1000021e 	bne	r2,zero,805c10 <__hi0bits+0x1c>
  805c08:	2008923a 	slli	r4,r4,8
  805c0c:	18c00204 	addi	r3,r3,8
  805c10:	20bc002c 	andhi	r2,r4,61440
  805c14:	1000021e 	bne	r2,zero,805c20 <__hi0bits+0x2c>
  805c18:	2008913a 	slli	r4,r4,4
  805c1c:	18c00104 	addi	r3,r3,4
  805c20:	20b0002c 	andhi	r2,r4,49152
  805c24:	1000031e 	bne	r2,zero,805c34 <__hi0bits+0x40>
  805c28:	2105883a 	add	r2,r4,r4
  805c2c:	18c00084 	addi	r3,r3,2
  805c30:	1089883a 	add	r4,r2,r2
  805c34:	20000316 	blt	r4,zero,805c44 <__hi0bits+0x50>
  805c38:	2090002c 	andhi	r2,r4,16384
  805c3c:	10000626 	beq	r2,zero,805c58 <__hi0bits+0x64>
  805c40:	18c00044 	addi	r3,r3,1
  805c44:	1805883a 	mov	r2,r3
  805c48:	f800283a 	ret
  805c4c:	2008943a 	slli	r4,r4,16
  805c50:	00c00404 	movi	r3,16
  805c54:	003fea06 	br	805c00 <__hi0bits+0xc>
  805c58:	00c00804 	movi	r3,32
  805c5c:	1805883a 	mov	r2,r3
  805c60:	f800283a 	ret

00805c64 <__lo0bits>:
  805c64:	20c00017 	ldw	r3,0(r4)
  805c68:	188001cc 	andi	r2,r3,7
  805c6c:	10000a26 	beq	r2,zero,805c98 <__lo0bits+0x34>
  805c70:	1880004c 	andi	r2,r3,1
  805c74:	1005003a 	cmpeq	r2,r2,zero
  805c78:	10002126 	beq	r2,zero,805d00 <__lo0bits+0x9c>
  805c7c:	1880008c 	andi	r2,r3,2
  805c80:	1000251e 	bne	r2,zero,805d18 <__lo0bits+0xb4>
  805c84:	1804d0ba 	srli	r2,r3,2
  805c88:	01400084 	movi	r5,2
  805c8c:	20800015 	stw	r2,0(r4)
  805c90:	2805883a 	mov	r2,r5
  805c94:	f800283a 	ret
  805c98:	18bfffcc 	andi	r2,r3,65535
  805c9c:	10001526 	beq	r2,zero,805cf4 <__lo0bits+0x90>
  805ca0:	000b883a 	mov	r5,zero
  805ca4:	18803fcc 	andi	r2,r3,255
  805ca8:	1000021e 	bne	r2,zero,805cb4 <__lo0bits+0x50>
  805cac:	1806d23a 	srli	r3,r3,8
  805cb0:	29400204 	addi	r5,r5,8
  805cb4:	188003cc 	andi	r2,r3,15
  805cb8:	1000021e 	bne	r2,zero,805cc4 <__lo0bits+0x60>
  805cbc:	1806d13a 	srli	r3,r3,4
  805cc0:	29400104 	addi	r5,r5,4
  805cc4:	188000cc 	andi	r2,r3,3
  805cc8:	1000021e 	bne	r2,zero,805cd4 <__lo0bits+0x70>
  805ccc:	1806d0ba 	srli	r3,r3,2
  805cd0:	29400084 	addi	r5,r5,2
  805cd4:	1880004c 	andi	r2,r3,1
  805cd8:	1000031e 	bne	r2,zero,805ce8 <__lo0bits+0x84>
  805cdc:	1806d07a 	srli	r3,r3,1
  805ce0:	18000a26 	beq	r3,zero,805d0c <__lo0bits+0xa8>
  805ce4:	29400044 	addi	r5,r5,1
  805ce8:	2805883a 	mov	r2,r5
  805cec:	20c00015 	stw	r3,0(r4)
  805cf0:	f800283a 	ret
  805cf4:	1806d43a 	srli	r3,r3,16
  805cf8:	01400404 	movi	r5,16
  805cfc:	003fe906 	br	805ca4 <__lo0bits+0x40>
  805d00:	000b883a 	mov	r5,zero
  805d04:	2805883a 	mov	r2,r5
  805d08:	f800283a 	ret
  805d0c:	01400804 	movi	r5,32
  805d10:	2805883a 	mov	r2,r5
  805d14:	f800283a 	ret
  805d18:	1804d07a 	srli	r2,r3,1
  805d1c:	01400044 	movi	r5,1
  805d20:	20800015 	stw	r2,0(r4)
  805d24:	003fda06 	br	805c90 <__lo0bits+0x2c>

00805d28 <__mcmp>:
  805d28:	20800417 	ldw	r2,16(r4)
  805d2c:	28c00417 	ldw	r3,16(r5)
  805d30:	10cfc83a 	sub	r7,r2,r3
  805d34:	38000c1e 	bne	r7,zero,805d68 <__mcmp+0x40>
  805d38:	18c5883a 	add	r2,r3,r3
  805d3c:	1085883a 	add	r2,r2,r2
  805d40:	10c00504 	addi	r3,r2,20
  805d44:	21000504 	addi	r4,r4,20
  805d48:	28cb883a 	add	r5,r5,r3
  805d4c:	2085883a 	add	r2,r4,r2
  805d50:	10bfff04 	addi	r2,r2,-4
  805d54:	297fff04 	addi	r5,r5,-4
  805d58:	11800017 	ldw	r6,0(r2)
  805d5c:	28c00017 	ldw	r3,0(r5)
  805d60:	30c0031e 	bne	r6,r3,805d70 <__mcmp+0x48>
  805d64:	20bffa36 	bltu	r4,r2,805d50 <__mcmp+0x28>
  805d68:	3805883a 	mov	r2,r7
  805d6c:	f800283a 	ret
  805d70:	30c00336 	bltu	r6,r3,805d80 <__mcmp+0x58>
  805d74:	01c00044 	movi	r7,1
  805d78:	3805883a 	mov	r2,r7
  805d7c:	f800283a 	ret
  805d80:	01ffffc4 	movi	r7,-1
  805d84:	003ff806 	br	805d68 <__mcmp+0x40>

00805d88 <__ulp>:
  805d88:	295ffc2c 	andhi	r5,r5,32752
  805d8c:	013f3034 	movhi	r4,64704
  805d90:	290b883a 	add	r5,r5,r4
  805d94:	0145c83a 	sub	r2,zero,r5
  805d98:	1007d53a 	srai	r3,r2,20
  805d9c:	000d883a 	mov	r6,zero
  805da0:	0140040e 	bge	zero,r5,805db4 <__ulp+0x2c>
  805da4:	280f883a 	mov	r7,r5
  805da8:	3807883a 	mov	r3,r7
  805dac:	3005883a 	mov	r2,r6
  805db0:	f800283a 	ret
  805db4:	008004c4 	movi	r2,19
  805db8:	193ffb04 	addi	r4,r3,-20
  805dbc:	10c00c0e 	bge	r2,r3,805df0 <__ulp+0x68>
  805dc0:	008007c4 	movi	r2,31
  805dc4:	1107c83a 	sub	r3,r2,r4
  805dc8:	00800784 	movi	r2,30
  805dcc:	01400044 	movi	r5,1
  805dd0:	11000216 	blt	r2,r4,805ddc <__ulp+0x54>
  805dd4:	00800044 	movi	r2,1
  805dd8:	10ca983a 	sll	r5,r2,r3
  805ddc:	000f883a 	mov	r7,zero
  805de0:	280d883a 	mov	r6,r5
  805de4:	3807883a 	mov	r3,r7
  805de8:	3005883a 	mov	r2,r6
  805dec:	f800283a 	ret
  805df0:	00800234 	movhi	r2,8
  805df4:	10cfd83a 	sra	r7,r2,r3
  805df8:	000d883a 	mov	r6,zero
  805dfc:	3005883a 	mov	r2,r6
  805e00:	3807883a 	mov	r3,r7
  805e04:	f800283a 	ret

00805e08 <__b2d>:
  805e08:	20800417 	ldw	r2,16(r4)
  805e0c:	defff904 	addi	sp,sp,-28
  805e10:	dd000415 	stw	r20,16(sp)
  805e14:	1085883a 	add	r2,r2,r2
  805e18:	25000504 	addi	r20,r4,20
  805e1c:	1085883a 	add	r2,r2,r2
  805e20:	dc000015 	stw	r16,0(sp)
  805e24:	a0a1883a 	add	r16,r20,r2
  805e28:	dd400515 	stw	r21,20(sp)
  805e2c:	857fff17 	ldw	r21,-4(r16)
  805e30:	dc400115 	stw	r17,4(sp)
  805e34:	dfc00615 	stw	ra,24(sp)
  805e38:	a809883a 	mov	r4,r21
  805e3c:	2823883a 	mov	r17,r5
  805e40:	dcc00315 	stw	r19,12(sp)
  805e44:	dc800215 	stw	r18,8(sp)
  805e48:	0805bf40 	call	805bf4 <__hi0bits>
  805e4c:	100b883a 	mov	r5,r2
  805e50:	00800804 	movi	r2,32
  805e54:	1145c83a 	sub	r2,r2,r5
  805e58:	88800015 	stw	r2,0(r17)
  805e5c:	00800284 	movi	r2,10
  805e60:	80ffff04 	addi	r3,r16,-4
  805e64:	11401416 	blt	r2,r5,805eb8 <__b2d+0xb0>
  805e68:	008002c4 	movi	r2,11
  805e6c:	1149c83a 	sub	r4,r2,r5
  805e70:	a0c02736 	bltu	r20,r3,805f10 <__b2d+0x108>
  805e74:	000d883a 	mov	r6,zero
  805e78:	28800544 	addi	r2,r5,21
  805e7c:	a906d83a 	srl	r3,r21,r4
  805e80:	a884983a 	sll	r2,r21,r2
  805e84:	1ccffc34 	orhi	r19,r3,16368
  805e88:	11a4b03a 	or	r18,r2,r6
  805e8c:	9005883a 	mov	r2,r18
  805e90:	9807883a 	mov	r3,r19
  805e94:	dfc00617 	ldw	ra,24(sp)
  805e98:	dd400517 	ldw	r21,20(sp)
  805e9c:	dd000417 	ldw	r20,16(sp)
  805ea0:	dcc00317 	ldw	r19,12(sp)
  805ea4:	dc800217 	ldw	r18,8(sp)
  805ea8:	dc400117 	ldw	r17,4(sp)
  805eac:	dc000017 	ldw	r16,0(sp)
  805eb0:	dec00704 	addi	sp,sp,28
  805eb4:	f800283a 	ret
  805eb8:	a0c00e36 	bltu	r20,r3,805ef4 <__b2d+0xec>
  805ebc:	293ffd44 	addi	r4,r5,-11
  805ec0:	000d883a 	mov	r6,zero
  805ec4:	20000f26 	beq	r4,zero,805f04 <__b2d+0xfc>
  805ec8:	00800804 	movi	r2,32
  805ecc:	110bc83a 	sub	r5,r2,r4
  805ed0:	a0c01236 	bltu	r20,r3,805f1c <__b2d+0x114>
  805ed4:	000f883a 	mov	r7,zero
  805ed8:	a904983a 	sll	r2,r21,r4
  805edc:	3146d83a 	srl	r3,r6,r5
  805ee0:	3108983a 	sll	r4,r6,r4
  805ee4:	108ffc34 	orhi	r2,r2,16368
  805ee8:	18a6b03a 	or	r19,r3,r2
  805eec:	3924b03a 	or	r18,r7,r4
  805ef0:	003fe606 	br	805e8c <__b2d+0x84>
  805ef4:	293ffd44 	addi	r4,r5,-11
  805ef8:	81bffe17 	ldw	r6,-8(r16)
  805efc:	80fffe04 	addi	r3,r16,-8
  805f00:	203ff11e 	bne	r4,zero,805ec8 <__b2d+0xc0>
  805f04:	accffc34 	orhi	r19,r21,16368
  805f08:	3025883a 	mov	r18,r6
  805f0c:	003fdf06 	br	805e8c <__b2d+0x84>
  805f10:	18bfff17 	ldw	r2,-4(r3)
  805f14:	110cd83a 	srl	r6,r2,r4
  805f18:	003fd706 	br	805e78 <__b2d+0x70>
  805f1c:	18bfff17 	ldw	r2,-4(r3)
  805f20:	114ed83a 	srl	r7,r2,r5
  805f24:	003fec06 	br	805ed8 <__b2d+0xd0>

00805f28 <__ratio>:
  805f28:	defff904 	addi	sp,sp,-28
  805f2c:	dc400215 	stw	r17,8(sp)
  805f30:	2823883a 	mov	r17,r5
  805f34:	d80b883a 	mov	r5,sp
  805f38:	dfc00615 	stw	ra,24(sp)
  805f3c:	dd000515 	stw	r20,20(sp)
  805f40:	dcc00415 	stw	r19,16(sp)
  805f44:	dc800315 	stw	r18,12(sp)
  805f48:	2025883a 	mov	r18,r4
  805f4c:	0805e080 	call	805e08 <__b2d>
  805f50:	8809883a 	mov	r4,r17
  805f54:	d9400104 	addi	r5,sp,4
  805f58:	1027883a 	mov	r19,r2
  805f5c:	1829883a 	mov	r20,r3
  805f60:	0805e080 	call	805e08 <__b2d>
  805f64:	89000417 	ldw	r4,16(r17)
  805f68:	91c00417 	ldw	r7,16(r18)
  805f6c:	d9800117 	ldw	r6,4(sp)
  805f70:	180b883a 	mov	r5,r3
  805f74:	390fc83a 	sub	r7,r7,r4
  805f78:	1009883a 	mov	r4,r2
  805f7c:	d8800017 	ldw	r2,0(sp)
  805f80:	380e917a 	slli	r7,r7,5
  805f84:	2011883a 	mov	r8,r4
  805f88:	1185c83a 	sub	r2,r2,r6
  805f8c:	11c5883a 	add	r2,r2,r7
  805f90:	1006953a 	slli	r3,r2,20
  805f94:	2813883a 	mov	r9,r5
  805f98:	00800d0e 	bge	zero,r2,805fd0 <__ratio+0xa8>
  805f9c:	1d29883a 	add	r20,r3,r20
  805fa0:	a00b883a 	mov	r5,r20
  805fa4:	480f883a 	mov	r7,r9
  805fa8:	9809883a 	mov	r4,r19
  805fac:	400d883a 	mov	r6,r8
  805fb0:	0808f700 	call	808f70 <__divdf3>
  805fb4:	dfc00617 	ldw	ra,24(sp)
  805fb8:	dd000517 	ldw	r20,20(sp)
  805fbc:	dcc00417 	ldw	r19,16(sp)
  805fc0:	dc800317 	ldw	r18,12(sp)
  805fc4:	dc400217 	ldw	r17,8(sp)
  805fc8:	dec00704 	addi	sp,sp,28
  805fcc:	f800283a 	ret
  805fd0:	28d3c83a 	sub	r9,r5,r3
  805fd4:	003ff206 	br	805fa0 <__ratio+0x78>

00805fd8 <_mprec_log10>:
  805fd8:	defffe04 	addi	sp,sp,-8
  805fdc:	008005c4 	movi	r2,23
  805fe0:	dc000015 	stw	r16,0(sp)
  805fe4:	dfc00115 	stw	ra,4(sp)
  805fe8:	2021883a 	mov	r16,r4
  805fec:	11000c16 	blt	r2,r4,806020 <_mprec_log10+0x48>
  805ff0:	200490fa 	slli	r2,r4,3
  805ff4:	00c02074 	movhi	r3,129
  805ff8:	18db7f04 	addi	r3,r3,28156
  805ffc:	10c5883a 	add	r2,r2,r3
  806000:	12400117 	ldw	r9,4(r2)
  806004:	12000017 	ldw	r8,0(r2)
  806008:	4807883a 	mov	r3,r9
  80600c:	4005883a 	mov	r2,r8
  806010:	dfc00117 	ldw	ra,4(sp)
  806014:	dc000017 	ldw	r16,0(sp)
  806018:	dec00204 	addi	sp,sp,8
  80601c:	f800283a 	ret
  806020:	0011883a 	mov	r8,zero
  806024:	024ffc34 	movhi	r9,16368
  806028:	0005883a 	mov	r2,zero
  80602c:	00d00934 	movhi	r3,16420
  806030:	480b883a 	mov	r5,r9
  806034:	4009883a 	mov	r4,r8
  806038:	180f883a 	mov	r7,r3
  80603c:	100d883a 	mov	r6,r2
  806040:	0808bac0 	call	808bac <__muldf3>
  806044:	843fffc4 	addi	r16,r16,-1
  806048:	1011883a 	mov	r8,r2
  80604c:	1813883a 	mov	r9,r3
  806050:	803ff51e 	bne	r16,zero,806028 <_mprec_log10+0x50>
  806054:	4005883a 	mov	r2,r8
  806058:	4807883a 	mov	r3,r9
  80605c:	dfc00117 	ldw	ra,4(sp)
  806060:	dc000017 	ldw	r16,0(sp)
  806064:	dec00204 	addi	sp,sp,8
  806068:	f800283a 	ret

0080606c <__copybits>:
  80606c:	297fffc4 	addi	r5,r5,-1
  806070:	30800417 	ldw	r2,16(r6)
  806074:	280bd17a 	srai	r5,r5,5
  806078:	31800504 	addi	r6,r6,20
  80607c:	1085883a 	add	r2,r2,r2
  806080:	294b883a 	add	r5,r5,r5
  806084:	294b883a 	add	r5,r5,r5
  806088:	1085883a 	add	r2,r2,r2
  80608c:	290b883a 	add	r5,r5,r4
  806090:	3087883a 	add	r3,r6,r2
  806094:	29400104 	addi	r5,r5,4
  806098:	30c0052e 	bgeu	r6,r3,8060b0 <__copybits+0x44>
  80609c:	30800017 	ldw	r2,0(r6)
  8060a0:	31800104 	addi	r6,r6,4
  8060a4:	20800015 	stw	r2,0(r4)
  8060a8:	21000104 	addi	r4,r4,4
  8060ac:	30fffb36 	bltu	r6,r3,80609c <__copybits+0x30>
  8060b0:	2140032e 	bgeu	r4,r5,8060c0 <__copybits+0x54>
  8060b4:	20000015 	stw	zero,0(r4)
  8060b8:	21000104 	addi	r4,r4,4
  8060bc:	217ffd36 	bltu	r4,r5,8060b4 <__copybits+0x48>
  8060c0:	f800283a 	ret

008060c4 <__any_on>:
  8060c4:	20800417 	ldw	r2,16(r4)
  8060c8:	2807d17a 	srai	r3,r5,5
  8060cc:	21000504 	addi	r4,r4,20
  8060d0:	10c00d0e 	bge	r2,r3,806108 <__any_on+0x44>
  8060d4:	1085883a 	add	r2,r2,r2
  8060d8:	1085883a 	add	r2,r2,r2
  8060dc:	208d883a 	add	r6,r4,r2
  8060e0:	2180182e 	bgeu	r4,r6,806144 <__any_on+0x80>
  8060e4:	30bfff17 	ldw	r2,-4(r6)
  8060e8:	30ffff04 	addi	r3,r6,-4
  8060ec:	1000041e 	bne	r2,zero,806100 <__any_on+0x3c>
  8060f0:	20c0142e 	bgeu	r4,r3,806144 <__any_on+0x80>
  8060f4:	18ffff04 	addi	r3,r3,-4
  8060f8:	18800017 	ldw	r2,0(r3)
  8060fc:	103ffc26 	beq	r2,zero,8060f0 <__any_on+0x2c>
  806100:	00800044 	movi	r2,1
  806104:	f800283a 	ret
  806108:	18800a0e 	bge	r3,r2,806134 <__any_on+0x70>
  80610c:	294007cc 	andi	r5,r5,31
  806110:	28000826 	beq	r5,zero,806134 <__any_on+0x70>
  806114:	18c5883a 	add	r2,r3,r3
  806118:	1085883a 	add	r2,r2,r2
  80611c:	208d883a 	add	r6,r4,r2
  806120:	30c00017 	ldw	r3,0(r6)
  806124:	1944d83a 	srl	r2,r3,r5
  806128:	1144983a 	sll	r2,r2,r5
  80612c:	18bff41e 	bne	r3,r2,806100 <__any_on+0x3c>
  806130:	003feb06 	br	8060e0 <__any_on+0x1c>
  806134:	18c5883a 	add	r2,r3,r3
  806138:	1085883a 	add	r2,r2,r2
  80613c:	208d883a 	add	r6,r4,r2
  806140:	003fe706 	br	8060e0 <__any_on+0x1c>
  806144:	0005883a 	mov	r2,zero
  806148:	f800283a 	ret

0080614c <_Balloc>:
  80614c:	20c01317 	ldw	r3,76(r4)
  806150:	defffb04 	addi	sp,sp,-20
  806154:	dcc00315 	stw	r19,12(sp)
  806158:	dc800215 	stw	r18,8(sp)
  80615c:	dfc00415 	stw	ra,16(sp)
  806160:	2825883a 	mov	r18,r5
  806164:	dc400115 	stw	r17,4(sp)
  806168:	dc000015 	stw	r16,0(sp)
  80616c:	2027883a 	mov	r19,r4
  806170:	01800404 	movi	r6,16
  806174:	01400104 	movi	r5,4
  806178:	18001726 	beq	r3,zero,8061d8 <_Balloc+0x8c>
  80617c:	01400044 	movi	r5,1
  806180:	9485883a 	add	r2,r18,r18
  806184:	2ca2983a 	sll	r17,r5,r18
  806188:	1085883a 	add	r2,r2,r2
  80618c:	10c7883a 	add	r3,r2,r3
  806190:	1c000017 	ldw	r16,0(r3)
  806194:	8c4d883a 	add	r6,r17,r17
  806198:	318d883a 	add	r6,r6,r6
  80619c:	9809883a 	mov	r4,r19
  8061a0:	31800504 	addi	r6,r6,20
  8061a4:	80001226 	beq	r16,zero,8061f0 <_Balloc+0xa4>
  8061a8:	80800017 	ldw	r2,0(r16)
  8061ac:	18800015 	stw	r2,0(r3)
  8061b0:	80000415 	stw	zero,16(r16)
  8061b4:	80000315 	stw	zero,12(r16)
  8061b8:	8005883a 	mov	r2,r16
  8061bc:	dfc00417 	ldw	ra,16(sp)
  8061c0:	dcc00317 	ldw	r19,12(sp)
  8061c4:	dc800217 	ldw	r18,8(sp)
  8061c8:	dc400117 	ldw	r17,4(sp)
  8061cc:	dc000017 	ldw	r16,0(sp)
  8061d0:	dec00504 	addi	sp,sp,20
  8061d4:	f800283a 	ret
  8061d8:	08075ac0 	call	8075ac <_calloc_r>
  8061dc:	1007883a 	mov	r3,r2
  8061e0:	0021883a 	mov	r16,zero
  8061e4:	98801315 	stw	r2,76(r19)
  8061e8:	103fe41e 	bne	r2,zero,80617c <_Balloc+0x30>
  8061ec:	003ff206 	br	8061b8 <_Balloc+0x6c>
  8061f0:	08075ac0 	call	8075ac <_calloc_r>
  8061f4:	103ff026 	beq	r2,zero,8061b8 <_Balloc+0x6c>
  8061f8:	1021883a 	mov	r16,r2
  8061fc:	14800115 	stw	r18,4(r2)
  806200:	14400215 	stw	r17,8(r2)
  806204:	003fea06 	br	8061b0 <_Balloc+0x64>

00806208 <__d2b>:
  806208:	defff504 	addi	sp,sp,-44
  80620c:	dcc00515 	stw	r19,20(sp)
  806210:	04c00044 	movi	r19,1
  806214:	dc000215 	stw	r16,8(sp)
  806218:	2821883a 	mov	r16,r5
  80621c:	980b883a 	mov	r5,r19
  806220:	ddc00915 	stw	r23,36(sp)
  806224:	dd800815 	stw	r22,32(sp)
  806228:	dd400715 	stw	r21,28(sp)
  80622c:	dd000615 	stw	r20,24(sp)
  806230:	dc800415 	stw	r18,16(sp)
  806234:	dc400315 	stw	r17,12(sp)
  806238:	dfc00a15 	stw	ra,40(sp)
  80623c:	3023883a 	mov	r17,r6
  806240:	382d883a 	mov	r22,r7
  806244:	ddc00b17 	ldw	r23,44(sp)
  806248:	080614c0 	call	80614c <_Balloc>
  80624c:	1025883a 	mov	r18,r2
  806250:	00a00034 	movhi	r2,32768
  806254:	10bfffc4 	addi	r2,r2,-1
  806258:	8888703a 	and	r4,r17,r2
  80625c:	202ad53a 	srli	r21,r4,20
  806260:	00800434 	movhi	r2,16
  806264:	10bfffc4 	addi	r2,r2,-1
  806268:	8886703a 	and	r3,r17,r2
  80626c:	a829003a 	cmpeq	r20,r21,zero
  806270:	800b883a 	mov	r5,r16
  806274:	d8c00115 	stw	r3,4(sp)
  806278:	94000504 	addi	r16,r18,20
  80627c:	a000021e 	bne	r20,zero,806288 <__d2b+0x80>
  806280:	18c00434 	orhi	r3,r3,16
  806284:	d8c00115 	stw	r3,4(sp)
  806288:	28002726 	beq	r5,zero,806328 <__d2b+0x120>
  80628c:	d809883a 	mov	r4,sp
  806290:	d9400015 	stw	r5,0(sp)
  806294:	0805c640 	call	805c64 <__lo0bits>
  806298:	100d883a 	mov	r6,r2
  80629c:	10003526 	beq	r2,zero,806374 <__d2b+0x16c>
  8062a0:	d8c00117 	ldw	r3,4(sp)
  8062a4:	00800804 	movi	r2,32
  8062a8:	1185c83a 	sub	r2,r2,r6
  8062ac:	d9000017 	ldw	r4,0(sp)
  8062b0:	1886983a 	sll	r3,r3,r2
  8062b4:	1906b03a 	or	r3,r3,r4
  8062b8:	90c00515 	stw	r3,20(r18)
  8062bc:	d8c00117 	ldw	r3,4(sp)
  8062c0:	1986d83a 	srl	r3,r3,r6
  8062c4:	d8c00115 	stw	r3,4(sp)
  8062c8:	180b003a 	cmpeq	r5,r3,zero
  8062cc:	00800084 	movi	r2,2
  8062d0:	114bc83a 	sub	r5,r2,r5
  8062d4:	80c00115 	stw	r3,4(r16)
  8062d8:	91400415 	stw	r5,16(r18)
  8062dc:	a0001a1e 	bne	r20,zero,806348 <__d2b+0x140>
  8062e0:	3545883a 	add	r2,r6,r21
  8062e4:	10bef344 	addi	r2,r2,-1075
  8062e8:	00c00d44 	movi	r3,53
  8062ec:	b0800015 	stw	r2,0(r22)
  8062f0:	1987c83a 	sub	r3,r3,r6
  8062f4:	b8c00015 	stw	r3,0(r23)
  8062f8:	9005883a 	mov	r2,r18
  8062fc:	dfc00a17 	ldw	ra,40(sp)
  806300:	ddc00917 	ldw	r23,36(sp)
  806304:	dd800817 	ldw	r22,32(sp)
  806308:	dd400717 	ldw	r21,28(sp)
  80630c:	dd000617 	ldw	r20,24(sp)
  806310:	dcc00517 	ldw	r19,20(sp)
  806314:	dc800417 	ldw	r18,16(sp)
  806318:	dc400317 	ldw	r17,12(sp)
  80631c:	dc000217 	ldw	r16,8(sp)
  806320:	dec00b04 	addi	sp,sp,44
  806324:	f800283a 	ret
  806328:	d9000104 	addi	r4,sp,4
  80632c:	0805c640 	call	805c64 <__lo0bits>
  806330:	11800804 	addi	r6,r2,32
  806334:	d8800117 	ldw	r2,4(sp)
  806338:	94c00415 	stw	r19,16(r18)
  80633c:	980b883a 	mov	r5,r19
  806340:	90800515 	stw	r2,20(r18)
  806344:	a03fe626 	beq	r20,zero,8062e0 <__d2b+0xd8>
  806348:	2945883a 	add	r2,r5,r5
  80634c:	1085883a 	add	r2,r2,r2
  806350:	1405883a 	add	r2,r2,r16
  806354:	113fff17 	ldw	r4,-4(r2)
  806358:	30fef384 	addi	r3,r6,-1074
  80635c:	2820917a 	slli	r16,r5,5
  806360:	b0c00015 	stw	r3,0(r22)
  806364:	0805bf40 	call	805bf4 <__hi0bits>
  806368:	80a1c83a 	sub	r16,r16,r2
  80636c:	bc000015 	stw	r16,0(r23)
  806370:	003fe106 	br	8062f8 <__d2b+0xf0>
  806374:	d8800017 	ldw	r2,0(sp)
  806378:	90800515 	stw	r2,20(r18)
  80637c:	d8c00117 	ldw	r3,4(sp)
  806380:	003fd106 	br	8062c8 <__d2b+0xc0>

00806384 <__mdiff>:
  806384:	defffb04 	addi	sp,sp,-20
  806388:	dc000015 	stw	r16,0(sp)
  80638c:	2821883a 	mov	r16,r5
  806390:	dc800215 	stw	r18,8(sp)
  806394:	300b883a 	mov	r5,r6
  806398:	2025883a 	mov	r18,r4
  80639c:	8009883a 	mov	r4,r16
  8063a0:	dc400115 	stw	r17,4(sp)
  8063a4:	dfc00415 	stw	ra,16(sp)
  8063a8:	dcc00315 	stw	r19,12(sp)
  8063ac:	3023883a 	mov	r17,r6
  8063b0:	0805d280 	call	805d28 <__mcmp>
  8063b4:	10004226 	beq	r2,zero,8064c0 <__mdiff+0x13c>
  8063b8:	10005016 	blt	r2,zero,8064fc <__mdiff+0x178>
  8063bc:	0027883a 	mov	r19,zero
  8063c0:	81400117 	ldw	r5,4(r16)
  8063c4:	9009883a 	mov	r4,r18
  8063c8:	080614c0 	call	80614c <_Balloc>
  8063cc:	1019883a 	mov	r12,r2
  8063d0:	82800417 	ldw	r10,16(r16)
  8063d4:	88800417 	ldw	r2,16(r17)
  8063d8:	81800504 	addi	r6,r16,20
  8063dc:	5287883a 	add	r3,r10,r10
  8063e0:	1085883a 	add	r2,r2,r2
  8063e4:	18c7883a 	add	r3,r3,r3
  8063e8:	1085883a 	add	r2,r2,r2
  8063ec:	8a000504 	addi	r8,r17,20
  8063f0:	64c00315 	stw	r19,12(r12)
  8063f4:	30db883a 	add	r13,r6,r3
  8063f8:	4097883a 	add	r11,r8,r2
  8063fc:	61c00504 	addi	r7,r12,20
  806400:	0013883a 	mov	r9,zero
  806404:	31000017 	ldw	r4,0(r6)
  806408:	41400017 	ldw	r5,0(r8)
  80640c:	42000104 	addi	r8,r8,4
  806410:	20bfffcc 	andi	r2,r4,65535
  806414:	28ffffcc 	andi	r3,r5,65535
  806418:	10c5c83a 	sub	r2,r2,r3
  80641c:	1245883a 	add	r2,r2,r9
  806420:	2008d43a 	srli	r4,r4,16
  806424:	280ad43a 	srli	r5,r5,16
  806428:	1007d43a 	srai	r3,r2,16
  80642c:	3880000d 	sth	r2,0(r7)
  806430:	2149c83a 	sub	r4,r4,r5
  806434:	20c9883a 	add	r4,r4,r3
  806438:	3900008d 	sth	r4,2(r7)
  80643c:	31800104 	addi	r6,r6,4
  806440:	39c00104 	addi	r7,r7,4
  806444:	2013d43a 	srai	r9,r4,16
  806448:	42ffee36 	bltu	r8,r11,806404 <__mdiff+0x80>
  80644c:	33400c2e 	bgeu	r6,r13,806480 <__mdiff+0xfc>
  806450:	30800017 	ldw	r2,0(r6)
  806454:	31800104 	addi	r6,r6,4
  806458:	10ffffcc 	andi	r3,r2,65535
  80645c:	1a47883a 	add	r3,r3,r9
  806460:	1004d43a 	srli	r2,r2,16
  806464:	1809d43a 	srai	r4,r3,16
  806468:	38c0000d 	sth	r3,0(r7)
  80646c:	1105883a 	add	r2,r2,r4
  806470:	3880008d 	sth	r2,2(r7)
  806474:	1013d43a 	srai	r9,r2,16
  806478:	39c00104 	addi	r7,r7,4
  80647c:	337ff436 	bltu	r6,r13,806450 <__mdiff+0xcc>
  806480:	38bfff17 	ldw	r2,-4(r7)
  806484:	38ffff04 	addi	r3,r7,-4
  806488:	1000041e 	bne	r2,zero,80649c <__mdiff+0x118>
  80648c:	18ffff04 	addi	r3,r3,-4
  806490:	18800017 	ldw	r2,0(r3)
  806494:	52bfffc4 	addi	r10,r10,-1
  806498:	103ffc26 	beq	r2,zero,80648c <__mdiff+0x108>
  80649c:	6005883a 	mov	r2,r12
  8064a0:	62800415 	stw	r10,16(r12)
  8064a4:	dfc00417 	ldw	ra,16(sp)
  8064a8:	dcc00317 	ldw	r19,12(sp)
  8064ac:	dc800217 	ldw	r18,8(sp)
  8064b0:	dc400117 	ldw	r17,4(sp)
  8064b4:	dc000017 	ldw	r16,0(sp)
  8064b8:	dec00504 	addi	sp,sp,20
  8064bc:	f800283a 	ret
  8064c0:	9009883a 	mov	r4,r18
  8064c4:	000b883a 	mov	r5,zero
  8064c8:	080614c0 	call	80614c <_Balloc>
  8064cc:	1019883a 	mov	r12,r2
  8064d0:	00800044 	movi	r2,1
  8064d4:	60800415 	stw	r2,16(r12)
  8064d8:	6005883a 	mov	r2,r12
  8064dc:	60000515 	stw	zero,20(r12)
  8064e0:	dfc00417 	ldw	ra,16(sp)
  8064e4:	dcc00317 	ldw	r19,12(sp)
  8064e8:	dc800217 	ldw	r18,8(sp)
  8064ec:	dc400117 	ldw	r17,4(sp)
  8064f0:	dc000017 	ldw	r16,0(sp)
  8064f4:	dec00504 	addi	sp,sp,20
  8064f8:	f800283a 	ret
  8064fc:	880d883a 	mov	r6,r17
  806500:	04c00044 	movi	r19,1
  806504:	8023883a 	mov	r17,r16
  806508:	3021883a 	mov	r16,r6
  80650c:	003fac06 	br	8063c0 <__mdiff+0x3c>

00806510 <__lshift>:
  806510:	defff904 	addi	sp,sp,-28
  806514:	28800417 	ldw	r2,16(r5)
  806518:	dc000015 	stw	r16,0(sp)
  80651c:	3021d17a 	srai	r16,r6,5
  806520:	28c00217 	ldw	r3,8(r5)
  806524:	10800044 	addi	r2,r2,1
  806528:	dc400115 	stw	r17,4(sp)
  80652c:	80a3883a 	add	r17,r16,r2
  806530:	dd400515 	stw	r21,20(sp)
  806534:	dd000415 	stw	r20,16(sp)
  806538:	dc800215 	stw	r18,8(sp)
  80653c:	dfc00615 	stw	ra,24(sp)
  806540:	2825883a 	mov	r18,r5
  806544:	dcc00315 	stw	r19,12(sp)
  806548:	3029883a 	mov	r20,r6
  80654c:	202b883a 	mov	r21,r4
  806550:	29400117 	ldw	r5,4(r5)
  806554:	1c40030e 	bge	r3,r17,806564 <__lshift+0x54>
  806558:	18c7883a 	add	r3,r3,r3
  80655c:	29400044 	addi	r5,r5,1
  806560:	1c7ffd16 	blt	r3,r17,806558 <__lshift+0x48>
  806564:	a809883a 	mov	r4,r21
  806568:	080614c0 	call	80614c <_Balloc>
  80656c:	1027883a 	mov	r19,r2
  806570:	11400504 	addi	r5,r2,20
  806574:	0400090e 	bge	zero,r16,80659c <__lshift+0x8c>
  806578:	2805883a 	mov	r2,r5
  80657c:	0007883a 	mov	r3,zero
  806580:	18c00044 	addi	r3,r3,1
  806584:	10000015 	stw	zero,0(r2)
  806588:	10800104 	addi	r2,r2,4
  80658c:	80fffc1e 	bne	r16,r3,806580 <__lshift+0x70>
  806590:	8405883a 	add	r2,r16,r16
  806594:	1085883a 	add	r2,r2,r2
  806598:	288b883a 	add	r5,r5,r2
  80659c:	90800417 	ldw	r2,16(r18)
  8065a0:	91000504 	addi	r4,r18,20
  8065a4:	a18007cc 	andi	r6,r20,31
  8065a8:	1085883a 	add	r2,r2,r2
  8065ac:	1085883a 	add	r2,r2,r2
  8065b0:	208f883a 	add	r7,r4,r2
  8065b4:	30001e26 	beq	r6,zero,806630 <__lshift+0x120>
  8065b8:	00800804 	movi	r2,32
  8065bc:	1191c83a 	sub	r8,r2,r6
  8065c0:	0007883a 	mov	r3,zero
  8065c4:	20800017 	ldw	r2,0(r4)
  8065c8:	1184983a 	sll	r2,r2,r6
  8065cc:	1884b03a 	or	r2,r3,r2
  8065d0:	28800015 	stw	r2,0(r5)
  8065d4:	20c00017 	ldw	r3,0(r4)
  8065d8:	21000104 	addi	r4,r4,4
  8065dc:	29400104 	addi	r5,r5,4
  8065e0:	1a06d83a 	srl	r3,r3,r8
  8065e4:	21fff736 	bltu	r4,r7,8065c4 <__lshift+0xb4>
  8065e8:	28c00015 	stw	r3,0(r5)
  8065ec:	18000126 	beq	r3,zero,8065f4 <__lshift+0xe4>
  8065f0:	8c400044 	addi	r17,r17,1
  8065f4:	88bfffc4 	addi	r2,r17,-1
  8065f8:	98800415 	stw	r2,16(r19)
  8065fc:	a809883a 	mov	r4,r21
  806600:	900b883a 	mov	r5,r18
  806604:	0805bcc0 	call	805bcc <_Bfree>
  806608:	9805883a 	mov	r2,r19
  80660c:	dfc00617 	ldw	ra,24(sp)
  806610:	dd400517 	ldw	r21,20(sp)
  806614:	dd000417 	ldw	r20,16(sp)
  806618:	dcc00317 	ldw	r19,12(sp)
  80661c:	dc800217 	ldw	r18,8(sp)
  806620:	dc400117 	ldw	r17,4(sp)
  806624:	dc000017 	ldw	r16,0(sp)
  806628:	dec00704 	addi	sp,sp,28
  80662c:	f800283a 	ret
  806630:	20800017 	ldw	r2,0(r4)
  806634:	21000104 	addi	r4,r4,4
  806638:	28800015 	stw	r2,0(r5)
  80663c:	29400104 	addi	r5,r5,4
  806640:	21ffec2e 	bgeu	r4,r7,8065f4 <__lshift+0xe4>
  806644:	20800017 	ldw	r2,0(r4)
  806648:	21000104 	addi	r4,r4,4
  80664c:	28800015 	stw	r2,0(r5)
  806650:	29400104 	addi	r5,r5,4
  806654:	21fff636 	bltu	r4,r7,806630 <__lshift+0x120>
  806658:	003fe606 	br	8065f4 <__lshift+0xe4>

0080665c <__multiply>:
  80665c:	defff004 	addi	sp,sp,-64
  806660:	dc800815 	stw	r18,32(sp)
  806664:	dc400715 	stw	r17,28(sp)
  806668:	2c800417 	ldw	r18,16(r5)
  80666c:	34400417 	ldw	r17,16(r6)
  806670:	dcc00915 	stw	r19,36(sp)
  806674:	dc000615 	stw	r16,24(sp)
  806678:	dfc00f15 	stw	ra,60(sp)
  80667c:	df000e15 	stw	fp,56(sp)
  806680:	ddc00d15 	stw	r23,52(sp)
  806684:	dd800c15 	stw	r22,48(sp)
  806688:	dd400b15 	stw	r21,44(sp)
  80668c:	dd000a15 	stw	r20,40(sp)
  806690:	2821883a 	mov	r16,r5
  806694:	3027883a 	mov	r19,r6
  806698:	9440040e 	bge	r18,r17,8066ac <__multiply+0x50>
  80669c:	8825883a 	mov	r18,r17
  8066a0:	2c400417 	ldw	r17,16(r5)
  8066a4:	2827883a 	mov	r19,r5
  8066a8:	3021883a 	mov	r16,r6
  8066ac:	80800217 	ldw	r2,8(r16)
  8066b0:	9447883a 	add	r3,r18,r17
  8066b4:	d8c00415 	stw	r3,16(sp)
  8066b8:	81400117 	ldw	r5,4(r16)
  8066bc:	10c0010e 	bge	r2,r3,8066c4 <__multiply+0x68>
  8066c0:	29400044 	addi	r5,r5,1
  8066c4:	080614c0 	call	80614c <_Balloc>
  8066c8:	d8800515 	stw	r2,20(sp)
  8066cc:	d9000417 	ldw	r4,16(sp)
  8066d0:	d8c00517 	ldw	r3,20(sp)
  8066d4:	2105883a 	add	r2,r4,r4
  8066d8:	1085883a 	add	r2,r2,r2
  8066dc:	19000504 	addi	r4,r3,20
  8066e0:	2085883a 	add	r2,r4,r2
  8066e4:	d8800315 	stw	r2,12(sp)
  8066e8:	2080052e 	bgeu	r4,r2,806700 <__multiply+0xa4>
  8066ec:	2005883a 	mov	r2,r4
  8066f0:	d8c00317 	ldw	r3,12(sp)
  8066f4:	10000015 	stw	zero,0(r2)
  8066f8:	10800104 	addi	r2,r2,4
  8066fc:	10fffc36 	bltu	r2,r3,8066f0 <__multiply+0x94>
  806700:	8c45883a 	add	r2,r17,r17
  806704:	9487883a 	add	r3,r18,r18
  806708:	9dc00504 	addi	r23,r19,20
  80670c:	1085883a 	add	r2,r2,r2
  806710:	84000504 	addi	r16,r16,20
  806714:	18c7883a 	add	r3,r3,r3
  806718:	b885883a 	add	r2,r23,r2
  80671c:	dc000015 	stw	r16,0(sp)
  806720:	d8800215 	stw	r2,8(sp)
  806724:	80f9883a 	add	fp,r16,r3
  806728:	b880432e 	bgeu	r23,r2,806838 <__multiply+0x1dc>
  80672c:	d9000115 	stw	r4,4(sp)
  806730:	b9000017 	ldw	r4,0(r23)
  806734:	253fffcc 	andi	r20,r4,65535
  806738:	a0001a26 	beq	r20,zero,8067a4 <__multiply+0x148>
  80673c:	dcc00017 	ldw	r19,0(sp)
  806740:	dc800117 	ldw	r18,4(sp)
  806744:	002b883a 	mov	r21,zero
  806748:	9c400017 	ldw	r17,0(r19)
  80674c:	94000017 	ldw	r16,0(r18)
  806750:	a009883a 	mov	r4,r20
  806754:	897fffcc 	andi	r5,r17,65535
  806758:	08099200 	call	809920 <__mulsi3>
  80675c:	880ad43a 	srli	r5,r17,16
  806760:	80ffffcc 	andi	r3,r16,65535
  806764:	a8c7883a 	add	r3,r21,r3
  806768:	a009883a 	mov	r4,r20
  80676c:	10e3883a 	add	r17,r2,r3
  806770:	8020d43a 	srli	r16,r16,16
  806774:	08099200 	call	809920 <__mulsi3>
  806778:	8806d43a 	srli	r3,r17,16
  80677c:	1405883a 	add	r2,r2,r16
  806780:	9cc00104 	addi	r19,r19,4
  806784:	1887883a 	add	r3,r3,r2
  806788:	90c0008d 	sth	r3,2(r18)
  80678c:	9440000d 	sth	r17,0(r18)
  806790:	182ad43a 	srli	r21,r3,16
  806794:	94800104 	addi	r18,r18,4
  806798:	9f3feb36 	bltu	r19,fp,806748 <__multiply+0xec>
  80679c:	95400015 	stw	r21,0(r18)
  8067a0:	b9000017 	ldw	r4,0(r23)
  8067a4:	202ad43a 	srli	r21,r4,16
  8067a8:	a8001c26 	beq	r21,zero,80681c <__multiply+0x1c0>
  8067ac:	d9000117 	ldw	r4,4(sp)
  8067b0:	dd000017 	ldw	r20,0(sp)
  8067b4:	002d883a 	mov	r22,zero
  8067b8:	24c00017 	ldw	r19,0(r4)
  8067bc:	2025883a 	mov	r18,r4
  8067c0:	9823883a 	mov	r17,r19
  8067c4:	a4000017 	ldw	r16,0(r20)
  8067c8:	a809883a 	mov	r4,r21
  8067cc:	a5000104 	addi	r20,r20,4
  8067d0:	817fffcc 	andi	r5,r16,65535
  8067d4:	08099200 	call	809920 <__mulsi3>
  8067d8:	8806d43a 	srli	r3,r17,16
  8067dc:	800ad43a 	srli	r5,r16,16
  8067e0:	94c0000d 	sth	r19,0(r18)
  8067e4:	b0c7883a 	add	r3,r22,r3
  8067e8:	10e1883a 	add	r16,r2,r3
  8067ec:	9400008d 	sth	r16,2(r18)
  8067f0:	a809883a 	mov	r4,r21
  8067f4:	94800104 	addi	r18,r18,4
  8067f8:	08099200 	call	809920 <__mulsi3>
  8067fc:	94400017 	ldw	r17,0(r18)
  806800:	8020d43a 	srli	r16,r16,16
  806804:	88ffffcc 	andi	r3,r17,65535
  806808:	10c5883a 	add	r2,r2,r3
  80680c:	80a7883a 	add	r19,r16,r2
  806810:	982cd43a 	srli	r22,r19,16
  806814:	a73feb36 	bltu	r20,fp,8067c4 <__multiply+0x168>
  806818:	94c00015 	stw	r19,0(r18)
  80681c:	d8800217 	ldw	r2,8(sp)
  806820:	bdc00104 	addi	r23,r23,4
  806824:	b880042e 	bgeu	r23,r2,806838 <__multiply+0x1dc>
  806828:	d8c00117 	ldw	r3,4(sp)
  80682c:	18c00104 	addi	r3,r3,4
  806830:	d8c00115 	stw	r3,4(sp)
  806834:	003fbe06 	br	806730 <__multiply+0xd4>
  806838:	d9000417 	ldw	r4,16(sp)
  80683c:	01000c0e 	bge	zero,r4,806870 <__multiply+0x214>
  806840:	d8c00317 	ldw	r3,12(sp)
  806844:	18bfff17 	ldw	r2,-4(r3)
  806848:	18ffff04 	addi	r3,r3,-4
  80684c:	10000326 	beq	r2,zero,80685c <__multiply+0x200>
  806850:	00000706 	br	806870 <__multiply+0x214>
  806854:	18800017 	ldw	r2,0(r3)
  806858:	1000051e 	bne	r2,zero,806870 <__multiply+0x214>
  80685c:	d9000417 	ldw	r4,16(sp)
  806860:	18ffff04 	addi	r3,r3,-4
  806864:	213fffc4 	addi	r4,r4,-1
  806868:	d9000415 	stw	r4,16(sp)
  80686c:	203ff91e 	bne	r4,zero,806854 <__multiply+0x1f8>
  806870:	d8800417 	ldw	r2,16(sp)
  806874:	d8c00517 	ldw	r3,20(sp)
  806878:	18800415 	stw	r2,16(r3)
  80687c:	1805883a 	mov	r2,r3
  806880:	dfc00f17 	ldw	ra,60(sp)
  806884:	df000e17 	ldw	fp,56(sp)
  806888:	ddc00d17 	ldw	r23,52(sp)
  80688c:	dd800c17 	ldw	r22,48(sp)
  806890:	dd400b17 	ldw	r21,44(sp)
  806894:	dd000a17 	ldw	r20,40(sp)
  806898:	dcc00917 	ldw	r19,36(sp)
  80689c:	dc800817 	ldw	r18,32(sp)
  8068a0:	dc400717 	ldw	r17,28(sp)
  8068a4:	dc000617 	ldw	r16,24(sp)
  8068a8:	dec01004 	addi	sp,sp,64
  8068ac:	f800283a 	ret

008068b0 <__i2b>:
  8068b0:	defffd04 	addi	sp,sp,-12
  8068b4:	dc000015 	stw	r16,0(sp)
  8068b8:	04000044 	movi	r16,1
  8068bc:	dc800115 	stw	r18,4(sp)
  8068c0:	2825883a 	mov	r18,r5
  8068c4:	800b883a 	mov	r5,r16
  8068c8:	dfc00215 	stw	ra,8(sp)
  8068cc:	080614c0 	call	80614c <_Balloc>
  8068d0:	14000415 	stw	r16,16(r2)
  8068d4:	14800515 	stw	r18,20(r2)
  8068d8:	dfc00217 	ldw	ra,8(sp)
  8068dc:	dc800117 	ldw	r18,4(sp)
  8068e0:	dc000017 	ldw	r16,0(sp)
  8068e4:	dec00304 	addi	sp,sp,12
  8068e8:	f800283a 	ret

008068ec <__multadd>:
  8068ec:	defff604 	addi	sp,sp,-40
  8068f0:	dd800615 	stw	r22,24(sp)
  8068f4:	2d800417 	ldw	r22,16(r5)
  8068f8:	df000815 	stw	fp,32(sp)
  8068fc:	ddc00715 	stw	r23,28(sp)
  806900:	dd400515 	stw	r21,20(sp)
  806904:	dd000415 	stw	r20,16(sp)
  806908:	dcc00315 	stw	r19,12(sp)
  80690c:	dc800215 	stw	r18,8(sp)
  806910:	dfc00915 	stw	ra,36(sp)
  806914:	dc400115 	stw	r17,4(sp)
  806918:	dc000015 	stw	r16,0(sp)
  80691c:	282f883a 	mov	r23,r5
  806920:	2039883a 	mov	fp,r4
  806924:	302b883a 	mov	r21,r6
  806928:	3829883a 	mov	r20,r7
  80692c:	2c800504 	addi	r18,r5,20
  806930:	0027883a 	mov	r19,zero
  806934:	94400017 	ldw	r17,0(r18)
  806938:	a80b883a 	mov	r5,r21
  80693c:	9cc00044 	addi	r19,r19,1
  806940:	893fffcc 	andi	r4,r17,65535
  806944:	08099200 	call	809920 <__mulsi3>
  806948:	8808d43a 	srli	r4,r17,16
  80694c:	1521883a 	add	r16,r2,r20
  806950:	a80b883a 	mov	r5,r21
  806954:	08099200 	call	809920 <__mulsi3>
  806958:	8008d43a 	srli	r4,r16,16
  80695c:	843fffcc 	andi	r16,r16,65535
  806960:	1105883a 	add	r2,r2,r4
  806964:	1006943a 	slli	r3,r2,16
  806968:	1028d43a 	srli	r20,r2,16
  80696c:	1c07883a 	add	r3,r3,r16
  806970:	90c00015 	stw	r3,0(r18)
  806974:	94800104 	addi	r18,r18,4
  806978:	9dbfee16 	blt	r19,r22,806934 <__multadd+0x48>
  80697c:	a0000826 	beq	r20,zero,8069a0 <__multadd+0xb4>
  806980:	b8800217 	ldw	r2,8(r23)
  806984:	b080130e 	bge	r22,r2,8069d4 <__multadd+0xe8>
  806988:	b585883a 	add	r2,r22,r22
  80698c:	1085883a 	add	r2,r2,r2
  806990:	15c5883a 	add	r2,r2,r23
  806994:	b0c00044 	addi	r3,r22,1
  806998:	15000515 	stw	r20,20(r2)
  80699c:	b8c00415 	stw	r3,16(r23)
  8069a0:	b805883a 	mov	r2,r23
  8069a4:	dfc00917 	ldw	ra,36(sp)
  8069a8:	df000817 	ldw	fp,32(sp)
  8069ac:	ddc00717 	ldw	r23,28(sp)
  8069b0:	dd800617 	ldw	r22,24(sp)
  8069b4:	dd400517 	ldw	r21,20(sp)
  8069b8:	dd000417 	ldw	r20,16(sp)
  8069bc:	dcc00317 	ldw	r19,12(sp)
  8069c0:	dc800217 	ldw	r18,8(sp)
  8069c4:	dc400117 	ldw	r17,4(sp)
  8069c8:	dc000017 	ldw	r16,0(sp)
  8069cc:	dec00a04 	addi	sp,sp,40
  8069d0:	f800283a 	ret
  8069d4:	b9400117 	ldw	r5,4(r23)
  8069d8:	e009883a 	mov	r4,fp
  8069dc:	29400044 	addi	r5,r5,1
  8069e0:	080614c0 	call	80614c <_Balloc>
  8069e4:	b9800417 	ldw	r6,16(r23)
  8069e8:	b9400304 	addi	r5,r23,12
  8069ec:	11000304 	addi	r4,r2,12
  8069f0:	318d883a 	add	r6,r6,r6
  8069f4:	318d883a 	add	r6,r6,r6
  8069f8:	31800204 	addi	r6,r6,8
  8069fc:	1023883a 	mov	r17,r2
  806a00:	08059b40 	call	8059b4 <memcpy>
  806a04:	b80b883a 	mov	r5,r23
  806a08:	e009883a 	mov	r4,fp
  806a0c:	0805bcc0 	call	805bcc <_Bfree>
  806a10:	882f883a 	mov	r23,r17
  806a14:	003fdc06 	br	806988 <__multadd+0x9c>

00806a18 <__pow5mult>:
  806a18:	defffa04 	addi	sp,sp,-24
  806a1c:	308000cc 	andi	r2,r6,3
  806a20:	dd000415 	stw	r20,16(sp)
  806a24:	dcc00315 	stw	r19,12(sp)
  806a28:	dc000015 	stw	r16,0(sp)
  806a2c:	dfc00515 	stw	ra,20(sp)
  806a30:	dc800215 	stw	r18,8(sp)
  806a34:	dc400115 	stw	r17,4(sp)
  806a38:	3021883a 	mov	r16,r6
  806a3c:	2027883a 	mov	r19,r4
  806a40:	2829883a 	mov	r20,r5
  806a44:	10002b1e 	bne	r2,zero,806af4 <__pow5mult+0xdc>
  806a48:	8025d0ba 	srai	r18,r16,2
  806a4c:	90001b26 	beq	r18,zero,806abc <__pow5mult+0xa4>
  806a50:	9c001217 	ldw	r16,72(r19)
  806a54:	8000081e 	bne	r16,zero,806a78 <__pow5mult+0x60>
  806a58:	00003006 	br	806b1c <__pow5mult+0x104>
  806a5c:	800b883a 	mov	r5,r16
  806a60:	800d883a 	mov	r6,r16
  806a64:	9809883a 	mov	r4,r19
  806a68:	90001426 	beq	r18,zero,806abc <__pow5mult+0xa4>
  806a6c:	80800017 	ldw	r2,0(r16)
  806a70:	10001b26 	beq	r2,zero,806ae0 <__pow5mult+0xc8>
  806a74:	1021883a 	mov	r16,r2
  806a78:	9080004c 	andi	r2,r18,1
  806a7c:	1005003a 	cmpeq	r2,r2,zero
  806a80:	9025d07a 	srai	r18,r18,1
  806a84:	800d883a 	mov	r6,r16
  806a88:	9809883a 	mov	r4,r19
  806a8c:	a00b883a 	mov	r5,r20
  806a90:	103ff21e 	bne	r2,zero,806a5c <__pow5mult+0x44>
  806a94:	080665c0 	call	80665c <__multiply>
  806a98:	a00b883a 	mov	r5,r20
  806a9c:	9809883a 	mov	r4,r19
  806aa0:	1023883a 	mov	r17,r2
  806aa4:	0805bcc0 	call	805bcc <_Bfree>
  806aa8:	8829883a 	mov	r20,r17
  806aac:	800b883a 	mov	r5,r16
  806ab0:	800d883a 	mov	r6,r16
  806ab4:	9809883a 	mov	r4,r19
  806ab8:	903fec1e 	bne	r18,zero,806a6c <__pow5mult+0x54>
  806abc:	a005883a 	mov	r2,r20
  806ac0:	dfc00517 	ldw	ra,20(sp)
  806ac4:	dd000417 	ldw	r20,16(sp)
  806ac8:	dcc00317 	ldw	r19,12(sp)
  806acc:	dc800217 	ldw	r18,8(sp)
  806ad0:	dc400117 	ldw	r17,4(sp)
  806ad4:	dc000017 	ldw	r16,0(sp)
  806ad8:	dec00604 	addi	sp,sp,24
  806adc:	f800283a 	ret
  806ae0:	080665c0 	call	80665c <__multiply>
  806ae4:	80800015 	stw	r2,0(r16)
  806ae8:	1021883a 	mov	r16,r2
  806aec:	10000015 	stw	zero,0(r2)
  806af0:	003fe106 	br	806a78 <__pow5mult+0x60>
  806af4:	1085883a 	add	r2,r2,r2
  806af8:	00c02074 	movhi	r3,129
  806afc:	18dbc504 	addi	r3,r3,28436
  806b00:	1085883a 	add	r2,r2,r2
  806b04:	10c5883a 	add	r2,r2,r3
  806b08:	11bfff17 	ldw	r6,-4(r2)
  806b0c:	000f883a 	mov	r7,zero
  806b10:	08068ec0 	call	8068ec <__multadd>
  806b14:	1029883a 	mov	r20,r2
  806b18:	003fcb06 	br	806a48 <__pow5mult+0x30>
  806b1c:	9809883a 	mov	r4,r19
  806b20:	01409c44 	movi	r5,625
  806b24:	08068b00 	call	8068b0 <__i2b>
  806b28:	98801215 	stw	r2,72(r19)
  806b2c:	1021883a 	mov	r16,r2
  806b30:	10000015 	stw	zero,0(r2)
  806b34:	003fd006 	br	806a78 <__pow5mult+0x60>

00806b38 <__s2b>:
  806b38:	defff904 	addi	sp,sp,-28
  806b3c:	dcc00315 	stw	r19,12(sp)
  806b40:	dc800215 	stw	r18,8(sp)
  806b44:	2827883a 	mov	r19,r5
  806b48:	2025883a 	mov	r18,r4
  806b4c:	01400244 	movi	r5,9
  806b50:	39000204 	addi	r4,r7,8
  806b54:	dd000415 	stw	r20,16(sp)
  806b58:	dc400115 	stw	r17,4(sp)
  806b5c:	dfc00615 	stw	ra,24(sp)
  806b60:	dd400515 	stw	r21,20(sp)
  806b64:	dc000015 	stw	r16,0(sp)
  806b68:	3829883a 	mov	r20,r7
  806b6c:	3023883a 	mov	r17,r6
  806b70:	08098500 	call	809850 <__divsi3>
  806b74:	00c00044 	movi	r3,1
  806b78:	1880350e 	bge	r3,r2,806c50 <__s2b+0x118>
  806b7c:	000b883a 	mov	r5,zero
  806b80:	18c7883a 	add	r3,r3,r3
  806b84:	29400044 	addi	r5,r5,1
  806b88:	18bffd16 	blt	r3,r2,806b80 <__s2b+0x48>
  806b8c:	9009883a 	mov	r4,r18
  806b90:	080614c0 	call	80614c <_Balloc>
  806b94:	1011883a 	mov	r8,r2
  806b98:	d8800717 	ldw	r2,28(sp)
  806b9c:	00c00044 	movi	r3,1
  806ba0:	01800244 	movi	r6,9
  806ba4:	40800515 	stw	r2,20(r8)
  806ba8:	40c00415 	stw	r3,16(r8)
  806bac:	3440260e 	bge	r6,r17,806c48 <__s2b+0x110>
  806bb0:	3021883a 	mov	r16,r6
  806bb4:	99ab883a 	add	r21,r19,r6
  806bb8:	9c05883a 	add	r2,r19,r16
  806bbc:	11c00007 	ldb	r7,0(r2)
  806bc0:	400b883a 	mov	r5,r8
  806bc4:	9009883a 	mov	r4,r18
  806bc8:	39fff404 	addi	r7,r7,-48
  806bcc:	01800284 	movi	r6,10
  806bd0:	08068ec0 	call	8068ec <__multadd>
  806bd4:	84000044 	addi	r16,r16,1
  806bd8:	1011883a 	mov	r8,r2
  806bdc:	8c3ff61e 	bne	r17,r16,806bb8 <__s2b+0x80>
  806be0:	ac45883a 	add	r2,r21,r17
  806be4:	117ffe04 	addi	r5,r2,-8
  806be8:	880d883a 	mov	r6,r17
  806bec:	35000c0e 	bge	r6,r20,806c20 <__s2b+0xe8>
  806bf0:	a185c83a 	sub	r2,r20,r6
  806bf4:	2821883a 	mov	r16,r5
  806bf8:	28a3883a 	add	r17,r5,r2
  806bfc:	81c00007 	ldb	r7,0(r16)
  806c00:	400b883a 	mov	r5,r8
  806c04:	9009883a 	mov	r4,r18
  806c08:	39fff404 	addi	r7,r7,-48
  806c0c:	01800284 	movi	r6,10
  806c10:	08068ec0 	call	8068ec <__multadd>
  806c14:	84000044 	addi	r16,r16,1
  806c18:	1011883a 	mov	r8,r2
  806c1c:	847ff71e 	bne	r16,r17,806bfc <__s2b+0xc4>
  806c20:	4005883a 	mov	r2,r8
  806c24:	dfc00617 	ldw	ra,24(sp)
  806c28:	dd400517 	ldw	r21,20(sp)
  806c2c:	dd000417 	ldw	r20,16(sp)
  806c30:	dcc00317 	ldw	r19,12(sp)
  806c34:	dc800217 	ldw	r18,8(sp)
  806c38:	dc400117 	ldw	r17,4(sp)
  806c3c:	dc000017 	ldw	r16,0(sp)
  806c40:	dec00704 	addi	sp,sp,28
  806c44:	f800283a 	ret
  806c48:	99400284 	addi	r5,r19,10
  806c4c:	003fe706 	br	806bec <__s2b+0xb4>
  806c50:	000b883a 	mov	r5,zero
  806c54:	003fcd06 	br	806b8c <__s2b+0x54>

00806c58 <_realloc_r>:
  806c58:	defff404 	addi	sp,sp,-48
  806c5c:	dd800815 	stw	r22,32(sp)
  806c60:	dc800415 	stw	r18,16(sp)
  806c64:	dc400315 	stw	r17,12(sp)
  806c68:	dfc00b15 	stw	ra,44(sp)
  806c6c:	df000a15 	stw	fp,40(sp)
  806c70:	ddc00915 	stw	r23,36(sp)
  806c74:	dd400715 	stw	r21,28(sp)
  806c78:	dd000615 	stw	r20,24(sp)
  806c7c:	dcc00515 	stw	r19,20(sp)
  806c80:	dc000215 	stw	r16,8(sp)
  806c84:	2825883a 	mov	r18,r5
  806c88:	3023883a 	mov	r17,r6
  806c8c:	202d883a 	mov	r22,r4
  806c90:	2800c926 	beq	r5,zero,806fb8 <_realloc_r+0x360>
  806c94:	080ac440 	call	80ac44 <__malloc_lock>
  806c98:	943ffe04 	addi	r16,r18,-8
  806c9c:	88c002c4 	addi	r3,r17,11
  806ca0:	00800584 	movi	r2,22
  806ca4:	82000117 	ldw	r8,4(r16)
  806ca8:	10c01b2e 	bgeu	r2,r3,806d18 <_realloc_r+0xc0>
  806cac:	00bffe04 	movi	r2,-8
  806cb0:	188e703a 	and	r7,r3,r2
  806cb4:	3839883a 	mov	fp,r7
  806cb8:	38001a16 	blt	r7,zero,806d24 <_realloc_r+0xcc>
  806cbc:	e4401936 	bltu	fp,r17,806d24 <_realloc_r+0xcc>
  806cc0:	013fff04 	movi	r4,-4
  806cc4:	4126703a 	and	r19,r8,r4
  806cc8:	99c02616 	blt	r19,r7,806d64 <_realloc_r+0x10c>
  806ccc:	802b883a 	mov	r21,r16
  806cd0:	9829883a 	mov	r20,r19
  806cd4:	84000204 	addi	r16,r16,8
  806cd8:	a80f883a 	mov	r7,r21
  806cdc:	a70dc83a 	sub	r6,r20,fp
  806ce0:	008003c4 	movi	r2,15
  806ce4:	1180c136 	bltu	r2,r6,806fec <_realloc_r+0x394>
  806ce8:	38800117 	ldw	r2,4(r7)
  806cec:	a549883a 	add	r4,r20,r21
  806cf0:	1080004c 	andi	r2,r2,1
  806cf4:	a084b03a 	or	r2,r20,r2
  806cf8:	38800115 	stw	r2,4(r7)
  806cfc:	20c00117 	ldw	r3,4(r4)
  806d00:	18c00054 	ori	r3,r3,1
  806d04:	20c00115 	stw	r3,4(r4)
  806d08:	b009883a 	mov	r4,r22
  806d0c:	080ad4c0 	call	80ad4c <__malloc_unlock>
  806d10:	8023883a 	mov	r17,r16
  806d14:	00000606 	br	806d30 <_realloc_r+0xd8>
  806d18:	01c00404 	movi	r7,16
  806d1c:	3839883a 	mov	fp,r7
  806d20:	e47fe72e 	bgeu	fp,r17,806cc0 <_realloc_r+0x68>
  806d24:	00800304 	movi	r2,12
  806d28:	0023883a 	mov	r17,zero
  806d2c:	b0800015 	stw	r2,0(r22)
  806d30:	8805883a 	mov	r2,r17
  806d34:	dfc00b17 	ldw	ra,44(sp)
  806d38:	df000a17 	ldw	fp,40(sp)
  806d3c:	ddc00917 	ldw	r23,36(sp)
  806d40:	dd800817 	ldw	r22,32(sp)
  806d44:	dd400717 	ldw	r21,28(sp)
  806d48:	dd000617 	ldw	r20,24(sp)
  806d4c:	dcc00517 	ldw	r19,20(sp)
  806d50:	dc800417 	ldw	r18,16(sp)
  806d54:	dc400317 	ldw	r17,12(sp)
  806d58:	dc000217 	ldw	r16,8(sp)
  806d5c:	dec00c04 	addi	sp,sp,48
  806d60:	f800283a 	ret
  806d64:	00802074 	movhi	r2,129
  806d68:	109d7804 	addi	r2,r2,30176
  806d6c:	12400217 	ldw	r9,8(r2)
  806d70:	84cd883a 	add	r6,r16,r19
  806d74:	802b883a 	mov	r21,r16
  806d78:	3240b926 	beq	r6,r9,807060 <_realloc_r+0x408>
  806d7c:	31400117 	ldw	r5,4(r6)
  806d80:	00bfff84 	movi	r2,-2
  806d84:	2884703a 	and	r2,r5,r2
  806d88:	1185883a 	add	r2,r2,r6
  806d8c:	10c00117 	ldw	r3,4(r2)
  806d90:	18c0004c 	andi	r3,r3,1
  806d94:	1807003a 	cmpeq	r3,r3,zero
  806d98:	1800a326 	beq	r3,zero,807028 <_realloc_r+0x3d0>
  806d9c:	2908703a 	and	r4,r5,r4
  806da0:	9929883a 	add	r20,r19,r4
  806da4:	a1c0a30e 	bge	r20,r7,807034 <_realloc_r+0x3dc>
  806da8:	4080004c 	andi	r2,r8,1
  806dac:	1000551e 	bne	r2,zero,806f04 <_realloc_r+0x2ac>
  806db0:	80800017 	ldw	r2,0(r16)
  806db4:	80afc83a 	sub	r23,r16,r2
  806db8:	b8c00117 	ldw	r3,4(r23)
  806dbc:	00bfff04 	movi	r2,-4
  806dc0:	1884703a 	and	r2,r3,r2
  806dc4:	30002e26 	beq	r6,zero,806e80 <_realloc_r+0x228>
  806dc8:	3240b926 	beq	r6,r9,8070b0 <_realloc_r+0x458>
  806dcc:	98a9883a 	add	r20,r19,r2
  806dd0:	2509883a 	add	r4,r4,r20
  806dd4:	d9000015 	stw	r4,0(sp)
  806dd8:	21c02a16 	blt	r4,r7,806e84 <_realloc_r+0x22c>
  806ddc:	30800317 	ldw	r2,12(r6)
  806de0:	30c00217 	ldw	r3,8(r6)
  806de4:	01400904 	movi	r5,36
  806de8:	99bfff04 	addi	r6,r19,-4
  806dec:	18800315 	stw	r2,12(r3)
  806df0:	10c00215 	stw	r3,8(r2)
  806df4:	b9000317 	ldw	r4,12(r23)
  806df8:	b8800217 	ldw	r2,8(r23)
  806dfc:	b82b883a 	mov	r21,r23
  806e00:	bc000204 	addi	r16,r23,8
  806e04:	20800215 	stw	r2,8(r4)
  806e08:	11000315 	stw	r4,12(r2)
  806e0c:	2980e436 	bltu	r5,r6,8071a0 <_realloc_r+0x548>
  806e10:	008004c4 	movi	r2,19
  806e14:	9009883a 	mov	r4,r18
  806e18:	8011883a 	mov	r8,r16
  806e1c:	11800f2e 	bgeu	r2,r6,806e5c <_realloc_r+0x204>
  806e20:	90800017 	ldw	r2,0(r18)
  806e24:	ba000404 	addi	r8,r23,16
  806e28:	91000204 	addi	r4,r18,8
  806e2c:	b8800215 	stw	r2,8(r23)
  806e30:	90c00117 	ldw	r3,4(r18)
  806e34:	008006c4 	movi	r2,27
  806e38:	b8c00315 	stw	r3,12(r23)
  806e3c:	1180072e 	bgeu	r2,r6,806e5c <_realloc_r+0x204>
  806e40:	90c00217 	ldw	r3,8(r18)
  806e44:	ba000604 	addi	r8,r23,24
  806e48:	91000404 	addi	r4,r18,16
  806e4c:	b8c00415 	stw	r3,16(r23)
  806e50:	90800317 	ldw	r2,12(r18)
  806e54:	b8800515 	stw	r2,20(r23)
  806e58:	3140e726 	beq	r6,r5,8071f8 <_realloc_r+0x5a0>
  806e5c:	20800017 	ldw	r2,0(r4)
  806e60:	dd000017 	ldw	r20,0(sp)
  806e64:	b80f883a 	mov	r7,r23
  806e68:	40800015 	stw	r2,0(r8)
  806e6c:	20c00117 	ldw	r3,4(r4)
  806e70:	40c00115 	stw	r3,4(r8)
  806e74:	20800217 	ldw	r2,8(r4)
  806e78:	40800215 	stw	r2,8(r8)
  806e7c:	003f9706 	br	806cdc <_realloc_r+0x84>
  806e80:	98a9883a 	add	r20,r19,r2
  806e84:	a1c01f16 	blt	r20,r7,806f04 <_realloc_r+0x2ac>
  806e88:	b8c00317 	ldw	r3,12(r23)
  806e8c:	b8800217 	ldw	r2,8(r23)
  806e90:	99bfff04 	addi	r6,r19,-4
  806e94:	01400904 	movi	r5,36
  806e98:	b82b883a 	mov	r21,r23
  806e9c:	18800215 	stw	r2,8(r3)
  806ea0:	10c00315 	stw	r3,12(r2)
  806ea4:	bc000204 	addi	r16,r23,8
  806ea8:	2980c336 	bltu	r5,r6,8071b8 <_realloc_r+0x560>
  806eac:	008004c4 	movi	r2,19
  806eb0:	9009883a 	mov	r4,r18
  806eb4:	8011883a 	mov	r8,r16
  806eb8:	11800f2e 	bgeu	r2,r6,806ef8 <_realloc_r+0x2a0>
  806ebc:	90800017 	ldw	r2,0(r18)
  806ec0:	ba000404 	addi	r8,r23,16
  806ec4:	91000204 	addi	r4,r18,8
  806ec8:	b8800215 	stw	r2,8(r23)
  806ecc:	90c00117 	ldw	r3,4(r18)
  806ed0:	008006c4 	movi	r2,27
  806ed4:	b8c00315 	stw	r3,12(r23)
  806ed8:	1180072e 	bgeu	r2,r6,806ef8 <_realloc_r+0x2a0>
  806edc:	90c00217 	ldw	r3,8(r18)
  806ee0:	ba000604 	addi	r8,r23,24
  806ee4:	91000404 	addi	r4,r18,16
  806ee8:	b8c00415 	stw	r3,16(r23)
  806eec:	90800317 	ldw	r2,12(r18)
  806ef0:	b8800515 	stw	r2,20(r23)
  806ef4:	3140c726 	beq	r6,r5,807214 <_realloc_r+0x5bc>
  806ef8:	20800017 	ldw	r2,0(r4)
  806efc:	b80f883a 	mov	r7,r23
  806f00:	003fd906 	br	806e68 <_realloc_r+0x210>
  806f04:	880b883a 	mov	r5,r17
  806f08:	b009883a 	mov	r4,r22
  806f0c:	08051900 	call	805190 <_malloc_r>
  806f10:	1023883a 	mov	r17,r2
  806f14:	10002526 	beq	r2,zero,806fac <_realloc_r+0x354>
  806f18:	80800117 	ldw	r2,4(r16)
  806f1c:	00ffff84 	movi	r3,-2
  806f20:	893ffe04 	addi	r4,r17,-8
  806f24:	10c4703a 	and	r2,r2,r3
  806f28:	8085883a 	add	r2,r16,r2
  806f2c:	20809526 	beq	r4,r2,807184 <_realloc_r+0x52c>
  806f30:	99bfff04 	addi	r6,r19,-4
  806f34:	01c00904 	movi	r7,36
  806f38:	39804536 	bltu	r7,r6,807050 <_realloc_r+0x3f8>
  806f3c:	008004c4 	movi	r2,19
  806f40:	9009883a 	mov	r4,r18
  806f44:	880b883a 	mov	r5,r17
  806f48:	11800f2e 	bgeu	r2,r6,806f88 <_realloc_r+0x330>
  806f4c:	90800017 	ldw	r2,0(r18)
  806f50:	89400204 	addi	r5,r17,8
  806f54:	91000204 	addi	r4,r18,8
  806f58:	88800015 	stw	r2,0(r17)
  806f5c:	90c00117 	ldw	r3,4(r18)
  806f60:	008006c4 	movi	r2,27
  806f64:	88c00115 	stw	r3,4(r17)
  806f68:	1180072e 	bgeu	r2,r6,806f88 <_realloc_r+0x330>
  806f6c:	90c00217 	ldw	r3,8(r18)
  806f70:	89400404 	addi	r5,r17,16
  806f74:	91000404 	addi	r4,r18,16
  806f78:	88c00215 	stw	r3,8(r17)
  806f7c:	90800317 	ldw	r2,12(r18)
  806f80:	88800315 	stw	r2,12(r17)
  806f84:	31c09126 	beq	r6,r7,8071cc <_realloc_r+0x574>
  806f88:	20800017 	ldw	r2,0(r4)
  806f8c:	28800015 	stw	r2,0(r5)
  806f90:	20c00117 	ldw	r3,4(r4)
  806f94:	28c00115 	stw	r3,4(r5)
  806f98:	20800217 	ldw	r2,8(r4)
  806f9c:	28800215 	stw	r2,8(r5)
  806fa0:	900b883a 	mov	r5,r18
  806fa4:	b009883a 	mov	r4,r22
  806fa8:	08046080 	call	804608 <_free_r>
  806fac:	b009883a 	mov	r4,r22
  806fb0:	080ad4c0 	call	80ad4c <__malloc_unlock>
  806fb4:	003f5e06 	br	806d30 <_realloc_r+0xd8>
  806fb8:	300b883a 	mov	r5,r6
  806fbc:	dfc00b17 	ldw	ra,44(sp)
  806fc0:	df000a17 	ldw	fp,40(sp)
  806fc4:	ddc00917 	ldw	r23,36(sp)
  806fc8:	dd800817 	ldw	r22,32(sp)
  806fcc:	dd400717 	ldw	r21,28(sp)
  806fd0:	dd000617 	ldw	r20,24(sp)
  806fd4:	dcc00517 	ldw	r19,20(sp)
  806fd8:	dc800417 	ldw	r18,16(sp)
  806fdc:	dc400317 	ldw	r17,12(sp)
  806fe0:	dc000217 	ldw	r16,8(sp)
  806fe4:	dec00c04 	addi	sp,sp,48
  806fe8:	08051901 	jmpi	805190 <_malloc_r>
  806fec:	38800117 	ldw	r2,4(r7)
  806ff0:	e54b883a 	add	r5,fp,r21
  806ff4:	31000054 	ori	r4,r6,1
  806ff8:	1080004c 	andi	r2,r2,1
  806ffc:	1704b03a 	or	r2,r2,fp
  807000:	38800115 	stw	r2,4(r7)
  807004:	29000115 	stw	r4,4(r5)
  807008:	2987883a 	add	r3,r5,r6
  80700c:	18800117 	ldw	r2,4(r3)
  807010:	29400204 	addi	r5,r5,8
  807014:	b009883a 	mov	r4,r22
  807018:	10800054 	ori	r2,r2,1
  80701c:	18800115 	stw	r2,4(r3)
  807020:	08046080 	call	804608 <_free_r>
  807024:	003f3806 	br	806d08 <_realloc_r+0xb0>
  807028:	000d883a 	mov	r6,zero
  80702c:	0009883a 	mov	r4,zero
  807030:	003f5d06 	br	806da8 <_realloc_r+0x150>
  807034:	30c00217 	ldw	r3,8(r6)
  807038:	30800317 	ldw	r2,12(r6)
  80703c:	800f883a 	mov	r7,r16
  807040:	84000204 	addi	r16,r16,8
  807044:	10c00215 	stw	r3,8(r2)
  807048:	18800315 	stw	r2,12(r3)
  80704c:	003f2306 	br	806cdc <_realloc_r+0x84>
  807050:	8809883a 	mov	r4,r17
  807054:	900b883a 	mov	r5,r18
  807058:	0805a540 	call	805a54 <memmove>
  80705c:	003fd006 	br	806fa0 <_realloc_r+0x348>
  807060:	30800117 	ldw	r2,4(r6)
  807064:	e0c00404 	addi	r3,fp,16
  807068:	1108703a 	and	r4,r2,r4
  80706c:	9905883a 	add	r2,r19,r4
  807070:	10ff4d16 	blt	r2,r3,806da8 <_realloc_r+0x150>
  807074:	1705c83a 	sub	r2,r2,fp
  807078:	870b883a 	add	r5,r16,fp
  80707c:	10800054 	ori	r2,r2,1
  807080:	28800115 	stw	r2,4(r5)
  807084:	80c00117 	ldw	r3,4(r16)
  807088:	00802074 	movhi	r2,129
  80708c:	109d7804 	addi	r2,r2,30176
  807090:	b009883a 	mov	r4,r22
  807094:	18c0004c 	andi	r3,r3,1
  807098:	e0c6b03a 	or	r3,fp,r3
  80709c:	11400215 	stw	r5,8(r2)
  8070a0:	80c00115 	stw	r3,4(r16)
  8070a4:	080ad4c0 	call	80ad4c <__malloc_unlock>
  8070a8:	84400204 	addi	r17,r16,8
  8070ac:	003f2006 	br	806d30 <_realloc_r+0xd8>
  8070b0:	98a9883a 	add	r20,r19,r2
  8070b4:	2509883a 	add	r4,r4,r20
  8070b8:	e0800404 	addi	r2,fp,16
  8070bc:	d9000115 	stw	r4,4(sp)
  8070c0:	20bf7016 	blt	r4,r2,806e84 <_realloc_r+0x22c>
  8070c4:	b8c00317 	ldw	r3,12(r23)
  8070c8:	b8800217 	ldw	r2,8(r23)
  8070cc:	99bfff04 	addi	r6,r19,-4
  8070d0:	01400904 	movi	r5,36
  8070d4:	18800215 	stw	r2,8(r3)
  8070d8:	10c00315 	stw	r3,12(r2)
  8070dc:	bc400204 	addi	r17,r23,8
  8070e0:	29804136 	bltu	r5,r6,8071e8 <_realloc_r+0x590>
  8070e4:	008004c4 	movi	r2,19
  8070e8:	9009883a 	mov	r4,r18
  8070ec:	880f883a 	mov	r7,r17
  8070f0:	11800f2e 	bgeu	r2,r6,807130 <_realloc_r+0x4d8>
  8070f4:	90800017 	ldw	r2,0(r18)
  8070f8:	b9c00404 	addi	r7,r23,16
  8070fc:	91000204 	addi	r4,r18,8
  807100:	b8800215 	stw	r2,8(r23)
  807104:	90c00117 	ldw	r3,4(r18)
  807108:	008006c4 	movi	r2,27
  80710c:	b8c00315 	stw	r3,12(r23)
  807110:	1180072e 	bgeu	r2,r6,807130 <_realloc_r+0x4d8>
  807114:	90c00217 	ldw	r3,8(r18)
  807118:	b9c00604 	addi	r7,r23,24
  80711c:	91000404 	addi	r4,r18,16
  807120:	b8c00415 	stw	r3,16(r23)
  807124:	90800317 	ldw	r2,12(r18)
  807128:	b8800515 	stw	r2,20(r23)
  80712c:	31404026 	beq	r6,r5,807230 <_realloc_r+0x5d8>
  807130:	20800017 	ldw	r2,0(r4)
  807134:	38800015 	stw	r2,0(r7)
  807138:	20c00117 	ldw	r3,4(r4)
  80713c:	38c00115 	stw	r3,4(r7)
  807140:	20800217 	ldw	r2,8(r4)
  807144:	38800215 	stw	r2,8(r7)
  807148:	d8c00117 	ldw	r3,4(sp)
  80714c:	bf0b883a 	add	r5,r23,fp
  807150:	b009883a 	mov	r4,r22
  807154:	1f05c83a 	sub	r2,r3,fp
  807158:	10800054 	ori	r2,r2,1
  80715c:	28800115 	stw	r2,4(r5)
  807160:	b8c00117 	ldw	r3,4(r23)
  807164:	00802074 	movhi	r2,129
  807168:	109d7804 	addi	r2,r2,30176
  80716c:	11400215 	stw	r5,8(r2)
  807170:	18c0004c 	andi	r3,r3,1
  807174:	e0c6b03a 	or	r3,fp,r3
  807178:	b8c00115 	stw	r3,4(r23)
  80717c:	080ad4c0 	call	80ad4c <__malloc_unlock>
  807180:	003eeb06 	br	806d30 <_realloc_r+0xd8>
  807184:	20800117 	ldw	r2,4(r4)
  807188:	00ffff04 	movi	r3,-4
  80718c:	800f883a 	mov	r7,r16
  807190:	10c4703a 	and	r2,r2,r3
  807194:	98a9883a 	add	r20,r19,r2
  807198:	84000204 	addi	r16,r16,8
  80719c:	003ecf06 	br	806cdc <_realloc_r+0x84>
  8071a0:	900b883a 	mov	r5,r18
  8071a4:	8009883a 	mov	r4,r16
  8071a8:	0805a540 	call	805a54 <memmove>
  8071ac:	dd000017 	ldw	r20,0(sp)
  8071b0:	b80f883a 	mov	r7,r23
  8071b4:	003ec906 	br	806cdc <_realloc_r+0x84>
  8071b8:	900b883a 	mov	r5,r18
  8071bc:	8009883a 	mov	r4,r16
  8071c0:	0805a540 	call	805a54 <memmove>
  8071c4:	b80f883a 	mov	r7,r23
  8071c8:	003ec406 	br	806cdc <_realloc_r+0x84>
  8071cc:	90c00417 	ldw	r3,16(r18)
  8071d0:	89400604 	addi	r5,r17,24
  8071d4:	91000604 	addi	r4,r18,24
  8071d8:	88c00415 	stw	r3,16(r17)
  8071dc:	90800517 	ldw	r2,20(r18)
  8071e0:	88800515 	stw	r2,20(r17)
  8071e4:	003f6806 	br	806f88 <_realloc_r+0x330>
  8071e8:	900b883a 	mov	r5,r18
  8071ec:	8809883a 	mov	r4,r17
  8071f0:	0805a540 	call	805a54 <memmove>
  8071f4:	003fd406 	br	807148 <_realloc_r+0x4f0>
  8071f8:	90c00417 	ldw	r3,16(r18)
  8071fc:	91000604 	addi	r4,r18,24
  807200:	ba000804 	addi	r8,r23,32
  807204:	b8c00615 	stw	r3,24(r23)
  807208:	90800517 	ldw	r2,20(r18)
  80720c:	b8800715 	stw	r2,28(r23)
  807210:	003f1206 	br	806e5c <_realloc_r+0x204>
  807214:	90c00417 	ldw	r3,16(r18)
  807218:	91000604 	addi	r4,r18,24
  80721c:	ba000804 	addi	r8,r23,32
  807220:	b8c00615 	stw	r3,24(r23)
  807224:	90800517 	ldw	r2,20(r18)
  807228:	b8800715 	stw	r2,28(r23)
  80722c:	003f3206 	br	806ef8 <_realloc_r+0x2a0>
  807230:	90c00417 	ldw	r3,16(r18)
  807234:	91000604 	addi	r4,r18,24
  807238:	b9c00804 	addi	r7,r23,32
  80723c:	b8c00615 	stw	r3,24(r23)
  807240:	90800517 	ldw	r2,20(r18)
  807244:	b8800715 	stw	r2,28(r23)
  807248:	003fb906 	br	807130 <_realloc_r+0x4d8>

0080724c <__isinfd>:
  80724c:	200d883a 	mov	r6,r4
  807250:	0109c83a 	sub	r4,zero,r4
  807254:	2188b03a 	or	r4,r4,r6
  807258:	2008d7fa 	srli	r4,r4,31
  80725c:	00a00034 	movhi	r2,32768
  807260:	10bfffc4 	addi	r2,r2,-1
  807264:	1144703a 	and	r2,r2,r5
  807268:	2088b03a 	or	r4,r4,r2
  80726c:	009ffc34 	movhi	r2,32752
  807270:	1105c83a 	sub	r2,r2,r4
  807274:	0087c83a 	sub	r3,zero,r2
  807278:	10c4b03a 	or	r2,r2,r3
  80727c:	1004d7fa 	srli	r2,r2,31
  807280:	00c00044 	movi	r3,1
  807284:	1885c83a 	sub	r2,r3,r2
  807288:	f800283a 	ret

0080728c <__isnand>:
  80728c:	200d883a 	mov	r6,r4
  807290:	0109c83a 	sub	r4,zero,r4
  807294:	2188b03a 	or	r4,r4,r6
  807298:	2008d7fa 	srli	r4,r4,31
  80729c:	00a00034 	movhi	r2,32768
  8072a0:	10bfffc4 	addi	r2,r2,-1
  8072a4:	1144703a 	and	r2,r2,r5
  8072a8:	2088b03a 	or	r4,r4,r2
  8072ac:	009ffc34 	movhi	r2,32752
  8072b0:	1105c83a 	sub	r2,r2,r4
  8072b4:	1004d7fa 	srli	r2,r2,31
  8072b8:	f800283a 	ret

008072bc <_sbrk_r>:
  8072bc:	defffd04 	addi	sp,sp,-12
  8072c0:	dc000015 	stw	r16,0(sp)
  8072c4:	040020b4 	movhi	r16,130
  8072c8:	842a3404 	addi	r16,r16,-22320
  8072cc:	dc400115 	stw	r17,4(sp)
  8072d0:	80000015 	stw	zero,0(r16)
  8072d4:	2023883a 	mov	r17,r4
  8072d8:	2809883a 	mov	r4,r5
  8072dc:	dfc00215 	stw	ra,8(sp)
  8072e0:	080a8fc0 	call	80a8fc <sbrk>
  8072e4:	1007883a 	mov	r3,r2
  8072e8:	00bfffc4 	movi	r2,-1
  8072ec:	18800626 	beq	r3,r2,807308 <_sbrk_r+0x4c>
  8072f0:	1805883a 	mov	r2,r3
  8072f4:	dfc00217 	ldw	ra,8(sp)
  8072f8:	dc400117 	ldw	r17,4(sp)
  8072fc:	dc000017 	ldw	r16,0(sp)
  807300:	dec00304 	addi	sp,sp,12
  807304:	f800283a 	ret
  807308:	80800017 	ldw	r2,0(r16)
  80730c:	103ff826 	beq	r2,zero,8072f0 <_sbrk_r+0x34>
  807310:	88800015 	stw	r2,0(r17)
  807314:	1805883a 	mov	r2,r3
  807318:	dfc00217 	ldw	ra,8(sp)
  80731c:	dc400117 	ldw	r17,4(sp)
  807320:	dc000017 	ldw	r16,0(sp)
  807324:	dec00304 	addi	sp,sp,12
  807328:	f800283a 	ret

0080732c <__sclose>:
  80732c:	2940038f 	ldh	r5,14(r5)
  807330:	08076741 	jmpi	807674 <_close_r>

00807334 <__sseek>:
  807334:	defffe04 	addi	sp,sp,-8
  807338:	dc000015 	stw	r16,0(sp)
  80733c:	2821883a 	mov	r16,r5
  807340:	2940038f 	ldh	r5,14(r5)
  807344:	dfc00115 	stw	ra,4(sp)
  807348:	08078ec0 	call	8078ec <_lseek_r>
  80734c:	1007883a 	mov	r3,r2
  807350:	00bfffc4 	movi	r2,-1
  807354:	18800926 	beq	r3,r2,80737c <__sseek+0x48>
  807358:	8080030b 	ldhu	r2,12(r16)
  80735c:	80c01415 	stw	r3,80(r16)
  807360:	10840014 	ori	r2,r2,4096
  807364:	8080030d 	sth	r2,12(r16)
  807368:	1805883a 	mov	r2,r3
  80736c:	dfc00117 	ldw	ra,4(sp)
  807370:	dc000017 	ldw	r16,0(sp)
  807374:	dec00204 	addi	sp,sp,8
  807378:	f800283a 	ret
  80737c:	8080030b 	ldhu	r2,12(r16)
  807380:	10bbffcc 	andi	r2,r2,61439
  807384:	8080030d 	sth	r2,12(r16)
  807388:	1805883a 	mov	r2,r3
  80738c:	dfc00117 	ldw	ra,4(sp)
  807390:	dc000017 	ldw	r16,0(sp)
  807394:	dec00204 	addi	sp,sp,8
  807398:	f800283a 	ret

0080739c <__swrite>:
  80739c:	2880030b 	ldhu	r2,12(r5)
  8073a0:	defffb04 	addi	sp,sp,-20
  8073a4:	dcc00315 	stw	r19,12(sp)
  8073a8:	1080400c 	andi	r2,r2,256
  8073ac:	dc800215 	stw	r18,8(sp)
  8073b0:	dc400115 	stw	r17,4(sp)
  8073b4:	dc000015 	stw	r16,0(sp)
  8073b8:	3027883a 	mov	r19,r6
  8073bc:	3825883a 	mov	r18,r7
  8073c0:	dfc00415 	stw	ra,16(sp)
  8073c4:	2821883a 	mov	r16,r5
  8073c8:	000d883a 	mov	r6,zero
  8073cc:	01c00084 	movi	r7,2
  8073d0:	2023883a 	mov	r17,r4
  8073d4:	10000226 	beq	r2,zero,8073e0 <__swrite+0x44>
  8073d8:	2940038f 	ldh	r5,14(r5)
  8073dc:	08078ec0 	call	8078ec <_lseek_r>
  8073e0:	8080030b 	ldhu	r2,12(r16)
  8073e4:	8140038f 	ldh	r5,14(r16)
  8073e8:	8809883a 	mov	r4,r17
  8073ec:	10bbffcc 	andi	r2,r2,61439
  8073f0:	980d883a 	mov	r6,r19
  8073f4:	900f883a 	mov	r7,r18
  8073f8:	8080030d 	sth	r2,12(r16)
  8073fc:	dfc00417 	ldw	ra,16(sp)
  807400:	dcc00317 	ldw	r19,12(sp)
  807404:	dc800217 	ldw	r18,8(sp)
  807408:	dc400117 	ldw	r17,4(sp)
  80740c:	dc000017 	ldw	r16,0(sp)
  807410:	dec00504 	addi	sp,sp,20
  807414:	08075341 	jmpi	807534 <_write_r>

00807418 <__sread>:
  807418:	defffe04 	addi	sp,sp,-8
  80741c:	dc000015 	stw	r16,0(sp)
  807420:	2821883a 	mov	r16,r5
  807424:	2940038f 	ldh	r5,14(r5)
  807428:	dfc00115 	stw	ra,4(sp)
  80742c:	08079640 	call	807964 <_read_r>
  807430:	1007883a 	mov	r3,r2
  807434:	10000816 	blt	r2,zero,807458 <__sread+0x40>
  807438:	80801417 	ldw	r2,80(r16)
  80743c:	10c5883a 	add	r2,r2,r3
  807440:	80801415 	stw	r2,80(r16)
  807444:	1805883a 	mov	r2,r3
  807448:	dfc00117 	ldw	ra,4(sp)
  80744c:	dc000017 	ldw	r16,0(sp)
  807450:	dec00204 	addi	sp,sp,8
  807454:	f800283a 	ret
  807458:	8080030b 	ldhu	r2,12(r16)
  80745c:	10bbffcc 	andi	r2,r2,61439
  807460:	8080030d 	sth	r2,12(r16)
  807464:	1805883a 	mov	r2,r3
  807468:	dfc00117 	ldw	ra,4(sp)
  80746c:	dc000017 	ldw	r16,0(sp)
  807470:	dec00204 	addi	sp,sp,8
  807474:	f800283a 	ret

00807478 <strcmp>:
  807478:	2144b03a 	or	r2,r4,r5
  80747c:	108000cc 	andi	r2,r2,3
  807480:	10001d1e 	bne	r2,zero,8074f8 <strcmp+0x80>
  807484:	200f883a 	mov	r7,r4
  807488:	28800017 	ldw	r2,0(r5)
  80748c:	21000017 	ldw	r4,0(r4)
  807490:	280d883a 	mov	r6,r5
  807494:	2080161e 	bne	r4,r2,8074f0 <strcmp+0x78>
  807498:	023fbff4 	movhi	r8,65279
  80749c:	423fbfc4 	addi	r8,r8,-257
  8074a0:	2207883a 	add	r3,r4,r8
  8074a4:	01602074 	movhi	r5,32897
  8074a8:	29602004 	addi	r5,r5,-32640
  8074ac:	1946703a 	and	r3,r3,r5
  8074b0:	0104303a 	nor	r2,zero,r4
  8074b4:	10c4703a 	and	r2,r2,r3
  8074b8:	10001c1e 	bne	r2,zero,80752c <strcmp+0xb4>
  8074bc:	4013883a 	mov	r9,r8
  8074c0:	2811883a 	mov	r8,r5
  8074c4:	00000106 	br	8074cc <strcmp+0x54>
  8074c8:	1800181e 	bne	r3,zero,80752c <strcmp+0xb4>
  8074cc:	39c00104 	addi	r7,r7,4
  8074d0:	39000017 	ldw	r4,0(r7)
  8074d4:	31800104 	addi	r6,r6,4
  8074d8:	31400017 	ldw	r5,0(r6)
  8074dc:	2245883a 	add	r2,r4,r9
  8074e0:	1204703a 	and	r2,r2,r8
  8074e4:	0106303a 	nor	r3,zero,r4
  8074e8:	1886703a 	and	r3,r3,r2
  8074ec:	217ff626 	beq	r4,r5,8074c8 <strcmp+0x50>
  8074f0:	3809883a 	mov	r4,r7
  8074f4:	300b883a 	mov	r5,r6
  8074f8:	20c00007 	ldb	r3,0(r4)
  8074fc:	1800051e 	bne	r3,zero,807514 <strcmp+0x9c>
  807500:	00000606 	br	80751c <strcmp+0xa4>
  807504:	21000044 	addi	r4,r4,1
  807508:	20c00007 	ldb	r3,0(r4)
  80750c:	29400044 	addi	r5,r5,1
  807510:	18000226 	beq	r3,zero,80751c <strcmp+0xa4>
  807514:	28800007 	ldb	r2,0(r5)
  807518:	18bffa26 	beq	r3,r2,807504 <strcmp+0x8c>
  80751c:	20c00003 	ldbu	r3,0(r4)
  807520:	28800003 	ldbu	r2,0(r5)
  807524:	1885c83a 	sub	r2,r3,r2
  807528:	f800283a 	ret
  80752c:	0005883a 	mov	r2,zero
  807530:	f800283a 	ret

00807534 <_write_r>:
  807534:	defffd04 	addi	sp,sp,-12
  807538:	dc000015 	stw	r16,0(sp)
  80753c:	040020b4 	movhi	r16,130
  807540:	842a3404 	addi	r16,r16,-22320
  807544:	dc400115 	stw	r17,4(sp)
  807548:	80000015 	stw	zero,0(r16)
  80754c:	2023883a 	mov	r17,r4
  807550:	2809883a 	mov	r4,r5
  807554:	300b883a 	mov	r5,r6
  807558:	380d883a 	mov	r6,r7
  80755c:	dfc00215 	stw	ra,8(sp)
  807560:	080a9b80 	call	80a9b8 <write>
  807564:	1007883a 	mov	r3,r2
  807568:	00bfffc4 	movi	r2,-1
  80756c:	18800626 	beq	r3,r2,807588 <_write_r+0x54>
  807570:	1805883a 	mov	r2,r3
  807574:	dfc00217 	ldw	ra,8(sp)
  807578:	dc400117 	ldw	r17,4(sp)
  80757c:	dc000017 	ldw	r16,0(sp)
  807580:	dec00304 	addi	sp,sp,12
  807584:	f800283a 	ret
  807588:	80800017 	ldw	r2,0(r16)
  80758c:	103ff826 	beq	r2,zero,807570 <_write_r+0x3c>
  807590:	88800015 	stw	r2,0(r17)
  807594:	1805883a 	mov	r2,r3
  807598:	dfc00217 	ldw	ra,8(sp)
  80759c:	dc400117 	ldw	r17,4(sp)
  8075a0:	dc000017 	ldw	r16,0(sp)
  8075a4:	dec00304 	addi	sp,sp,12
  8075a8:	f800283a 	ret

008075ac <_calloc_r>:
  8075ac:	defffe04 	addi	sp,sp,-8
  8075b0:	dc400015 	stw	r17,0(sp)
  8075b4:	2023883a 	mov	r17,r4
  8075b8:	2809883a 	mov	r4,r5
  8075bc:	300b883a 	mov	r5,r6
  8075c0:	dfc00115 	stw	ra,4(sp)
  8075c4:	08099200 	call	809920 <__mulsi3>
  8075c8:	100b883a 	mov	r5,r2
  8075cc:	8809883a 	mov	r4,r17
  8075d0:	08051900 	call	805190 <_malloc_r>
  8075d4:	1023883a 	mov	r17,r2
  8075d8:	01c00904 	movi	r7,36
  8075dc:	10000d26 	beq	r2,zero,807614 <_calloc_r+0x68>
  8075e0:	10ffff17 	ldw	r3,-4(r2)
  8075e4:	1009883a 	mov	r4,r2
  8075e8:	00bfff04 	movi	r2,-4
  8075ec:	1886703a 	and	r3,r3,r2
  8075f0:	1887883a 	add	r3,r3,r2
  8075f4:	180d883a 	mov	r6,r3
  8075f8:	000b883a 	mov	r5,zero
  8075fc:	38c01736 	bltu	r7,r3,80765c <_calloc_r+0xb0>
  807600:	008004c4 	movi	r2,19
  807604:	10c00836 	bltu	r2,r3,807628 <_calloc_r+0x7c>
  807608:	20000215 	stw	zero,8(r4)
  80760c:	20000015 	stw	zero,0(r4)
  807610:	20000115 	stw	zero,4(r4)
  807614:	8805883a 	mov	r2,r17
  807618:	dfc00117 	ldw	ra,4(sp)
  80761c:	dc400017 	ldw	r17,0(sp)
  807620:	dec00204 	addi	sp,sp,8
  807624:	f800283a 	ret
  807628:	008006c4 	movi	r2,27
  80762c:	88000015 	stw	zero,0(r17)
  807630:	88000115 	stw	zero,4(r17)
  807634:	89000204 	addi	r4,r17,8
  807638:	10fff32e 	bgeu	r2,r3,807608 <_calloc_r+0x5c>
  80763c:	88000215 	stw	zero,8(r17)
  807640:	88000315 	stw	zero,12(r17)
  807644:	89000404 	addi	r4,r17,16
  807648:	19ffef1e 	bne	r3,r7,807608 <_calloc_r+0x5c>
  80764c:	89000604 	addi	r4,r17,24
  807650:	88000415 	stw	zero,16(r17)
  807654:	88000515 	stw	zero,20(r17)
  807658:	003feb06 	br	807608 <_calloc_r+0x5c>
  80765c:	0805b340 	call	805b34 <memset>
  807660:	8805883a 	mov	r2,r17
  807664:	dfc00117 	ldw	ra,4(sp)
  807668:	dc400017 	ldw	r17,0(sp)
  80766c:	dec00204 	addi	sp,sp,8
  807670:	f800283a 	ret

00807674 <_close_r>:
  807674:	defffd04 	addi	sp,sp,-12
  807678:	dc000015 	stw	r16,0(sp)
  80767c:	040020b4 	movhi	r16,130
  807680:	842a3404 	addi	r16,r16,-22320
  807684:	dc400115 	stw	r17,4(sp)
  807688:	80000015 	stw	zero,0(r16)
  80768c:	2023883a 	mov	r17,r4
  807690:	2809883a 	mov	r4,r5
  807694:	dfc00215 	stw	ra,8(sp)
  807698:	080a0100 	call	80a010 <close>
  80769c:	1007883a 	mov	r3,r2
  8076a0:	00bfffc4 	movi	r2,-1
  8076a4:	18800626 	beq	r3,r2,8076c0 <_close_r+0x4c>
  8076a8:	1805883a 	mov	r2,r3
  8076ac:	dfc00217 	ldw	ra,8(sp)
  8076b0:	dc400117 	ldw	r17,4(sp)
  8076b4:	dc000017 	ldw	r16,0(sp)
  8076b8:	dec00304 	addi	sp,sp,12
  8076bc:	f800283a 	ret
  8076c0:	80800017 	ldw	r2,0(r16)
  8076c4:	103ff826 	beq	r2,zero,8076a8 <_close_r+0x34>
  8076c8:	88800015 	stw	r2,0(r17)
  8076cc:	1805883a 	mov	r2,r3
  8076d0:	dfc00217 	ldw	ra,8(sp)
  8076d4:	dc400117 	ldw	r17,4(sp)
  8076d8:	dc000017 	ldw	r16,0(sp)
  8076dc:	dec00304 	addi	sp,sp,12
  8076e0:	f800283a 	ret

008076e4 <_fclose_r>:
  8076e4:	defffc04 	addi	sp,sp,-16
  8076e8:	dc400115 	stw	r17,4(sp)
  8076ec:	dc000015 	stw	r16,0(sp)
  8076f0:	dfc00315 	stw	ra,12(sp)
  8076f4:	dc800215 	stw	r18,8(sp)
  8076f8:	2821883a 	mov	r16,r5
  8076fc:	2023883a 	mov	r17,r4
  807700:	28002926 	beq	r5,zero,8077a8 <_fclose_r+0xc4>
  807704:	08042400 	call	804240 <__sfp_lock_acquire>
  807708:	88000226 	beq	r17,zero,807714 <_fclose_r+0x30>
  80770c:	88800e17 	ldw	r2,56(r17)
  807710:	10002d26 	beq	r2,zero,8077c8 <_fclose_r+0xe4>
  807714:	8080030f 	ldh	r2,12(r16)
  807718:	10002226 	beq	r2,zero,8077a4 <_fclose_r+0xc0>
  80771c:	8809883a 	mov	r4,r17
  807720:	800b883a 	mov	r5,r16
  807724:	0803fb80 	call	803fb8 <_fflush_r>
  807728:	1025883a 	mov	r18,r2
  80772c:	80800b17 	ldw	r2,44(r16)
  807730:	10000426 	beq	r2,zero,807744 <_fclose_r+0x60>
  807734:	81400717 	ldw	r5,28(r16)
  807738:	8809883a 	mov	r4,r17
  80773c:	103ee83a 	callr	r2
  807740:	10002a16 	blt	r2,zero,8077ec <_fclose_r+0x108>
  807744:	8080030b 	ldhu	r2,12(r16)
  807748:	1080200c 	andi	r2,r2,128
  80774c:	1000231e 	bne	r2,zero,8077dc <_fclose_r+0xf8>
  807750:	81400c17 	ldw	r5,48(r16)
  807754:	28000526 	beq	r5,zero,80776c <_fclose_r+0x88>
  807758:	80801004 	addi	r2,r16,64
  80775c:	28800226 	beq	r5,r2,807768 <_fclose_r+0x84>
  807760:	8809883a 	mov	r4,r17
  807764:	08046080 	call	804608 <_free_r>
  807768:	80000c15 	stw	zero,48(r16)
  80776c:	81401117 	ldw	r5,68(r16)
  807770:	28000326 	beq	r5,zero,807780 <_fclose_r+0x9c>
  807774:	8809883a 	mov	r4,r17
  807778:	08046080 	call	804608 <_free_r>
  80777c:	80001115 	stw	zero,68(r16)
  807780:	8000030d 	sth	zero,12(r16)
  807784:	08042440 	call	804244 <__sfp_lock_release>
  807788:	9005883a 	mov	r2,r18
  80778c:	dfc00317 	ldw	ra,12(sp)
  807790:	dc800217 	ldw	r18,8(sp)
  807794:	dc400117 	ldw	r17,4(sp)
  807798:	dc000017 	ldw	r16,0(sp)
  80779c:	dec00404 	addi	sp,sp,16
  8077a0:	f800283a 	ret
  8077a4:	08042440 	call	804244 <__sfp_lock_release>
  8077a8:	0025883a 	mov	r18,zero
  8077ac:	9005883a 	mov	r2,r18
  8077b0:	dfc00317 	ldw	ra,12(sp)
  8077b4:	dc800217 	ldw	r18,8(sp)
  8077b8:	dc400117 	ldw	r17,4(sp)
  8077bc:	dc000017 	ldw	r16,0(sp)
  8077c0:	dec00404 	addi	sp,sp,16
  8077c4:	f800283a 	ret
  8077c8:	8809883a 	mov	r4,r17
  8077cc:	08042500 	call	804250 <__sinit>
  8077d0:	8080030f 	ldh	r2,12(r16)
  8077d4:	103fd11e 	bne	r2,zero,80771c <_fclose_r+0x38>
  8077d8:	003ff206 	br	8077a4 <_fclose_r+0xc0>
  8077dc:	81400417 	ldw	r5,16(r16)
  8077e0:	8809883a 	mov	r4,r17
  8077e4:	08046080 	call	804608 <_free_r>
  8077e8:	003fd906 	br	807750 <_fclose_r+0x6c>
  8077ec:	04bfffc4 	movi	r18,-1
  8077f0:	003fd406 	br	807744 <_fclose_r+0x60>

008077f4 <fclose>:
  8077f4:	008020b4 	movhi	r2,130
  8077f8:	10a32204 	addi	r2,r2,-29560
  8077fc:	200b883a 	mov	r5,r4
  807800:	11000017 	ldw	r4,0(r2)
  807804:	08076e41 	jmpi	8076e4 <_fclose_r>

00807808 <_fstat_r>:
  807808:	defffd04 	addi	sp,sp,-12
  80780c:	dc000015 	stw	r16,0(sp)
  807810:	040020b4 	movhi	r16,130
  807814:	842a3404 	addi	r16,r16,-22320
  807818:	dc400115 	stw	r17,4(sp)
  80781c:	80000015 	stw	zero,0(r16)
  807820:	2023883a 	mov	r17,r4
  807824:	2809883a 	mov	r4,r5
  807828:	300b883a 	mov	r5,r6
  80782c:	dfc00215 	stw	ra,8(sp)
  807830:	080a19c0 	call	80a19c <fstat>
  807834:	1007883a 	mov	r3,r2
  807838:	00bfffc4 	movi	r2,-1
  80783c:	18800626 	beq	r3,r2,807858 <_fstat_r+0x50>
  807840:	1805883a 	mov	r2,r3
  807844:	dfc00217 	ldw	ra,8(sp)
  807848:	dc400117 	ldw	r17,4(sp)
  80784c:	dc000017 	ldw	r16,0(sp)
  807850:	dec00304 	addi	sp,sp,12
  807854:	f800283a 	ret
  807858:	80800017 	ldw	r2,0(r16)
  80785c:	103ff826 	beq	r2,zero,807840 <_fstat_r+0x38>
  807860:	88800015 	stw	r2,0(r17)
  807864:	1805883a 	mov	r2,r3
  807868:	dfc00217 	ldw	ra,8(sp)
  80786c:	dc400117 	ldw	r17,4(sp)
  807870:	dc000017 	ldw	r16,0(sp)
  807874:	dec00304 	addi	sp,sp,12
  807878:	f800283a 	ret

0080787c <_isatty_r>:
  80787c:	defffd04 	addi	sp,sp,-12
  807880:	dc000015 	stw	r16,0(sp)
  807884:	040020b4 	movhi	r16,130
  807888:	842a3404 	addi	r16,r16,-22320
  80788c:	dc400115 	stw	r17,4(sp)
  807890:	80000015 	stw	zero,0(r16)
  807894:	2023883a 	mov	r17,r4
  807898:	2809883a 	mov	r4,r5
  80789c:	dfc00215 	stw	ra,8(sp)
  8078a0:	080a2d40 	call	80a2d4 <isatty>
  8078a4:	1007883a 	mov	r3,r2
  8078a8:	00bfffc4 	movi	r2,-1
  8078ac:	18800626 	beq	r3,r2,8078c8 <_isatty_r+0x4c>
  8078b0:	1805883a 	mov	r2,r3
  8078b4:	dfc00217 	ldw	ra,8(sp)
  8078b8:	dc400117 	ldw	r17,4(sp)
  8078bc:	dc000017 	ldw	r16,0(sp)
  8078c0:	dec00304 	addi	sp,sp,12
  8078c4:	f800283a 	ret
  8078c8:	80800017 	ldw	r2,0(r16)
  8078cc:	103ff826 	beq	r2,zero,8078b0 <_isatty_r+0x34>
  8078d0:	88800015 	stw	r2,0(r17)
  8078d4:	1805883a 	mov	r2,r3
  8078d8:	dfc00217 	ldw	ra,8(sp)
  8078dc:	dc400117 	ldw	r17,4(sp)
  8078e0:	dc000017 	ldw	r16,0(sp)
  8078e4:	dec00304 	addi	sp,sp,12
  8078e8:	f800283a 	ret

008078ec <_lseek_r>:
  8078ec:	defffd04 	addi	sp,sp,-12
  8078f0:	dc000015 	stw	r16,0(sp)
  8078f4:	040020b4 	movhi	r16,130
  8078f8:	842a3404 	addi	r16,r16,-22320
  8078fc:	dc400115 	stw	r17,4(sp)
  807900:	80000015 	stw	zero,0(r16)
  807904:	2023883a 	mov	r17,r4
  807908:	2809883a 	mov	r4,r5
  80790c:	300b883a 	mov	r5,r6
  807910:	380d883a 	mov	r6,r7
  807914:	dfc00215 	stw	ra,8(sp)
  807918:	080a4e40 	call	80a4e4 <lseek>
  80791c:	1007883a 	mov	r3,r2
  807920:	00bfffc4 	movi	r2,-1
  807924:	18800626 	beq	r3,r2,807940 <_lseek_r+0x54>
  807928:	1805883a 	mov	r2,r3
  80792c:	dfc00217 	ldw	ra,8(sp)
  807930:	dc400117 	ldw	r17,4(sp)
  807934:	dc000017 	ldw	r16,0(sp)
  807938:	dec00304 	addi	sp,sp,12
  80793c:	f800283a 	ret
  807940:	80800017 	ldw	r2,0(r16)
  807944:	103ff826 	beq	r2,zero,807928 <_lseek_r+0x3c>
  807948:	88800015 	stw	r2,0(r17)
  80794c:	1805883a 	mov	r2,r3
  807950:	dfc00217 	ldw	ra,8(sp)
  807954:	dc400117 	ldw	r17,4(sp)
  807958:	dc000017 	ldw	r16,0(sp)
  80795c:	dec00304 	addi	sp,sp,12
  807960:	f800283a 	ret

00807964 <_read_r>:
  807964:	defffd04 	addi	sp,sp,-12
  807968:	dc000015 	stw	r16,0(sp)
  80796c:	040020b4 	movhi	r16,130
  807970:	842a3404 	addi	r16,r16,-22320
  807974:	dc400115 	stw	r17,4(sp)
  807978:	80000015 	stw	zero,0(r16)
  80797c:	2023883a 	mov	r17,r4
  807980:	2809883a 	mov	r4,r5
  807984:	300b883a 	mov	r5,r6
  807988:	380d883a 	mov	r6,r7
  80798c:	dfc00215 	stw	ra,8(sp)
  807990:	080a7000 	call	80a700 <read>
  807994:	1007883a 	mov	r3,r2
  807998:	00bfffc4 	movi	r2,-1
  80799c:	18800626 	beq	r3,r2,8079b8 <_read_r+0x54>
  8079a0:	1805883a 	mov	r2,r3
  8079a4:	dfc00217 	ldw	ra,8(sp)
  8079a8:	dc400117 	ldw	r17,4(sp)
  8079ac:	dc000017 	ldw	r16,0(sp)
  8079b0:	dec00304 	addi	sp,sp,12
  8079b4:	f800283a 	ret
  8079b8:	80800017 	ldw	r2,0(r16)
  8079bc:	103ff826 	beq	r2,zero,8079a0 <_read_r+0x3c>
  8079c0:	88800015 	stw	r2,0(r17)
  8079c4:	1805883a 	mov	r2,r3
  8079c8:	dfc00217 	ldw	ra,8(sp)
  8079cc:	dc400117 	ldw	r17,4(sp)
  8079d0:	dc000017 	ldw	r16,0(sp)
  8079d4:	dec00304 	addi	sp,sp,12
  8079d8:	f800283a 	ret

008079dc <__udivdi3>:
  8079dc:	defff104 	addi	sp,sp,-60
  8079e0:	0015883a 	mov	r10,zero
  8079e4:	2005883a 	mov	r2,r4
  8079e8:	3011883a 	mov	r8,r6
  8079ec:	df000d15 	stw	fp,52(sp)
  8079f0:	dd400a15 	stw	r21,40(sp)
  8079f4:	dcc00815 	stw	r19,32(sp)
  8079f8:	dfc00e15 	stw	ra,56(sp)
  8079fc:	ddc00c15 	stw	r23,48(sp)
  807a00:	dd800b15 	stw	r22,44(sp)
  807a04:	dd000915 	stw	r20,36(sp)
  807a08:	dc800715 	stw	r18,28(sp)
  807a0c:	dc400615 	stw	r17,24(sp)
  807a10:	dc000515 	stw	r16,20(sp)
  807a14:	da800315 	stw	r10,12(sp)
  807a18:	4027883a 	mov	r19,r8
  807a1c:	1039883a 	mov	fp,r2
  807a20:	282b883a 	mov	r21,r5
  807a24:	da800415 	stw	r10,16(sp)
  807a28:	3800401e 	bne	r7,zero,807b2c <__udivdi3+0x150>
  807a2c:	2a006536 	bltu	r5,r8,807bc4 <__udivdi3+0x1e8>
  807a30:	4000b526 	beq	r8,zero,807d08 <__udivdi3+0x32c>
  807a34:	00bfffd4 	movui	r2,65535
  807a38:	14c0ad36 	bltu	r2,r19,807cf0 <__udivdi3+0x314>
  807a3c:	00803fc4 	movi	r2,255
  807a40:	14c15e36 	bltu	r2,r19,807fbc <__udivdi3+0x5e0>
  807a44:	000b883a 	mov	r5,zero
  807a48:	0005883a 	mov	r2,zero
  807a4c:	9884d83a 	srl	r2,r19,r2
  807a50:	01002074 	movhi	r4,129
  807a54:	211bcd04 	addi	r4,r4,28468
  807a58:	01800804 	movi	r6,32
  807a5c:	1105883a 	add	r2,r2,r4
  807a60:	10c00003 	ldbu	r3,0(r2)
  807a64:	28c7883a 	add	r3,r5,r3
  807a68:	30e9c83a 	sub	r20,r6,r3
  807a6c:	a0010a1e 	bne	r20,zero,807e98 <__udivdi3+0x4bc>
  807a70:	982ed43a 	srli	r23,r19,16
  807a74:	acebc83a 	sub	r21,r21,r19
  807a78:	9dbfffcc 	andi	r22,r19,65535
  807a7c:	05000044 	movi	r20,1
  807a80:	a809883a 	mov	r4,r21
  807a84:	b80b883a 	mov	r5,r23
  807a88:	08099100 	call	809910 <__udivsi3>
  807a8c:	100b883a 	mov	r5,r2
  807a90:	b009883a 	mov	r4,r22
  807a94:	1021883a 	mov	r16,r2
  807a98:	08099200 	call	809920 <__mulsi3>
  807a9c:	a809883a 	mov	r4,r21
  807aa0:	b80b883a 	mov	r5,r23
  807aa4:	1023883a 	mov	r17,r2
  807aa8:	08099180 	call	809918 <__umodsi3>
  807aac:	1004943a 	slli	r2,r2,16
  807ab0:	e006d43a 	srli	r3,fp,16
  807ab4:	10c4b03a 	or	r2,r2,r3
  807ab8:	1440042e 	bgeu	r2,r17,807acc <__udivdi3+0xf0>
  807abc:	14c5883a 	add	r2,r2,r19
  807ac0:	843fffc4 	addi	r16,r16,-1
  807ac4:	14c00136 	bltu	r2,r19,807acc <__udivdi3+0xf0>
  807ac8:	14415c36 	bltu	r2,r17,80803c <__udivdi3+0x660>
  807acc:	1463c83a 	sub	r17,r2,r17
  807ad0:	8809883a 	mov	r4,r17
  807ad4:	b80b883a 	mov	r5,r23
  807ad8:	08099100 	call	809910 <__udivsi3>
  807adc:	100b883a 	mov	r5,r2
  807ae0:	b009883a 	mov	r4,r22
  807ae4:	102b883a 	mov	r21,r2
  807ae8:	08099200 	call	809920 <__mulsi3>
  807aec:	8809883a 	mov	r4,r17
  807af0:	b80b883a 	mov	r5,r23
  807af4:	1025883a 	mov	r18,r2
  807af8:	08099180 	call	809918 <__umodsi3>
  807afc:	1004943a 	slli	r2,r2,16
  807b00:	e0ffffcc 	andi	r3,fp,65535
  807b04:	10c4b03a 	or	r2,r2,r3
  807b08:	1480042e 	bgeu	r2,r18,807b1c <__udivdi3+0x140>
  807b0c:	9885883a 	add	r2,r19,r2
  807b10:	ad7fffc4 	addi	r21,r21,-1
  807b14:	14c00136 	bltu	r2,r19,807b1c <__udivdi3+0x140>
  807b18:	14813c36 	bltu	r2,r18,80800c <__udivdi3+0x630>
  807b1c:	8004943a 	slli	r2,r16,16
  807b20:	a009883a 	mov	r4,r20
  807b24:	a884b03a 	or	r2,r21,r2
  807b28:	00001506 	br	807b80 <__udivdi3+0x1a4>
  807b2c:	380d883a 	mov	r6,r7
  807b30:	29c06c36 	bltu	r5,r7,807ce4 <__udivdi3+0x308>
  807b34:	00bfffd4 	movui	r2,65535
  807b38:	11c06436 	bltu	r2,r7,807ccc <__udivdi3+0x2f0>
  807b3c:	00803fc4 	movi	r2,255
  807b40:	11c11836 	bltu	r2,r7,807fa4 <__udivdi3+0x5c8>
  807b44:	000b883a 	mov	r5,zero
  807b48:	0005883a 	mov	r2,zero
  807b4c:	3084d83a 	srl	r2,r6,r2
  807b50:	01002074 	movhi	r4,129
  807b54:	211bcd04 	addi	r4,r4,28468
  807b58:	01c00804 	movi	r7,32
  807b5c:	1105883a 	add	r2,r2,r4
  807b60:	10c00003 	ldbu	r3,0(r2)
  807b64:	28c7883a 	add	r3,r5,r3
  807b68:	38edc83a 	sub	r22,r7,r3
  807b6c:	b000731e 	bne	r22,zero,807d3c <__udivdi3+0x360>
  807b70:	35400136 	bltu	r6,r21,807b78 <__udivdi3+0x19c>
  807b74:	e4c05b36 	bltu	fp,r19,807ce4 <__udivdi3+0x308>
  807b78:	00800044 	movi	r2,1
  807b7c:	0009883a 	mov	r4,zero
  807b80:	d8800315 	stw	r2,12(sp)
  807b84:	d9400317 	ldw	r5,12(sp)
  807b88:	2007883a 	mov	r3,r4
  807b8c:	d9000415 	stw	r4,16(sp)
  807b90:	2805883a 	mov	r2,r5
  807b94:	dfc00e17 	ldw	ra,56(sp)
  807b98:	df000d17 	ldw	fp,52(sp)
  807b9c:	ddc00c17 	ldw	r23,48(sp)
  807ba0:	dd800b17 	ldw	r22,44(sp)
  807ba4:	dd400a17 	ldw	r21,40(sp)
  807ba8:	dd000917 	ldw	r20,36(sp)
  807bac:	dcc00817 	ldw	r19,32(sp)
  807bb0:	dc800717 	ldw	r18,28(sp)
  807bb4:	dc400617 	ldw	r17,24(sp)
  807bb8:	dc000517 	ldw	r16,20(sp)
  807bbc:	dec00f04 	addi	sp,sp,60
  807bc0:	f800283a 	ret
  807bc4:	00bfffd4 	movui	r2,65535
  807bc8:	12005636 	bltu	r2,r8,807d24 <__udivdi3+0x348>
  807bcc:	00803fc4 	movi	r2,255
  807bd0:	12010036 	bltu	r2,r8,807fd4 <__udivdi3+0x5f8>
  807bd4:	000b883a 	mov	r5,zero
  807bd8:	0005883a 	mov	r2,zero
  807bdc:	9884d83a 	srl	r2,r19,r2
  807be0:	01002074 	movhi	r4,129
  807be4:	211bcd04 	addi	r4,r4,28468
  807be8:	01800804 	movi	r6,32
  807bec:	1105883a 	add	r2,r2,r4
  807bf0:	10c00003 	ldbu	r3,0(r2)
  807bf4:	28c7883a 	add	r3,r5,r3
  807bf8:	30cbc83a 	sub	r5,r6,r3
  807bfc:	28000626 	beq	r5,zero,807c18 <__udivdi3+0x23c>
  807c00:	3145c83a 	sub	r2,r6,r5
  807c04:	e084d83a 	srl	r2,fp,r2
  807c08:	a946983a 	sll	r3,r21,r5
  807c0c:	e178983a 	sll	fp,fp,r5
  807c10:	9966983a 	sll	r19,r19,r5
  807c14:	18aab03a 	or	r21,r3,r2
  807c18:	982ed43a 	srli	r23,r19,16
  807c1c:	a809883a 	mov	r4,r21
  807c20:	9cbfffcc 	andi	r18,r19,65535
  807c24:	b80b883a 	mov	r5,r23
  807c28:	08099100 	call	809910 <__udivsi3>
  807c2c:	100b883a 	mov	r5,r2
  807c30:	9009883a 	mov	r4,r18
  807c34:	1021883a 	mov	r16,r2
  807c38:	08099200 	call	809920 <__mulsi3>
  807c3c:	a809883a 	mov	r4,r21
  807c40:	b80b883a 	mov	r5,r23
  807c44:	1023883a 	mov	r17,r2
  807c48:	08099180 	call	809918 <__umodsi3>
  807c4c:	1004943a 	slli	r2,r2,16
  807c50:	e006d43a 	srli	r3,fp,16
  807c54:	10c4b03a 	or	r2,r2,r3
  807c58:	1440042e 	bgeu	r2,r17,807c6c <__udivdi3+0x290>
  807c5c:	14c5883a 	add	r2,r2,r19
  807c60:	843fffc4 	addi	r16,r16,-1
  807c64:	14c00136 	bltu	r2,r19,807c6c <__udivdi3+0x290>
  807c68:	1440ea36 	bltu	r2,r17,808014 <__udivdi3+0x638>
  807c6c:	1463c83a 	sub	r17,r2,r17
  807c70:	8809883a 	mov	r4,r17
  807c74:	b80b883a 	mov	r5,r23
  807c78:	08099100 	call	809910 <__udivsi3>
  807c7c:	100b883a 	mov	r5,r2
  807c80:	9009883a 	mov	r4,r18
  807c84:	102b883a 	mov	r21,r2
  807c88:	08099200 	call	809920 <__mulsi3>
  807c8c:	8809883a 	mov	r4,r17
  807c90:	b80b883a 	mov	r5,r23
  807c94:	1025883a 	mov	r18,r2
  807c98:	08099180 	call	809918 <__umodsi3>
  807c9c:	1004943a 	slli	r2,r2,16
  807ca0:	e0ffffcc 	andi	r3,fp,65535
  807ca4:	10c4b03a 	or	r2,r2,r3
  807ca8:	1480042e 	bgeu	r2,r18,807cbc <__udivdi3+0x2e0>
  807cac:	9885883a 	add	r2,r19,r2
  807cb0:	ad7fffc4 	addi	r21,r21,-1
  807cb4:	14c00136 	bltu	r2,r19,807cbc <__udivdi3+0x2e0>
  807cb8:	1480d936 	bltu	r2,r18,808020 <__udivdi3+0x644>
  807cbc:	8004943a 	slli	r2,r16,16
  807cc0:	0009883a 	mov	r4,zero
  807cc4:	a884b03a 	or	r2,r21,r2
  807cc8:	003fad06 	br	807b80 <__udivdi3+0x1a4>
  807ccc:	00804034 	movhi	r2,256
  807cd0:	10bfffc4 	addi	r2,r2,-1
  807cd4:	11c0b636 	bltu	r2,r7,807fb0 <__udivdi3+0x5d4>
  807cd8:	01400404 	movi	r5,16
  807cdc:	2805883a 	mov	r2,r5
  807ce0:	003f9a06 	br	807b4c <__udivdi3+0x170>
  807ce4:	0005883a 	mov	r2,zero
  807ce8:	0009883a 	mov	r4,zero
  807cec:	003fa406 	br	807b80 <__udivdi3+0x1a4>
  807cf0:	00804034 	movhi	r2,256
  807cf4:	10bfffc4 	addi	r2,r2,-1
  807cf8:	14c0b336 	bltu	r2,r19,807fc8 <__udivdi3+0x5ec>
  807cfc:	01400404 	movi	r5,16
  807d00:	2805883a 	mov	r2,r5
  807d04:	003f5106 	br	807a4c <__udivdi3+0x70>
  807d08:	01000044 	movi	r4,1
  807d0c:	000b883a 	mov	r5,zero
  807d10:	08099100 	call	809910 <__udivsi3>
  807d14:	1027883a 	mov	r19,r2
  807d18:	00bfffd4 	movui	r2,65535
  807d1c:	14fff436 	bltu	r2,r19,807cf0 <__udivdi3+0x314>
  807d20:	003f4606 	br	807a3c <__udivdi3+0x60>
  807d24:	00804034 	movhi	r2,256
  807d28:	10bfffc4 	addi	r2,r2,-1
  807d2c:	1200ac36 	bltu	r2,r8,807fe0 <__udivdi3+0x604>
  807d30:	01400404 	movi	r5,16
  807d34:	2805883a 	mov	r2,r5
  807d38:	003fa806 	br	807bdc <__udivdi3+0x200>
  807d3c:	3d85c83a 	sub	r2,r7,r22
  807d40:	3588983a 	sll	r4,r6,r22
  807d44:	9886d83a 	srl	r3,r19,r2
  807d48:	a8a2d83a 	srl	r17,r21,r2
  807d4c:	e084d83a 	srl	r2,fp,r2
  807d50:	20eeb03a 	or	r23,r4,r3
  807d54:	b824d43a 	srli	r18,r23,16
  807d58:	ad86983a 	sll	r3,r21,r22
  807d5c:	8809883a 	mov	r4,r17
  807d60:	900b883a 	mov	r5,r18
  807d64:	1886b03a 	or	r3,r3,r2
  807d68:	d8c00115 	stw	r3,4(sp)
  807d6c:	bc3fffcc 	andi	r16,r23,65535
  807d70:	08099100 	call	809910 <__udivsi3>
  807d74:	100b883a 	mov	r5,r2
  807d78:	8009883a 	mov	r4,r16
  807d7c:	1029883a 	mov	r20,r2
  807d80:	08099200 	call	809920 <__mulsi3>
  807d84:	900b883a 	mov	r5,r18
  807d88:	8809883a 	mov	r4,r17
  807d8c:	102b883a 	mov	r21,r2
  807d90:	08099180 	call	809918 <__umodsi3>
  807d94:	d9400117 	ldw	r5,4(sp)
  807d98:	1004943a 	slli	r2,r2,16
  807d9c:	9da6983a 	sll	r19,r19,r22
  807da0:	2806d43a 	srli	r3,r5,16
  807da4:	10c4b03a 	or	r2,r2,r3
  807da8:	1540032e 	bgeu	r2,r21,807db8 <__udivdi3+0x3dc>
  807dac:	15c5883a 	add	r2,r2,r23
  807db0:	a53fffc4 	addi	r20,r20,-1
  807db4:	15c0912e 	bgeu	r2,r23,807ffc <__udivdi3+0x620>
  807db8:	1563c83a 	sub	r17,r2,r21
  807dbc:	8809883a 	mov	r4,r17
  807dc0:	900b883a 	mov	r5,r18
  807dc4:	08099100 	call	809910 <__udivsi3>
  807dc8:	100b883a 	mov	r5,r2
  807dcc:	8009883a 	mov	r4,r16
  807dd0:	102b883a 	mov	r21,r2
  807dd4:	08099200 	call	809920 <__mulsi3>
  807dd8:	8809883a 	mov	r4,r17
  807ddc:	900b883a 	mov	r5,r18
  807de0:	1021883a 	mov	r16,r2
  807de4:	08099180 	call	809918 <__umodsi3>
  807de8:	da800117 	ldw	r10,4(sp)
  807dec:	1004943a 	slli	r2,r2,16
  807df0:	50ffffcc 	andi	r3,r10,65535
  807df4:	10c6b03a 	or	r3,r2,r3
  807df8:	1c00032e 	bgeu	r3,r16,807e08 <__udivdi3+0x42c>
  807dfc:	1dc7883a 	add	r3,r3,r23
  807e00:	ad7fffc4 	addi	r21,r21,-1
  807e04:	1dc0792e 	bgeu	r3,r23,807fec <__udivdi3+0x610>
  807e08:	a004943a 	slli	r2,r20,16
  807e0c:	982ed43a 	srli	r23,r19,16
  807e10:	9cffffcc 	andi	r19,r19,65535
  807e14:	a8a4b03a 	or	r18,r21,r2
  807e18:	947fffcc 	andi	r17,r18,65535
  807e1c:	902ad43a 	srli	r21,r18,16
  807e20:	8809883a 	mov	r4,r17
  807e24:	980b883a 	mov	r5,r19
  807e28:	1c21c83a 	sub	r16,r3,r16
  807e2c:	08099200 	call	809920 <__mulsi3>
  807e30:	8809883a 	mov	r4,r17
  807e34:	b80b883a 	mov	r5,r23
  807e38:	1029883a 	mov	r20,r2
  807e3c:	08099200 	call	809920 <__mulsi3>
  807e40:	980b883a 	mov	r5,r19
  807e44:	a809883a 	mov	r4,r21
  807e48:	1023883a 	mov	r17,r2
  807e4c:	08099200 	call	809920 <__mulsi3>
  807e50:	a809883a 	mov	r4,r21
  807e54:	b80b883a 	mov	r5,r23
  807e58:	1027883a 	mov	r19,r2
  807e5c:	08099200 	call	809920 <__mulsi3>
  807e60:	1009883a 	mov	r4,r2
  807e64:	a004d43a 	srli	r2,r20,16
  807e68:	8ce3883a 	add	r17,r17,r19
  807e6c:	1447883a 	add	r3,r2,r17
  807e70:	1cc0022e 	bgeu	r3,r19,807e7c <__udivdi3+0x4a0>
  807e74:	00800074 	movhi	r2,1
  807e78:	2089883a 	add	r4,r4,r2
  807e7c:	1804d43a 	srli	r2,r3,16
  807e80:	2085883a 	add	r2,r4,r2
  807e84:	80804436 	bltu	r16,r2,807f98 <__udivdi3+0x5bc>
  807e88:	80803e26 	beq	r16,r2,807f84 <__udivdi3+0x5a8>
  807e8c:	9005883a 	mov	r2,r18
  807e90:	0009883a 	mov	r4,zero
  807e94:	003f3a06 	br	807b80 <__udivdi3+0x1a4>
  807e98:	9d26983a 	sll	r19,r19,r20
  807e9c:	3505c83a 	sub	r2,r6,r20
  807ea0:	a8a2d83a 	srl	r17,r21,r2
  807ea4:	982ed43a 	srli	r23,r19,16
  807ea8:	e084d83a 	srl	r2,fp,r2
  807eac:	ad06983a 	sll	r3,r21,r20
  807eb0:	8809883a 	mov	r4,r17
  807eb4:	b80b883a 	mov	r5,r23
  807eb8:	1886b03a 	or	r3,r3,r2
  807ebc:	d8c00015 	stw	r3,0(sp)
  807ec0:	9dbfffcc 	andi	r22,r19,65535
  807ec4:	08099100 	call	809910 <__udivsi3>
  807ec8:	100b883a 	mov	r5,r2
  807ecc:	b009883a 	mov	r4,r22
  807ed0:	d8800215 	stw	r2,8(sp)
  807ed4:	08099200 	call	809920 <__mulsi3>
  807ed8:	8809883a 	mov	r4,r17
  807edc:	b80b883a 	mov	r5,r23
  807ee0:	102b883a 	mov	r21,r2
  807ee4:	08099180 	call	809918 <__umodsi3>
  807ee8:	d9000017 	ldw	r4,0(sp)
  807eec:	1004943a 	slli	r2,r2,16
  807ef0:	2006d43a 	srli	r3,r4,16
  807ef4:	10c4b03a 	or	r2,r2,r3
  807ef8:	1540052e 	bgeu	r2,r21,807f10 <__udivdi3+0x534>
  807efc:	d9400217 	ldw	r5,8(sp)
  807f00:	14c5883a 	add	r2,r2,r19
  807f04:	297fffc4 	addi	r5,r5,-1
  807f08:	d9400215 	stw	r5,8(sp)
  807f0c:	14c0462e 	bgeu	r2,r19,808028 <__udivdi3+0x64c>
  807f10:	1563c83a 	sub	r17,r2,r21
  807f14:	8809883a 	mov	r4,r17
  807f18:	b80b883a 	mov	r5,r23
  807f1c:	08099100 	call	809910 <__udivsi3>
  807f20:	100b883a 	mov	r5,r2
  807f24:	b009883a 	mov	r4,r22
  807f28:	1025883a 	mov	r18,r2
  807f2c:	08099200 	call	809920 <__mulsi3>
  807f30:	8809883a 	mov	r4,r17
  807f34:	b80b883a 	mov	r5,r23
  807f38:	1021883a 	mov	r16,r2
  807f3c:	08099180 	call	809918 <__umodsi3>
  807f40:	da800017 	ldw	r10,0(sp)
  807f44:	1004943a 	slli	r2,r2,16
  807f48:	50ffffcc 	andi	r3,r10,65535
  807f4c:	10c6b03a 	or	r3,r2,r3
  807f50:	1c00062e 	bgeu	r3,r16,807f6c <__udivdi3+0x590>
  807f54:	1cc7883a 	add	r3,r3,r19
  807f58:	94bfffc4 	addi	r18,r18,-1
  807f5c:	1cc00336 	bltu	r3,r19,807f6c <__udivdi3+0x590>
  807f60:	1c00022e 	bgeu	r3,r16,807f6c <__udivdi3+0x590>
  807f64:	94bfffc4 	addi	r18,r18,-1
  807f68:	1cc7883a 	add	r3,r3,r19
  807f6c:	d9000217 	ldw	r4,8(sp)
  807f70:	e538983a 	sll	fp,fp,r20
  807f74:	1c2bc83a 	sub	r21,r3,r16
  807f78:	2004943a 	slli	r2,r4,16
  807f7c:	90a8b03a 	or	r20,r18,r2
  807f80:	003ebf06 	br	807a80 <__udivdi3+0xa4>
  807f84:	1804943a 	slli	r2,r3,16
  807f88:	e588983a 	sll	r4,fp,r22
  807f8c:	a0ffffcc 	andi	r3,r20,65535
  807f90:	10c5883a 	add	r2,r2,r3
  807f94:	20bfbd2e 	bgeu	r4,r2,807e8c <__udivdi3+0x4b0>
  807f98:	90bfffc4 	addi	r2,r18,-1
  807f9c:	0009883a 	mov	r4,zero
  807fa0:	003ef706 	br	807b80 <__udivdi3+0x1a4>
  807fa4:	01400204 	movi	r5,8
  807fa8:	2805883a 	mov	r2,r5
  807fac:	003ee706 	br	807b4c <__udivdi3+0x170>
  807fb0:	01400604 	movi	r5,24
  807fb4:	2805883a 	mov	r2,r5
  807fb8:	003ee406 	br	807b4c <__udivdi3+0x170>
  807fbc:	01400204 	movi	r5,8
  807fc0:	2805883a 	mov	r2,r5
  807fc4:	003ea106 	br	807a4c <__udivdi3+0x70>
  807fc8:	01400604 	movi	r5,24
  807fcc:	2805883a 	mov	r2,r5
  807fd0:	003e9e06 	br	807a4c <__udivdi3+0x70>
  807fd4:	01400204 	movi	r5,8
  807fd8:	2805883a 	mov	r2,r5
  807fdc:	003eff06 	br	807bdc <__udivdi3+0x200>
  807fe0:	01400604 	movi	r5,24
  807fe4:	2805883a 	mov	r2,r5
  807fe8:	003efc06 	br	807bdc <__udivdi3+0x200>
  807fec:	1c3f862e 	bgeu	r3,r16,807e08 <__udivdi3+0x42c>
  807ff0:	1dc7883a 	add	r3,r3,r23
  807ff4:	ad7fffc4 	addi	r21,r21,-1
  807ff8:	003f8306 	br	807e08 <__udivdi3+0x42c>
  807ffc:	157f6e2e 	bgeu	r2,r21,807db8 <__udivdi3+0x3dc>
  808000:	a53fffc4 	addi	r20,r20,-1
  808004:	15c5883a 	add	r2,r2,r23
  808008:	003f6b06 	br	807db8 <__udivdi3+0x3dc>
  80800c:	ad7fffc4 	addi	r21,r21,-1
  808010:	003ec206 	br	807b1c <__udivdi3+0x140>
  808014:	843fffc4 	addi	r16,r16,-1
  808018:	14c5883a 	add	r2,r2,r19
  80801c:	003f1306 	br	807c6c <__udivdi3+0x290>
  808020:	ad7fffc4 	addi	r21,r21,-1
  808024:	003f2506 	br	807cbc <__udivdi3+0x2e0>
  808028:	157fb92e 	bgeu	r2,r21,807f10 <__udivdi3+0x534>
  80802c:	297fffc4 	addi	r5,r5,-1
  808030:	14c5883a 	add	r2,r2,r19
  808034:	d9400215 	stw	r5,8(sp)
  808038:	003fb506 	br	807f10 <__udivdi3+0x534>
  80803c:	843fffc4 	addi	r16,r16,-1
  808040:	14c5883a 	add	r2,r2,r19
  808044:	003ea106 	br	807acc <__udivdi3+0xf0>

00808048 <__umoddi3>:
  808048:	defff004 	addi	sp,sp,-64
  80804c:	3011883a 	mov	r8,r6
  808050:	000d883a 	mov	r6,zero
  808054:	dd400b15 	stw	r21,44(sp)
  808058:	dcc00915 	stw	r19,36(sp)
  80805c:	dc000615 	stw	r16,24(sp)
  808060:	dfc00f15 	stw	ra,60(sp)
  808064:	df000e15 	stw	fp,56(sp)
  808068:	ddc00d15 	stw	r23,52(sp)
  80806c:	dd800c15 	stw	r22,48(sp)
  808070:	dd000a15 	stw	r20,40(sp)
  808074:	dc800815 	stw	r18,32(sp)
  808078:	dc400715 	stw	r17,28(sp)
  80807c:	2817883a 	mov	r11,r5
  808080:	d9800415 	stw	r6,16(sp)
  808084:	4027883a 	mov	r19,r8
  808088:	d9800515 	stw	r6,20(sp)
  80808c:	2021883a 	mov	r16,r4
  808090:	282b883a 	mov	r21,r5
  808094:	38002c1e 	bne	r7,zero,808148 <__umoddi3+0x100>
  808098:	2a005636 	bltu	r5,r8,8081f4 <__umoddi3+0x1ac>
  80809c:	40009a26 	beq	r8,zero,808308 <__umoddi3+0x2c0>
  8080a0:	00bfffd4 	movui	r2,65535
  8080a4:	14c09236 	bltu	r2,r19,8082f0 <__umoddi3+0x2a8>
  8080a8:	00803fc4 	movi	r2,255
  8080ac:	14c15c36 	bltu	r2,r19,808620 <__umoddi3+0x5d8>
  8080b0:	000b883a 	mov	r5,zero
  8080b4:	0005883a 	mov	r2,zero
  8080b8:	9884d83a 	srl	r2,r19,r2
  8080bc:	01002074 	movhi	r4,129
  8080c0:	211bcd04 	addi	r4,r4,28468
  8080c4:	01800804 	movi	r6,32
  8080c8:	1105883a 	add	r2,r2,r4
  8080cc:	10c00003 	ldbu	r3,0(r2)
  8080d0:	28c7883a 	add	r3,r5,r3
  8080d4:	30e5c83a 	sub	r18,r6,r3
  8080d8:	9000a41e 	bne	r18,zero,80836c <__umoddi3+0x324>
  8080dc:	982ed43a 	srli	r23,r19,16
  8080e0:	acebc83a 	sub	r21,r21,r19
  8080e4:	9d3fffcc 	andi	r20,r19,65535
  8080e8:	002d883a 	mov	r22,zero
  8080ec:	a809883a 	mov	r4,r21
  8080f0:	b80b883a 	mov	r5,r23
  8080f4:	08099100 	call	809910 <__udivsi3>
  8080f8:	100b883a 	mov	r5,r2
  8080fc:	a009883a 	mov	r4,r20
  808100:	08099200 	call	809920 <__mulsi3>
  808104:	a809883a 	mov	r4,r21
  808108:	b80b883a 	mov	r5,r23
  80810c:	1023883a 	mov	r17,r2
  808110:	08099180 	call	809918 <__umodsi3>
  808114:	1004943a 	slli	r2,r2,16
  808118:	8006d43a 	srli	r3,r16,16
  80811c:	10c4b03a 	or	r2,r2,r3
  808120:	1440032e 	bgeu	r2,r17,808130 <__umoddi3+0xe8>
  808124:	14c5883a 	add	r2,r2,r19
  808128:	14c00136 	bltu	r2,r19,808130 <__umoddi3+0xe8>
  80812c:	14415836 	bltu	r2,r17,808690 <__umoddi3+0x648>
  808130:	1463c83a 	sub	r17,r2,r17
  808134:	8809883a 	mov	r4,r17
  808138:	b80b883a 	mov	r5,r23
  80813c:	08099100 	call	809910 <__udivsi3>
  808140:	a009883a 	mov	r4,r20
  808144:	00005306 	br	808294 <__umoddi3+0x24c>
  808148:	380d883a 	mov	r6,r7
  80814c:	29c0132e 	bgeu	r5,r7,80819c <__umoddi3+0x154>
  808150:	d9000415 	stw	r4,16(sp)
  808154:	d9400515 	stw	r5,20(sp)
  808158:	d9400417 	ldw	r5,16(sp)
  80815c:	5813883a 	mov	r9,r11
  808160:	2811883a 	mov	r8,r5
  808164:	4005883a 	mov	r2,r8
  808168:	4807883a 	mov	r3,r9
  80816c:	dfc00f17 	ldw	ra,60(sp)
  808170:	df000e17 	ldw	fp,56(sp)
  808174:	ddc00d17 	ldw	r23,52(sp)
  808178:	dd800c17 	ldw	r22,48(sp)
  80817c:	dd400b17 	ldw	r21,44(sp)
  808180:	dd000a17 	ldw	r20,40(sp)
  808184:	dcc00917 	ldw	r19,36(sp)
  808188:	dc800817 	ldw	r18,32(sp)
  80818c:	dc400717 	ldw	r17,28(sp)
  808190:	dc000617 	ldw	r16,24(sp)
  808194:	dec01004 	addi	sp,sp,64
  808198:	f800283a 	ret
  80819c:	00bfffd4 	movui	r2,65535
  8081a0:	11c06636 	bltu	r2,r7,80833c <__umoddi3+0x2f4>
  8081a4:	00803fc4 	movi	r2,255
  8081a8:	11c12036 	bltu	r2,r7,80862c <__umoddi3+0x5e4>
  8081ac:	000b883a 	mov	r5,zero
  8081b0:	0005883a 	mov	r2,zero
  8081b4:	3084d83a 	srl	r2,r6,r2
  8081b8:	01002074 	movhi	r4,129
  8081bc:	211bcd04 	addi	r4,r4,28468
  8081c0:	01c00804 	movi	r7,32
  8081c4:	1105883a 	add	r2,r2,r4
  8081c8:	10c00003 	ldbu	r3,0(r2)
  8081cc:	28c7883a 	add	r3,r5,r3
  8081d0:	38e5c83a 	sub	r18,r7,r3
  8081d4:	9000941e 	bne	r18,zero,808428 <__umoddi3+0x3e0>
  8081d8:	35405e36 	bltu	r6,r21,808354 <__umoddi3+0x30c>
  8081dc:	84c05d2e 	bgeu	r16,r19,808354 <__umoddi3+0x30c>
  8081e0:	8011883a 	mov	r8,r16
  8081e4:	a813883a 	mov	r9,r21
  8081e8:	dc000415 	stw	r16,16(sp)
  8081ec:	dd400515 	stw	r21,20(sp)
  8081f0:	003fdc06 	br	808164 <__umoddi3+0x11c>
  8081f4:	00bfffd4 	movui	r2,65535
  8081f8:	12004a36 	bltu	r2,r8,808324 <__umoddi3+0x2dc>
  8081fc:	00803fc4 	movi	r2,255
  808200:	12010d36 	bltu	r2,r8,808638 <__umoddi3+0x5f0>
  808204:	000b883a 	mov	r5,zero
  808208:	0005883a 	mov	r2,zero
  80820c:	9884d83a 	srl	r2,r19,r2
  808210:	01002074 	movhi	r4,129
  808214:	211bcd04 	addi	r4,r4,28468
  808218:	01800804 	movi	r6,32
  80821c:	1105883a 	add	r2,r2,r4
  808220:	10c00003 	ldbu	r3,0(r2)
  808224:	28c7883a 	add	r3,r5,r3
  808228:	30c7c83a 	sub	r3,r6,r3
  80822c:	1800dc1e 	bne	r3,zero,8085a0 <__umoddi3+0x558>
  808230:	002d883a 	mov	r22,zero
  808234:	982ed43a 	srli	r23,r19,16
  808238:	a809883a 	mov	r4,r21
  80823c:	9cbfffcc 	andi	r18,r19,65535
  808240:	b80b883a 	mov	r5,r23
  808244:	08099100 	call	809910 <__udivsi3>
  808248:	100b883a 	mov	r5,r2
  80824c:	9009883a 	mov	r4,r18
  808250:	08099200 	call	809920 <__mulsi3>
  808254:	a809883a 	mov	r4,r21
  808258:	b80b883a 	mov	r5,r23
  80825c:	1023883a 	mov	r17,r2
  808260:	08099180 	call	809918 <__umodsi3>
  808264:	1004943a 	slli	r2,r2,16
  808268:	8006d43a 	srli	r3,r16,16
  80826c:	10c4b03a 	or	r2,r2,r3
  808270:	1440032e 	bgeu	r2,r17,808280 <__umoddi3+0x238>
  808274:	14c5883a 	add	r2,r2,r19
  808278:	14c00136 	bltu	r2,r19,808280 <__umoddi3+0x238>
  80827c:	14410236 	bltu	r2,r17,808688 <__umoddi3+0x640>
  808280:	1463c83a 	sub	r17,r2,r17
  808284:	8809883a 	mov	r4,r17
  808288:	b80b883a 	mov	r5,r23
  80828c:	08099100 	call	809910 <__udivsi3>
  808290:	9009883a 	mov	r4,r18
  808294:	100b883a 	mov	r5,r2
  808298:	08099200 	call	809920 <__mulsi3>
  80829c:	8809883a 	mov	r4,r17
  8082a0:	b80b883a 	mov	r5,r23
  8082a4:	102b883a 	mov	r21,r2
  8082a8:	08099180 	call	809918 <__umodsi3>
  8082ac:	1004943a 	slli	r2,r2,16
  8082b0:	80ffffcc 	andi	r3,r16,65535
  8082b4:	10c4b03a 	or	r2,r2,r3
  8082b8:	1540042e 	bgeu	r2,r21,8082cc <__umoddi3+0x284>
  8082bc:	14c5883a 	add	r2,r2,r19
  8082c0:	14c00236 	bltu	r2,r19,8082cc <__umoddi3+0x284>
  8082c4:	1540012e 	bgeu	r2,r21,8082cc <__umoddi3+0x284>
  8082c8:	14c5883a 	add	r2,r2,r19
  8082cc:	1545c83a 	sub	r2,r2,r21
  8082d0:	1584d83a 	srl	r2,r2,r22
  8082d4:	0013883a 	mov	r9,zero
  8082d8:	d8800415 	stw	r2,16(sp)
  8082dc:	d8c00417 	ldw	r3,16(sp)
  8082e0:	0005883a 	mov	r2,zero
  8082e4:	d8800515 	stw	r2,20(sp)
  8082e8:	1811883a 	mov	r8,r3
  8082ec:	003f9d06 	br	808164 <__umoddi3+0x11c>
  8082f0:	00804034 	movhi	r2,256
  8082f4:	10bfffc4 	addi	r2,r2,-1
  8082f8:	14c0c636 	bltu	r2,r19,808614 <__umoddi3+0x5cc>
  8082fc:	01400404 	movi	r5,16
  808300:	2805883a 	mov	r2,r5
  808304:	003f6c06 	br	8080b8 <__umoddi3+0x70>
  808308:	01000044 	movi	r4,1
  80830c:	000b883a 	mov	r5,zero
  808310:	08099100 	call	809910 <__udivsi3>
  808314:	1027883a 	mov	r19,r2
  808318:	00bfffd4 	movui	r2,65535
  80831c:	14fff436 	bltu	r2,r19,8082f0 <__umoddi3+0x2a8>
  808320:	003f6106 	br	8080a8 <__umoddi3+0x60>
  808324:	00804034 	movhi	r2,256
  808328:	10bfffc4 	addi	r2,r2,-1
  80832c:	1200c536 	bltu	r2,r8,808644 <__umoddi3+0x5fc>
  808330:	01400404 	movi	r5,16
  808334:	2805883a 	mov	r2,r5
  808338:	003fb406 	br	80820c <__umoddi3+0x1c4>
  80833c:	00804034 	movhi	r2,256
  808340:	10bfffc4 	addi	r2,r2,-1
  808344:	11c0c236 	bltu	r2,r7,808650 <__umoddi3+0x608>
  808348:	01400404 	movi	r5,16
  80834c:	2805883a 	mov	r2,r5
  808350:	003f9806 	br	8081b4 <__umoddi3+0x16c>
  808354:	84c9c83a 	sub	r4,r16,r19
  808358:	8105803a 	cmpltu	r2,r16,r4
  80835c:	a987c83a 	sub	r3,r21,r6
  808360:	18abc83a 	sub	r21,r3,r2
  808364:	2021883a 	mov	r16,r4
  808368:	003f9d06 	br	8081e0 <__umoddi3+0x198>
  80836c:	9ca6983a 	sll	r19,r19,r18
  808370:	3485c83a 	sub	r2,r6,r18
  808374:	a8a2d83a 	srl	r17,r21,r2
  808378:	982ed43a 	srli	r23,r19,16
  80837c:	ac86983a 	sll	r3,r21,r18
  808380:	8084d83a 	srl	r2,r16,r2
  808384:	8809883a 	mov	r4,r17
  808388:	b80b883a 	mov	r5,r23
  80838c:	18b8b03a 	or	fp,r3,r2
  808390:	9d3fffcc 	andi	r20,r19,65535
  808394:	08099100 	call	809910 <__udivsi3>
  808398:	100b883a 	mov	r5,r2
  80839c:	a009883a 	mov	r4,r20
  8083a0:	08099200 	call	809920 <__mulsi3>
  8083a4:	8809883a 	mov	r4,r17
  8083a8:	b80b883a 	mov	r5,r23
  8083ac:	102b883a 	mov	r21,r2
  8083b0:	08099180 	call	809918 <__umodsi3>
  8083b4:	1004943a 	slli	r2,r2,16
  8083b8:	e006d43a 	srli	r3,fp,16
  8083bc:	902d883a 	mov	r22,r18
  8083c0:	10c4b03a 	or	r2,r2,r3
  8083c4:	1540022e 	bgeu	r2,r21,8083d0 <__umoddi3+0x388>
  8083c8:	14c5883a 	add	r2,r2,r19
  8083cc:	14c0ab2e 	bgeu	r2,r19,80867c <__umoddi3+0x634>
  8083d0:	1563c83a 	sub	r17,r2,r21
  8083d4:	8809883a 	mov	r4,r17
  8083d8:	b80b883a 	mov	r5,r23
  8083dc:	08099100 	call	809910 <__udivsi3>
  8083e0:	100b883a 	mov	r5,r2
  8083e4:	a009883a 	mov	r4,r20
  8083e8:	08099200 	call	809920 <__mulsi3>
  8083ec:	8809883a 	mov	r4,r17
  8083f0:	b80b883a 	mov	r5,r23
  8083f4:	102b883a 	mov	r21,r2
  8083f8:	08099180 	call	809918 <__umodsi3>
  8083fc:	1004943a 	slli	r2,r2,16
  808400:	e0ffffcc 	andi	r3,fp,65535
  808404:	10c4b03a 	or	r2,r2,r3
  808408:	1540042e 	bgeu	r2,r21,80841c <__umoddi3+0x3d4>
  80840c:	14c5883a 	add	r2,r2,r19
  808410:	14c00236 	bltu	r2,r19,80841c <__umoddi3+0x3d4>
  808414:	1540012e 	bgeu	r2,r21,80841c <__umoddi3+0x3d4>
  808418:	14c5883a 	add	r2,r2,r19
  80841c:	84a0983a 	sll	r16,r16,r18
  808420:	156bc83a 	sub	r21,r2,r21
  808424:	003f3106 	br	8080ec <__umoddi3+0xa4>
  808428:	3c8fc83a 	sub	r7,r7,r18
  80842c:	3486983a 	sll	r3,r6,r18
  808430:	99c4d83a 	srl	r2,r19,r7
  808434:	a9e2d83a 	srl	r17,r21,r7
  808438:	ac8c983a 	sll	r6,r21,r18
  80843c:	18acb03a 	or	r22,r3,r2
  808440:	b02ed43a 	srli	r23,r22,16
  808444:	81c4d83a 	srl	r2,r16,r7
  808448:	8809883a 	mov	r4,r17
  80844c:	b80b883a 	mov	r5,r23
  808450:	308cb03a 	or	r6,r6,r2
  808454:	d9c00315 	stw	r7,12(sp)
  808458:	d9800215 	stw	r6,8(sp)
  80845c:	b53fffcc 	andi	r20,r22,65535
  808460:	08099100 	call	809910 <__udivsi3>
  808464:	100b883a 	mov	r5,r2
  808468:	a009883a 	mov	r4,r20
  80846c:	1039883a 	mov	fp,r2
  808470:	08099200 	call	809920 <__mulsi3>
  808474:	8809883a 	mov	r4,r17
  808478:	b80b883a 	mov	r5,r23
  80847c:	102b883a 	mov	r21,r2
  808480:	08099180 	call	809918 <__umodsi3>
  808484:	d9000217 	ldw	r4,8(sp)
  808488:	1004943a 	slli	r2,r2,16
  80848c:	9ca6983a 	sll	r19,r19,r18
  808490:	2006d43a 	srli	r3,r4,16
  808494:	84a0983a 	sll	r16,r16,r18
  808498:	dcc00015 	stw	r19,0(sp)
  80849c:	10c4b03a 	or	r2,r2,r3
  8084a0:	dc000115 	stw	r16,4(sp)
  8084a4:	1540032e 	bgeu	r2,r21,8084b4 <__umoddi3+0x46c>
  8084a8:	1585883a 	add	r2,r2,r22
  8084ac:	e73fffc4 	addi	fp,fp,-1
  8084b0:	15806e2e 	bgeu	r2,r22,80866c <__umoddi3+0x624>
  8084b4:	1563c83a 	sub	r17,r2,r21
  8084b8:	8809883a 	mov	r4,r17
  8084bc:	b80b883a 	mov	r5,r23
  8084c0:	08099100 	call	809910 <__udivsi3>
  8084c4:	100b883a 	mov	r5,r2
  8084c8:	a009883a 	mov	r4,r20
  8084cc:	1021883a 	mov	r16,r2
  8084d0:	08099200 	call	809920 <__mulsi3>
  8084d4:	b80b883a 	mov	r5,r23
  8084d8:	8809883a 	mov	r4,r17
  8084dc:	1029883a 	mov	r20,r2
  8084e0:	08099180 	call	809918 <__umodsi3>
  8084e4:	d9400217 	ldw	r5,8(sp)
  8084e8:	1004943a 	slli	r2,r2,16
  8084ec:	28ffffcc 	andi	r3,r5,65535
  8084f0:	10c4b03a 	or	r2,r2,r3
  8084f4:	1500032e 	bgeu	r2,r20,808504 <__umoddi3+0x4bc>
  8084f8:	1585883a 	add	r2,r2,r22
  8084fc:	843fffc4 	addi	r16,r16,-1
  808500:	1580562e 	bgeu	r2,r22,80865c <__umoddi3+0x614>
  808504:	d9800017 	ldw	r6,0(sp)
  808508:	e022943a 	slli	r17,fp,16
  80850c:	302ed43a 	srli	r23,r6,16
  808510:	8462b03a 	or	r17,r16,r17
  808514:	34ffffcc 	andi	r19,r6,65535
  808518:	882ad43a 	srli	r21,r17,16
  80851c:	8c7fffcc 	andi	r17,r17,65535
  808520:	8809883a 	mov	r4,r17
  808524:	980b883a 	mov	r5,r19
  808528:	1521c83a 	sub	r16,r2,r20
  80852c:	08099200 	call	809920 <__mulsi3>
  808530:	8809883a 	mov	r4,r17
  808534:	b80b883a 	mov	r5,r23
  808538:	1029883a 	mov	r20,r2
  80853c:	08099200 	call	809920 <__mulsi3>
  808540:	980b883a 	mov	r5,r19
  808544:	a809883a 	mov	r4,r21
  808548:	1023883a 	mov	r17,r2
  80854c:	08099200 	call	809920 <__mulsi3>
  808550:	a809883a 	mov	r4,r21
  808554:	b80b883a 	mov	r5,r23
  808558:	1027883a 	mov	r19,r2
  80855c:	08099200 	call	809920 <__mulsi3>
  808560:	100b883a 	mov	r5,r2
  808564:	a004d43a 	srli	r2,r20,16
  808568:	8ce3883a 	add	r17,r17,r19
  80856c:	1449883a 	add	r4,r2,r17
  808570:	24c0022e 	bgeu	r4,r19,80857c <__umoddi3+0x534>
  808574:	00800074 	movhi	r2,1
  808578:	288b883a 	add	r5,r5,r2
  80857c:	2004d43a 	srli	r2,r4,16
  808580:	2008943a 	slli	r4,r4,16
  808584:	a0ffffcc 	andi	r3,r20,65535
  808588:	288d883a 	add	r6,r5,r2
  80858c:	20c9883a 	add	r4,r4,r3
  808590:	81800b36 	bltu	r16,r6,8085c0 <__umoddi3+0x578>
  808594:	81804026 	beq	r16,r6,808698 <__umoddi3+0x650>
  808598:	818dc83a 	sub	r6,r16,r6
  80859c:	00000f06 	br	8085dc <__umoddi3+0x594>
  8085a0:	30c5c83a 	sub	r2,r6,r3
  8085a4:	182d883a 	mov	r22,r3
  8085a8:	8084d83a 	srl	r2,r16,r2
  8085ac:	a8c6983a 	sll	r3,r21,r3
  8085b0:	9da6983a 	sll	r19,r19,r22
  8085b4:	85a0983a 	sll	r16,r16,r22
  8085b8:	18aab03a 	or	r21,r3,r2
  8085bc:	003f1d06 	br	808234 <__umoddi3+0x1ec>
  8085c0:	d8c00017 	ldw	r3,0(sp)
  8085c4:	20c5c83a 	sub	r2,r4,r3
  8085c8:	2089803a 	cmpltu	r4,r4,r2
  8085cc:	3587c83a 	sub	r3,r6,r22
  8085d0:	1907c83a 	sub	r3,r3,r4
  8085d4:	80cdc83a 	sub	r6,r16,r3
  8085d8:	1009883a 	mov	r4,r2
  8085dc:	d9400117 	ldw	r5,4(sp)
  8085e0:	2905c83a 	sub	r2,r5,r4
  8085e4:	2887803a 	cmpltu	r3,r5,r2
  8085e8:	30c7c83a 	sub	r3,r6,r3
  8085ec:	d9800317 	ldw	r6,12(sp)
  8085f0:	1484d83a 	srl	r2,r2,r18
  8085f4:	1988983a 	sll	r4,r3,r6
  8085f8:	1c86d83a 	srl	r3,r3,r18
  8085fc:	2088b03a 	or	r4,r4,r2
  808600:	2011883a 	mov	r8,r4
  808604:	1813883a 	mov	r9,r3
  808608:	d9000415 	stw	r4,16(sp)
  80860c:	d8c00515 	stw	r3,20(sp)
  808610:	003ed406 	br	808164 <__umoddi3+0x11c>
  808614:	01400604 	movi	r5,24
  808618:	2805883a 	mov	r2,r5
  80861c:	003ea606 	br	8080b8 <__umoddi3+0x70>
  808620:	01400204 	movi	r5,8
  808624:	2805883a 	mov	r2,r5
  808628:	003ea306 	br	8080b8 <__umoddi3+0x70>
  80862c:	01400204 	movi	r5,8
  808630:	2805883a 	mov	r2,r5
  808634:	003edf06 	br	8081b4 <__umoddi3+0x16c>
  808638:	01400204 	movi	r5,8
  80863c:	2805883a 	mov	r2,r5
  808640:	003ef206 	br	80820c <__umoddi3+0x1c4>
  808644:	01400604 	movi	r5,24
  808648:	2805883a 	mov	r2,r5
  80864c:	003eef06 	br	80820c <__umoddi3+0x1c4>
  808650:	01400604 	movi	r5,24
  808654:	2805883a 	mov	r2,r5
  808658:	003ed606 	br	8081b4 <__umoddi3+0x16c>
  80865c:	153fa92e 	bgeu	r2,r20,808504 <__umoddi3+0x4bc>
  808660:	843fffc4 	addi	r16,r16,-1
  808664:	1585883a 	add	r2,r2,r22
  808668:	003fa606 	br	808504 <__umoddi3+0x4bc>
  80866c:	157f912e 	bgeu	r2,r21,8084b4 <__umoddi3+0x46c>
  808670:	e73fffc4 	addi	fp,fp,-1
  808674:	1585883a 	add	r2,r2,r22
  808678:	003f8e06 	br	8084b4 <__umoddi3+0x46c>
  80867c:	157f542e 	bgeu	r2,r21,8083d0 <__umoddi3+0x388>
  808680:	14c5883a 	add	r2,r2,r19
  808684:	003f5206 	br	8083d0 <__umoddi3+0x388>
  808688:	14c5883a 	add	r2,r2,r19
  80868c:	003efc06 	br	808280 <__umoddi3+0x238>
  808690:	14c5883a 	add	r2,r2,r19
  808694:	003ea606 	br	808130 <__umoddi3+0xe8>
  808698:	d8800117 	ldw	r2,4(sp)
  80869c:	113fc836 	bltu	r2,r4,8085c0 <__umoddi3+0x578>
  8086a0:	000d883a 	mov	r6,zero
  8086a4:	003fcd06 	br	8085dc <__umoddi3+0x594>

008086a8 <_fpadd_parts>:
  8086a8:	defff804 	addi	sp,sp,-32
  8086ac:	dcc00315 	stw	r19,12(sp)
  8086b0:	2027883a 	mov	r19,r4
  8086b4:	21000017 	ldw	r4,0(r4)
  8086b8:	00c00044 	movi	r3,1
  8086bc:	dd400515 	stw	r21,20(sp)
  8086c0:	dd000415 	stw	r20,16(sp)
  8086c4:	ddc00715 	stw	r23,28(sp)
  8086c8:	dd800615 	stw	r22,24(sp)
  8086cc:	dc800215 	stw	r18,8(sp)
  8086d0:	dc400115 	stw	r17,4(sp)
  8086d4:	dc000015 	stw	r16,0(sp)
  8086d8:	282b883a 	mov	r21,r5
  8086dc:	3029883a 	mov	r20,r6
  8086e0:	1900632e 	bgeu	r3,r4,808870 <_fpadd_parts+0x1c8>
  8086e4:	28800017 	ldw	r2,0(r5)
  8086e8:	1880812e 	bgeu	r3,r2,8088f0 <_fpadd_parts+0x248>
  8086ec:	00c00104 	movi	r3,4
  8086f0:	20c0dc26 	beq	r4,r3,808a64 <_fpadd_parts+0x3bc>
  8086f4:	10c07e26 	beq	r2,r3,8088f0 <_fpadd_parts+0x248>
  8086f8:	00c00084 	movi	r3,2
  8086fc:	10c06726 	beq	r2,r3,80889c <_fpadd_parts+0x1f4>
  808700:	20c07b26 	beq	r4,r3,8088f0 <_fpadd_parts+0x248>
  808704:	9dc00217 	ldw	r23,8(r19)
  808708:	28c00217 	ldw	r3,8(r5)
  80870c:	9c400317 	ldw	r17,12(r19)
  808710:	2bc00317 	ldw	r15,12(r5)
  808714:	b8cdc83a 	sub	r6,r23,r3
  808718:	9c800417 	ldw	r18,16(r19)
  80871c:	2c000417 	ldw	r16,16(r5)
  808720:	3009883a 	mov	r4,r6
  808724:	30009716 	blt	r6,zero,808984 <_fpadd_parts+0x2dc>
  808728:	00800fc4 	movi	r2,63
  80872c:	11806b16 	blt	r2,r6,8088dc <_fpadd_parts+0x234>
  808730:	0100a40e 	bge	zero,r4,8089c4 <_fpadd_parts+0x31c>
  808734:	35bff804 	addi	r22,r6,-32
  808738:	b000bc16 	blt	r22,zero,808a2c <_fpadd_parts+0x384>
  80873c:	8596d83a 	srl	r11,r16,r22
  808740:	0019883a 	mov	r12,zero
  808744:	0013883a 	mov	r9,zero
  808748:	01000044 	movi	r4,1
  80874c:	0015883a 	mov	r10,zero
  808750:	b000be16 	blt	r22,zero,808a4c <_fpadd_parts+0x3a4>
  808754:	2590983a 	sll	r8,r4,r22
  808758:	000f883a 	mov	r7,zero
  80875c:	00bfffc4 	movi	r2,-1
  808760:	3889883a 	add	r4,r7,r2
  808764:	408b883a 	add	r5,r8,r2
  808768:	21cd803a 	cmpltu	r6,r4,r7
  80876c:	314b883a 	add	r5,r6,r5
  808770:	7904703a 	and	r2,r15,r4
  808774:	8146703a 	and	r3,r16,r5
  808778:	10c4b03a 	or	r2,r2,r3
  80877c:	10000226 	beq	r2,zero,808788 <_fpadd_parts+0xe0>
  808780:	02400044 	movi	r9,1
  808784:	0015883a 	mov	r10,zero
  808788:	5a5eb03a 	or	r15,r11,r9
  80878c:	62a0b03a 	or	r16,r12,r10
  808790:	99400117 	ldw	r5,4(r19)
  808794:	a8800117 	ldw	r2,4(r21)
  808798:	28806e26 	beq	r5,r2,808954 <_fpadd_parts+0x2ac>
  80879c:	28006626 	beq	r5,zero,808938 <_fpadd_parts+0x290>
  8087a0:	7c45c83a 	sub	r2,r15,r17
  8087a4:	7889803a 	cmpltu	r4,r15,r2
  8087a8:	8487c83a 	sub	r3,r16,r18
  8087ac:	1909c83a 	sub	r4,r3,r4
  8087b0:	100d883a 	mov	r6,r2
  8087b4:	200f883a 	mov	r7,r4
  8087b8:	38007716 	blt	r7,zero,808998 <_fpadd_parts+0x2f0>
  8087bc:	a5c00215 	stw	r23,8(r20)
  8087c0:	a1c00415 	stw	r7,16(r20)
  8087c4:	a0000115 	stw	zero,4(r20)
  8087c8:	a1800315 	stw	r6,12(r20)
  8087cc:	a2000317 	ldw	r8,12(r20)
  8087d0:	a2400417 	ldw	r9,16(r20)
  8087d4:	00bfffc4 	movi	r2,-1
  8087d8:	408b883a 	add	r5,r8,r2
  8087dc:	2a09803a 	cmpltu	r4,r5,r8
  8087e0:	488d883a 	add	r6,r9,r2
  8087e4:	01c40034 	movhi	r7,4096
  8087e8:	39ffffc4 	addi	r7,r7,-1
  8087ec:	218d883a 	add	r6,r4,r6
  8087f0:	39801736 	bltu	r7,r6,808850 <_fpadd_parts+0x1a8>
  8087f4:	31c06526 	beq	r6,r7,80898c <_fpadd_parts+0x2e4>
  8087f8:	a3000217 	ldw	r12,8(r20)
  8087fc:	4209883a 	add	r4,r8,r8
  808800:	00bfffc4 	movi	r2,-1
  808804:	220f803a 	cmpltu	r7,r4,r8
  808808:	4a4b883a 	add	r5,r9,r9
  80880c:	394f883a 	add	r7,r7,r5
  808810:	2095883a 	add	r10,r4,r2
  808814:	3897883a 	add	r11,r7,r2
  808818:	510d803a 	cmpltu	r6,r10,r4
  80881c:	6099883a 	add	r12,r12,r2
  808820:	32d7883a 	add	r11,r6,r11
  808824:	00840034 	movhi	r2,4096
  808828:	10bfffc4 	addi	r2,r2,-1
  80882c:	2011883a 	mov	r8,r4
  808830:	3813883a 	mov	r9,r7
  808834:	a1000315 	stw	r4,12(r20)
  808838:	a1c00415 	stw	r7,16(r20)
  80883c:	a3000215 	stw	r12,8(r20)
  808840:	12c00336 	bltu	r2,r11,808850 <_fpadd_parts+0x1a8>
  808844:	58bfed1e 	bne	r11,r2,8087fc <_fpadd_parts+0x154>
  808848:	00bfff84 	movi	r2,-2
  80884c:	12bfeb2e 	bgeu	r2,r10,8087fc <_fpadd_parts+0x154>
  808850:	a2800417 	ldw	r10,16(r20)
  808854:	008000c4 	movi	r2,3
  808858:	00c80034 	movhi	r3,8192
  80885c:	18ffffc4 	addi	r3,r3,-1
  808860:	a2400317 	ldw	r9,12(r20)
  808864:	a0800015 	stw	r2,0(r20)
  808868:	1a802336 	bltu	r3,r10,8088f8 <_fpadd_parts+0x250>
  80886c:	a027883a 	mov	r19,r20
  808870:	9805883a 	mov	r2,r19
  808874:	ddc00717 	ldw	r23,28(sp)
  808878:	dd800617 	ldw	r22,24(sp)
  80887c:	dd400517 	ldw	r21,20(sp)
  808880:	dd000417 	ldw	r20,16(sp)
  808884:	dcc00317 	ldw	r19,12(sp)
  808888:	dc800217 	ldw	r18,8(sp)
  80888c:	dc400117 	ldw	r17,4(sp)
  808890:	dc000017 	ldw	r16,0(sp)
  808894:	dec00804 	addi	sp,sp,32
  808898:	f800283a 	ret
  80889c:	20fff41e 	bne	r4,r3,808870 <_fpadd_parts+0x1c8>
  8088a0:	31000015 	stw	r4,0(r6)
  8088a4:	98800117 	ldw	r2,4(r19)
  8088a8:	30800115 	stw	r2,4(r6)
  8088ac:	98c00217 	ldw	r3,8(r19)
  8088b0:	30c00215 	stw	r3,8(r6)
  8088b4:	98800317 	ldw	r2,12(r19)
  8088b8:	30800315 	stw	r2,12(r6)
  8088bc:	98c00417 	ldw	r3,16(r19)
  8088c0:	30c00415 	stw	r3,16(r6)
  8088c4:	98800117 	ldw	r2,4(r19)
  8088c8:	28c00117 	ldw	r3,4(r5)
  8088cc:	3027883a 	mov	r19,r6
  8088d0:	10c4703a 	and	r2,r2,r3
  8088d4:	30800115 	stw	r2,4(r6)
  8088d8:	003fe506 	br	808870 <_fpadd_parts+0x1c8>
  8088dc:	1dc02616 	blt	r3,r23,808978 <_fpadd_parts+0x2d0>
  8088e0:	0023883a 	mov	r17,zero
  8088e4:	182f883a 	mov	r23,r3
  8088e8:	0025883a 	mov	r18,zero
  8088ec:	003fa806 	br	808790 <_fpadd_parts+0xe8>
  8088f0:	a827883a 	mov	r19,r21
  8088f4:	003fde06 	br	808870 <_fpadd_parts+0x1c8>
  8088f8:	01800044 	movi	r6,1
  8088fc:	500497fa 	slli	r2,r10,31
  808900:	4808d07a 	srli	r4,r9,1
  808904:	518ad83a 	srl	r5,r10,r6
  808908:	a2000217 	ldw	r8,8(r20)
  80890c:	1108b03a 	or	r4,r2,r4
  808910:	0007883a 	mov	r3,zero
  808914:	4984703a 	and	r2,r9,r6
  808918:	208cb03a 	or	r6,r4,r2
  80891c:	28ceb03a 	or	r7,r5,r3
  808920:	42000044 	addi	r8,r8,1
  808924:	a027883a 	mov	r19,r20
  808928:	a1c00415 	stw	r7,16(r20)
  80892c:	a2000215 	stw	r8,8(r20)
  808930:	a1800315 	stw	r6,12(r20)
  808934:	003fce06 	br	808870 <_fpadd_parts+0x1c8>
  808938:	8bc5c83a 	sub	r2,r17,r15
  80893c:	8889803a 	cmpltu	r4,r17,r2
  808940:	9407c83a 	sub	r3,r18,r16
  808944:	1909c83a 	sub	r4,r3,r4
  808948:	100d883a 	mov	r6,r2
  80894c:	200f883a 	mov	r7,r4
  808950:	003f9906 	br	8087b8 <_fpadd_parts+0x110>
  808954:	7c45883a 	add	r2,r15,r17
  808958:	13c9803a 	cmpltu	r4,r2,r15
  80895c:	8487883a 	add	r3,r16,r18
  808960:	20c9883a 	add	r4,r4,r3
  808964:	a1400115 	stw	r5,4(r20)
  808968:	a5c00215 	stw	r23,8(r20)
  80896c:	a0800315 	stw	r2,12(r20)
  808970:	a1000415 	stw	r4,16(r20)
  808974:	003fb606 	br	808850 <_fpadd_parts+0x1a8>
  808978:	001f883a 	mov	r15,zero
  80897c:	0021883a 	mov	r16,zero
  808980:	003f8306 	br	808790 <_fpadd_parts+0xe8>
  808984:	018dc83a 	sub	r6,zero,r6
  808988:	003f6706 	br	808728 <_fpadd_parts+0x80>
  80898c:	00bfff84 	movi	r2,-2
  808990:	117faf36 	bltu	r2,r5,808850 <_fpadd_parts+0x1a8>
  808994:	003f9806 	br	8087f8 <_fpadd_parts+0x150>
  808998:	0005883a 	mov	r2,zero
  80899c:	1189c83a 	sub	r4,r2,r6
  8089a0:	1105803a 	cmpltu	r2,r2,r4
  8089a4:	01cbc83a 	sub	r5,zero,r7
  8089a8:	2885c83a 	sub	r2,r5,r2
  8089ac:	01800044 	movi	r6,1
  8089b0:	a1800115 	stw	r6,4(r20)
  8089b4:	a5c00215 	stw	r23,8(r20)
  8089b8:	a1000315 	stw	r4,12(r20)
  8089bc:	a0800415 	stw	r2,16(r20)
  8089c0:	003f8206 	br	8087cc <_fpadd_parts+0x124>
  8089c4:	203f7226 	beq	r4,zero,808790 <_fpadd_parts+0xe8>
  8089c8:	35bff804 	addi	r22,r6,-32
  8089cc:	b9af883a 	add	r23,r23,r6
  8089d0:	b0003116 	blt	r22,zero,808a98 <_fpadd_parts+0x3f0>
  8089d4:	959ad83a 	srl	r13,r18,r22
  8089d8:	001d883a 	mov	r14,zero
  8089dc:	000f883a 	mov	r7,zero
  8089e0:	01000044 	movi	r4,1
  8089e4:	0011883a 	mov	r8,zero
  8089e8:	b0002516 	blt	r22,zero,808a80 <_fpadd_parts+0x3d8>
  8089ec:	2594983a 	sll	r10,r4,r22
  8089f0:	0013883a 	mov	r9,zero
  8089f4:	00bfffc4 	movi	r2,-1
  8089f8:	4889883a 	add	r4,r9,r2
  8089fc:	508b883a 	add	r5,r10,r2
  808a00:	224d803a 	cmpltu	r6,r4,r9
  808a04:	314b883a 	add	r5,r6,r5
  808a08:	8904703a 	and	r2,r17,r4
  808a0c:	9146703a 	and	r3,r18,r5
  808a10:	10c4b03a 	or	r2,r2,r3
  808a14:	10000226 	beq	r2,zero,808a20 <_fpadd_parts+0x378>
  808a18:	01c00044 	movi	r7,1
  808a1c:	0011883a 	mov	r8,zero
  808a20:	69e2b03a 	or	r17,r13,r7
  808a24:	7224b03a 	or	r18,r14,r8
  808a28:	003f5906 	br	808790 <_fpadd_parts+0xe8>
  808a2c:	8407883a 	add	r3,r16,r16
  808a30:	008007c4 	movi	r2,31
  808a34:	1185c83a 	sub	r2,r2,r6
  808a38:	1886983a 	sll	r3,r3,r2
  808a3c:	7996d83a 	srl	r11,r15,r6
  808a40:	8198d83a 	srl	r12,r16,r6
  808a44:	1ad6b03a 	or	r11,r3,r11
  808a48:	003f3e06 	br	808744 <_fpadd_parts+0x9c>
  808a4c:	2006d07a 	srli	r3,r4,1
  808a50:	008007c4 	movi	r2,31
  808a54:	1185c83a 	sub	r2,r2,r6
  808a58:	1890d83a 	srl	r8,r3,r2
  808a5c:	218e983a 	sll	r7,r4,r6
  808a60:	003f3e06 	br	80875c <_fpadd_parts+0xb4>
  808a64:	113f821e 	bne	r2,r4,808870 <_fpadd_parts+0x1c8>
  808a68:	28c00117 	ldw	r3,4(r5)
  808a6c:	98800117 	ldw	r2,4(r19)
  808a70:	10ff7f26 	beq	r2,r3,808870 <_fpadd_parts+0x1c8>
  808a74:	04c02074 	movhi	r19,129
  808a78:	9cdbc804 	addi	r19,r19,28448
  808a7c:	003f7c06 	br	808870 <_fpadd_parts+0x1c8>
  808a80:	2006d07a 	srli	r3,r4,1
  808a84:	008007c4 	movi	r2,31
  808a88:	1185c83a 	sub	r2,r2,r6
  808a8c:	1894d83a 	srl	r10,r3,r2
  808a90:	2192983a 	sll	r9,r4,r6
  808a94:	003fd706 	br	8089f4 <_fpadd_parts+0x34c>
  808a98:	9487883a 	add	r3,r18,r18
  808a9c:	008007c4 	movi	r2,31
  808aa0:	1185c83a 	sub	r2,r2,r6
  808aa4:	1886983a 	sll	r3,r3,r2
  808aa8:	899ad83a 	srl	r13,r17,r6
  808aac:	919cd83a 	srl	r14,r18,r6
  808ab0:	1b5ab03a 	or	r13,r3,r13
  808ab4:	003fc906 	br	8089dc <_fpadd_parts+0x334>

00808ab8 <__subdf3>:
  808ab8:	deffea04 	addi	sp,sp,-88
  808abc:	dcc01415 	stw	r19,80(sp)
  808ac0:	dcc00404 	addi	r19,sp,16
  808ac4:	2011883a 	mov	r8,r4
  808ac8:	2813883a 	mov	r9,r5
  808acc:	dc401315 	stw	r17,76(sp)
  808ad0:	d809883a 	mov	r4,sp
  808ad4:	980b883a 	mov	r5,r19
  808ad8:	dc400904 	addi	r17,sp,36
  808adc:	dfc01515 	stw	ra,84(sp)
  808ae0:	da400115 	stw	r9,4(sp)
  808ae4:	d9c00315 	stw	r7,12(sp)
  808ae8:	da000015 	stw	r8,0(sp)
  808aec:	d9800215 	stw	r6,8(sp)
  808af0:	0809e100 	call	809e10 <__unpack_d>
  808af4:	d9000204 	addi	r4,sp,8
  808af8:	880b883a 	mov	r5,r17
  808afc:	0809e100 	call	809e10 <__unpack_d>
  808b00:	d8800a17 	ldw	r2,40(sp)
  808b04:	880b883a 	mov	r5,r17
  808b08:	9809883a 	mov	r4,r19
  808b0c:	d9800e04 	addi	r6,sp,56
  808b10:	1080005c 	xori	r2,r2,1
  808b14:	d8800a15 	stw	r2,40(sp)
  808b18:	08086a80 	call	8086a8 <_fpadd_parts>
  808b1c:	1009883a 	mov	r4,r2
  808b20:	0809afc0 	call	809afc <__pack_d>
  808b24:	dfc01517 	ldw	ra,84(sp)
  808b28:	dcc01417 	ldw	r19,80(sp)
  808b2c:	dc401317 	ldw	r17,76(sp)
  808b30:	dec01604 	addi	sp,sp,88
  808b34:	f800283a 	ret

00808b38 <__adddf3>:
  808b38:	deffea04 	addi	sp,sp,-88
  808b3c:	dcc01415 	stw	r19,80(sp)
  808b40:	dcc00404 	addi	r19,sp,16
  808b44:	2011883a 	mov	r8,r4
  808b48:	2813883a 	mov	r9,r5
  808b4c:	dc401315 	stw	r17,76(sp)
  808b50:	d809883a 	mov	r4,sp
  808b54:	980b883a 	mov	r5,r19
  808b58:	dc400904 	addi	r17,sp,36
  808b5c:	dfc01515 	stw	ra,84(sp)
  808b60:	da400115 	stw	r9,4(sp)
  808b64:	d9c00315 	stw	r7,12(sp)
  808b68:	da000015 	stw	r8,0(sp)
  808b6c:	d9800215 	stw	r6,8(sp)
  808b70:	0809e100 	call	809e10 <__unpack_d>
  808b74:	d9000204 	addi	r4,sp,8
  808b78:	880b883a 	mov	r5,r17
  808b7c:	0809e100 	call	809e10 <__unpack_d>
  808b80:	d9800e04 	addi	r6,sp,56
  808b84:	9809883a 	mov	r4,r19
  808b88:	880b883a 	mov	r5,r17
  808b8c:	08086a80 	call	8086a8 <_fpadd_parts>
  808b90:	1009883a 	mov	r4,r2
  808b94:	0809afc0 	call	809afc <__pack_d>
  808b98:	dfc01517 	ldw	ra,84(sp)
  808b9c:	dcc01417 	ldw	r19,80(sp)
  808ba0:	dc401317 	ldw	r17,76(sp)
  808ba4:	dec01604 	addi	sp,sp,88
  808ba8:	f800283a 	ret

00808bac <__muldf3>:
  808bac:	deffe004 	addi	sp,sp,-128
  808bb0:	dc401815 	stw	r17,96(sp)
  808bb4:	dc400404 	addi	r17,sp,16
  808bb8:	2011883a 	mov	r8,r4
  808bbc:	2813883a 	mov	r9,r5
  808bc0:	dc001715 	stw	r16,92(sp)
  808bc4:	d809883a 	mov	r4,sp
  808bc8:	880b883a 	mov	r5,r17
  808bcc:	dc000904 	addi	r16,sp,36
  808bd0:	dfc01f15 	stw	ra,124(sp)
  808bd4:	da400115 	stw	r9,4(sp)
  808bd8:	d9c00315 	stw	r7,12(sp)
  808bdc:	da000015 	stw	r8,0(sp)
  808be0:	d9800215 	stw	r6,8(sp)
  808be4:	ddc01e15 	stw	r23,120(sp)
  808be8:	dd801d15 	stw	r22,116(sp)
  808bec:	dd401c15 	stw	r21,112(sp)
  808bf0:	dd001b15 	stw	r20,108(sp)
  808bf4:	dcc01a15 	stw	r19,104(sp)
  808bf8:	dc801915 	stw	r18,100(sp)
  808bfc:	0809e100 	call	809e10 <__unpack_d>
  808c00:	d9000204 	addi	r4,sp,8
  808c04:	800b883a 	mov	r5,r16
  808c08:	0809e100 	call	809e10 <__unpack_d>
  808c0c:	d9000417 	ldw	r4,16(sp)
  808c10:	00800044 	movi	r2,1
  808c14:	1100102e 	bgeu	r2,r4,808c58 <__muldf3+0xac>
  808c18:	d8c00917 	ldw	r3,36(sp)
  808c1c:	10c0062e 	bgeu	r2,r3,808c38 <__muldf3+0x8c>
  808c20:	00800104 	movi	r2,4
  808c24:	20800a26 	beq	r4,r2,808c50 <__muldf3+0xa4>
  808c28:	1880cc26 	beq	r3,r2,808f5c <__muldf3+0x3b0>
  808c2c:	00800084 	movi	r2,2
  808c30:	20800926 	beq	r4,r2,808c58 <__muldf3+0xac>
  808c34:	1880191e 	bne	r3,r2,808c9c <__muldf3+0xf0>
  808c38:	d8c00a17 	ldw	r3,40(sp)
  808c3c:	d8800517 	ldw	r2,20(sp)
  808c40:	8009883a 	mov	r4,r16
  808c44:	10c4c03a 	cmpne	r2,r2,r3
  808c48:	d8800a15 	stw	r2,40(sp)
  808c4c:	00000706 	br	808c6c <__muldf3+0xc0>
  808c50:	00800084 	movi	r2,2
  808c54:	1880c326 	beq	r3,r2,808f64 <__muldf3+0x3b8>
  808c58:	d8800517 	ldw	r2,20(sp)
  808c5c:	d8c00a17 	ldw	r3,40(sp)
  808c60:	8809883a 	mov	r4,r17
  808c64:	10c4c03a 	cmpne	r2,r2,r3
  808c68:	d8800515 	stw	r2,20(sp)
  808c6c:	0809afc0 	call	809afc <__pack_d>
  808c70:	dfc01f17 	ldw	ra,124(sp)
  808c74:	ddc01e17 	ldw	r23,120(sp)
  808c78:	dd801d17 	ldw	r22,116(sp)
  808c7c:	dd401c17 	ldw	r21,112(sp)
  808c80:	dd001b17 	ldw	r20,108(sp)
  808c84:	dcc01a17 	ldw	r19,104(sp)
  808c88:	dc801917 	ldw	r18,100(sp)
  808c8c:	dc401817 	ldw	r17,96(sp)
  808c90:	dc001717 	ldw	r16,92(sp)
  808c94:	dec02004 	addi	sp,sp,128
  808c98:	f800283a 	ret
  808c9c:	dd800717 	ldw	r22,28(sp)
  808ca0:	dc800c17 	ldw	r18,48(sp)
  808ca4:	002b883a 	mov	r21,zero
  808ca8:	0023883a 	mov	r17,zero
  808cac:	a80b883a 	mov	r5,r21
  808cb0:	b00d883a 	mov	r6,r22
  808cb4:	880f883a 	mov	r7,r17
  808cb8:	ddc00817 	ldw	r23,32(sp)
  808cbc:	dcc00d17 	ldw	r19,52(sp)
  808cc0:	9009883a 	mov	r4,r18
  808cc4:	08099580 	call	809958 <__muldi3>
  808cc8:	001b883a 	mov	r13,zero
  808ccc:	680f883a 	mov	r7,r13
  808cd0:	b009883a 	mov	r4,r22
  808cd4:	000b883a 	mov	r5,zero
  808cd8:	980d883a 	mov	r6,r19
  808cdc:	b82d883a 	mov	r22,r23
  808ce0:	002f883a 	mov	r23,zero
  808ce4:	db401615 	stw	r13,88(sp)
  808ce8:	d8801315 	stw	r2,76(sp)
  808cec:	d8c01415 	stw	r3,80(sp)
  808cf0:	dcc01515 	stw	r19,84(sp)
  808cf4:	08099580 	call	809958 <__muldi3>
  808cf8:	b00d883a 	mov	r6,r22
  808cfc:	000b883a 	mov	r5,zero
  808d00:	9009883a 	mov	r4,r18
  808d04:	b80f883a 	mov	r7,r23
  808d08:	1021883a 	mov	r16,r2
  808d0c:	1823883a 	mov	r17,r3
  808d10:	08099580 	call	809958 <__muldi3>
  808d14:	8085883a 	add	r2,r16,r2
  808d18:	140d803a 	cmpltu	r6,r2,r16
  808d1c:	88c7883a 	add	r3,r17,r3
  808d20:	30cd883a 	add	r6,r6,r3
  808d24:	1029883a 	mov	r20,r2
  808d28:	302b883a 	mov	r21,r6
  808d2c:	da801317 	ldw	r10,76(sp)
  808d30:	dac01417 	ldw	r11,80(sp)
  808d34:	db001517 	ldw	r12,84(sp)
  808d38:	db401617 	ldw	r13,88(sp)
  808d3c:	3440612e 	bgeu	r6,r17,808ec4 <__muldf3+0x318>
  808d40:	0009883a 	mov	r4,zero
  808d44:	5105883a 	add	r2,r10,r4
  808d48:	128d803a 	cmpltu	r6,r2,r10
  808d4c:	5d07883a 	add	r3,r11,r20
  808d50:	30cd883a 	add	r6,r6,r3
  808d54:	0021883a 	mov	r16,zero
  808d58:	04400044 	movi	r17,1
  808d5c:	1025883a 	mov	r18,r2
  808d60:	3027883a 	mov	r19,r6
  808d64:	32c06236 	bltu	r6,r11,808ef0 <__muldf3+0x344>
  808d68:	59807a26 	beq	r11,r6,808f54 <__muldf3+0x3a8>
  808d6c:	680b883a 	mov	r5,r13
  808d70:	b80f883a 	mov	r7,r23
  808d74:	6009883a 	mov	r4,r12
  808d78:	b00d883a 	mov	r6,r22
  808d7c:	08099580 	call	809958 <__muldi3>
  808d80:	1009883a 	mov	r4,r2
  808d84:	000f883a 	mov	r7,zero
  808d88:	1545883a 	add	r2,r2,r21
  808d8c:	1111803a 	cmpltu	r8,r2,r4
  808d90:	19c7883a 	add	r3,r3,r7
  808d94:	40c7883a 	add	r3,r8,r3
  808d98:	88cb883a 	add	r5,r17,r3
  808d9c:	d8c00617 	ldw	r3,24(sp)
  808da0:	8089883a 	add	r4,r16,r2
  808da4:	d8800b17 	ldw	r2,44(sp)
  808da8:	18c00104 	addi	r3,r3,4
  808dac:	240d803a 	cmpltu	r6,r4,r16
  808db0:	10c7883a 	add	r3,r2,r3
  808db4:	2013883a 	mov	r9,r4
  808db8:	d8800a17 	ldw	r2,40(sp)
  808dbc:	d9000517 	ldw	r4,20(sp)
  808dc0:	314d883a 	add	r6,r6,r5
  808dc4:	3015883a 	mov	r10,r6
  808dc8:	2088c03a 	cmpne	r4,r4,r2
  808dcc:	00880034 	movhi	r2,8192
  808dd0:	10bfffc4 	addi	r2,r2,-1
  808dd4:	d9000f15 	stw	r4,60(sp)
  808dd8:	d8c01015 	stw	r3,64(sp)
  808ddc:	1180162e 	bgeu	r2,r6,808e38 <__muldf3+0x28c>
  808de0:	1811883a 	mov	r8,r3
  808de4:	101f883a 	mov	r15,r2
  808de8:	980497fa 	slli	r2,r19,31
  808dec:	9016d07a 	srli	r11,r18,1
  808df0:	500697fa 	slli	r3,r10,31
  808df4:	480cd07a 	srli	r6,r9,1
  808df8:	500ed07a 	srli	r7,r10,1
  808dfc:	12d6b03a 	or	r11,r2,r11
  808e00:	00800044 	movi	r2,1
  808e04:	198cb03a 	or	r6,r3,r6
  808e08:	4888703a 	and	r4,r9,r2
  808e0c:	9818d07a 	srli	r12,r19,1
  808e10:	001b883a 	mov	r13,zero
  808e14:	03a00034 	movhi	r14,32768
  808e18:	3013883a 	mov	r9,r6
  808e1c:	3815883a 	mov	r10,r7
  808e20:	4091883a 	add	r8,r8,r2
  808e24:	20000226 	beq	r4,zero,808e30 <__muldf3+0x284>
  808e28:	5b64b03a 	or	r18,r11,r13
  808e2c:	63a6b03a 	or	r19,r12,r14
  808e30:	7abfed36 	bltu	r15,r10,808de8 <__muldf3+0x23c>
  808e34:	da001015 	stw	r8,64(sp)
  808e38:	00840034 	movhi	r2,4096
  808e3c:	10bfffc4 	addi	r2,r2,-1
  808e40:	12801436 	bltu	r2,r10,808e94 <__muldf3+0x2e8>
  808e44:	da001017 	ldw	r8,64(sp)
  808e48:	101f883a 	mov	r15,r2
  808e4c:	4a45883a 	add	r2,r9,r9
  808e50:	124d803a 	cmpltu	r6,r2,r9
  808e54:	5287883a 	add	r3,r10,r10
  808e58:	9497883a 	add	r11,r18,r18
  808e5c:	5c8f803a 	cmpltu	r7,r11,r18
  808e60:	9cd9883a 	add	r12,r19,r19
  808e64:	01000044 	movi	r4,1
  808e68:	30cd883a 	add	r6,r6,r3
  808e6c:	3b0f883a 	add	r7,r7,r12
  808e70:	423fffc4 	addi	r8,r8,-1
  808e74:	1013883a 	mov	r9,r2
  808e78:	3015883a 	mov	r10,r6
  808e7c:	111ab03a 	or	r13,r2,r4
  808e80:	98003016 	blt	r19,zero,808f44 <__muldf3+0x398>
  808e84:	5825883a 	mov	r18,r11
  808e88:	3827883a 	mov	r19,r7
  808e8c:	7abfef2e 	bgeu	r15,r10,808e4c <__muldf3+0x2a0>
  808e90:	da001015 	stw	r8,64(sp)
  808e94:	00803fc4 	movi	r2,255
  808e98:	488e703a 	and	r7,r9,r2
  808e9c:	00802004 	movi	r2,128
  808ea0:	0007883a 	mov	r3,zero
  808ea4:	0011883a 	mov	r8,zero
  808ea8:	38801826 	beq	r7,r2,808f0c <__muldf3+0x360>
  808eac:	008000c4 	movi	r2,3
  808eb0:	d9000e04 	addi	r4,sp,56
  808eb4:	da801215 	stw	r10,72(sp)
  808eb8:	d8800e15 	stw	r2,56(sp)
  808ebc:	da401115 	stw	r9,68(sp)
  808ec0:	003f6a06 	br	808c6c <__muldf3+0xc0>
  808ec4:	89802126 	beq	r17,r6,808f4c <__muldf3+0x3a0>
  808ec8:	0009883a 	mov	r4,zero
  808ecc:	5105883a 	add	r2,r10,r4
  808ed0:	128d803a 	cmpltu	r6,r2,r10
  808ed4:	5d07883a 	add	r3,r11,r20
  808ed8:	30cd883a 	add	r6,r6,r3
  808edc:	0021883a 	mov	r16,zero
  808ee0:	0023883a 	mov	r17,zero
  808ee4:	1025883a 	mov	r18,r2
  808ee8:	3027883a 	mov	r19,r6
  808eec:	32ff9e2e 	bgeu	r6,r11,808d68 <__muldf3+0x1bc>
  808ef0:	00800044 	movi	r2,1
  808ef4:	8089883a 	add	r4,r16,r2
  808ef8:	240d803a 	cmpltu	r6,r4,r16
  808efc:	344d883a 	add	r6,r6,r17
  808f00:	2021883a 	mov	r16,r4
  808f04:	3023883a 	mov	r17,r6
  808f08:	003f9806 	br	808d6c <__muldf3+0x1c0>
  808f0c:	403fe71e 	bne	r8,zero,808eac <__muldf3+0x300>
  808f10:	01004004 	movi	r4,256
  808f14:	4904703a 	and	r2,r9,r4
  808f18:	10c4b03a 	or	r2,r2,r3
  808f1c:	103fe31e 	bne	r2,zero,808eac <__muldf3+0x300>
  808f20:	94c4b03a 	or	r2,r18,r19
  808f24:	103fe126 	beq	r2,zero,808eac <__muldf3+0x300>
  808f28:	49c5883a 	add	r2,r9,r7
  808f2c:	1251803a 	cmpltu	r8,r2,r9
  808f30:	4291883a 	add	r8,r8,r10
  808f34:	013fc004 	movi	r4,-256
  808f38:	1112703a 	and	r9,r2,r4
  808f3c:	4015883a 	mov	r10,r8
  808f40:	003fda06 	br	808eac <__muldf3+0x300>
  808f44:	6813883a 	mov	r9,r13
  808f48:	003fce06 	br	808e84 <__muldf3+0x2d8>
  808f4c:	143f7c36 	bltu	r2,r16,808d40 <__muldf3+0x194>
  808f50:	003fdd06 	br	808ec8 <__muldf3+0x31c>
  808f54:	12bf852e 	bgeu	r2,r10,808d6c <__muldf3+0x1c0>
  808f58:	003fe506 	br	808ef0 <__muldf3+0x344>
  808f5c:	00800084 	movi	r2,2
  808f60:	20bf351e 	bne	r4,r2,808c38 <__muldf3+0x8c>
  808f64:	01002074 	movhi	r4,129
  808f68:	211bc804 	addi	r4,r4,28448
  808f6c:	003f3f06 	br	808c6c <__muldf3+0xc0>

00808f70 <__divdf3>:
  808f70:	deffed04 	addi	sp,sp,-76
  808f74:	dcc01115 	stw	r19,68(sp)
  808f78:	dcc00404 	addi	r19,sp,16
  808f7c:	2011883a 	mov	r8,r4
  808f80:	2813883a 	mov	r9,r5
  808f84:	dc000e15 	stw	r16,56(sp)
  808f88:	d809883a 	mov	r4,sp
  808f8c:	980b883a 	mov	r5,r19
  808f90:	dc000904 	addi	r16,sp,36
  808f94:	dfc01215 	stw	ra,72(sp)
  808f98:	da400115 	stw	r9,4(sp)
  808f9c:	d9c00315 	stw	r7,12(sp)
  808fa0:	da000015 	stw	r8,0(sp)
  808fa4:	d9800215 	stw	r6,8(sp)
  808fa8:	dc801015 	stw	r18,64(sp)
  808fac:	dc400f15 	stw	r17,60(sp)
  808fb0:	0809e100 	call	809e10 <__unpack_d>
  808fb4:	d9000204 	addi	r4,sp,8
  808fb8:	800b883a 	mov	r5,r16
  808fbc:	0809e100 	call	809e10 <__unpack_d>
  808fc0:	d9000417 	ldw	r4,16(sp)
  808fc4:	00800044 	movi	r2,1
  808fc8:	11000b2e 	bgeu	r2,r4,808ff8 <__divdf3+0x88>
  808fcc:	d9400917 	ldw	r5,36(sp)
  808fd0:	1140762e 	bgeu	r2,r5,8091ac <__divdf3+0x23c>
  808fd4:	d8800517 	ldw	r2,20(sp)
  808fd8:	d8c00a17 	ldw	r3,40(sp)
  808fdc:	01800104 	movi	r6,4
  808fe0:	10c4f03a 	xor	r2,r2,r3
  808fe4:	d8800515 	stw	r2,20(sp)
  808fe8:	21800226 	beq	r4,r6,808ff4 <__divdf3+0x84>
  808fec:	00800084 	movi	r2,2
  808ff0:	2080141e 	bne	r4,r2,809044 <__divdf3+0xd4>
  808ff4:	29000926 	beq	r5,r4,80901c <__divdf3+0xac>
  808ff8:	9809883a 	mov	r4,r19
  808ffc:	0809afc0 	call	809afc <__pack_d>
  809000:	dfc01217 	ldw	ra,72(sp)
  809004:	dcc01117 	ldw	r19,68(sp)
  809008:	dc801017 	ldw	r18,64(sp)
  80900c:	dc400f17 	ldw	r17,60(sp)
  809010:	dc000e17 	ldw	r16,56(sp)
  809014:	dec01304 	addi	sp,sp,76
  809018:	f800283a 	ret
  80901c:	01002074 	movhi	r4,129
  809020:	211bc804 	addi	r4,r4,28448
  809024:	0809afc0 	call	809afc <__pack_d>
  809028:	dfc01217 	ldw	ra,72(sp)
  80902c:	dcc01117 	ldw	r19,68(sp)
  809030:	dc801017 	ldw	r18,64(sp)
  809034:	dc400f17 	ldw	r17,60(sp)
  809038:	dc000e17 	ldw	r16,56(sp)
  80903c:	dec01304 	addi	sp,sp,76
  809040:	f800283a 	ret
  809044:	29805b26 	beq	r5,r6,8091b4 <__divdf3+0x244>
  809048:	28802d26 	beq	r5,r2,809100 <__divdf3+0x190>
  80904c:	d8c00617 	ldw	r3,24(sp)
  809050:	d8800b17 	ldw	r2,44(sp)
  809054:	d9c00817 	ldw	r7,32(sp)
  809058:	dc400d17 	ldw	r17,52(sp)
  80905c:	188bc83a 	sub	r5,r3,r2
  809060:	d9800717 	ldw	r6,28(sp)
  809064:	dc000c17 	ldw	r16,48(sp)
  809068:	d9400615 	stw	r5,24(sp)
  80906c:	3c403836 	bltu	r7,r17,809150 <__divdf3+0x1e0>
  809070:	89c03626 	beq	r17,r7,80914c <__divdf3+0x1dc>
  809074:	0015883a 	mov	r10,zero
  809078:	001d883a 	mov	r14,zero
  80907c:	02c40034 	movhi	r11,4096
  809080:	001f883a 	mov	r15,zero
  809084:	003f883a 	mov	ra,zero
  809088:	04800f44 	movi	r18,61
  80908c:	00000f06 	br	8090cc <__divdf3+0x15c>
  809090:	601d883a 	mov	r14,r12
  809094:	681f883a 	mov	r15,r13
  809098:	400d883a 	mov	r6,r8
  80909c:	100f883a 	mov	r7,r2
  8090a0:	3191883a 	add	r8,r6,r6
  8090a4:	5808d07a 	srli	r4,r11,1
  8090a8:	4185803a 	cmpltu	r2,r8,r6
  8090ac:	39d3883a 	add	r9,r7,r7
  8090b0:	28c6b03a 	or	r3,r5,r3
  8090b4:	1245883a 	add	r2,r2,r9
  8090b8:	1815883a 	mov	r10,r3
  8090bc:	2017883a 	mov	r11,r4
  8090c0:	400d883a 	mov	r6,r8
  8090c4:	100f883a 	mov	r7,r2
  8090c8:	fc801726 	beq	ra,r18,809128 <__divdf3+0x1b8>
  8090cc:	580a97fa 	slli	r5,r11,31
  8090d0:	5006d07a 	srli	r3,r10,1
  8090d4:	ffc00044 	addi	ra,ra,1
  8090d8:	3c7ff136 	bltu	r7,r17,8090a0 <__divdf3+0x130>
  8090dc:	3411c83a 	sub	r8,r6,r16
  8090e0:	3205803a 	cmpltu	r2,r6,r8
  8090e4:	3c53c83a 	sub	r9,r7,r17
  8090e8:	7298b03a 	or	r12,r14,r10
  8090ec:	7adab03a 	or	r13,r15,r11
  8090f0:	4885c83a 	sub	r2,r9,r2
  8090f4:	89ffe61e 	bne	r17,r7,809090 <__divdf3+0x120>
  8090f8:	343fe936 	bltu	r6,r16,8090a0 <__divdf3+0x130>
  8090fc:	003fe406 	br	809090 <__divdf3+0x120>
  809100:	9809883a 	mov	r4,r19
  809104:	d9800415 	stw	r6,16(sp)
  809108:	0809afc0 	call	809afc <__pack_d>
  80910c:	dfc01217 	ldw	ra,72(sp)
  809110:	dcc01117 	ldw	r19,68(sp)
  809114:	dc801017 	ldw	r18,64(sp)
  809118:	dc400f17 	ldw	r17,60(sp)
  80911c:	dc000e17 	ldw	r16,56(sp)
  809120:	dec01304 	addi	sp,sp,76
  809124:	f800283a 	ret
  809128:	00803fc4 	movi	r2,255
  80912c:	7090703a 	and	r8,r14,r2
  809130:	00802004 	movi	r2,128
  809134:	0007883a 	mov	r3,zero
  809138:	0013883a 	mov	r9,zero
  80913c:	40800d26 	beq	r8,r2,809174 <__divdf3+0x204>
  809140:	dbc00815 	stw	r15,32(sp)
  809144:	db800715 	stw	r14,28(sp)
  809148:	003fab06 	br	808ff8 <__divdf3+0x88>
  80914c:	343fc92e 	bgeu	r6,r16,809074 <__divdf3+0x104>
  809150:	3185883a 	add	r2,r6,r6
  809154:	1189803a 	cmpltu	r4,r2,r6
  809158:	39c7883a 	add	r3,r7,r7
  80915c:	20c9883a 	add	r4,r4,r3
  809160:	297fffc4 	addi	r5,r5,-1
  809164:	100d883a 	mov	r6,r2
  809168:	200f883a 	mov	r7,r4
  80916c:	d9400615 	stw	r5,24(sp)
  809170:	003fc006 	br	809074 <__divdf3+0x104>
  809174:	483ff21e 	bne	r9,zero,809140 <__divdf3+0x1d0>
  809178:	01004004 	movi	r4,256
  80917c:	7104703a 	and	r2,r14,r4
  809180:	10c4b03a 	or	r2,r2,r3
  809184:	103fee1e 	bne	r2,zero,809140 <__divdf3+0x1d0>
  809188:	31c4b03a 	or	r2,r6,r7
  80918c:	103fec26 	beq	r2,zero,809140 <__divdf3+0x1d0>
  809190:	7205883a 	add	r2,r14,r8
  809194:	1391803a 	cmpltu	r8,r2,r14
  809198:	43d1883a 	add	r8,r8,r15
  80919c:	013fc004 	movi	r4,-256
  8091a0:	111c703a 	and	r14,r2,r4
  8091a4:	401f883a 	mov	r15,r8
  8091a8:	003fe506 	br	809140 <__divdf3+0x1d0>
  8091ac:	8009883a 	mov	r4,r16
  8091b0:	003f9206 	br	808ffc <__divdf3+0x8c>
  8091b4:	9809883a 	mov	r4,r19
  8091b8:	d8000715 	stw	zero,28(sp)
  8091bc:	d8000815 	stw	zero,32(sp)
  8091c0:	d8000615 	stw	zero,24(sp)
  8091c4:	003f8d06 	br	808ffc <__divdf3+0x8c>

008091c8 <__eqdf2>:
  8091c8:	deffef04 	addi	sp,sp,-68
  8091cc:	dc400f15 	stw	r17,60(sp)
  8091d0:	dc400404 	addi	r17,sp,16
  8091d4:	2005883a 	mov	r2,r4
  8091d8:	2807883a 	mov	r3,r5
  8091dc:	dc000e15 	stw	r16,56(sp)
  8091e0:	d809883a 	mov	r4,sp
  8091e4:	880b883a 	mov	r5,r17
  8091e8:	dc000904 	addi	r16,sp,36
  8091ec:	d8c00115 	stw	r3,4(sp)
  8091f0:	d8800015 	stw	r2,0(sp)
  8091f4:	d9800215 	stw	r6,8(sp)
  8091f8:	dfc01015 	stw	ra,64(sp)
  8091fc:	d9c00315 	stw	r7,12(sp)
  809200:	0809e100 	call	809e10 <__unpack_d>
  809204:	d9000204 	addi	r4,sp,8
  809208:	800b883a 	mov	r5,r16
  80920c:	0809e100 	call	809e10 <__unpack_d>
  809210:	d8800417 	ldw	r2,16(sp)
  809214:	00c00044 	movi	r3,1
  809218:	180d883a 	mov	r6,r3
  80921c:	1880062e 	bgeu	r3,r2,809238 <__eqdf2+0x70>
  809220:	d8800917 	ldw	r2,36(sp)
  809224:	8809883a 	mov	r4,r17
  809228:	800b883a 	mov	r5,r16
  80922c:	1880022e 	bgeu	r3,r2,809238 <__eqdf2+0x70>
  809230:	0809f480 	call	809f48 <__fpcmp_parts_d>
  809234:	100d883a 	mov	r6,r2
  809238:	3005883a 	mov	r2,r6
  80923c:	dfc01017 	ldw	ra,64(sp)
  809240:	dc400f17 	ldw	r17,60(sp)
  809244:	dc000e17 	ldw	r16,56(sp)
  809248:	dec01104 	addi	sp,sp,68
  80924c:	f800283a 	ret

00809250 <__nedf2>:
  809250:	deffef04 	addi	sp,sp,-68
  809254:	dc400f15 	stw	r17,60(sp)
  809258:	dc400404 	addi	r17,sp,16
  80925c:	2005883a 	mov	r2,r4
  809260:	2807883a 	mov	r3,r5
  809264:	dc000e15 	stw	r16,56(sp)
  809268:	d809883a 	mov	r4,sp
  80926c:	880b883a 	mov	r5,r17
  809270:	dc000904 	addi	r16,sp,36
  809274:	d8c00115 	stw	r3,4(sp)
  809278:	d8800015 	stw	r2,0(sp)
  80927c:	d9800215 	stw	r6,8(sp)
  809280:	dfc01015 	stw	ra,64(sp)
  809284:	d9c00315 	stw	r7,12(sp)
  809288:	0809e100 	call	809e10 <__unpack_d>
  80928c:	d9000204 	addi	r4,sp,8
  809290:	800b883a 	mov	r5,r16
  809294:	0809e100 	call	809e10 <__unpack_d>
  809298:	d8800417 	ldw	r2,16(sp)
  80929c:	00c00044 	movi	r3,1
  8092a0:	180d883a 	mov	r6,r3
  8092a4:	1880062e 	bgeu	r3,r2,8092c0 <__nedf2+0x70>
  8092a8:	d8800917 	ldw	r2,36(sp)
  8092ac:	8809883a 	mov	r4,r17
  8092b0:	800b883a 	mov	r5,r16
  8092b4:	1880022e 	bgeu	r3,r2,8092c0 <__nedf2+0x70>
  8092b8:	0809f480 	call	809f48 <__fpcmp_parts_d>
  8092bc:	100d883a 	mov	r6,r2
  8092c0:	3005883a 	mov	r2,r6
  8092c4:	dfc01017 	ldw	ra,64(sp)
  8092c8:	dc400f17 	ldw	r17,60(sp)
  8092cc:	dc000e17 	ldw	r16,56(sp)
  8092d0:	dec01104 	addi	sp,sp,68
  8092d4:	f800283a 	ret

008092d8 <__gtdf2>:
  8092d8:	deffef04 	addi	sp,sp,-68
  8092dc:	dc400f15 	stw	r17,60(sp)
  8092e0:	dc400404 	addi	r17,sp,16
  8092e4:	2005883a 	mov	r2,r4
  8092e8:	2807883a 	mov	r3,r5
  8092ec:	dc000e15 	stw	r16,56(sp)
  8092f0:	d809883a 	mov	r4,sp
  8092f4:	880b883a 	mov	r5,r17
  8092f8:	dc000904 	addi	r16,sp,36
  8092fc:	d8c00115 	stw	r3,4(sp)
  809300:	d8800015 	stw	r2,0(sp)
  809304:	d9800215 	stw	r6,8(sp)
  809308:	dfc01015 	stw	ra,64(sp)
  80930c:	d9c00315 	stw	r7,12(sp)
  809310:	0809e100 	call	809e10 <__unpack_d>
  809314:	d9000204 	addi	r4,sp,8
  809318:	800b883a 	mov	r5,r16
  80931c:	0809e100 	call	809e10 <__unpack_d>
  809320:	d8800417 	ldw	r2,16(sp)
  809324:	00c00044 	movi	r3,1
  809328:	01bfffc4 	movi	r6,-1
  80932c:	1880062e 	bgeu	r3,r2,809348 <__gtdf2+0x70>
  809330:	d8800917 	ldw	r2,36(sp)
  809334:	8809883a 	mov	r4,r17
  809338:	800b883a 	mov	r5,r16
  80933c:	1880022e 	bgeu	r3,r2,809348 <__gtdf2+0x70>
  809340:	0809f480 	call	809f48 <__fpcmp_parts_d>
  809344:	100d883a 	mov	r6,r2
  809348:	3005883a 	mov	r2,r6
  80934c:	dfc01017 	ldw	ra,64(sp)
  809350:	dc400f17 	ldw	r17,60(sp)
  809354:	dc000e17 	ldw	r16,56(sp)
  809358:	dec01104 	addi	sp,sp,68
  80935c:	f800283a 	ret

00809360 <__gedf2>:
  809360:	deffef04 	addi	sp,sp,-68
  809364:	dc400f15 	stw	r17,60(sp)
  809368:	dc400404 	addi	r17,sp,16
  80936c:	2005883a 	mov	r2,r4
  809370:	2807883a 	mov	r3,r5
  809374:	dc000e15 	stw	r16,56(sp)
  809378:	d809883a 	mov	r4,sp
  80937c:	880b883a 	mov	r5,r17
  809380:	dc000904 	addi	r16,sp,36
  809384:	d8c00115 	stw	r3,4(sp)
  809388:	d8800015 	stw	r2,0(sp)
  80938c:	d9800215 	stw	r6,8(sp)
  809390:	dfc01015 	stw	ra,64(sp)
  809394:	d9c00315 	stw	r7,12(sp)
  809398:	0809e100 	call	809e10 <__unpack_d>
  80939c:	d9000204 	addi	r4,sp,8
  8093a0:	800b883a 	mov	r5,r16
  8093a4:	0809e100 	call	809e10 <__unpack_d>
  8093a8:	d8800417 	ldw	r2,16(sp)
  8093ac:	00c00044 	movi	r3,1
  8093b0:	01bfffc4 	movi	r6,-1
  8093b4:	1880062e 	bgeu	r3,r2,8093d0 <__gedf2+0x70>
  8093b8:	d8800917 	ldw	r2,36(sp)
  8093bc:	8809883a 	mov	r4,r17
  8093c0:	800b883a 	mov	r5,r16
  8093c4:	1880022e 	bgeu	r3,r2,8093d0 <__gedf2+0x70>
  8093c8:	0809f480 	call	809f48 <__fpcmp_parts_d>
  8093cc:	100d883a 	mov	r6,r2
  8093d0:	3005883a 	mov	r2,r6
  8093d4:	dfc01017 	ldw	ra,64(sp)
  8093d8:	dc400f17 	ldw	r17,60(sp)
  8093dc:	dc000e17 	ldw	r16,56(sp)
  8093e0:	dec01104 	addi	sp,sp,68
  8093e4:	f800283a 	ret

008093e8 <__ltdf2>:
  8093e8:	deffef04 	addi	sp,sp,-68
  8093ec:	dc400f15 	stw	r17,60(sp)
  8093f0:	dc400404 	addi	r17,sp,16
  8093f4:	2005883a 	mov	r2,r4
  8093f8:	2807883a 	mov	r3,r5
  8093fc:	dc000e15 	stw	r16,56(sp)
  809400:	d809883a 	mov	r4,sp
  809404:	880b883a 	mov	r5,r17
  809408:	dc000904 	addi	r16,sp,36
  80940c:	d8c00115 	stw	r3,4(sp)
  809410:	d8800015 	stw	r2,0(sp)
  809414:	d9800215 	stw	r6,8(sp)
  809418:	dfc01015 	stw	ra,64(sp)
  80941c:	d9c00315 	stw	r7,12(sp)
  809420:	0809e100 	call	809e10 <__unpack_d>
  809424:	d9000204 	addi	r4,sp,8
  809428:	800b883a 	mov	r5,r16
  80942c:	0809e100 	call	809e10 <__unpack_d>
  809430:	d8800417 	ldw	r2,16(sp)
  809434:	00c00044 	movi	r3,1
  809438:	180d883a 	mov	r6,r3
  80943c:	1880062e 	bgeu	r3,r2,809458 <__ltdf2+0x70>
  809440:	d8800917 	ldw	r2,36(sp)
  809444:	8809883a 	mov	r4,r17
  809448:	800b883a 	mov	r5,r16
  80944c:	1880022e 	bgeu	r3,r2,809458 <__ltdf2+0x70>
  809450:	0809f480 	call	809f48 <__fpcmp_parts_d>
  809454:	100d883a 	mov	r6,r2
  809458:	3005883a 	mov	r2,r6
  80945c:	dfc01017 	ldw	ra,64(sp)
  809460:	dc400f17 	ldw	r17,60(sp)
  809464:	dc000e17 	ldw	r16,56(sp)
  809468:	dec01104 	addi	sp,sp,68
  80946c:	f800283a 	ret

00809470 <__floatsidf>:
  809470:	2006d7fa 	srli	r3,r4,31
  809474:	defff604 	addi	sp,sp,-40
  809478:	008000c4 	movi	r2,3
  80947c:	dfc00915 	stw	ra,36(sp)
  809480:	dcc00815 	stw	r19,32(sp)
  809484:	dc800715 	stw	r18,28(sp)
  809488:	dc400615 	stw	r17,24(sp)
  80948c:	dc000515 	stw	r16,20(sp)
  809490:	d8800015 	stw	r2,0(sp)
  809494:	d8c00115 	stw	r3,4(sp)
  809498:	20000f1e 	bne	r4,zero,8094d8 <__floatsidf+0x68>
  80949c:	00800084 	movi	r2,2
  8094a0:	d8800015 	stw	r2,0(sp)
  8094a4:	d809883a 	mov	r4,sp
  8094a8:	0809afc0 	call	809afc <__pack_d>
  8094ac:	1009883a 	mov	r4,r2
  8094b0:	180b883a 	mov	r5,r3
  8094b4:	2005883a 	mov	r2,r4
  8094b8:	2807883a 	mov	r3,r5
  8094bc:	dfc00917 	ldw	ra,36(sp)
  8094c0:	dcc00817 	ldw	r19,32(sp)
  8094c4:	dc800717 	ldw	r18,28(sp)
  8094c8:	dc400617 	ldw	r17,24(sp)
  8094cc:	dc000517 	ldw	r16,20(sp)
  8094d0:	dec00a04 	addi	sp,sp,40
  8094d4:	f800283a 	ret
  8094d8:	00800f04 	movi	r2,60
  8094dc:	1807003a 	cmpeq	r3,r3,zero
  8094e0:	d8800215 	stw	r2,8(sp)
  8094e4:	18001126 	beq	r3,zero,80952c <__floatsidf+0xbc>
  8094e8:	0027883a 	mov	r19,zero
  8094ec:	2025883a 	mov	r18,r4
  8094f0:	d9000315 	stw	r4,12(sp)
  8094f4:	dcc00415 	stw	r19,16(sp)
  8094f8:	0809a7c0 	call	809a7c <__clzsi2>
  8094fc:	11000744 	addi	r4,r2,29
  809500:	013fe80e 	bge	zero,r4,8094a4 <__floatsidf+0x34>
  809504:	10bfff44 	addi	r2,r2,-3
  809508:	10000c16 	blt	r2,zero,80953c <__floatsidf+0xcc>
  80950c:	90a2983a 	sll	r17,r18,r2
  809510:	0021883a 	mov	r16,zero
  809514:	d8800217 	ldw	r2,8(sp)
  809518:	dc400415 	stw	r17,16(sp)
  80951c:	dc000315 	stw	r16,12(sp)
  809520:	1105c83a 	sub	r2,r2,r4
  809524:	d8800215 	stw	r2,8(sp)
  809528:	003fde06 	br	8094a4 <__floatsidf+0x34>
  80952c:	00a00034 	movhi	r2,32768
  809530:	20800a26 	beq	r4,r2,80955c <__floatsidf+0xec>
  809534:	0109c83a 	sub	r4,zero,r4
  809538:	003feb06 	br	8094e8 <__floatsidf+0x78>
  80953c:	9006d07a 	srli	r3,r18,1
  809540:	008007c4 	movi	r2,31
  809544:	1105c83a 	sub	r2,r2,r4
  809548:	1886d83a 	srl	r3,r3,r2
  80954c:	9922983a 	sll	r17,r19,r4
  809550:	9120983a 	sll	r16,r18,r4
  809554:	1c62b03a 	or	r17,r3,r17
  809558:	003fee06 	br	809514 <__floatsidf+0xa4>
  80955c:	0009883a 	mov	r4,zero
  809560:	01707834 	movhi	r5,49632
  809564:	003fd306 	br	8094b4 <__floatsidf+0x44>

00809568 <__fixdfsi>:
  809568:	defff804 	addi	sp,sp,-32
  80956c:	2005883a 	mov	r2,r4
  809570:	2807883a 	mov	r3,r5
  809574:	d809883a 	mov	r4,sp
  809578:	d9400204 	addi	r5,sp,8
  80957c:	d8c00115 	stw	r3,4(sp)
  809580:	d8800015 	stw	r2,0(sp)
  809584:	dfc00715 	stw	ra,28(sp)
  809588:	0809e100 	call	809e10 <__unpack_d>
  80958c:	d8c00217 	ldw	r3,8(sp)
  809590:	00800084 	movi	r2,2
  809594:	1880051e 	bne	r3,r2,8095ac <__fixdfsi+0x44>
  809598:	0007883a 	mov	r3,zero
  80959c:	1805883a 	mov	r2,r3
  8095a0:	dfc00717 	ldw	ra,28(sp)
  8095a4:	dec00804 	addi	sp,sp,32
  8095a8:	f800283a 	ret
  8095ac:	00800044 	movi	r2,1
  8095b0:	10fff92e 	bgeu	r2,r3,809598 <__fixdfsi+0x30>
  8095b4:	00800104 	movi	r2,4
  8095b8:	18800426 	beq	r3,r2,8095cc <__fixdfsi+0x64>
  8095bc:	d8c00417 	ldw	r3,16(sp)
  8095c0:	183ff516 	blt	r3,zero,809598 <__fixdfsi+0x30>
  8095c4:	00800784 	movi	r2,30
  8095c8:	10c0080e 	bge	r2,r3,8095ec <__fixdfsi+0x84>
  8095cc:	d8800317 	ldw	r2,12(sp)
  8095d0:	1000121e 	bne	r2,zero,80961c <__fixdfsi+0xb4>
  8095d4:	00e00034 	movhi	r3,32768
  8095d8:	18ffffc4 	addi	r3,r3,-1
  8095dc:	1805883a 	mov	r2,r3
  8095e0:	dfc00717 	ldw	ra,28(sp)
  8095e4:	dec00804 	addi	sp,sp,32
  8095e8:	f800283a 	ret
  8095ec:	00800f04 	movi	r2,60
  8095f0:	10d1c83a 	sub	r8,r2,r3
  8095f4:	40bff804 	addi	r2,r8,-32
  8095f8:	d9800517 	ldw	r6,20(sp)
  8095fc:	d9c00617 	ldw	r7,24(sp)
  809600:	10000816 	blt	r2,zero,809624 <__fixdfsi+0xbc>
  809604:	3888d83a 	srl	r4,r7,r2
  809608:	d8800317 	ldw	r2,12(sp)
  80960c:	2007883a 	mov	r3,r4
  809610:	103fe226 	beq	r2,zero,80959c <__fixdfsi+0x34>
  809614:	0107c83a 	sub	r3,zero,r4
  809618:	003fe006 	br	80959c <__fixdfsi+0x34>
  80961c:	00e00034 	movhi	r3,32768
  809620:	003fde06 	br	80959c <__fixdfsi+0x34>
  809624:	39c7883a 	add	r3,r7,r7
  809628:	008007c4 	movi	r2,31
  80962c:	1205c83a 	sub	r2,r2,r8
  809630:	1886983a 	sll	r3,r3,r2
  809634:	3208d83a 	srl	r4,r6,r8
  809638:	1908b03a 	or	r4,r3,r4
  80963c:	003ff206 	br	809608 <__fixdfsi+0xa0>

00809640 <__floatunsidf>:
  809640:	defff204 	addi	sp,sp,-56
  809644:	dfc00d15 	stw	ra,52(sp)
  809648:	ddc00c15 	stw	r23,48(sp)
  80964c:	dd800b15 	stw	r22,44(sp)
  809650:	dd400a15 	stw	r21,40(sp)
  809654:	dd000915 	stw	r20,36(sp)
  809658:	dcc00815 	stw	r19,32(sp)
  80965c:	dc800715 	stw	r18,28(sp)
  809660:	dc400615 	stw	r17,24(sp)
  809664:	dc000515 	stw	r16,20(sp)
  809668:	d8000115 	stw	zero,4(sp)
  80966c:	20000f1e 	bne	r4,zero,8096ac <__floatunsidf+0x6c>
  809670:	00800084 	movi	r2,2
  809674:	d8800015 	stw	r2,0(sp)
  809678:	d809883a 	mov	r4,sp
  80967c:	0809afc0 	call	809afc <__pack_d>
  809680:	dfc00d17 	ldw	ra,52(sp)
  809684:	ddc00c17 	ldw	r23,48(sp)
  809688:	dd800b17 	ldw	r22,44(sp)
  80968c:	dd400a17 	ldw	r21,40(sp)
  809690:	dd000917 	ldw	r20,36(sp)
  809694:	dcc00817 	ldw	r19,32(sp)
  809698:	dc800717 	ldw	r18,28(sp)
  80969c:	dc400617 	ldw	r17,24(sp)
  8096a0:	dc000517 	ldw	r16,20(sp)
  8096a4:	dec00e04 	addi	sp,sp,56
  8096a8:	f800283a 	ret
  8096ac:	008000c4 	movi	r2,3
  8096b0:	00c00f04 	movi	r3,60
  8096b4:	002f883a 	mov	r23,zero
  8096b8:	202d883a 	mov	r22,r4
  8096bc:	d8800015 	stw	r2,0(sp)
  8096c0:	d8c00215 	stw	r3,8(sp)
  8096c4:	d9000315 	stw	r4,12(sp)
  8096c8:	ddc00415 	stw	r23,16(sp)
  8096cc:	0809a7c0 	call	809a7c <__clzsi2>
  8096d0:	12400744 	addi	r9,r2,29
  8096d4:	48000b16 	blt	r9,zero,809704 <__floatunsidf+0xc4>
  8096d8:	483fe726 	beq	r9,zero,809678 <__floatunsidf+0x38>
  8096dc:	10bfff44 	addi	r2,r2,-3
  8096e0:	10002e16 	blt	r2,zero,80979c <__floatunsidf+0x15c>
  8096e4:	b0a2983a 	sll	r17,r22,r2
  8096e8:	0021883a 	mov	r16,zero
  8096ec:	d8800217 	ldw	r2,8(sp)
  8096f0:	dc400415 	stw	r17,16(sp)
  8096f4:	dc000315 	stw	r16,12(sp)
  8096f8:	1245c83a 	sub	r2,r2,r9
  8096fc:	d8800215 	stw	r2,8(sp)
  809700:	003fdd06 	br	809678 <__floatunsidf+0x38>
  809704:	0255c83a 	sub	r10,zero,r9
  809708:	51bff804 	addi	r6,r10,-32
  80970c:	30001b16 	blt	r6,zero,80977c <__floatunsidf+0x13c>
  809710:	b9a8d83a 	srl	r20,r23,r6
  809714:	002b883a 	mov	r21,zero
  809718:	000f883a 	mov	r7,zero
  80971c:	01000044 	movi	r4,1
  809720:	0011883a 	mov	r8,zero
  809724:	30002516 	blt	r6,zero,8097bc <__floatunsidf+0x17c>
  809728:	21a6983a 	sll	r19,r4,r6
  80972c:	0025883a 	mov	r18,zero
  809730:	00bfffc4 	movi	r2,-1
  809734:	9089883a 	add	r4,r18,r2
  809738:	988b883a 	add	r5,r19,r2
  80973c:	248d803a 	cmpltu	r6,r4,r18
  809740:	314b883a 	add	r5,r6,r5
  809744:	b104703a 	and	r2,r22,r4
  809748:	b946703a 	and	r3,r23,r5
  80974c:	10c4b03a 	or	r2,r2,r3
  809750:	10000226 	beq	r2,zero,80975c <__floatunsidf+0x11c>
  809754:	01c00044 	movi	r7,1
  809758:	0011883a 	mov	r8,zero
  80975c:	d9000217 	ldw	r4,8(sp)
  809760:	a1c4b03a 	or	r2,r20,r7
  809764:	aa06b03a 	or	r3,r21,r8
  809768:	2249c83a 	sub	r4,r4,r9
  80976c:	d8c00415 	stw	r3,16(sp)
  809770:	d9000215 	stw	r4,8(sp)
  809774:	d8800315 	stw	r2,12(sp)
  809778:	003fbf06 	br	809678 <__floatunsidf+0x38>
  80977c:	bdc7883a 	add	r3,r23,r23
  809780:	008007c4 	movi	r2,31
  809784:	1285c83a 	sub	r2,r2,r10
  809788:	1886983a 	sll	r3,r3,r2
  80978c:	b2a8d83a 	srl	r20,r22,r10
  809790:	baaad83a 	srl	r21,r23,r10
  809794:	1d28b03a 	or	r20,r3,r20
  809798:	003fdf06 	br	809718 <__floatunsidf+0xd8>
  80979c:	b006d07a 	srli	r3,r22,1
  8097a0:	008007c4 	movi	r2,31
  8097a4:	1245c83a 	sub	r2,r2,r9
  8097a8:	1886d83a 	srl	r3,r3,r2
  8097ac:	ba62983a 	sll	r17,r23,r9
  8097b0:	b260983a 	sll	r16,r22,r9
  8097b4:	1c62b03a 	or	r17,r3,r17
  8097b8:	003fcc06 	br	8096ec <__floatunsidf+0xac>
  8097bc:	2006d07a 	srli	r3,r4,1
  8097c0:	008007c4 	movi	r2,31
  8097c4:	1285c83a 	sub	r2,r2,r10
  8097c8:	18a6d83a 	srl	r19,r3,r2
  8097cc:	22a4983a 	sll	r18,r4,r10
  8097d0:	003fd706 	br	809730 <__floatunsidf+0xf0>

008097d4 <udivmodsi4>:
  8097d4:	29001b2e 	bgeu	r5,r4,809844 <udivmodsi4+0x70>
  8097d8:	28001a16 	blt	r5,zero,809844 <udivmodsi4+0x70>
  8097dc:	00800044 	movi	r2,1
  8097e0:	0007883a 	mov	r3,zero
  8097e4:	01c007c4 	movi	r7,31
  8097e8:	00000306 	br	8097f8 <udivmodsi4+0x24>
  8097ec:	19c01326 	beq	r3,r7,80983c <udivmodsi4+0x68>
  8097f0:	18c00044 	addi	r3,r3,1
  8097f4:	28000416 	blt	r5,zero,809808 <udivmodsi4+0x34>
  8097f8:	294b883a 	add	r5,r5,r5
  8097fc:	1085883a 	add	r2,r2,r2
  809800:	293ffa36 	bltu	r5,r4,8097ec <udivmodsi4+0x18>
  809804:	10000d26 	beq	r2,zero,80983c <udivmodsi4+0x68>
  809808:	0007883a 	mov	r3,zero
  80980c:	21400236 	bltu	r4,r5,809818 <udivmodsi4+0x44>
  809810:	2149c83a 	sub	r4,r4,r5
  809814:	1886b03a 	or	r3,r3,r2
  809818:	1004d07a 	srli	r2,r2,1
  80981c:	280ad07a 	srli	r5,r5,1
  809820:	103ffa1e 	bne	r2,zero,80980c <udivmodsi4+0x38>
  809824:	30000226 	beq	r6,zero,809830 <udivmodsi4+0x5c>
  809828:	2005883a 	mov	r2,r4
  80982c:	f800283a 	ret
  809830:	1809883a 	mov	r4,r3
  809834:	2005883a 	mov	r2,r4
  809838:	f800283a 	ret
  80983c:	0007883a 	mov	r3,zero
  809840:	003ff806 	br	809824 <udivmodsi4+0x50>
  809844:	00800044 	movi	r2,1
  809848:	0007883a 	mov	r3,zero
  80984c:	003fef06 	br	80980c <udivmodsi4+0x38>

00809850 <__divsi3>:
  809850:	defffe04 	addi	sp,sp,-8
  809854:	dc000015 	stw	r16,0(sp)
  809858:	dfc00115 	stw	ra,4(sp)
  80985c:	0021883a 	mov	r16,zero
  809860:	20000c16 	blt	r4,zero,809894 <__divsi3+0x44>
  809864:	000d883a 	mov	r6,zero
  809868:	28000e16 	blt	r5,zero,8098a4 <__divsi3+0x54>
  80986c:	08097d40 	call	8097d4 <udivmodsi4>
  809870:	1007883a 	mov	r3,r2
  809874:	8005003a 	cmpeq	r2,r16,zero
  809878:	1000011e 	bne	r2,zero,809880 <__divsi3+0x30>
  80987c:	00c7c83a 	sub	r3,zero,r3
  809880:	1805883a 	mov	r2,r3
  809884:	dfc00117 	ldw	ra,4(sp)
  809888:	dc000017 	ldw	r16,0(sp)
  80988c:	dec00204 	addi	sp,sp,8
  809890:	f800283a 	ret
  809894:	0109c83a 	sub	r4,zero,r4
  809898:	04000044 	movi	r16,1
  80989c:	000d883a 	mov	r6,zero
  8098a0:	283ff20e 	bge	r5,zero,80986c <__divsi3+0x1c>
  8098a4:	014bc83a 	sub	r5,zero,r5
  8098a8:	8021003a 	cmpeq	r16,r16,zero
  8098ac:	003fef06 	br	80986c <__divsi3+0x1c>

008098b0 <__modsi3>:
  8098b0:	deffff04 	addi	sp,sp,-4
  8098b4:	dfc00015 	stw	ra,0(sp)
  8098b8:	01800044 	movi	r6,1
  8098bc:	2807883a 	mov	r3,r5
  8098c0:	20000416 	blt	r4,zero,8098d4 <__modsi3+0x24>
  8098c4:	28000c16 	blt	r5,zero,8098f8 <__modsi3+0x48>
  8098c8:	dfc00017 	ldw	ra,0(sp)
  8098cc:	dec00104 	addi	sp,sp,4
  8098d0:	08097d41 	jmpi	8097d4 <udivmodsi4>
  8098d4:	0109c83a 	sub	r4,zero,r4
  8098d8:	28000b16 	blt	r5,zero,809908 <__modsi3+0x58>
  8098dc:	180b883a 	mov	r5,r3
  8098e0:	01800044 	movi	r6,1
  8098e4:	08097d40 	call	8097d4 <udivmodsi4>
  8098e8:	0085c83a 	sub	r2,zero,r2
  8098ec:	dfc00017 	ldw	ra,0(sp)
  8098f0:	dec00104 	addi	sp,sp,4
  8098f4:	f800283a 	ret
  8098f8:	014bc83a 	sub	r5,zero,r5
  8098fc:	dfc00017 	ldw	ra,0(sp)
  809900:	dec00104 	addi	sp,sp,4
  809904:	08097d41 	jmpi	8097d4 <udivmodsi4>
  809908:	0147c83a 	sub	r3,zero,r5
  80990c:	003ff306 	br	8098dc <__modsi3+0x2c>

00809910 <__udivsi3>:
  809910:	000d883a 	mov	r6,zero
  809914:	08097d41 	jmpi	8097d4 <udivmodsi4>

00809918 <__umodsi3>:
  809918:	01800044 	movi	r6,1
  80991c:	08097d41 	jmpi	8097d4 <udivmodsi4>

00809920 <__mulsi3>:
  809920:	20000a26 	beq	r4,zero,80994c <__mulsi3+0x2c>
  809924:	0007883a 	mov	r3,zero
  809928:	2080004c 	andi	r2,r4,1
  80992c:	1005003a 	cmpeq	r2,r2,zero
  809930:	2008d07a 	srli	r4,r4,1
  809934:	1000011e 	bne	r2,zero,80993c <__mulsi3+0x1c>
  809938:	1947883a 	add	r3,r3,r5
  80993c:	294b883a 	add	r5,r5,r5
  809940:	203ff91e 	bne	r4,zero,809928 <__mulsi3+0x8>
  809944:	1805883a 	mov	r2,r3
  809948:	f800283a 	ret
  80994c:	0007883a 	mov	r3,zero
  809950:	1805883a 	mov	r2,r3
  809954:	f800283a 	ret

00809958 <__muldi3>:
  809958:	defff204 	addi	sp,sp,-56
  80995c:	df000c15 	stw	fp,48(sp)
  809960:	3038d43a 	srli	fp,r6,16
  809964:	dd000815 	stw	r20,32(sp)
  809968:	dc400515 	stw	r17,20(sp)
  80996c:	2028d43a 	srli	r20,r4,16
  809970:	247fffcc 	andi	r17,r4,65535
  809974:	dc000415 	stw	r16,16(sp)
  809978:	343fffcc 	andi	r16,r6,65535
  80997c:	dcc00715 	stw	r19,28(sp)
  809980:	d9000015 	stw	r4,0(sp)
  809984:	2827883a 	mov	r19,r5
  809988:	8809883a 	mov	r4,r17
  80998c:	d9400115 	stw	r5,4(sp)
  809990:	800b883a 	mov	r5,r16
  809994:	d9800215 	stw	r6,8(sp)
  809998:	dfc00d15 	stw	ra,52(sp)
  80999c:	d9c00315 	stw	r7,12(sp)
  8099a0:	dd800a15 	stw	r22,40(sp)
  8099a4:	dd400915 	stw	r21,36(sp)
  8099a8:	302d883a 	mov	r22,r6
  8099ac:	ddc00b15 	stw	r23,44(sp)
  8099b0:	dc800615 	stw	r18,24(sp)
  8099b4:	08099200 	call	809920 <__mulsi3>
  8099b8:	8809883a 	mov	r4,r17
  8099bc:	e00b883a 	mov	r5,fp
  8099c0:	102b883a 	mov	r21,r2
  8099c4:	08099200 	call	809920 <__mulsi3>
  8099c8:	800b883a 	mov	r5,r16
  8099cc:	a009883a 	mov	r4,r20
  8099d0:	1023883a 	mov	r17,r2
  8099d4:	08099200 	call	809920 <__mulsi3>
  8099d8:	a009883a 	mov	r4,r20
  8099dc:	e00b883a 	mov	r5,fp
  8099e0:	1021883a 	mov	r16,r2
  8099e4:	08099200 	call	809920 <__mulsi3>
  8099e8:	a8ffffcc 	andi	r3,r21,65535
  8099ec:	a82ad43a 	srli	r21,r21,16
  8099f0:	8c23883a 	add	r17,r17,r16
  8099f4:	1011883a 	mov	r8,r2
  8099f8:	ac6b883a 	add	r21,r21,r17
  8099fc:	a804943a 	slli	r2,r21,16
  809a00:	b009883a 	mov	r4,r22
  809a04:	980b883a 	mov	r5,r19
  809a08:	10c7883a 	add	r3,r2,r3
  809a0c:	a812d43a 	srli	r9,r21,16
  809a10:	180d883a 	mov	r6,r3
  809a14:	ac00022e 	bgeu	r21,r16,809a20 <__muldi3+0xc8>
  809a18:	00800074 	movhi	r2,1
  809a1c:	4091883a 	add	r8,r8,r2
  809a20:	4267883a 	add	r19,r8,r9
  809a24:	302d883a 	mov	r22,r6
  809a28:	08099200 	call	809920 <__mulsi3>
  809a2c:	d9400317 	ldw	r5,12(sp)
  809a30:	d9000017 	ldw	r4,0(sp)
  809a34:	1023883a 	mov	r17,r2
  809a38:	08099200 	call	809920 <__mulsi3>
  809a3c:	14cb883a 	add	r5,r2,r19
  809a40:	894b883a 	add	r5,r17,r5
  809a44:	b005883a 	mov	r2,r22
  809a48:	2807883a 	mov	r3,r5
  809a4c:	dfc00d17 	ldw	ra,52(sp)
  809a50:	df000c17 	ldw	fp,48(sp)
  809a54:	ddc00b17 	ldw	r23,44(sp)
  809a58:	dd800a17 	ldw	r22,40(sp)
  809a5c:	dd400917 	ldw	r21,36(sp)
  809a60:	dd000817 	ldw	r20,32(sp)
  809a64:	dcc00717 	ldw	r19,28(sp)
  809a68:	dc800617 	ldw	r18,24(sp)
  809a6c:	dc400517 	ldw	r17,20(sp)
  809a70:	dc000417 	ldw	r16,16(sp)
  809a74:	dec00e04 	addi	sp,sp,56
  809a78:	f800283a 	ret

00809a7c <__clzsi2>:
  809a7c:	00bfffd4 	movui	r2,65535
  809a80:	11000e36 	bltu	r2,r4,809abc <__clzsi2+0x40>
  809a84:	00803fc4 	movi	r2,255
  809a88:	01400204 	movi	r5,8
  809a8c:	0007883a 	mov	r3,zero
  809a90:	11001036 	bltu	r2,r4,809ad4 <__clzsi2+0x58>
  809a94:	000b883a 	mov	r5,zero
  809a98:	20c6d83a 	srl	r3,r4,r3
  809a9c:	00802074 	movhi	r2,129
  809aa0:	109bcd04 	addi	r2,r2,28468
  809aa4:	1887883a 	add	r3,r3,r2
  809aa8:	18800003 	ldbu	r2,0(r3)
  809aac:	00c00804 	movi	r3,32
  809ab0:	2885883a 	add	r2,r5,r2
  809ab4:	1885c83a 	sub	r2,r3,r2
  809ab8:	f800283a 	ret
  809abc:	01400404 	movi	r5,16
  809ac0:	00804034 	movhi	r2,256
  809ac4:	10bfffc4 	addi	r2,r2,-1
  809ac8:	2807883a 	mov	r3,r5
  809acc:	113ff22e 	bgeu	r2,r4,809a98 <__clzsi2+0x1c>
  809ad0:	01400604 	movi	r5,24
  809ad4:	2807883a 	mov	r3,r5
  809ad8:	20c6d83a 	srl	r3,r4,r3
  809adc:	00802074 	movhi	r2,129
  809ae0:	109bcd04 	addi	r2,r2,28468
  809ae4:	1887883a 	add	r3,r3,r2
  809ae8:	18800003 	ldbu	r2,0(r3)
  809aec:	00c00804 	movi	r3,32
  809af0:	2885883a 	add	r2,r5,r2
  809af4:	1885c83a 	sub	r2,r3,r2
  809af8:	f800283a 	ret

00809afc <__pack_d>:
  809afc:	20c00017 	ldw	r3,0(r4)
  809b00:	defffd04 	addi	sp,sp,-12
  809b04:	dc000015 	stw	r16,0(sp)
  809b08:	dc800215 	stw	r18,8(sp)
  809b0c:	dc400115 	stw	r17,4(sp)
  809b10:	00800044 	movi	r2,1
  809b14:	22000317 	ldw	r8,12(r4)
  809b18:	001f883a 	mov	r15,zero
  809b1c:	22400417 	ldw	r9,16(r4)
  809b20:	24000117 	ldw	r16,4(r4)
  809b24:	10c0552e 	bgeu	r2,r3,809c7c <__pack_d+0x180>
  809b28:	00800104 	movi	r2,4
  809b2c:	18804f26 	beq	r3,r2,809c6c <__pack_d+0x170>
  809b30:	00800084 	movi	r2,2
  809b34:	18800226 	beq	r3,r2,809b40 <__pack_d+0x44>
  809b38:	4244b03a 	or	r2,r8,r9
  809b3c:	10001a1e 	bne	r2,zero,809ba8 <__pack_d+0xac>
  809b40:	000d883a 	mov	r6,zero
  809b44:	000f883a 	mov	r7,zero
  809b48:	0011883a 	mov	r8,zero
  809b4c:	00800434 	movhi	r2,16
  809b50:	10bfffc4 	addi	r2,r2,-1
  809b54:	301d883a 	mov	r14,r6
  809b58:	3884703a 	and	r2,r7,r2
  809b5c:	400a953a 	slli	r5,r8,20
  809b60:	79bffc2c 	andhi	r6,r15,65520
  809b64:	308cb03a 	or	r6,r6,r2
  809b68:	00e00434 	movhi	r3,32784
  809b6c:	18ffffc4 	addi	r3,r3,-1
  809b70:	800497fa 	slli	r2,r16,31
  809b74:	30c6703a 	and	r3,r6,r3
  809b78:	1946b03a 	or	r3,r3,r5
  809b7c:	01600034 	movhi	r5,32768
  809b80:	297fffc4 	addi	r5,r5,-1
  809b84:	194a703a 	and	r5,r3,r5
  809b88:	288ab03a 	or	r5,r5,r2
  809b8c:	2807883a 	mov	r3,r5
  809b90:	7005883a 	mov	r2,r14
  809b94:	dc800217 	ldw	r18,8(sp)
  809b98:	dc400117 	ldw	r17,4(sp)
  809b9c:	dc000017 	ldw	r16,0(sp)
  809ba0:	dec00304 	addi	sp,sp,12
  809ba4:	f800283a 	ret
  809ba8:	21000217 	ldw	r4,8(r4)
  809bac:	00bf0084 	movi	r2,-1022
  809bb0:	20803f16 	blt	r4,r2,809cb0 <__pack_d+0x1b4>
  809bb4:	0080ffc4 	movi	r2,1023
  809bb8:	11002c16 	blt	r2,r4,809c6c <__pack_d+0x170>
  809bbc:	00803fc4 	movi	r2,255
  809bc0:	408c703a 	and	r6,r8,r2
  809bc4:	00802004 	movi	r2,128
  809bc8:	0007883a 	mov	r3,zero
  809bcc:	000f883a 	mov	r7,zero
  809bd0:	2280ffc4 	addi	r10,r4,1023
  809bd4:	30801e26 	beq	r6,r2,809c50 <__pack_d+0x154>
  809bd8:	00801fc4 	movi	r2,127
  809bdc:	4089883a 	add	r4,r8,r2
  809be0:	220d803a 	cmpltu	r6,r4,r8
  809be4:	324d883a 	add	r6,r6,r9
  809be8:	2011883a 	mov	r8,r4
  809bec:	3013883a 	mov	r9,r6
  809bf0:	00880034 	movhi	r2,8192
  809bf4:	10bfffc4 	addi	r2,r2,-1
  809bf8:	12400d36 	bltu	r2,r9,809c30 <__pack_d+0x134>
  809bfc:	4804963a 	slli	r2,r9,24
  809c00:	400cd23a 	srli	r6,r8,8
  809c04:	480ed23a 	srli	r7,r9,8
  809c08:	013fffc4 	movi	r4,-1
  809c0c:	118cb03a 	or	r6,r2,r6
  809c10:	01400434 	movhi	r5,16
  809c14:	297fffc4 	addi	r5,r5,-1
  809c18:	3104703a 	and	r2,r6,r4
  809c1c:	3946703a 	and	r3,r7,r5
  809c20:	5201ffcc 	andi	r8,r10,2047
  809c24:	100d883a 	mov	r6,r2
  809c28:	180f883a 	mov	r7,r3
  809c2c:	003fc706 	br	809b4c <__pack_d+0x50>
  809c30:	480897fa 	slli	r4,r9,31
  809c34:	4004d07a 	srli	r2,r8,1
  809c38:	4806d07a 	srli	r3,r9,1
  809c3c:	52800044 	addi	r10,r10,1
  809c40:	2084b03a 	or	r2,r4,r2
  809c44:	1011883a 	mov	r8,r2
  809c48:	1813883a 	mov	r9,r3
  809c4c:	003feb06 	br	809bfc <__pack_d+0x100>
  809c50:	383fe11e 	bne	r7,zero,809bd8 <__pack_d+0xdc>
  809c54:	01004004 	movi	r4,256
  809c58:	4104703a 	and	r2,r8,r4
  809c5c:	10c4b03a 	or	r2,r2,r3
  809c60:	103fe326 	beq	r2,zero,809bf0 <__pack_d+0xf4>
  809c64:	3005883a 	mov	r2,r6
  809c68:	003fdc06 	br	809bdc <__pack_d+0xe0>
  809c6c:	000d883a 	mov	r6,zero
  809c70:	000f883a 	mov	r7,zero
  809c74:	0201ffc4 	movi	r8,2047
  809c78:	003fb406 	br	809b4c <__pack_d+0x50>
  809c7c:	0005883a 	mov	r2,zero
  809c80:	00c00234 	movhi	r3,8
  809c84:	408cb03a 	or	r6,r8,r2
  809c88:	48ceb03a 	or	r7,r9,r3
  809c8c:	013fffc4 	movi	r4,-1
  809c90:	01400434 	movhi	r5,16
  809c94:	297fffc4 	addi	r5,r5,-1
  809c98:	3104703a 	and	r2,r6,r4
  809c9c:	3946703a 	and	r3,r7,r5
  809ca0:	100d883a 	mov	r6,r2
  809ca4:	180f883a 	mov	r7,r3
  809ca8:	0201ffc4 	movi	r8,2047
  809cac:	003fa706 	br	809b4c <__pack_d+0x50>
  809cb0:	1109c83a 	sub	r4,r2,r4
  809cb4:	00800e04 	movi	r2,56
  809cb8:	11004316 	blt	r2,r4,809dc8 <__pack_d+0x2cc>
  809cbc:	21fff804 	addi	r7,r4,-32
  809cc0:	38004516 	blt	r7,zero,809dd8 <__pack_d+0x2dc>
  809cc4:	49d8d83a 	srl	r12,r9,r7
  809cc8:	001b883a 	mov	r13,zero
  809ccc:	0023883a 	mov	r17,zero
  809cd0:	01400044 	movi	r5,1
  809cd4:	0025883a 	mov	r18,zero
  809cd8:	38004716 	blt	r7,zero,809df8 <__pack_d+0x2fc>
  809cdc:	29d6983a 	sll	r11,r5,r7
  809ce0:	0015883a 	mov	r10,zero
  809ce4:	00bfffc4 	movi	r2,-1
  809ce8:	5089883a 	add	r4,r10,r2
  809cec:	588b883a 	add	r5,r11,r2
  809cf0:	228d803a 	cmpltu	r6,r4,r10
  809cf4:	314b883a 	add	r5,r6,r5
  809cf8:	4104703a 	and	r2,r8,r4
  809cfc:	4946703a 	and	r3,r9,r5
  809d00:	10c4b03a 	or	r2,r2,r3
  809d04:	10000226 	beq	r2,zero,809d10 <__pack_d+0x214>
  809d08:	04400044 	movi	r17,1
  809d0c:	0025883a 	mov	r18,zero
  809d10:	00803fc4 	movi	r2,255
  809d14:	644eb03a 	or	r7,r12,r17
  809d18:	3892703a 	and	r9,r7,r2
  809d1c:	00802004 	movi	r2,128
  809d20:	6c90b03a 	or	r8,r13,r18
  809d24:	0015883a 	mov	r10,zero
  809d28:	48801626 	beq	r9,r2,809d84 <__pack_d+0x288>
  809d2c:	01001fc4 	movi	r4,127
  809d30:	3905883a 	add	r2,r7,r4
  809d34:	11cd803a 	cmpltu	r6,r2,r7
  809d38:	320d883a 	add	r6,r6,r8
  809d3c:	100f883a 	mov	r7,r2
  809d40:	00840034 	movhi	r2,4096
  809d44:	10bfffc4 	addi	r2,r2,-1
  809d48:	3011883a 	mov	r8,r6
  809d4c:	0007883a 	mov	r3,zero
  809d50:	11801b36 	bltu	r2,r6,809dc0 <__pack_d+0x2c4>
  809d54:	4004963a 	slli	r2,r8,24
  809d58:	3808d23a 	srli	r4,r7,8
  809d5c:	400ad23a 	srli	r5,r8,8
  809d60:	1813883a 	mov	r9,r3
  809d64:	1108b03a 	or	r4,r2,r4
  809d68:	00bfffc4 	movi	r2,-1
  809d6c:	00c00434 	movhi	r3,16
  809d70:	18ffffc4 	addi	r3,r3,-1
  809d74:	208c703a 	and	r6,r4,r2
  809d78:	28ce703a 	and	r7,r5,r3
  809d7c:	4a01ffcc 	andi	r8,r9,2047
  809d80:	003f7206 	br	809b4c <__pack_d+0x50>
  809d84:	503fe91e 	bne	r10,zero,809d2c <__pack_d+0x230>
  809d88:	01004004 	movi	r4,256
  809d8c:	3904703a 	and	r2,r7,r4
  809d90:	0007883a 	mov	r3,zero
  809d94:	10c4b03a 	or	r2,r2,r3
  809d98:	10000626 	beq	r2,zero,809db4 <__pack_d+0x2b8>
  809d9c:	3a45883a 	add	r2,r7,r9
  809da0:	11cd803a 	cmpltu	r6,r2,r7
  809da4:	320d883a 	add	r6,r6,r8
  809da8:	100f883a 	mov	r7,r2
  809dac:	3011883a 	mov	r8,r6
  809db0:	0007883a 	mov	r3,zero
  809db4:	00840034 	movhi	r2,4096
  809db8:	10bfffc4 	addi	r2,r2,-1
  809dbc:	123fe52e 	bgeu	r2,r8,809d54 <__pack_d+0x258>
  809dc0:	00c00044 	movi	r3,1
  809dc4:	003fe306 	br	809d54 <__pack_d+0x258>
  809dc8:	0009883a 	mov	r4,zero
  809dcc:	0013883a 	mov	r9,zero
  809dd0:	000b883a 	mov	r5,zero
  809dd4:	003fe406 	br	809d68 <__pack_d+0x26c>
  809dd8:	4a47883a 	add	r3,r9,r9
  809ddc:	008007c4 	movi	r2,31
  809de0:	1105c83a 	sub	r2,r2,r4
  809de4:	1886983a 	sll	r3,r3,r2
  809de8:	4118d83a 	srl	r12,r8,r4
  809dec:	491ad83a 	srl	r13,r9,r4
  809df0:	1b18b03a 	or	r12,r3,r12
  809df4:	003fb506 	br	809ccc <__pack_d+0x1d0>
  809df8:	2806d07a 	srli	r3,r5,1
  809dfc:	008007c4 	movi	r2,31
  809e00:	1105c83a 	sub	r2,r2,r4
  809e04:	1896d83a 	srl	r11,r3,r2
  809e08:	2914983a 	sll	r10,r5,r4
  809e0c:	003fb506 	br	809ce4 <__pack_d+0x1e8>

00809e10 <__unpack_d>:
  809e10:	20c00117 	ldw	r3,4(r4)
  809e14:	22400017 	ldw	r9,0(r4)
  809e18:	00800434 	movhi	r2,16
  809e1c:	10bfffc4 	addi	r2,r2,-1
  809e20:	1808d53a 	srli	r4,r3,20
  809e24:	180cd7fa 	srli	r6,r3,31
  809e28:	1894703a 	and	r10,r3,r2
  809e2c:	2201ffcc 	andi	r8,r4,2047
  809e30:	281b883a 	mov	r13,r5
  809e34:	4817883a 	mov	r11,r9
  809e38:	29800115 	stw	r6,4(r5)
  809e3c:	5019883a 	mov	r12,r10
  809e40:	40001e1e 	bne	r8,zero,809ebc <__unpack_d+0xac>
  809e44:	4a84b03a 	or	r2,r9,r10
  809e48:	10001926 	beq	r2,zero,809eb0 <__unpack_d+0xa0>
  809e4c:	4804d63a 	srli	r2,r9,24
  809e50:	500c923a 	slli	r6,r10,8
  809e54:	013f0084 	movi	r4,-1022
  809e58:	00c40034 	movhi	r3,4096
  809e5c:	18ffffc4 	addi	r3,r3,-1
  809e60:	118cb03a 	or	r6,r2,r6
  809e64:	008000c4 	movi	r2,3
  809e68:	480a923a 	slli	r5,r9,8
  809e6c:	68800015 	stw	r2,0(r13)
  809e70:	69000215 	stw	r4,8(r13)
  809e74:	19800b36 	bltu	r3,r6,809ea4 <__unpack_d+0x94>
  809e78:	200f883a 	mov	r7,r4
  809e7c:	1811883a 	mov	r8,r3
  809e80:	2945883a 	add	r2,r5,r5
  809e84:	1149803a 	cmpltu	r4,r2,r5
  809e88:	3187883a 	add	r3,r6,r6
  809e8c:	20c9883a 	add	r4,r4,r3
  809e90:	100b883a 	mov	r5,r2
  809e94:	200d883a 	mov	r6,r4
  809e98:	39ffffc4 	addi	r7,r7,-1
  809e9c:	413ff82e 	bgeu	r8,r4,809e80 <__unpack_d+0x70>
  809ea0:	69c00215 	stw	r7,8(r13)
  809ea4:	69800415 	stw	r6,16(r13)
  809ea8:	69400315 	stw	r5,12(r13)
  809eac:	f800283a 	ret
  809eb0:	00800084 	movi	r2,2
  809eb4:	28800015 	stw	r2,0(r5)
  809eb8:	f800283a 	ret
  809ebc:	0081ffc4 	movi	r2,2047
  809ec0:	40800f26 	beq	r8,r2,809f00 <__unpack_d+0xf0>
  809ec4:	480cd63a 	srli	r6,r9,24
  809ec8:	5006923a 	slli	r3,r10,8
  809ecc:	4804923a 	slli	r2,r9,8
  809ed0:	0009883a 	mov	r4,zero
  809ed4:	30c6b03a 	or	r3,r6,r3
  809ed8:	01440034 	movhi	r5,4096
  809edc:	110cb03a 	or	r6,r2,r4
  809ee0:	423f0044 	addi	r8,r8,-1023
  809ee4:	194eb03a 	or	r7,r3,r5
  809ee8:	008000c4 	movi	r2,3
  809eec:	69c00415 	stw	r7,16(r13)
  809ef0:	6a000215 	stw	r8,8(r13)
  809ef4:	68800015 	stw	r2,0(r13)
  809ef8:	69800315 	stw	r6,12(r13)
  809efc:	f800283a 	ret
  809f00:	4a84b03a 	or	r2,r9,r10
  809f04:	1000031e 	bne	r2,zero,809f14 <__unpack_d+0x104>
  809f08:	00800104 	movi	r2,4
  809f0c:	28800015 	stw	r2,0(r5)
  809f10:	f800283a 	ret
  809f14:	0009883a 	mov	r4,zero
  809f18:	01400234 	movhi	r5,8
  809f1c:	4904703a 	and	r2,r9,r4
  809f20:	5146703a 	and	r3,r10,r5
  809f24:	10c4b03a 	or	r2,r2,r3
  809f28:	10000526 	beq	r2,zero,809f40 <__unpack_d+0x130>
  809f2c:	00800044 	movi	r2,1
  809f30:	68800015 	stw	r2,0(r13)
  809f34:	6b000415 	stw	r12,16(r13)
  809f38:	6ac00315 	stw	r11,12(r13)
  809f3c:	f800283a 	ret
  809f40:	68000015 	stw	zero,0(r13)
  809f44:	003ffb06 	br	809f34 <__unpack_d+0x124>

00809f48 <__fpcmp_parts_d>:
  809f48:	21800017 	ldw	r6,0(r4)
  809f4c:	00c00044 	movi	r3,1
  809f50:	19800a2e 	bgeu	r3,r6,809f7c <__fpcmp_parts_d+0x34>
  809f54:	28800017 	ldw	r2,0(r5)
  809f58:	1880082e 	bgeu	r3,r2,809f7c <__fpcmp_parts_d+0x34>
  809f5c:	00c00104 	movi	r3,4
  809f60:	30c02626 	beq	r6,r3,809ffc <__fpcmp_parts_d+0xb4>
  809f64:	10c02226 	beq	r2,r3,809ff0 <__fpcmp_parts_d+0xa8>
  809f68:	00c00084 	movi	r3,2
  809f6c:	30c00526 	beq	r6,r3,809f84 <__fpcmp_parts_d+0x3c>
  809f70:	10c0071e 	bne	r2,r3,809f90 <__fpcmp_parts_d+0x48>
  809f74:	20800117 	ldw	r2,4(r4)
  809f78:	1000091e 	bne	r2,zero,809fa0 <__fpcmp_parts_d+0x58>
  809f7c:	00800044 	movi	r2,1
  809f80:	f800283a 	ret
  809f84:	10c01a1e 	bne	r2,r3,809ff0 <__fpcmp_parts_d+0xa8>
  809f88:	0005883a 	mov	r2,zero
  809f8c:	f800283a 	ret
  809f90:	22000117 	ldw	r8,4(r4)
  809f94:	28800117 	ldw	r2,4(r5)
  809f98:	40800326 	beq	r8,r2,809fa8 <__fpcmp_parts_d+0x60>
  809f9c:	403ff726 	beq	r8,zero,809f7c <__fpcmp_parts_d+0x34>
  809fa0:	00bfffc4 	movi	r2,-1
  809fa4:	f800283a 	ret
  809fa8:	20c00217 	ldw	r3,8(r4)
  809fac:	28800217 	ldw	r2,8(r5)
  809fb0:	10fffa16 	blt	r2,r3,809f9c <__fpcmp_parts_d+0x54>
  809fb4:	18800916 	blt	r3,r2,809fdc <__fpcmp_parts_d+0x94>
  809fb8:	21c00417 	ldw	r7,16(r4)
  809fbc:	28c00417 	ldw	r3,16(r5)
  809fc0:	21800317 	ldw	r6,12(r4)
  809fc4:	28800317 	ldw	r2,12(r5)
  809fc8:	19fff436 	bltu	r3,r7,809f9c <__fpcmp_parts_d+0x54>
  809fcc:	38c00526 	beq	r7,r3,809fe4 <__fpcmp_parts_d+0x9c>
  809fd0:	38c00236 	bltu	r7,r3,809fdc <__fpcmp_parts_d+0x94>
  809fd4:	19ffec1e 	bne	r3,r7,809f88 <__fpcmp_parts_d+0x40>
  809fd8:	30bfeb2e 	bgeu	r6,r2,809f88 <__fpcmp_parts_d+0x40>
  809fdc:	403fe71e 	bne	r8,zero,809f7c <__fpcmp_parts_d+0x34>
  809fe0:	003fef06 	br	809fa0 <__fpcmp_parts_d+0x58>
  809fe4:	11bffa2e 	bgeu	r2,r6,809fd0 <__fpcmp_parts_d+0x88>
  809fe8:	403fe426 	beq	r8,zero,809f7c <__fpcmp_parts_d+0x34>
  809fec:	003fec06 	br	809fa0 <__fpcmp_parts_d+0x58>
  809ff0:	28800117 	ldw	r2,4(r5)
  809ff4:	103fe11e 	bne	r2,zero,809f7c <__fpcmp_parts_d+0x34>
  809ff8:	003fe906 	br	809fa0 <__fpcmp_parts_d+0x58>
  809ffc:	11bfdd1e 	bne	r2,r6,809f74 <__fpcmp_parts_d+0x2c>
  80a000:	28c00117 	ldw	r3,4(r5)
  80a004:	20800117 	ldw	r2,4(r4)
  80a008:	1885c83a 	sub	r2,r3,r2
  80a00c:	f800283a 	ret

0080a010 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80a010:	defff804 	addi	sp,sp,-32
  80a014:	dfc00715 	stw	ra,28(sp)
  80a018:	df000615 	stw	fp,24(sp)
  80a01c:	df000604 	addi	fp,sp,24
  80a020:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80a024:	e0bffc17 	ldw	r2,-16(fp)
  80a028:	1004803a 	cmplt	r2,r2,zero
  80a02c:	1000091e 	bne	r2,zero,80a054 <close+0x44>
  80a030:	e13ffc17 	ldw	r4,-16(fp)
  80a034:	01400304 	movi	r5,12
  80a038:	08099200 	call	809920 <__mulsi3>
  80a03c:	1007883a 	mov	r3,r2
  80a040:	00802074 	movhi	r2,129
  80a044:	109e8404 	addi	r2,r2,31248
  80a048:	1887883a 	add	r3,r3,r2
  80a04c:	e0ffff15 	stw	r3,-4(fp)
  80a050:	00000106 	br	80a058 <close+0x48>
  80a054:	e03fff15 	stw	zero,-4(fp)
  80a058:	e0bfff17 	ldw	r2,-4(fp)
  80a05c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  80a060:	e0bffb17 	ldw	r2,-20(fp)
  80a064:	1005003a 	cmpeq	r2,r2,zero
  80a068:	10001d1e 	bne	r2,zero,80a0e0 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80a06c:	e0bffb17 	ldw	r2,-20(fp)
  80a070:	10800017 	ldw	r2,0(r2)
  80a074:	10800417 	ldw	r2,16(r2)
  80a078:	1005003a 	cmpeq	r2,r2,zero
  80a07c:	1000071e 	bne	r2,zero,80a09c <close+0x8c>
  80a080:	e0bffb17 	ldw	r2,-20(fp)
  80a084:	10800017 	ldw	r2,0(r2)
  80a088:	10800417 	ldw	r2,16(r2)
  80a08c:	e13ffb17 	ldw	r4,-20(fp)
  80a090:	103ee83a 	callr	r2
  80a094:	e0bffe15 	stw	r2,-8(fp)
  80a098:	00000106 	br	80a0a0 <close+0x90>
  80a09c:	e03ffe15 	stw	zero,-8(fp)
  80a0a0:	e0bffe17 	ldw	r2,-8(fp)
  80a0a4:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80a0a8:	e13ffc17 	ldw	r4,-16(fp)
  80a0ac:	080a8840 	call	80a884 <alt_release_fd>
    if (rval < 0)
  80a0b0:	e0bffa17 	ldw	r2,-24(fp)
  80a0b4:	1004403a 	cmpge	r2,r2,zero
  80a0b8:	1000071e 	bne	r2,zero,80a0d8 <close+0xc8>
    {
      ALT_ERRNO = -rval;
  80a0bc:	080a1100 	call	80a110 <alt_get_errno>
  80a0c0:	e0fffa17 	ldw	r3,-24(fp)
  80a0c4:	00c7c83a 	sub	r3,zero,r3
  80a0c8:	10c00015 	stw	r3,0(r2)
      return -1;
  80a0cc:	00bfffc4 	movi	r2,-1
  80a0d0:	e0bffd15 	stw	r2,-12(fp)
  80a0d4:	00000806 	br	80a0f8 <close+0xe8>
    }
    return 0;
  80a0d8:	e03ffd15 	stw	zero,-12(fp)
  80a0dc:	00000606 	br	80a0f8 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80a0e0:	080a1100 	call	80a110 <alt_get_errno>
  80a0e4:	1007883a 	mov	r3,r2
  80a0e8:	00801444 	movi	r2,81
  80a0ec:	18800015 	stw	r2,0(r3)
    return -1;
  80a0f0:	00bfffc4 	movi	r2,-1
  80a0f4:	e0bffd15 	stw	r2,-12(fp)
  80a0f8:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  80a0fc:	e037883a 	mov	sp,fp
  80a100:	dfc00117 	ldw	ra,4(sp)
  80a104:	df000017 	ldw	fp,0(sp)
  80a108:	dec00204 	addi	sp,sp,8
  80a10c:	f800283a 	ret

0080a110 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a110:	defffd04 	addi	sp,sp,-12
  80a114:	dfc00215 	stw	ra,8(sp)
  80a118:	df000115 	stw	fp,4(sp)
  80a11c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80a120:	008020b4 	movhi	r2,130
  80a124:	10a32d04 	addi	r2,r2,-29516
  80a128:	10800017 	ldw	r2,0(r2)
  80a12c:	1005003a 	cmpeq	r2,r2,zero
  80a130:	1000061e 	bne	r2,zero,80a14c <alt_get_errno+0x3c>
  80a134:	008020b4 	movhi	r2,130
  80a138:	10a32d04 	addi	r2,r2,-29516
  80a13c:	10800017 	ldw	r2,0(r2)
  80a140:	103ee83a 	callr	r2
  80a144:	e0bfff15 	stw	r2,-4(fp)
  80a148:	00000306 	br	80a158 <alt_get_errno+0x48>
  80a14c:	008020b4 	movhi	r2,130
  80a150:	10aa3404 	addi	r2,r2,-22320
  80a154:	e0bfff15 	stw	r2,-4(fp)
  80a158:	e0bfff17 	ldw	r2,-4(fp)
}
  80a15c:	e037883a 	mov	sp,fp
  80a160:	dfc00117 	ldw	ra,4(sp)
  80a164:	df000017 	ldw	fp,0(sp)
  80a168:	dec00204 	addi	sp,sp,8
  80a16c:	f800283a 	ret

0080a170 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80a170:	defffc04 	addi	sp,sp,-16
  80a174:	df000315 	stw	fp,12(sp)
  80a178:	df000304 	addi	fp,sp,12
  80a17c:	e13ffd15 	stw	r4,-12(fp)
  80a180:	e17ffe15 	stw	r5,-8(fp)
  80a184:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80a188:	e0bfff17 	ldw	r2,-4(fp)
}
  80a18c:	e037883a 	mov	sp,fp
  80a190:	df000017 	ldw	fp,0(sp)
  80a194:	dec00104 	addi	sp,sp,4
  80a198:	f800283a 	ret

0080a19c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80a19c:	defff904 	addi	sp,sp,-28
  80a1a0:	dfc00615 	stw	ra,24(sp)
  80a1a4:	df000515 	stw	fp,20(sp)
  80a1a8:	df000504 	addi	fp,sp,20
  80a1ac:	e13ffc15 	stw	r4,-16(fp)
  80a1b0:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80a1b4:	e0bffc17 	ldw	r2,-16(fp)
  80a1b8:	1004803a 	cmplt	r2,r2,zero
  80a1bc:	1000091e 	bne	r2,zero,80a1e4 <fstat+0x48>
  80a1c0:	e13ffc17 	ldw	r4,-16(fp)
  80a1c4:	01400304 	movi	r5,12
  80a1c8:	08099200 	call	809920 <__mulsi3>
  80a1cc:	1007883a 	mov	r3,r2
  80a1d0:	00802074 	movhi	r2,129
  80a1d4:	109e8404 	addi	r2,r2,31248
  80a1d8:	1887883a 	add	r3,r3,r2
  80a1dc:	e0ffff15 	stw	r3,-4(fp)
  80a1e0:	00000106 	br	80a1e8 <fstat+0x4c>
  80a1e4:	e03fff15 	stw	zero,-4(fp)
  80a1e8:	e0bfff17 	ldw	r2,-4(fp)
  80a1ec:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80a1f0:	e0bffb17 	ldw	r2,-20(fp)
  80a1f4:	1005003a 	cmpeq	r2,r2,zero
  80a1f8:	1000121e 	bne	r2,zero,80a244 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80a1fc:	e0bffb17 	ldw	r2,-20(fp)
  80a200:	10800017 	ldw	r2,0(r2)
  80a204:	10800817 	ldw	r2,32(r2)
  80a208:	1005003a 	cmpeq	r2,r2,zero
  80a20c:	1000081e 	bne	r2,zero,80a230 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
  80a210:	e0bffb17 	ldw	r2,-20(fp)
  80a214:	10800017 	ldw	r2,0(r2)
  80a218:	10800817 	ldw	r2,32(r2)
  80a21c:	e13ffb17 	ldw	r4,-20(fp)
  80a220:	e17ffd17 	ldw	r5,-12(fp)
  80a224:	103ee83a 	callr	r2
  80a228:	e0bffe15 	stw	r2,-8(fp)
  80a22c:	00000b06 	br	80a25c <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80a230:	e0fffd17 	ldw	r3,-12(fp)
  80a234:	00880004 	movi	r2,8192
  80a238:	18800115 	stw	r2,4(r3)
      return 0;
  80a23c:	e03ffe15 	stw	zero,-8(fp)
  80a240:	00000606 	br	80a25c <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80a244:	080a2740 	call	80a274 <alt_get_errno>
  80a248:	1007883a 	mov	r3,r2
  80a24c:	00801444 	movi	r2,81
  80a250:	18800015 	stw	r2,0(r3)
    return -1;
  80a254:	00bfffc4 	movi	r2,-1
  80a258:	e0bffe15 	stw	r2,-8(fp)
  80a25c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80a260:	e037883a 	mov	sp,fp
  80a264:	dfc00117 	ldw	ra,4(sp)
  80a268:	df000017 	ldw	fp,0(sp)
  80a26c:	dec00204 	addi	sp,sp,8
  80a270:	f800283a 	ret

0080a274 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a274:	defffd04 	addi	sp,sp,-12
  80a278:	dfc00215 	stw	ra,8(sp)
  80a27c:	df000115 	stw	fp,4(sp)
  80a280:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80a284:	008020b4 	movhi	r2,130
  80a288:	10a32d04 	addi	r2,r2,-29516
  80a28c:	10800017 	ldw	r2,0(r2)
  80a290:	1005003a 	cmpeq	r2,r2,zero
  80a294:	1000061e 	bne	r2,zero,80a2b0 <alt_get_errno+0x3c>
  80a298:	008020b4 	movhi	r2,130
  80a29c:	10a32d04 	addi	r2,r2,-29516
  80a2a0:	10800017 	ldw	r2,0(r2)
  80a2a4:	103ee83a 	callr	r2
  80a2a8:	e0bfff15 	stw	r2,-4(fp)
  80a2ac:	00000306 	br	80a2bc <alt_get_errno+0x48>
  80a2b0:	008020b4 	movhi	r2,130
  80a2b4:	10aa3404 	addi	r2,r2,-22320
  80a2b8:	e0bfff15 	stw	r2,-4(fp)
  80a2bc:	e0bfff17 	ldw	r2,-4(fp)
}
  80a2c0:	e037883a 	mov	sp,fp
  80a2c4:	dfc00117 	ldw	ra,4(sp)
  80a2c8:	df000017 	ldw	fp,0(sp)
  80a2cc:	dec00204 	addi	sp,sp,8
  80a2d0:	f800283a 	ret

0080a2d4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80a2d4:	deffeb04 	addi	sp,sp,-84
  80a2d8:	dfc01415 	stw	ra,80(sp)
  80a2dc:	df001315 	stw	fp,76(sp)
  80a2e0:	df001304 	addi	fp,sp,76
  80a2e4:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80a2e8:	e0bffd17 	ldw	r2,-12(fp)
  80a2ec:	1004803a 	cmplt	r2,r2,zero
  80a2f0:	1000091e 	bne	r2,zero,80a318 <isatty+0x44>
  80a2f4:	e13ffd17 	ldw	r4,-12(fp)
  80a2f8:	01400304 	movi	r5,12
  80a2fc:	08099200 	call	809920 <__mulsi3>
  80a300:	1007883a 	mov	r3,r2
  80a304:	00802074 	movhi	r2,129
  80a308:	109e8404 	addi	r2,r2,31248
  80a30c:	1887883a 	add	r3,r3,r2
  80a310:	e0ffff15 	stw	r3,-4(fp)
  80a314:	00000106 	br	80a31c <isatty+0x48>
  80a318:	e03fff15 	stw	zero,-4(fp)
  80a31c:	e0bfff17 	ldw	r2,-4(fp)
  80a320:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  80a324:	e0bfed17 	ldw	r2,-76(fp)
  80a328:	1005003a 	cmpeq	r2,r2,zero
  80a32c:	10000f1e 	bne	r2,zero,80a36c <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80a330:	e0bfed17 	ldw	r2,-76(fp)
  80a334:	10800017 	ldw	r2,0(r2)
  80a338:	10800817 	ldw	r2,32(r2)
  80a33c:	1004c03a 	cmpne	r2,r2,zero
  80a340:	1000031e 	bne	r2,zero,80a350 <isatty+0x7c>
    {
      return 1;
  80a344:	00800044 	movi	r2,1
  80a348:	e0bffe15 	stw	r2,-8(fp)
  80a34c:	00000c06 	br	80a380 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80a350:	e17fee04 	addi	r5,fp,-72
  80a354:	e13ffd17 	ldw	r4,-12(fp)
  80a358:	080a19c0 	call	80a19c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80a35c:	e0bfef17 	ldw	r2,-68(fp)
  80a360:	10880020 	cmpeqi	r2,r2,8192
  80a364:	e0bffe15 	stw	r2,-8(fp)
  80a368:	00000506 	br	80a380 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80a36c:	080a3980 	call	80a398 <alt_get_errno>
  80a370:	1007883a 	mov	r3,r2
  80a374:	00801444 	movi	r2,81
  80a378:	18800015 	stw	r2,0(r3)
    return 0;
  80a37c:	e03ffe15 	stw	zero,-8(fp)
  80a380:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80a384:	e037883a 	mov	sp,fp
  80a388:	dfc00117 	ldw	ra,4(sp)
  80a38c:	df000017 	ldw	fp,0(sp)
  80a390:	dec00204 	addi	sp,sp,8
  80a394:	f800283a 	ret

0080a398 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a398:	defffd04 	addi	sp,sp,-12
  80a39c:	dfc00215 	stw	ra,8(sp)
  80a3a0:	df000115 	stw	fp,4(sp)
  80a3a4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80a3a8:	008020b4 	movhi	r2,130
  80a3ac:	10a32d04 	addi	r2,r2,-29516
  80a3b0:	10800017 	ldw	r2,0(r2)
  80a3b4:	1005003a 	cmpeq	r2,r2,zero
  80a3b8:	1000061e 	bne	r2,zero,80a3d4 <alt_get_errno+0x3c>
  80a3bc:	008020b4 	movhi	r2,130
  80a3c0:	10a32d04 	addi	r2,r2,-29516
  80a3c4:	10800017 	ldw	r2,0(r2)
  80a3c8:	103ee83a 	callr	r2
  80a3cc:	e0bfff15 	stw	r2,-4(fp)
  80a3d0:	00000306 	br	80a3e0 <alt_get_errno+0x48>
  80a3d4:	008020b4 	movhi	r2,130
  80a3d8:	10aa3404 	addi	r2,r2,-22320
  80a3dc:	e0bfff15 	stw	r2,-4(fp)
  80a3e0:	e0bfff17 	ldw	r2,-4(fp)
}
  80a3e4:	e037883a 	mov	sp,fp
  80a3e8:	dfc00117 	ldw	ra,4(sp)
  80a3ec:	df000017 	ldw	fp,0(sp)
  80a3f0:	dec00204 	addi	sp,sp,8
  80a3f4:	f800283a 	ret

0080a3f8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80a3f8:	defffe04 	addi	sp,sp,-8
  80a3fc:	dfc00115 	stw	ra,4(sp)
  80a400:	df000015 	stw	fp,0(sp)
  80a404:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80a408:	010020b4 	movhi	r4,130
  80a40c:	21235104 	addi	r4,r4,-29372
  80a410:	01402074 	movhi	r5,129
  80a414:	295c7504 	addi	r5,r5,29140
  80a418:	018020b4 	movhi	r6,130
  80a41c:	31a35104 	addi	r6,r6,-29372
  80a420:	080a4780 	call	80a478 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80a424:	01002034 	movhi	r4,128
  80a428:	21000004 	addi	r4,r4,0
  80a42c:	01404434 	movhi	r5,272
  80a430:	29500804 	addi	r5,r5,16416
  80a434:	01804434 	movhi	r6,272
  80a438:	31907004 	addi	r6,r6,16832
  80a43c:	080a4780 	call	80a478 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80a440:	01002074 	movhi	r4,129
  80a444:	211afd04 	addi	r4,r4,27636
  80a448:	01402074 	movhi	r5,129
  80a44c:	295afd04 	addi	r5,r5,27636
  80a450:	01802074 	movhi	r6,129
  80a454:	319c7504 	addi	r6,r6,29140
  80a458:	080a4780 	call	80a478 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80a45c:	081566c0 	call	81566c <alt_dcache_flush_all>
  alt_icache_flush_all();
  80a460:	08158f80 	call	8158f8 <alt_icache_flush_all>
}
  80a464:	e037883a 	mov	sp,fp
  80a468:	dfc00117 	ldw	ra,4(sp)
  80a46c:	df000017 	ldw	fp,0(sp)
  80a470:	dec00204 	addi	sp,sp,8
  80a474:	f800283a 	ret

0080a478 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80a478:	defffc04 	addi	sp,sp,-16
  80a47c:	df000315 	stw	fp,12(sp)
  80a480:	df000304 	addi	fp,sp,12
  80a484:	e13ffd15 	stw	r4,-12(fp)
  80a488:	e17ffe15 	stw	r5,-8(fp)
  80a48c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80a490:	e0fffe17 	ldw	r3,-8(fp)
  80a494:	e0bffd17 	ldw	r2,-12(fp)
  80a498:	18800e26 	beq	r3,r2,80a4d4 <alt_load_section+0x5c>
  {
    while( to != end )
  80a49c:	00000a06 	br	80a4c8 <alt_load_section+0x50>
    {
      *to++ = *from++;
  80a4a0:	e0bffd17 	ldw	r2,-12(fp)
  80a4a4:	10c00017 	ldw	r3,0(r2)
  80a4a8:	e0bffe17 	ldw	r2,-8(fp)
  80a4ac:	10c00015 	stw	r3,0(r2)
  80a4b0:	e0bffe17 	ldw	r2,-8(fp)
  80a4b4:	10800104 	addi	r2,r2,4
  80a4b8:	e0bffe15 	stw	r2,-8(fp)
  80a4bc:	e0bffd17 	ldw	r2,-12(fp)
  80a4c0:	10800104 	addi	r2,r2,4
  80a4c4:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80a4c8:	e0fffe17 	ldw	r3,-8(fp)
  80a4cc:	e0bfff17 	ldw	r2,-4(fp)
  80a4d0:	18bff31e 	bne	r3,r2,80a4a0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  80a4d4:	e037883a 	mov	sp,fp
  80a4d8:	df000017 	ldw	fp,0(sp)
  80a4dc:	dec00104 	addi	sp,sp,4
  80a4e0:	f800283a 	ret

0080a4e4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80a4e4:	defff804 	addi	sp,sp,-32
  80a4e8:	dfc00715 	stw	ra,28(sp)
  80a4ec:	df000615 	stw	fp,24(sp)
  80a4f0:	df000604 	addi	fp,sp,24
  80a4f4:	e13ffc15 	stw	r4,-16(fp)
  80a4f8:	e17ffd15 	stw	r5,-12(fp)
  80a4fc:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80a500:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80a504:	e0bffc17 	ldw	r2,-16(fp)
  80a508:	1004803a 	cmplt	r2,r2,zero
  80a50c:	1000091e 	bne	r2,zero,80a534 <lseek+0x50>
  80a510:	e13ffc17 	ldw	r4,-16(fp)
  80a514:	01400304 	movi	r5,12
  80a518:	08099200 	call	809920 <__mulsi3>
  80a51c:	1007883a 	mov	r3,r2
  80a520:	00802074 	movhi	r2,129
  80a524:	109e8404 	addi	r2,r2,31248
  80a528:	1887883a 	add	r3,r3,r2
  80a52c:	e0ffff15 	stw	r3,-4(fp)
  80a530:	00000106 	br	80a538 <lseek+0x54>
  80a534:	e03fff15 	stw	zero,-4(fp)
  80a538:	e0bfff17 	ldw	r2,-4(fp)
  80a53c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  80a540:	e0bffb17 	ldw	r2,-20(fp)
  80a544:	1005003a 	cmpeq	r2,r2,zero
  80a548:	1000111e 	bne	r2,zero,80a590 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80a54c:	e0bffb17 	ldw	r2,-20(fp)
  80a550:	10800017 	ldw	r2,0(r2)
  80a554:	10800717 	ldw	r2,28(r2)
  80a558:	1005003a 	cmpeq	r2,r2,zero
  80a55c:	1000091e 	bne	r2,zero,80a584 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80a560:	e0bffb17 	ldw	r2,-20(fp)
  80a564:	10800017 	ldw	r2,0(r2)
  80a568:	10800717 	ldw	r2,28(r2)
  80a56c:	e13ffb17 	ldw	r4,-20(fp)
  80a570:	e17ffd17 	ldw	r5,-12(fp)
  80a574:	e1bffe17 	ldw	r6,-8(fp)
  80a578:	103ee83a 	callr	r2
  80a57c:	e0bffa15 	stw	r2,-24(fp)
  80a580:	00000506 	br	80a598 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80a584:	00bfde84 	movi	r2,-134
  80a588:	e0bffa15 	stw	r2,-24(fp)
  80a58c:	00000206 	br	80a598 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
  80a590:	00bfebc4 	movi	r2,-81
  80a594:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  80a598:	e0bffa17 	ldw	r2,-24(fp)
  80a59c:	1004403a 	cmpge	r2,r2,zero
  80a5a0:	1000071e 	bne	r2,zero,80a5c0 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
  80a5a4:	080a5d80 	call	80a5d8 <alt_get_errno>
  80a5a8:	1007883a 	mov	r3,r2
  80a5ac:	e0bffa17 	ldw	r2,-24(fp)
  80a5b0:	0085c83a 	sub	r2,zero,r2
  80a5b4:	18800015 	stw	r2,0(r3)
    rc = -1;
  80a5b8:	00bfffc4 	movi	r2,-1
  80a5bc:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  80a5c0:	e0bffa17 	ldw	r2,-24(fp)
}
  80a5c4:	e037883a 	mov	sp,fp
  80a5c8:	dfc00117 	ldw	ra,4(sp)
  80a5cc:	df000017 	ldw	fp,0(sp)
  80a5d0:	dec00204 	addi	sp,sp,8
  80a5d4:	f800283a 	ret

0080a5d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a5d8:	defffd04 	addi	sp,sp,-12
  80a5dc:	dfc00215 	stw	ra,8(sp)
  80a5e0:	df000115 	stw	fp,4(sp)
  80a5e4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80a5e8:	008020b4 	movhi	r2,130
  80a5ec:	10a32d04 	addi	r2,r2,-29516
  80a5f0:	10800017 	ldw	r2,0(r2)
  80a5f4:	1005003a 	cmpeq	r2,r2,zero
  80a5f8:	1000061e 	bne	r2,zero,80a614 <alt_get_errno+0x3c>
  80a5fc:	008020b4 	movhi	r2,130
  80a600:	10a32d04 	addi	r2,r2,-29516
  80a604:	10800017 	ldw	r2,0(r2)
  80a608:	103ee83a 	callr	r2
  80a60c:	e0bfff15 	stw	r2,-4(fp)
  80a610:	00000306 	br	80a620 <alt_get_errno+0x48>
  80a614:	008020b4 	movhi	r2,130
  80a618:	10aa3404 	addi	r2,r2,-22320
  80a61c:	e0bfff15 	stw	r2,-4(fp)
  80a620:	e0bfff17 	ldw	r2,-4(fp)
}
  80a624:	e037883a 	mov	sp,fp
  80a628:	dfc00117 	ldw	ra,4(sp)
  80a62c:	df000017 	ldw	fp,0(sp)
  80a630:	dec00204 	addi	sp,sp,8
  80a634:	f800283a 	ret

0080a638 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80a638:	defffb04 	addi	sp,sp,-20
  80a63c:	dfc00415 	stw	ra,16(sp)
  80a640:	df000315 	stw	fp,12(sp)
  80a644:	df000304 	addi	fp,sp,12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80a648:	0009883a 	mov	r4,zero
  80a64c:	08131080 	call	813108 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  80a650:	080b7440 	call	80b744 <OSInit>
  80a654:	01000044 	movi	r4,1
  80a658:	081060c0 	call	81060c <OSSemCreate>
  80a65c:	1007883a 	mov	r3,r2
  80a660:	008020b4 	movhi	r2,130
  80a664:	10aa3a04 	addi	r2,r2,-22296
  80a668:	10c00015 	stw	r3,0(r2)
  80a66c:	01000044 	movi	r4,1
  80a670:	081060c0 	call	81060c <OSSemCreate>
  80a674:	1007883a 	mov	r3,r2
  80a678:	008020b4 	movhi	r2,130
  80a67c:	10aa3c04 	addi	r2,r2,-22288
  80a680:	10c00015 	stw	r3,0(r2)
  80a684:	008020b4 	movhi	r2,130
  80a688:	10aa3504 	addi	r2,r2,-22316
  80a68c:	e0bffd15 	stw	r2,-12(fp)
  80a690:	00800044 	movi	r2,1
  80a694:	e0bffe0d 	sth	r2,-8(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  80a698:	e13ffe0b 	ldhu	r4,-8(fp)
  80a69c:	081060c0 	call	81060c <OSSemCreate>
  80a6a0:	1007883a 	mov	r3,r2
  80a6a4:	e0bffd17 	ldw	r2,-12(fp)
  80a6a8:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80a6ac:	081313c0 	call	81313c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80a6b0:	01002074 	movhi	r4,129
  80a6b4:	211c1004 	addi	r4,r4,28736
  80a6b8:	01402074 	movhi	r5,129
  80a6bc:	295c1004 	addi	r5,r5,28736
  80a6c0:	01802074 	movhi	r6,129
  80a6c4:	319c1004 	addi	r6,r6,28736
  80a6c8:	08159ec0 	call	8159ec <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80a6cc:	081579c0 	call	81579c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80a6d0:	01002074 	movhi	r4,129
  80a6d4:	21160004 	addi	r4,r4,22528
  80a6d8:	08167dc0 	call	8167dc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80a6dc:	d1271417 	ldw	r4,-25520(gp)
  80a6e0:	d1671517 	ldw	r5,-25516(gp)
  80a6e4:	d1a71617 	ldw	r6,-25512(gp)
  80a6e8:	08001dc0 	call	8001dc <main>
  80a6ec:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80a6f0:	01000044 	movi	r4,1
  80a6f4:	080a0100 	call	80a010 <close>
  exit (result);
  80a6f8:	e13fff17 	ldw	r4,-4(fp)
  80a6fc:	08167f00 	call	8167f0 <exit>

0080a700 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80a700:	defff704 	addi	sp,sp,-36
  80a704:	dfc00815 	stw	ra,32(sp)
  80a708:	df000715 	stw	fp,28(sp)
  80a70c:	df000704 	addi	fp,sp,28
  80a710:	e13ffb15 	stw	r4,-20(fp)
  80a714:	e17ffc15 	stw	r5,-16(fp)
  80a718:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80a71c:	e0bffb17 	ldw	r2,-20(fp)
  80a720:	1004803a 	cmplt	r2,r2,zero
  80a724:	1000091e 	bne	r2,zero,80a74c <read+0x4c>
  80a728:	e13ffb17 	ldw	r4,-20(fp)
  80a72c:	01400304 	movi	r5,12
  80a730:	08099200 	call	809920 <__mulsi3>
  80a734:	1007883a 	mov	r3,r2
  80a738:	00802074 	movhi	r2,129
  80a73c:	109e8404 	addi	r2,r2,31248
  80a740:	1887883a 	add	r3,r3,r2
  80a744:	e0ffff15 	stw	r3,-4(fp)
  80a748:	00000106 	br	80a750 <read+0x50>
  80a74c:	e03fff15 	stw	zero,-4(fp)
  80a750:	e0bfff17 	ldw	r2,-4(fp)
  80a754:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80a758:	e0bffa17 	ldw	r2,-24(fp)
  80a75c:	1005003a 	cmpeq	r2,r2,zero
  80a760:	1000241e 	bne	r2,zero,80a7f4 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80a764:	e0bffa17 	ldw	r2,-24(fp)
  80a768:	10800217 	ldw	r2,8(r2)
  80a76c:	108000cc 	andi	r2,r2,3
  80a770:	10800060 	cmpeqi	r2,r2,1
  80a774:	10001a1e 	bne	r2,zero,80a7e0 <read+0xe0>
  80a778:	e0bffa17 	ldw	r2,-24(fp)
  80a77c:	10800017 	ldw	r2,0(r2)
  80a780:	10800517 	ldw	r2,20(r2)
  80a784:	1005003a 	cmpeq	r2,r2,zero
  80a788:	1000151e 	bne	r2,zero,80a7e0 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80a78c:	e0bffa17 	ldw	r2,-24(fp)
  80a790:	10800017 	ldw	r2,0(r2)
  80a794:	10800517 	ldw	r2,20(r2)
  80a798:	e17ffc17 	ldw	r5,-16(fp)
  80a79c:	e1bffd17 	ldw	r6,-12(fp)
  80a7a0:	e13ffa17 	ldw	r4,-24(fp)
  80a7a4:	103ee83a 	callr	r2
  80a7a8:	e0bff915 	stw	r2,-28(fp)
  80a7ac:	e0bff917 	ldw	r2,-28(fp)
  80a7b0:	1004403a 	cmpge	r2,r2,zero
  80a7b4:	1000071e 	bne	r2,zero,80a7d4 <read+0xd4>
        {
          ALT_ERRNO = -rval;
  80a7b8:	080a8240 	call	80a824 <alt_get_errno>
  80a7bc:	e0fff917 	ldw	r3,-28(fp)
  80a7c0:	00c7c83a 	sub	r3,zero,r3
  80a7c4:	10c00015 	stw	r3,0(r2)
          return -1;
  80a7c8:	00bfffc4 	movi	r2,-1
  80a7cc:	e0bffe15 	stw	r2,-8(fp)
  80a7d0:	00000e06 	br	80a80c <read+0x10c>
        }
        return rval;
  80a7d4:	e0bff917 	ldw	r2,-28(fp)
  80a7d8:	e0bffe15 	stw	r2,-8(fp)
  80a7dc:	00000b06 	br	80a80c <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80a7e0:	080a8240 	call	80a824 <alt_get_errno>
  80a7e4:	1007883a 	mov	r3,r2
  80a7e8:	00800344 	movi	r2,13
  80a7ec:	18800015 	stw	r2,0(r3)
  80a7f0:	00000406 	br	80a804 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80a7f4:	080a8240 	call	80a824 <alt_get_errno>
  80a7f8:	1007883a 	mov	r3,r2
  80a7fc:	00801444 	movi	r2,81
  80a800:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80a804:	00bfffc4 	movi	r2,-1
  80a808:	e0bffe15 	stw	r2,-8(fp)
  80a80c:	e0bffe17 	ldw	r2,-8(fp)
}
  80a810:	e037883a 	mov	sp,fp
  80a814:	dfc00117 	ldw	ra,4(sp)
  80a818:	df000017 	ldw	fp,0(sp)
  80a81c:	dec00204 	addi	sp,sp,8
  80a820:	f800283a 	ret

0080a824 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a824:	defffd04 	addi	sp,sp,-12
  80a828:	dfc00215 	stw	ra,8(sp)
  80a82c:	df000115 	stw	fp,4(sp)
  80a830:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80a834:	008020b4 	movhi	r2,130
  80a838:	10a32d04 	addi	r2,r2,-29516
  80a83c:	10800017 	ldw	r2,0(r2)
  80a840:	1005003a 	cmpeq	r2,r2,zero
  80a844:	1000061e 	bne	r2,zero,80a860 <alt_get_errno+0x3c>
  80a848:	008020b4 	movhi	r2,130
  80a84c:	10a32d04 	addi	r2,r2,-29516
  80a850:	10800017 	ldw	r2,0(r2)
  80a854:	103ee83a 	callr	r2
  80a858:	e0bfff15 	stw	r2,-4(fp)
  80a85c:	00000306 	br	80a86c <alt_get_errno+0x48>
  80a860:	008020b4 	movhi	r2,130
  80a864:	10aa3404 	addi	r2,r2,-22320
  80a868:	e0bfff15 	stw	r2,-4(fp)
  80a86c:	e0bfff17 	ldw	r2,-4(fp)
}
  80a870:	e037883a 	mov	sp,fp
  80a874:	dfc00117 	ldw	ra,4(sp)
  80a878:	df000017 	ldw	fp,0(sp)
  80a87c:	dec00204 	addi	sp,sp,8
  80a880:	f800283a 	ret

0080a884 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80a884:	defffc04 	addi	sp,sp,-16
  80a888:	dfc00315 	stw	ra,12(sp)
  80a88c:	df000215 	stw	fp,8(sp)
  80a890:	dc000115 	stw	r16,4(sp)
  80a894:	df000104 	addi	fp,sp,4
  80a898:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80a89c:	e0bfff17 	ldw	r2,-4(fp)
  80a8a0:	108000d0 	cmplti	r2,r2,3
  80a8a4:	10000f1e 	bne	r2,zero,80a8e4 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
  80a8a8:	e13fff17 	ldw	r4,-4(fp)
  80a8ac:	04002074 	movhi	r16,129
  80a8b0:	841e8404 	addi	r16,r16,31248
  80a8b4:	01400304 	movi	r5,12
  80a8b8:	08099200 	call	809920 <__mulsi3>
  80a8bc:	1405883a 	add	r2,r2,r16
  80a8c0:	10800204 	addi	r2,r2,8
  80a8c4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80a8c8:	e13fff17 	ldw	r4,-4(fp)
  80a8cc:	04002074 	movhi	r16,129
  80a8d0:	841e8404 	addi	r16,r16,31248
  80a8d4:	01400304 	movi	r5,12
  80a8d8:	08099200 	call	809920 <__mulsi3>
  80a8dc:	1405883a 	add	r2,r2,r16
  80a8e0:	10000015 	stw	zero,0(r2)
  }
}
  80a8e4:	e037883a 	mov	sp,fp
  80a8e8:	dfc00217 	ldw	ra,8(sp)
  80a8ec:	df000117 	ldw	fp,4(sp)
  80a8f0:	dc000017 	ldw	r16,0(sp)
  80a8f4:	dec00304 	addi	sp,sp,12
  80a8f8:	f800283a 	ret

0080a8fc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80a8fc:	defff804 	addi	sp,sp,-32
  80a900:	df000715 	stw	fp,28(sp)
  80a904:	df000704 	addi	fp,sp,28
  80a908:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a90c:	0005303a 	rdctl	r2,status
  80a910:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a914:	e0fffb17 	ldw	r3,-20(fp)
  80a918:	00bfff84 	movi	r2,-2
  80a91c:	1884703a 	and	r2,r3,r2
  80a920:	1001703a 	wrctl	status,r2
  
  return context;
  80a924:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80a928:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80a92c:	d0a00c17 	ldw	r2,-32720(gp)
  80a930:	10c000c4 	addi	r3,r2,3
  80a934:	00bfff04 	movi	r2,-4
  80a938:	1884703a 	and	r2,r3,r2
  80a93c:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80a940:	d0e00c17 	ldw	r3,-32720(gp)
  80a944:	e0bffe17 	ldw	r2,-8(fp)
  80a948:	1887883a 	add	r3,r3,r2
  80a94c:	00804034 	movhi	r2,256
  80a950:	10800004 	addi	r2,r2,0
  80a954:	10c0072e 	bgeu	r2,r3,80a974 <sbrk+0x78>
  80a958:	e0bffd17 	ldw	r2,-12(fp)
  80a95c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a960:	e0bffa17 	ldw	r2,-24(fp)
  80a964:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80a968:	00bfffc4 	movi	r2,-1
  80a96c:	e0bfff15 	stw	r2,-4(fp)
  80a970:	00000c06 	br	80a9a4 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  80a974:	d0a00c17 	ldw	r2,-32720(gp)
  80a978:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  80a97c:	d0e00c17 	ldw	r3,-32720(gp)
  80a980:	e0bffe17 	ldw	r2,-8(fp)
  80a984:	1885883a 	add	r2,r3,r2
  80a988:	d0a00c15 	stw	r2,-32720(gp)
  80a98c:	e0bffd17 	ldw	r2,-12(fp)
  80a990:	e0bff915 	stw	r2,-28(fp)
  80a994:	e0bff917 	ldw	r2,-28(fp)
  80a998:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80a99c:	e0bffc17 	ldw	r2,-16(fp)
  80a9a0:	e0bfff15 	stw	r2,-4(fp)
  80a9a4:	e0bfff17 	ldw	r2,-4(fp)
} 
  80a9a8:	e037883a 	mov	sp,fp
  80a9ac:	df000017 	ldw	fp,0(sp)
  80a9b0:	dec00104 	addi	sp,sp,4
  80a9b4:	f800283a 	ret

0080a9b8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80a9b8:	defff704 	addi	sp,sp,-36
  80a9bc:	dfc00815 	stw	ra,32(sp)
  80a9c0:	df000715 	stw	fp,28(sp)
  80a9c4:	df000704 	addi	fp,sp,28
  80a9c8:	e13ffb15 	stw	r4,-20(fp)
  80a9cc:	e17ffc15 	stw	r5,-16(fp)
  80a9d0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80a9d4:	e0bffb17 	ldw	r2,-20(fp)
  80a9d8:	1004803a 	cmplt	r2,r2,zero
  80a9dc:	1000091e 	bne	r2,zero,80aa04 <write+0x4c>
  80a9e0:	e13ffb17 	ldw	r4,-20(fp)
  80a9e4:	01400304 	movi	r5,12
  80a9e8:	08099200 	call	809920 <__mulsi3>
  80a9ec:	1007883a 	mov	r3,r2
  80a9f0:	00802074 	movhi	r2,129
  80a9f4:	109e8404 	addi	r2,r2,31248
  80a9f8:	1887883a 	add	r3,r3,r2
  80a9fc:	e0ffff15 	stw	r3,-4(fp)
  80aa00:	00000106 	br	80aa08 <write+0x50>
  80aa04:	e03fff15 	stw	zero,-4(fp)
  80aa08:	e0bfff17 	ldw	r2,-4(fp)
  80aa0c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80aa10:	e0bffa17 	ldw	r2,-24(fp)
  80aa14:	1005003a 	cmpeq	r2,r2,zero
  80aa18:	1000241e 	bne	r2,zero,80aaac <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80aa1c:	e0bffa17 	ldw	r2,-24(fp)
  80aa20:	10800217 	ldw	r2,8(r2)
  80aa24:	108000cc 	andi	r2,r2,3
  80aa28:	1005003a 	cmpeq	r2,r2,zero
  80aa2c:	10001a1e 	bne	r2,zero,80aa98 <write+0xe0>
  80aa30:	e0bffa17 	ldw	r2,-24(fp)
  80aa34:	10800017 	ldw	r2,0(r2)
  80aa38:	10800617 	ldw	r2,24(r2)
  80aa3c:	1005003a 	cmpeq	r2,r2,zero
  80aa40:	1000151e 	bne	r2,zero,80aa98 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80aa44:	e0bffa17 	ldw	r2,-24(fp)
  80aa48:	10800017 	ldw	r2,0(r2)
  80aa4c:	10800617 	ldw	r2,24(r2)
  80aa50:	e17ffc17 	ldw	r5,-16(fp)
  80aa54:	e1bffd17 	ldw	r6,-12(fp)
  80aa58:	e13ffa17 	ldw	r4,-24(fp)
  80aa5c:	103ee83a 	callr	r2
  80aa60:	e0bff915 	stw	r2,-28(fp)
  80aa64:	e0bff917 	ldw	r2,-28(fp)
  80aa68:	1004403a 	cmpge	r2,r2,zero
  80aa6c:	1000071e 	bne	r2,zero,80aa8c <write+0xd4>
      {
        ALT_ERRNO = -rval;
  80aa70:	080aadc0 	call	80aadc <alt_get_errno>
  80aa74:	e0fff917 	ldw	r3,-28(fp)
  80aa78:	00c7c83a 	sub	r3,zero,r3
  80aa7c:	10c00015 	stw	r3,0(r2)
        return -1;
  80aa80:	00bfffc4 	movi	r2,-1
  80aa84:	e0bffe15 	stw	r2,-8(fp)
  80aa88:	00000e06 	br	80aac4 <write+0x10c>
      }
      return rval;
  80aa8c:	e0bff917 	ldw	r2,-28(fp)
  80aa90:	e0bffe15 	stw	r2,-8(fp)
  80aa94:	00000b06 	br	80aac4 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80aa98:	080aadc0 	call	80aadc <alt_get_errno>
  80aa9c:	1007883a 	mov	r3,r2
  80aaa0:	00800344 	movi	r2,13
  80aaa4:	18800015 	stw	r2,0(r3)
  80aaa8:	00000406 	br	80aabc <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80aaac:	080aadc0 	call	80aadc <alt_get_errno>
  80aab0:	1007883a 	mov	r3,r2
  80aab4:	00801444 	movi	r2,81
  80aab8:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80aabc:	00bfffc4 	movi	r2,-1
  80aac0:	e0bffe15 	stw	r2,-8(fp)
  80aac4:	e0bffe17 	ldw	r2,-8(fp)
}
  80aac8:	e037883a 	mov	sp,fp
  80aacc:	dfc00117 	ldw	ra,4(sp)
  80aad0:	df000017 	ldw	fp,0(sp)
  80aad4:	dec00204 	addi	sp,sp,8
  80aad8:	f800283a 	ret

0080aadc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80aadc:	defffd04 	addi	sp,sp,-12
  80aae0:	dfc00215 	stw	ra,8(sp)
  80aae4:	df000115 	stw	fp,4(sp)
  80aae8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80aaec:	008020b4 	movhi	r2,130
  80aaf0:	10a32d04 	addi	r2,r2,-29516
  80aaf4:	10800017 	ldw	r2,0(r2)
  80aaf8:	1005003a 	cmpeq	r2,r2,zero
  80aafc:	1000061e 	bne	r2,zero,80ab18 <alt_get_errno+0x3c>
  80ab00:	008020b4 	movhi	r2,130
  80ab04:	10a32d04 	addi	r2,r2,-29516
  80ab08:	10800017 	ldw	r2,0(r2)
  80ab0c:	103ee83a 	callr	r2
  80ab10:	e0bfff15 	stw	r2,-4(fp)
  80ab14:	00000306 	br	80ab24 <alt_get_errno+0x48>
  80ab18:	008020b4 	movhi	r2,130
  80ab1c:	10aa3404 	addi	r2,r2,-22320
  80ab20:	e0bfff15 	stw	r2,-4(fp)
  80ab24:	e0bfff17 	ldw	r2,-4(fp)
}
  80ab28:	e037883a 	mov	sp,fp
  80ab2c:	dfc00117 	ldw	ra,4(sp)
  80ab30:	df000017 	ldw	fp,0(sp)
  80ab34:	dec00204 	addi	sp,sp,8
  80ab38:	f800283a 	ret

0080ab3c <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
  80ab3c:	deffdf04 	addi	sp,sp,-132
  80ab40:	dfc02015 	stw	ra,128(sp)
  80ab44:	df001f15 	stw	fp,124(sp)
  80ab48:	df001f04 	addi	fp,sp,124
  80ab4c:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  80ab50:	e17fe204 	addi	r5,fp,-120
  80ab54:	01003fc4 	movi	r4,255
  80ab58:	08129940 	call	812994 <OSTaskQuery>
  80ab5c:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  80ab60:	e0bffe83 	ldbu	r2,-6(fp)
  80ab64:	10803fcc 	andi	r2,r2,255
  80ab68:	1004c03a 	cmpne	r2,r2,zero
  80ab6c:	1000191e 	bne	r2,zero,80abd4 <__env_lock+0x98>
    return;

  id = tcb.OSTCBPrio;
  80ab70:	e0bfee83 	ldbu	r2,-70(fp)
  80ab74:	10803fcc 	andi	r2,r2,255
  80ab78:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  80ab7c:	d1271817 	ldw	r4,-25504(gp)
  80ab80:	e17ffd04 	addi	r5,fp,-12
  80ab84:	0810ee00 	call	810ee0 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
  80ab88:	e0bffe43 	ldbu	r2,-7(fp)
  80ab8c:	10803fcc 	andi	r2,r2,255
  80ab90:	1005003a 	cmpeq	r2,r2,zero
  80ab94:	1000071e 	bne	r2,zero,80abb4 <__env_lock+0x78>
  80ab98:	d0e00d17 	ldw	r3,-32716(gp)
  80ab9c:	e0bfe117 	ldw	r2,-124(fp)
  80aba0:	10c0041e 	bne	r2,r3,80abb4 <__env_lock+0x78>
  {
    /* we do; just count the recursion */

    locks++;
  80aba4:	d0a71717 	ldw	r2,-25508(gp)
  80aba8:	10800044 	addi	r2,r2,1
  80abac:	d0a71715 	stw	r2,-25508(gp)
  id = tcb.OSTCBPrio;
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  if( semdata.OSEventGrp && id == lockid ) 
  80abb0:	00000806 	br	80abd4 <__env_lock+0x98>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
  80abb4:	d1271817 	ldw	r4,-25504(gp)
  80abb8:	e1bffe84 	addi	r6,fp,-6
  80abbc:	000b883a 	mov	r5,zero
  80abc0:	08109c00 	call	8109c0 <OSSemPend>
    locks  = 1;
  80abc4:	00800044 	movi	r2,1
  80abc8:	d0a71715 	stw	r2,-25508(gp)
    lockid = id;
  80abcc:	e0bfe117 	ldw	r2,-124(fp)
  80abd0:	d0a00d15 	stw	r2,-32716(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  80abd4:	e037883a 	mov	sp,fp
  80abd8:	dfc00117 	ldw	ra,4(sp)
  80abdc:	df000017 	ldw	fp,0(sp)
  80abe0:	dec00204 	addi	sp,sp,8
  80abe4:	f800283a 	ret

0080abe8 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
  80abe8:	defffd04 	addi	sp,sp,-12
  80abec:	dfc00215 	stw	ra,8(sp)
  80abf0:	df000115 	stw	fp,4(sp)
  80abf4:	df000104 	addi	fp,sp,4
  80abf8:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
  80abfc:	d0a71717 	ldw	r2,-25508(gp)
  80ac00:	1005003a 	cmpeq	r2,r2,zero
  80ac04:	10000a1e 	bne	r2,zero,80ac30 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
  80ac08:	d0a71717 	ldw	r2,-25508(gp)
  80ac0c:	10bfffc4 	addi	r2,r2,-1
  80ac10:	d0a71715 	stw	r2,-25508(gp)
  80ac14:	d0a71717 	ldw	r2,-25508(gp)
  80ac18:	1004c03a 	cmpne	r2,r2,zero
  80ac1c:	1000041e 	bne	r2,zero,80ac30 <__env_unlock+0x48>
  {
    lockid = -1;
  80ac20:	00bfffc4 	movi	r2,-1
  80ac24:	d0a00d15 	stw	r2,-32716(gp)
    OSSemPost( alt_envsem );
  80ac28:	d1271817 	ldw	r4,-25504(gp)
  80ac2c:	0810db80 	call	810db8 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  80ac30:	e037883a 	mov	sp,fp
  80ac34:	dfc00117 	ldw	ra,4(sp)
  80ac38:	df000017 	ldw	fp,0(sp)
  80ac3c:	dec00204 	addi	sp,sp,8
  80ac40:	f800283a 	ret

0080ac44 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
  80ac44:	deffdb04 	addi	sp,sp,-148
  80ac48:	dfc02415 	stw	ra,144(sp)
  80ac4c:	df002315 	stw	fp,140(sp)
  80ac50:	df002304 	addi	fp,sp,140
  80ac54:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80ac58:	e03fe015 	stw	zero,-128(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
  80ac5c:	008020b4 	movhi	r2,130
  80ac60:	10aa3d44 	addi	r2,r2,-22283
  80ac64:	10800003 	ldbu	r2,0(r2)
  80ac68:	10803fcc 	andi	r2,r2,255
  80ac6c:	10800058 	cmpnei	r2,r2,1
  80ac70:	1000311e 	bne	r2,zero,80ad38 <__malloc_lock+0xf4>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  80ac74:	e17fe204 	addi	r5,fp,-120
  80ac78:	01003fc4 	movi	r4,255
  80ac7c:	08129940 	call	812994 <OSTaskQuery>
  80ac80:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  80ac84:	e0bffe83 	ldbu	r2,-6(fp)
  80ac88:	10803fcc 	andi	r2,r2,255
  80ac8c:	1004c03a 	cmpne	r2,r2,zero
  80ac90:	1000291e 	bne	r2,zero,80ad38 <__malloc_lock+0xf4>
    return;

  id = tcb.OSTCBPrio;
  80ac94:	e0bfee83 	ldbu	r2,-70(fp)
  80ac98:	10803fcc 	andi	r2,r2,255
  80ac9c:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
  80aca0:	d1271a17 	ldw	r4,-25496(gp)
  80aca4:	e17ffd04 	addi	r5,fp,-12
  80aca8:	0810ee00 	call	810ee0 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80acac:	0005303a 	rdctl	r2,status
  80acb0:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80acb4:	e0ffdf17 	ldw	r3,-132(fp)
  80acb8:	00bfff84 	movi	r2,-2
  80acbc:	1884703a 	and	r2,r3,r2
  80acc0:	1001703a 	wrctl	status,r2
  
  return context;
  80acc4:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
  80acc8:	e0bfe015 	stw	r2,-128(fp)

  if( !semdata.OSCnt && id == lockid ) 
  80accc:	e0bffd0b 	ldhu	r2,-12(fp)
  80acd0:	10bfffcc 	andi	r2,r2,65535
  80acd4:	1004c03a 	cmpne	r2,r2,zero
  80acd8:	10000b1e 	bne	r2,zero,80ad08 <__malloc_lock+0xc4>
  80acdc:	d0e00e17 	ldw	r3,-32712(gp)
  80ace0:	e0bfe117 	ldw	r2,-124(fp)
  80ace4:	10c0081e 	bne	r2,r3,80ad08 <__malloc_lock+0xc4>
  {
    /* we do; just count the recursion */
    locks++;
  80ace8:	d0a71917 	ldw	r2,-25500(gp)
  80acec:	10800044 	addi	r2,r2,1
  80acf0:	d0a71915 	stw	r2,-25500(gp)
  80acf4:	e0bfe017 	ldw	r2,-128(fp)
  80acf8:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80acfc:	e0bfde17 	ldw	r2,-136(fp)
  80ad00:	1001703a 	wrctl	status,r2

  OSSemQuery( alt_heapsem, &semdata );
  
  OS_ENTER_CRITICAL();

  if( !semdata.OSCnt && id == lockid ) 
  80ad04:	00000c06 	br	80ad38 <__malloc_lock+0xf4>
  80ad08:	e0bfe017 	ldw	r2,-128(fp)
  80ad0c:	e0bfdd15 	stw	r2,-140(fp)
  80ad10:	e0bfdd17 	ldw	r2,-140(fp)
  80ad14:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
  80ad18:	d1271a17 	ldw	r4,-25496(gp)
  80ad1c:	e1bffe84 	addi	r6,fp,-6
  80ad20:	000b883a 	mov	r5,zero
  80ad24:	08109c00 	call	8109c0 <OSSemPend>
    locks  = 1;
  80ad28:	00800044 	movi	r2,1
  80ad2c:	d0a71915 	stw	r2,-25500(gp)
    lockid = id;
  80ad30:	e0bfe117 	ldw	r2,-124(fp)
  80ad34:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  80ad38:	e037883a 	mov	sp,fp
  80ad3c:	dfc00117 	ldw	ra,4(sp)
  80ad40:	df000017 	ldw	fp,0(sp)
  80ad44:	dec00204 	addi	sp,sp,8
  80ad48:	f800283a 	ret

0080ad4c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80ad4c:	defff804 	addi	sp,sp,-32
  80ad50:	dfc00715 	stw	ra,28(sp)
  80ad54:	df000615 	stw	fp,24(sp)
  80ad58:	df000604 	addi	fp,sp,24
  80ad5c:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80ad60:	e03ffe15 	stw	zero,-8(fp)
#endif 

  if (OSRunning != OS_TRUE)
  80ad64:	008020b4 	movhi	r2,130
  80ad68:	10aa3d44 	addi	r2,r2,-22283
  80ad6c:	10800003 	ldbu	r2,0(r2)
  80ad70:	10803fcc 	andi	r2,r2,255
  80ad74:	10800058 	cmpnei	r2,r2,1
  80ad78:	1000231e 	bne	r2,zero,80ae08 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ad7c:	0005303a 	rdctl	r2,status
  80ad80:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ad84:	e0fffd17 	ldw	r3,-12(fp)
  80ad88:	00bfff84 	movi	r2,-2
  80ad8c:	1884703a 	and	r2,r3,r2
  80ad90:	1001703a 	wrctl	status,r2
  
  return context;
  80ad94:	e0bffd17 	ldw	r2,-12(fp)
      return;

  OS_ENTER_CRITICAL();
  80ad98:	e0bffe15 	stw	r2,-8(fp)
  if (locks == 0)
  80ad9c:	d0a71917 	ldw	r2,-25500(gp)
  80ada0:	1004c03a 	cmpne	r2,r2,zero
  80ada4:	1000051e 	bne	r2,zero,80adbc <__malloc_unlock+0x70>
  80ada8:	e0bffe17 	ldw	r2,-8(fp)
  80adac:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80adb0:	e0bffc17 	ldw	r2,-16(fp)
  80adb4:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
  80adb8:	00001306 	br	80ae08 <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
  80adbc:	d0a71917 	ldw	r2,-25500(gp)
  80adc0:	10bfffc4 	addi	r2,r2,-1
  80adc4:	d0a71915 	stw	r2,-25500(gp)
  80adc8:	d0a71917 	ldw	r2,-25500(gp)
  80adcc:	1004c03a 	cmpne	r2,r2,zero
  80add0:	1000091e 	bne	r2,zero,80adf8 <__malloc_unlock+0xac>
  {
    lockid = -1;
  80add4:	00bfffc4 	movi	r2,-1
  80add8:	d0a00e15 	stw	r2,-32712(gp)
  80addc:	e0bffe17 	ldw	r2,-8(fp)
  80ade0:	e0bffb15 	stw	r2,-20(fp)
  80ade4:	e0bffb17 	ldw	r2,-20(fp)
  80ade8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
  80adec:	d1271a17 	ldw	r4,-25496(gp)
  80adf0:	0810db80 	call	810db8 <OSSemPost>
  80adf4:	00000406 	br	80ae08 <__malloc_unlock+0xbc>
  80adf8:	e0bffe17 	ldw	r2,-8(fp)
  80adfc:	e0bffa15 	stw	r2,-24(fp)
  80ae00:	e0bffa17 	ldw	r2,-24(fp)
  80ae04:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  80ae08:	e037883a 	mov	sp,fp
  80ae0c:	dfc00117 	ldw	ra,4(sp)
  80ae10:	df000017 	ldw	fp,0(sp)
  80ae14:	dec00204 	addi	sp,sp,8
  80ae18:	f800283a 	ret

0080ae1c <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  80ae1c:	defff604 	addi	sp,sp,-40
  80ae20:	dfc00915 	stw	ra,36(sp)
  80ae24:	df000815 	stw	fp,32(sp)
  80ae28:	df000804 	addi	fp,sp,32
  80ae2c:	e13ffc15 	stw	r4,-16(fp)
  80ae30:	e17ffd15 	stw	r5,-12(fp)
  80ae34:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80ae38:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80ae3c:	e0bffe17 	ldw	r2,-8(fp)
  80ae40:	1004c03a 	cmpne	r2,r2,zero
  80ae44:	1000021e 	bne	r2,zero,80ae50 <OSEventNameGet+0x34>
        return (0);
  80ae48:	e03fff15 	stw	zero,-4(fp)
  80ae4c:	00003906 	br	80af34 <OSEventNameGet+0x118>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  80ae50:	e0bffc17 	ldw	r2,-16(fp)
  80ae54:	1004c03a 	cmpne	r2,r2,zero
  80ae58:	1000051e 	bne	r2,zero,80ae70 <OSEventNameGet+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  80ae5c:	e0fffe17 	ldw	r3,-8(fp)
  80ae60:	00800104 	movi	r2,4
  80ae64:	18800005 	stb	r2,0(r3)
        return (0);
  80ae68:	e03fff15 	stw	zero,-4(fp)
  80ae6c:	00003106 	br	80af34 <OSEventNameGet+0x118>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80ae70:	e0bffd17 	ldw	r2,-12(fp)
  80ae74:	1004c03a 	cmpne	r2,r2,zero
  80ae78:	1000051e 	bne	r2,zero,80ae90 <OSEventNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  80ae7c:	e0fffe17 	ldw	r3,-8(fp)
  80ae80:	00800304 	movi	r2,12
  80ae84:	18800005 	stb	r2,0(r3)
        return (0);
  80ae88:	e03fff15 	stw	zero,-4(fp)
  80ae8c:	00002906 	br	80af34 <OSEventNameGet+0x118>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80ae90:	d0a72903 	ldbu	r2,-25436(gp)
  80ae94:	10803fcc 	andi	r2,r2,255
  80ae98:	1005003a 	cmpeq	r2,r2,zero
  80ae9c:	1000051e 	bne	r2,zero,80aeb4 <OSEventNameGet+0x98>
        *perr  = OS_ERR_NAME_GET_ISR;
  80aea0:	e0fffe17 	ldw	r3,-8(fp)
  80aea4:	00800444 	movi	r2,17
  80aea8:	18800005 	stb	r2,0(r3)
        return (0);
  80aeac:	e03fff15 	stw	zero,-4(fp)
  80aeb0:	00002006 	br	80af34 <OSEventNameGet+0x118>
    }
    switch (pevent->OSEventType) {
  80aeb4:	e0bffc17 	ldw	r2,-16(fp)
  80aeb8:	10800003 	ldbu	r2,0(r2)
  80aebc:	10803fcc 	andi	r2,r2,255
  80aec0:	10bfffc4 	addi	r2,r2,-1
  80aec4:	10800128 	cmpgeui	r2,r2,4
  80aec8:	1000161e 	bne	r2,zero,80af24 <OSEventNameGet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80aecc:	0005303a 	rdctl	r2,status
  80aed0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80aed4:	e0fff917 	ldw	r3,-28(fp)
  80aed8:	00bfff84 	movi	r2,-2
  80aedc:	1884703a 	and	r2,r3,r2
  80aee0:	1001703a 	wrctl	status,r2
  
  return context;
  80aee4:	e0bff917 	ldw	r2,-28(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
  80aee8:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
  80aeec:	e0bffc17 	ldw	r2,-16(fp)
  80aef0:	11400384 	addi	r5,r2,14
  80aef4:	e13ffd17 	ldw	r4,-12(fp)
  80aef8:	080c9a00 	call	80c9a0 <OS_StrCopy>
  80aefc:	e0bffb05 	stb	r2,-20(fp)
  80af00:	e0bffa17 	ldw	r2,-24(fp)
  80af04:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80af08:	e0bff817 	ldw	r2,-32(fp)
  80af0c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80af10:	e0bffe17 	ldw	r2,-8(fp)
  80af14:	10000005 	stb	zero,0(r2)
    return (len);
  80af18:	e0bffb03 	ldbu	r2,-20(fp)
  80af1c:	e0bfff15 	stw	r2,-4(fp)
  80af20:	00000406 	br	80af34 <OSEventNameGet+0x118>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  80af24:	e0fffe17 	ldw	r3,-8(fp)
  80af28:	00800044 	movi	r2,1
  80af2c:	18800005 	stb	r2,0(r3)
             return (0);
  80af30:	e03fff15 	stw	zero,-4(fp)
  80af34:	e0bfff17 	ldw	r2,-4(fp)
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
  80af38:	e037883a 	mov	sp,fp
  80af3c:	dfc00117 	ldw	ra,4(sp)
  80af40:	df000017 	ldw	fp,0(sp)
  80af44:	dec00204 	addi	sp,sp,8
  80af48:	f800283a 	ret

0080af4c <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  80af4c:	defff604 	addi	sp,sp,-40
  80af50:	dfc00915 	stw	ra,36(sp)
  80af54:	df000815 	stw	fp,32(sp)
  80af58:	df000804 	addi	fp,sp,32
  80af5c:	e13ffd15 	stw	r4,-12(fp)
  80af60:	e17ffe15 	stw	r5,-8(fp)
  80af64:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80af68:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80af6c:	e0bfff17 	ldw	r2,-4(fp)
  80af70:	1005003a 	cmpeq	r2,r2,zero
  80af74:	1000411e 	bne	r2,zero,80b07c <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  80af78:	e0bffd17 	ldw	r2,-12(fp)
  80af7c:	1004c03a 	cmpne	r2,r2,zero
  80af80:	1000041e 	bne	r2,zero,80af94 <OSEventNameSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
  80af84:	e0ffff17 	ldw	r3,-4(fp)
  80af88:	00800104 	movi	r2,4
  80af8c:	18800005 	stb	r2,0(r3)
        return;
  80af90:	00003a06 	br	80b07c <OSEventNameSet+0x130>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80af94:	e0bffe17 	ldw	r2,-8(fp)
  80af98:	1004c03a 	cmpne	r2,r2,zero
  80af9c:	1000041e 	bne	r2,zero,80afb0 <OSEventNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  80afa0:	e0ffff17 	ldw	r3,-4(fp)
  80afa4:	00800304 	movi	r2,12
  80afa8:	18800005 	stb	r2,0(r3)
        return;
  80afac:	00003306 	br	80b07c <OSEventNameSet+0x130>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80afb0:	d0a72903 	ldbu	r2,-25436(gp)
  80afb4:	10803fcc 	andi	r2,r2,255
  80afb8:	1005003a 	cmpeq	r2,r2,zero
  80afbc:	1000041e 	bne	r2,zero,80afd0 <OSEventNameSet+0x84>
        *perr = OS_ERR_NAME_SET_ISR;
  80afc0:	e0ffff17 	ldw	r3,-4(fp)
  80afc4:	00800484 	movi	r2,18
  80afc8:	18800005 	stb	r2,0(r3)
        return;
  80afcc:	00002b06 	br	80b07c <OSEventNameSet+0x130>
    }
    switch (pevent->OSEventType) {
  80afd0:	e0bffd17 	ldw	r2,-12(fp)
  80afd4:	10800003 	ldbu	r2,0(r2)
  80afd8:	10803fcc 	andi	r2,r2,255
  80afdc:	10bfffc4 	addi	r2,r2,-1
  80afe0:	10800128 	cmpgeui	r2,r2,4
  80afe4:	10000f1e 	bne	r2,zero,80b024 <OSEventNameSet+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80afe8:	0005303a 	rdctl	r2,status
  80afec:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80aff0:	e0fffa17 	ldw	r3,-24(fp)
  80aff4:	00bfff84 	movi	r2,-2
  80aff8:	1884703a 	and	r2,r3,r2
  80affc:	1001703a 	wrctl	status,r2
  
  return context;
  80b000:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
  80b004:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
  80b008:	e13ffe17 	ldw	r4,-8(fp)
  80b00c:	080ca200 	call	80ca20 <OS_StrLen>
  80b010:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
  80b014:	e0bffc03 	ldbu	r2,-16(fp)
  80b018:	10800828 	cmpgeui	r2,r2,32
  80b01c:	1000051e 	bne	r2,zero,80b034 <OSEventNameSet+0xe8>
  80b020:	00000c06 	br	80b054 <OSEventNameSet+0x108>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  80b024:	e0ffff17 	ldw	r3,-4(fp)
  80b028:	00800044 	movi	r2,1
  80b02c:	18800005 	stb	r2,0(r3)
             return;
  80b030:	00001206 	br	80b07c <OSEventNameSet+0x130>
  80b034:	e0bffb17 	ldw	r2,-20(fp)
  80b038:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b03c:	e0bff917 	ldw	r2,-28(fp)
  80b040:	1001703a 	wrctl	status,r2
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
  80b044:	e0ffff17 	ldw	r3,-4(fp)
  80b048:	008002c4 	movi	r2,11
  80b04c:	18800005 	stb	r2,0(r3)
        return;
  80b050:	00000a06 	br	80b07c <OSEventNameSet+0x130>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
  80b054:	e0bffd17 	ldw	r2,-12(fp)
  80b058:	11000384 	addi	r4,r2,14
  80b05c:	e17ffe17 	ldw	r5,-8(fp)
  80b060:	080c9a00 	call	80c9a0 <OS_StrCopy>
  80b064:	e0bffb17 	ldw	r2,-20(fp)
  80b068:	e0bff815 	stw	r2,-32(fp)
  80b06c:	e0bff817 	ldw	r2,-32(fp)
  80b070:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80b074:	e0bfff17 	ldw	r2,-4(fp)
  80b078:	10000005 	stb	zero,0(r2)
}
  80b07c:	e037883a 	mov	sp,fp
  80b080:	dfc00117 	ldw	ra,4(sp)
  80b084:	df000017 	ldw	fp,0(sp)
  80b088:	dec00204 	addi	sp,sp,8
  80b08c:	f800283a 	ret

0080b090 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
  80b090:	deffe704 	addi	sp,sp,-100
  80b094:	dfc01815 	stw	ra,96(sp)
  80b098:	df001715 	stw	fp,92(sp)
  80b09c:	df001704 	addi	fp,sp,92
  80b0a0:	e13ff615 	stw	r4,-40(fp)
  80b0a4:	e17ff715 	stw	r5,-36(fp)
  80b0a8:	e1bff815 	stw	r6,-32(fp)
  80b0ac:	e1fff90d 	sth	r7,-28(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
  80b0b0:	e03ff015 	stw	zero,-64(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
  80b0b4:	e0800217 	ldw	r2,8(fp)
  80b0b8:	1004c03a 	cmpne	r2,r2,zero
  80b0bc:	1000021e 	bne	r2,zero,80b0c8 <OSEventPendMulti+0x38>
        return (0);
  80b0c0:	e03fff15 	stw	zero,-4(fp)
  80b0c4:	00019906 	br	80b72c <OSEventPendMulti+0x69c>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
  80b0c8:	e0bff617 	ldw	r2,-40(fp)
  80b0cc:	1004c03a 	cmpne	r2,r2,zero
  80b0d0:	1000051e 	bne	r2,zero,80b0e8 <OSEventPendMulti+0x58>
       *perr =  OS_ERR_PEVENT_NULL;
  80b0d4:	e0c00217 	ldw	r3,8(fp)
  80b0d8:	00800104 	movi	r2,4
  80b0dc:	18800005 	stb	r2,0(r3)
        return (0);
  80b0e0:	e03fff15 	stw	zero,-4(fp)
  80b0e4:	00019106 	br	80b72c <OSEventPendMulti+0x69c>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
  80b0e8:	e0bff717 	ldw	r2,-36(fp)
  80b0ec:	1004c03a 	cmpne	r2,r2,zero
  80b0f0:	1000051e 	bne	r2,zero,80b108 <OSEventPendMulti+0x78>
       *perr =  OS_ERR_PEVENT_NULL;
  80b0f4:	e0c00217 	ldw	r3,8(fp)
  80b0f8:	00800104 	movi	r2,4
  80b0fc:	18800005 	stb	r2,0(r3)
        return (0);
  80b100:	e03fff15 	stw	zero,-4(fp)
  80b104:	00018906 	br	80b72c <OSEventPendMulti+0x69c>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
  80b108:	e0bff817 	ldw	r2,-32(fp)
  80b10c:	1004c03a 	cmpne	r2,r2,zero
  80b110:	1000051e 	bne	r2,zero,80b128 <OSEventPendMulti+0x98>
       *perr =  OS_ERR_PEVENT_NULL;
  80b114:	e0c00217 	ldw	r3,8(fp)
  80b118:	00800104 	movi	r2,4
  80b11c:	18800005 	stb	r2,0(r3)
        return (0);
  80b120:	e03fff15 	stw	zero,-4(fp)
  80b124:	00018106 	br	80b72c <OSEventPendMulti+0x69c>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
  80b128:	e0bff717 	ldw	r2,-36(fp)
  80b12c:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
  80b130:	e0bff617 	ldw	r2,-40(fp)
  80b134:	e0bff515 	stw	r2,-44(fp)
    pevent      = *pevents;
  80b138:	e0bff517 	ldw	r2,-44(fp)
  80b13c:	10800017 	ldw	r2,0(r2)
  80b140:	e0bff415 	stw	r2,-48(fp)
    while  (pevent != (OS_EVENT *)0) {
  80b144:	00001806 	br	80b1a8 <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
  80b148:	e0bff417 	ldw	r2,-48(fp)
  80b14c:	10800003 	ldbu	r2,0(r2)
  80b150:	10803fcc 	andi	r2,r2,255
  80b154:	e0bffe15 	stw	r2,-8(fp)
  80b158:	e0fffe17 	ldw	r3,-8(fp)
  80b15c:	188000a0 	cmpeqi	r2,r3,2
  80b160:	10000b1e 	bne	r2,zero,80b190 <OSEventPendMulti+0x100>
  80b164:	e0fffe17 	ldw	r3,-8(fp)
  80b168:	188000e0 	cmpeqi	r2,r3,3
  80b16c:	1000081e 	bne	r2,zero,80b190 <OSEventPendMulti+0x100>
  80b170:	e0fffe17 	ldw	r3,-8(fp)
  80b174:	18800060 	cmpeqi	r2,r3,1
  80b178:	1000051e 	bne	r2,zero,80b190 <OSEventPendMulti+0x100>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
  80b17c:	e0c00217 	ldw	r3,8(fp)
  80b180:	00800044 	movi	r2,1
  80b184:	18800005 	stb	r2,0(r3)
                 return (0);
  80b188:	e03fff15 	stw	zero,-4(fp)
  80b18c:	00016706 	br	80b72c <OSEventPendMulti+0x69c>
        }
        pevents++;
  80b190:	e0bff517 	ldw	r2,-44(fp)
  80b194:	10800104 	addi	r2,r2,4
  80b198:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
  80b19c:	e0bff517 	ldw	r2,-44(fp)
  80b1a0:	10800017 	ldw	r2,0(r2)
  80b1a4:	e0bff415 	stw	r2,-48(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
  80b1a8:	e0bff417 	ldw	r2,-48(fp)
  80b1ac:	1004c03a 	cmpne	r2,r2,zero
  80b1b0:	103fe51e 	bne	r2,zero,80b148 <OSEventPendMulti+0xb8>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
  80b1b4:	d0a72903 	ldbu	r2,-25436(gp)
  80b1b8:	10803fcc 	andi	r2,r2,255
  80b1bc:	1005003a 	cmpeq	r2,r2,zero
  80b1c0:	1000051e 	bne	r2,zero,80b1d8 <OSEventPendMulti+0x148>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
  80b1c4:	e0c00217 	ldw	r3,8(fp)
  80b1c8:	00800084 	movi	r2,2
  80b1cc:	18800005 	stb	r2,0(r3)
        return (0);
  80b1d0:	e03fff15 	stw	zero,-4(fp)
  80b1d4:	00015506 	br	80b72c <OSEventPendMulti+0x69c>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
  80b1d8:	d0a71b03 	ldbu	r2,-25492(gp)
  80b1dc:	10803fcc 	andi	r2,r2,255
  80b1e0:	1005003a 	cmpeq	r2,r2,zero
  80b1e4:	1000051e 	bne	r2,zero,80b1fc <OSEventPendMulti+0x16c>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
  80b1e8:	e0c00217 	ldw	r3,8(fp)
  80b1ec:	00800344 	movi	r2,13
  80b1f0:	18800005 	stb	r2,0(r3)
        return (0);
  80b1f4:	e03fff15 	stw	zero,-4(fp)
  80b1f8:	00014c06 	br	80b72c <OSEventPendMulti+0x69c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b1fc:	0005303a 	rdctl	r2,status
  80b200:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b204:	e0ffef17 	ldw	r3,-68(fp)
  80b208:	00bfff84 	movi	r2,-2
  80b20c:	1884703a 	and	r2,r3,r2
  80b210:	1001703a 	wrctl	status,r2
  
  return context;
  80b214:	e0bfef17 	ldw	r2,-68(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
  80b218:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
  80b21c:	e03ff205 	stb	zero,-56(fp)
    events_rdy_nbr =  0;
  80b220:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
  80b224:	e03ff105 	stb	zero,-60(fp)
    pevents        =  pevents_pend;
  80b228:	e0bff617 	ldw	r2,-40(fp)
  80b22c:	e0bff515 	stw	r2,-44(fp)
    pevent         = *pevents;
  80b230:	e0bff517 	ldw	r2,-44(fp)
  80b234:	10800017 	ldw	r2,0(r2)
  80b238:	e0bff415 	stw	r2,-48(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  80b23c:	00008f06 	br	80b47c <OSEventPendMulti+0x3ec>
        switch (pevent->OSEventType) {
  80b240:	e0bff417 	ldw	r2,-48(fp)
  80b244:	10800003 	ldbu	r2,0(r2)
  80b248:	10803fcc 	andi	r2,r2,255
  80b24c:	e0bffd15 	stw	r2,-12(fp)
  80b250:	e0fffd17 	ldw	r3,-12(fp)
  80b254:	188000a0 	cmpeqi	r2,r3,2
  80b258:	1000441e 	bne	r2,zero,80b36c <OSEventPendMulti+0x2dc>
  80b25c:	e0fffd17 	ldw	r3,-12(fp)
  80b260:	188000e0 	cmpeqi	r2,r3,3
  80b264:	1000041e 	bne	r2,zero,80b278 <OSEventPendMulti+0x1e8>
  80b268:	e0fffd17 	ldw	r3,-12(fp)
  80b26c:	18800060 	cmpeqi	r2,r3,1
  80b270:	1000211e 	bne	r2,zero,80b2f8 <OSEventPendMulti+0x268>
  80b274:	00006f06 	br	80b434 <OSEventPendMulti+0x3a4>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
  80b278:	e0bff417 	ldw	r2,-48(fp)
  80b27c:	1080020b 	ldhu	r2,8(r2)
  80b280:	10bfffcc 	andi	r2,r2,65535
  80b284:	1005003a 	cmpeq	r2,r2,zero
  80b288:	1000171e 	bne	r2,zero,80b2e8 <OSEventPendMulti+0x258>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
  80b28c:	e0bff417 	ldw	r2,-48(fp)
  80b290:	1080020b 	ldhu	r2,8(r2)
  80b294:	10bfffc4 	addi	r2,r2,-1
  80b298:	1007883a 	mov	r3,r2
  80b29c:	e0bff417 	ldw	r2,-48(fp)
  80b2a0:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
  80b2a4:	e0fff717 	ldw	r3,-36(fp)
  80b2a8:	e0bff417 	ldw	r2,-48(fp)
  80b2ac:	18800015 	stw	r2,0(r3)
  80b2b0:	e0bff717 	ldw	r2,-36(fp)
  80b2b4:	10800104 	addi	r2,r2,4
  80b2b8:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   =  OS_TRUE;
  80b2bc:	00800044 	movi	r2,1
  80b2c0:	e0bff205 	stb	r2,-56(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
  80b2c4:	e0bff817 	ldw	r2,-32(fp)
  80b2c8:	10000015 	stw	zero,0(r2)
  80b2cc:	e0bff817 	ldw	r2,-32(fp)
  80b2d0:	10800104 	addi	r2,r2,4
  80b2d4:	e0bff815 	stw	r2,-32(fp)
                      events_rdy_nbr++;
  80b2d8:	e0bff18b 	ldhu	r2,-58(fp)
  80b2dc:	10800044 	addi	r2,r2,1
  80b2e0:	e0bff18d 	sth	r2,-58(fp)
  80b2e4:	00005f06 	br	80b464 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
  80b2e8:	e0bff103 	ldbu	r2,-60(fp)
  80b2ec:	10800054 	ori	r2,r2,1
  80b2f0:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  80b2f4:	00005b06 	br	80b464 <OSEventPendMulti+0x3d4>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
  80b2f8:	e0bff417 	ldw	r2,-48(fp)
  80b2fc:	10800117 	ldw	r2,4(r2)
  80b300:	1005003a 	cmpeq	r2,r2,zero
  80b304:	1000151e 	bne	r2,zero,80b35c <OSEventPendMulti+0x2cc>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
  80b308:	e0bff417 	ldw	r2,-48(fp)
  80b30c:	10c00117 	ldw	r3,4(r2)
  80b310:	e0bff817 	ldw	r2,-32(fp)
  80b314:	10c00015 	stw	r3,0(r2)
  80b318:	e0bff817 	ldw	r2,-32(fp)
  80b31c:	10800104 	addi	r2,r2,4
  80b320:	e0bff815 	stw	r2,-32(fp)
                     pevent->OSEventPtr  = (void *)0;
  80b324:	e0bff417 	ldw	r2,-48(fp)
  80b328:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
  80b32c:	e0fff717 	ldw	r3,-36(fp)
  80b330:	e0bff417 	ldw	r2,-48(fp)
  80b334:	18800015 	stw	r2,0(r3)
  80b338:	e0bff717 	ldw	r2,-36(fp)
  80b33c:	10800104 	addi	r2,r2,4
  80b340:	e0bff715 	stw	r2,-36(fp)
                      events_rdy         =  OS_TRUE;
  80b344:	00800044 	movi	r2,1
  80b348:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
  80b34c:	e0bff18b 	ldhu	r2,-58(fp)
  80b350:	10800044 	addi	r2,r2,1
  80b354:	e0bff18d 	sth	r2,-58(fp)
  80b358:	00004206 	br	80b464 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
  80b35c:	e0bff103 	ldbu	r2,-60(fp)
  80b360:	10800094 	ori	r2,r2,2
  80b364:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  80b368:	00003e06 	br	80b464 <OSEventPendMulti+0x3d4>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
  80b36c:	e0bff417 	ldw	r2,-48(fp)
  80b370:	10800117 	ldw	r2,4(r2)
  80b374:	e0bff315 	stw	r2,-52(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
  80b378:	e0bff317 	ldw	r2,-52(fp)
  80b37c:	1080058b 	ldhu	r2,22(r2)
  80b380:	10bfffcc 	andi	r2,r2,65535
  80b384:	1005003a 	cmpeq	r2,r2,zero
  80b388:	1000261e 	bne	r2,zero,80b424 <OSEventPendMulti+0x394>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
  80b38c:	e0bff317 	ldw	r2,-52(fp)
  80b390:	11000417 	ldw	r4,16(r2)
  80b394:	20c00017 	ldw	r3,0(r4)
  80b398:	e0bff817 	ldw	r2,-32(fp)
  80b39c:	10c00015 	stw	r3,0(r2)
  80b3a0:	e0bff817 	ldw	r2,-32(fp)
  80b3a4:	10800104 	addi	r2,r2,4
  80b3a8:	e0bff815 	stw	r2,-32(fp)
  80b3ac:	20c00104 	addi	r3,r4,4
  80b3b0:	e0bff317 	ldw	r2,-52(fp)
  80b3b4:	10c00415 	stw	r3,16(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
  80b3b8:	e0bff317 	ldw	r2,-52(fp)
  80b3bc:	10c00417 	ldw	r3,16(r2)
  80b3c0:	e0bff317 	ldw	r2,-52(fp)
  80b3c4:	10800217 	ldw	r2,8(r2)
  80b3c8:	1880041e 	bne	r3,r2,80b3dc <OSEventPendMulti+0x34c>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
  80b3cc:	e0bff317 	ldw	r2,-52(fp)
  80b3d0:	10c00117 	ldw	r3,4(r2)
  80b3d4:	e0bff317 	ldw	r2,-52(fp)
  80b3d8:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
  80b3dc:	e0bff317 	ldw	r2,-52(fp)
  80b3e0:	1080058b 	ldhu	r2,22(r2)
  80b3e4:	10bfffc4 	addi	r2,r2,-1
  80b3e8:	1007883a 	mov	r3,r2
  80b3ec:	e0bff317 	ldw	r2,-52(fp)
  80b3f0:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
  80b3f4:	e0fff717 	ldw	r3,-36(fp)
  80b3f8:	e0bff417 	ldw	r2,-48(fp)
  80b3fc:	18800015 	stw	r2,0(r3)
  80b400:	e0bff717 	ldw	r2,-36(fp)
  80b404:	10800104 	addi	r2,r2,4
  80b408:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   = OS_TRUE;
  80b40c:	00800044 	movi	r2,1
  80b410:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
  80b414:	e0bff18b 	ldhu	r2,-58(fp)
  80b418:	10800044 	addi	r2,r2,1
  80b41c:	e0bff18d 	sth	r2,-58(fp)
  80b420:	00001006 	br	80b464 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
  80b424:	e0bff103 	ldbu	r2,-60(fp)
  80b428:	10800114 	ori	r2,r2,4
  80b42c:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  80b430:	00000c06 	br	80b464 <OSEventPendMulti+0x3d4>
  80b434:	e0bff017 	ldw	r2,-64(fp)
  80b438:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b43c:	e0bfee17 	ldw	r2,-72(fp)
  80b440:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
  80b444:	e0bff717 	ldw	r2,-36(fp)
  80b448:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
  80b44c:	e0c00217 	ldw	r3,8(fp)
  80b450:	00800044 	movi	r2,1
  80b454:	18800005 	stb	r2,0(r3)
                 return (events_rdy_nbr);
  80b458:	e0bff18b 	ldhu	r2,-58(fp)
  80b45c:	e0bfff15 	stw	r2,-4(fp)
  80b460:	0000b206 	br	80b72c <OSEventPendMulti+0x69c>
        }
        pevents++;
  80b464:	e0bff517 	ldw	r2,-44(fp)
  80b468:	10800104 	addi	r2,r2,4
  80b46c:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
  80b470:	e0bff517 	ldw	r2,-44(fp)
  80b474:	10800017 	ldw	r2,0(r2)
  80b478:	e0bff415 	stw	r2,-48(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  80b47c:	e0bff417 	ldw	r2,-48(fp)
  80b480:	1004c03a 	cmpne	r2,r2,zero
  80b484:	103f6e1e 	bne	r2,zero,80b240 <OSEventPendMulti+0x1b0>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
  80b488:	e0bff203 	ldbu	r2,-56(fp)
  80b48c:	10800058 	cmpnei	r2,r2,1
  80b490:	10000b1e 	bne	r2,zero,80b4c0 <OSEventPendMulti+0x430>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
  80b494:	e0bff717 	ldw	r2,-36(fp)
  80b498:	10000015 	stw	zero,0(r2)
  80b49c:	e0bff017 	ldw	r2,-64(fp)
  80b4a0:	e0bfed15 	stw	r2,-76(fp)
  80b4a4:	e0bfed17 	ldw	r2,-76(fp)
  80b4a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
  80b4ac:	e0800217 	ldw	r2,8(fp)
  80b4b0:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
  80b4b4:	e0fff18b 	ldhu	r3,-58(fp)
  80b4b8:	e0ffff15 	stw	r3,-4(fp)
  80b4bc:	00009b06 	br	80b72c <OSEventPendMulti+0x69c>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
  80b4c0:	d1272a17 	ldw	r4,-25432(gp)
  80b4c4:	d0a72a17 	ldw	r2,-25432(gp)
  80b4c8:	10c00c03 	ldbu	r3,48(r2)
  80b4cc:	e0bff103 	ldbu	r2,-60(fp)
  80b4d0:	1884b03a 	or	r2,r3,r2
  80b4d4:	1007883a 	mov	r3,r2
  80b4d8:	00bfe004 	movi	r2,-128
  80b4dc:	1884b03a 	or	r2,r3,r2
  80b4e0:	20800c05 	stb	r2,48(r4)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  80b4e4:	d0a72a17 	ldw	r2,-25432(gp)
  80b4e8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
  80b4ec:	d0e72a17 	ldw	r3,-25432(gp)
  80b4f0:	e0bff90b 	ldhu	r2,-28(fp)
  80b4f4:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
  80b4f8:	e13ff617 	ldw	r4,-40(fp)
  80b4fc:	080c0c00 	call	80c0c0 <OS_EventTaskWaitMulti>
  80b500:	e0bff017 	ldw	r2,-64(fp)
  80b504:	e0bfec15 	stw	r2,-80(fp)
  80b508:	e0bfec17 	ldw	r2,-80(fp)
  80b50c:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
  80b510:	080c85c0 	call	80c85c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b514:	0005303a 	rdctl	r2,status
  80b518:	e0bfeb15 	stw	r2,-84(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b51c:	e0ffeb17 	ldw	r3,-84(fp)
  80b520:	00bfff84 	movi	r2,-2
  80b524:	1884703a 	and	r2,r3,r2
  80b528:	1001703a 	wrctl	status,r2
  
  return context;
  80b52c:	e0bfeb17 	ldw	r2,-84(fp)
    OS_ENTER_CRITICAL();
  80b530:	e0bff015 	stw	r2,-64(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
  80b534:	d0a72a17 	ldw	r2,-25432(gp)
  80b538:	10800c43 	ldbu	r2,49(r2)
  80b53c:	10803fcc 	andi	r2,r2,255
  80b540:	e0bffc15 	stw	r2,-16(fp)
  80b544:	e0fffc17 	ldw	r3,-16(fp)
  80b548:	1805003a 	cmpeq	r2,r3,zero
  80b54c:	1000041e 	bne	r2,zero,80b560 <OSEventPendMulti+0x4d0>
  80b550:	e0fffc17 	ldw	r3,-16(fp)
  80b554:	188000a0 	cmpeqi	r2,r3,2
  80b558:	1000011e 	bne	r2,zero,80b560 <OSEventPendMulti+0x4d0>
  80b55c:	00001906 	br	80b5c4 <OSEventPendMulti+0x534>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
  80b560:	d0a72a17 	ldw	r2,-25432(gp)
  80b564:	10800717 	ldw	r2,28(r2)
  80b568:	e0bff415 	stw	r2,-48(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
  80b56c:	e0bff417 	ldw	r2,-48(fp)
  80b570:	1005003a 	cmpeq	r2,r2,zero
  80b574:	10000c1e 	bne	r2,zero,80b5a8 <OSEventPendMulti+0x518>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
  80b578:	e0fff717 	ldw	r3,-36(fp)
  80b57c:	e0bff417 	ldw	r2,-48(fp)
  80b580:	18800015 	stw	r2,0(r3)
  80b584:	e0bff717 	ldw	r2,-36(fp)
  80b588:	10800104 	addi	r2,r2,4
  80b58c:	e0bff715 	stw	r2,-36(fp)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
  80b590:	e0bff717 	ldw	r2,-36(fp)
  80b594:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
  80b598:	e0bff18b 	ldhu	r2,-58(fp)
  80b59c:	10800044 	addi	r2,r2,1
  80b5a0:	e0bff18d 	sth	r2,-58(fp)
  80b5a4:	00000a06 	br	80b5d0 <OSEventPendMulti+0x540>

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
  80b5a8:	d0a72a17 	ldw	r2,-25432(gp)
  80b5ac:	00c00044 	movi	r3,1
  80b5b0:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  80b5b4:	d1272a17 	ldw	r4,-25432(gp)
  80b5b8:	e17ff617 	ldw	r5,-40(fp)
  80b5bc:	080c2cc0 	call	80c2cc <OS_EventTaskRemoveMulti>
             }
			 break;
  80b5c0:	00000306 	br	80b5d0 <OSEventPendMulti+0x540>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  80b5c4:	d1272a17 	ldw	r4,-25432(gp)
  80b5c8:	e17ff617 	ldw	r5,-40(fp)
  80b5cc:	080c2cc0 	call	80c2cc <OS_EventTaskRemoveMulti>
             break;
    }

    switch (OSTCBCur->OSTCBStatPend) {
  80b5d0:	d0a72a17 	ldw	r2,-25432(gp)
  80b5d4:	10800c43 	ldbu	r2,49(r2)
  80b5d8:	10803fcc 	andi	r2,r2,255
  80b5dc:	e0bffb15 	stw	r2,-20(fp)
  80b5e0:	e0fffb17 	ldw	r3,-20(fp)
  80b5e4:	1805003a 	cmpeq	r2,r3,zero
  80b5e8:	1000041e 	bne	r2,zero,80b5fc <OSEventPendMulti+0x56c>
  80b5ec:	e0fffb17 	ldw	r3,-20(fp)
  80b5f0:	188000a0 	cmpeqi	r2,r3,2
  80b5f4:	10002c1e 	bne	r2,zero,80b6a8 <OSEventPendMulti+0x618>
  80b5f8:	00003406 	br	80b6cc <OSEventPendMulti+0x63c>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
  80b5fc:	e0bff417 	ldw	r2,-48(fp)
  80b600:	10800003 	ldbu	r2,0(r2)
  80b604:	10803fcc 	andi	r2,r2,255
  80b608:	e0bffa15 	stw	r2,-24(fp)
  80b60c:	e0fffa17 	ldw	r3,-24(fp)
  80b610:	18800050 	cmplti	r2,r3,1
  80b614:	1000151e 	bne	r2,zero,80b66c <OSEventPendMulti+0x5dc>
  80b618:	e0fffa17 	ldw	r3,-24(fp)
  80b61c:	188000d0 	cmplti	r2,r3,3
  80b620:	10000a1e 	bne	r2,zero,80b64c <OSEventPendMulti+0x5bc>
  80b624:	e0fffa17 	ldw	r3,-24(fp)
  80b628:	188000e0 	cmpeqi	r2,r3,3
  80b62c:	1000011e 	bne	r2,zero,80b634 <OSEventPendMulti+0x5a4>
  80b630:	00000e06 	br	80b66c <OSEventPendMulti+0x5dc>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
  80b634:	e0bff817 	ldw	r2,-32(fp)
  80b638:	10000015 	stw	zero,0(r2)
  80b63c:	e0bff817 	ldw	r2,-32(fp)
  80b640:	10800104 	addi	r2,r2,4
  80b644:	e0bff815 	stw	r2,-32(fp)
                      break;
  80b648:	00001406 	br	80b69c <OSEventPendMulti+0x60c>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
  80b64c:	d0a72a17 	ldw	r2,-25432(gp)
  80b650:	10c00917 	ldw	r3,36(r2)
  80b654:	e0bff817 	ldw	r2,-32(fp)
  80b658:	10c00015 	stw	r3,0(r2)
  80b65c:	e0bff817 	ldw	r2,-32(fp)
  80b660:	10800104 	addi	r2,r2,4
  80b664:	e0bff815 	stw	r2,-32(fp)
                      break;
  80b668:	00000c06 	br	80b69c <OSEventPendMulti+0x60c>
  80b66c:	e0bff017 	ldw	r2,-64(fp)
  80b670:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b674:	e0bfea17 	ldw	r2,-88(fp)
  80b678:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
  80b67c:	e0bff717 	ldw	r2,-36(fp)
  80b680:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
  80b684:	e0c00217 	ldw	r3,8(fp)
  80b688:	00800044 	movi	r2,1
  80b68c:	18800005 	stb	r2,0(r3)
                      return (events_rdy_nbr);
  80b690:	e0bff18b 	ldhu	r2,-58(fp)
  80b694:	e0bfff15 	stw	r2,-4(fp)
  80b698:	00002406 	br	80b72c <OSEventPendMulti+0x69c>
             }
            *perr = OS_ERR_NONE;
  80b69c:	e0800217 	ldw	r2,8(fp)
  80b6a0:	10000005 	stb	zero,0(r2)
             break;
  80b6a4:	00001106 	br	80b6ec <OSEventPendMulti+0x65c>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
  80b6a8:	e0bff817 	ldw	r2,-32(fp)
  80b6ac:	10000015 	stw	zero,0(r2)
  80b6b0:	e0bff817 	ldw	r2,-32(fp)
  80b6b4:	10800104 	addi	r2,r2,4
  80b6b8:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
  80b6bc:	e0c00217 	ldw	r3,8(fp)
  80b6c0:	00800384 	movi	r2,14
  80b6c4:	18800005 	stb	r2,0(r3)
             break;
  80b6c8:	00000806 	br	80b6ec <OSEventPendMulti+0x65c>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
  80b6cc:	e0bff817 	ldw	r2,-32(fp)
  80b6d0:	10000015 	stw	zero,0(r2)
  80b6d4:	e0bff817 	ldw	r2,-32(fp)
  80b6d8:	10800104 	addi	r2,r2,4
  80b6dc:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
  80b6e0:	e0c00217 	ldw	r3,8(fp)
  80b6e4:	00800284 	movi	r2,10
  80b6e8:	18800005 	stb	r2,0(r3)
             break;
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
  80b6ec:	d0a72a17 	ldw	r2,-25432(gp)
  80b6f0:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
  80b6f4:	d0a72a17 	ldw	r2,-25432(gp)
  80b6f8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
  80b6fc:	d0a72a17 	ldw	r2,-25432(gp)
  80b700:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  80b704:	d0a72a17 	ldw	r2,-25432(gp)
  80b708:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
  80b70c:	d0a72a17 	ldw	r2,-25432(gp)
  80b710:	10000915 	stw	zero,36(r2)
  80b714:	e0bff017 	ldw	r2,-64(fp)
  80b718:	e0bfe915 	stw	r2,-92(fp)
  80b71c:	e0bfe917 	ldw	r2,-92(fp)
  80b720:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
  80b724:	e0fff18b 	ldhu	r3,-58(fp)
  80b728:	e0ffff15 	stw	r3,-4(fp)
  80b72c:	e0bfff17 	ldw	r2,-4(fp)
}
  80b730:	e037883a 	mov	sp,fp
  80b734:	dfc00117 	ldw	ra,4(sp)
  80b738:	df000017 	ldw	fp,0(sp)
  80b73c:	dec00204 	addi	sp,sp,8
  80b740:	f800283a 	ret

0080b744 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
  80b744:	defffe04 	addi	sp,sp,-8
  80b748:	dfc00115 	stw	ra,4(sp)
  80b74c:	df000015 	stw	fp,0(sp)
  80b750:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
  80b754:	08165440 	call	816544 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
  80b758:	080c5140 	call	80c514 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
  80b75c:	080c5580 	call	80c558 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
  80b760:	080c6bc0 	call	80c6bc <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
  80b764:	080c4380 	call	80c438 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
  80b768:	080e76c0 	call	80e76c <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
  80b76c:	080f1440 	call	80f144 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
  80b770:	08104a00 	call	8104a0 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
  80b774:	080c5c40 	call	80c5c4 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
  80b778:	080c6400 	call	80c640 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
  80b77c:	08165600 	call	816560 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
  80b780:	080cf440 	call	80cf44 <OSDebugInit>
#endif
}
  80b784:	e037883a 	mov	sp,fp
  80b788:	dfc00117 	ldw	ra,4(sp)
  80b78c:	df000017 	ldw	fp,0(sp)
  80b790:	dec00204 	addi	sp,sp,8
  80b794:	f800283a 	ret

0080b798 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
  80b798:	defffc04 	addi	sp,sp,-16
  80b79c:	df000315 	stw	fp,12(sp)
  80b7a0:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80b7a4:	e03fff15 	stw	zero,-4(fp)
#endif

    if (OSRunning == OS_TRUE) {
  80b7a8:	d0a71b43 	ldbu	r2,-25491(gp)
  80b7ac:	10803fcc 	andi	r2,r2,255
  80b7b0:	10800058 	cmpnei	r2,r2,1
  80b7b4:	1000131e 	bne	r2,zero,80b804 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b7b8:	0005303a 	rdctl	r2,status
  80b7bc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b7c0:	e0fffe17 	ldw	r3,-8(fp)
  80b7c4:	00bfff84 	movi	r2,-2
  80b7c8:	1884703a 	and	r2,r3,r2
  80b7cc:	1001703a 	wrctl	status,r2
  
  return context;
  80b7d0:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  80b7d4:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting < 255u) {
  80b7d8:	d0a72903 	ldbu	r2,-25436(gp)
  80b7dc:	10803fcc 	andi	r2,r2,255
  80b7e0:	10803fe0 	cmpeqi	r2,r2,255
  80b7e4:	1000031e 	bne	r2,zero,80b7f4 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
  80b7e8:	d0a72903 	ldbu	r2,-25436(gp)
  80b7ec:	10800044 	addi	r2,r2,1
  80b7f0:	d0a72905 	stb	r2,-25436(gp)
  80b7f4:	e0bfff17 	ldw	r2,-4(fp)
  80b7f8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b7fc:	e0bffd17 	ldw	r2,-12(fp)
  80b800:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
  80b804:	e037883a 	mov	sp,fp
  80b808:	df000017 	ldw	fp,0(sp)
  80b80c:	dec00104 	addi	sp,sp,4
  80b810:	f800283a 	ret

0080b814 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
  80b814:	defffb04 	addi	sp,sp,-20
  80b818:	dfc00415 	stw	ra,16(sp)
  80b81c:	df000315 	stw	fp,12(sp)
  80b820:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80b824:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {
  80b828:	d0a71b43 	ldbu	r2,-25491(gp)
  80b82c:	10803fcc 	andi	r2,r2,255
  80b830:	10800058 	cmpnei	r2,r2,1
  80b834:	1000321e 	bne	r2,zero,80b900 <OSIntExit+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b838:	0005303a 	rdctl	r2,status
  80b83c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b840:	e0fffe17 	ldw	r3,-8(fp)
  80b844:	00bfff84 	movi	r2,-2
  80b848:	1884703a 	and	r2,r3,r2
  80b84c:	1001703a 	wrctl	status,r2
  
  return context;
  80b850:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  80b854:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
  80b858:	d0a72903 	ldbu	r2,-25436(gp)
  80b85c:	10803fcc 	andi	r2,r2,255
  80b860:	1005003a 	cmpeq	r2,r2,zero
  80b864:	1000031e 	bne	r2,zero,80b874 <OSIntExit+0x60>
            OSIntNesting--;
  80b868:	d0a72903 	ldbu	r2,-25436(gp)
  80b86c:	10bfffc4 	addi	r2,r2,-1
  80b870:	d0a72905 	stb	r2,-25436(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
  80b874:	d0a72903 	ldbu	r2,-25436(gp)
  80b878:	10803fcc 	andi	r2,r2,255
  80b87c:	1004c03a 	cmpne	r2,r2,zero
  80b880:	10001b1e 	bne	r2,zero,80b8f0 <OSIntExit+0xdc>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
  80b884:	d0a71b03 	ldbu	r2,-25492(gp)
  80b888:	10803fcc 	andi	r2,r2,255
  80b88c:	1004c03a 	cmpne	r2,r2,zero
  80b890:	1000171e 	bne	r2,zero,80b8f0 <OSIntExit+0xdc>
                OS_SchedNew();
  80b894:	080c9300 	call	80c930 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
  80b898:	d0a71d03 	ldbu	r2,-25484(gp)
  80b89c:	d0e71d43 	ldbu	r3,-25483(gp)
  80b8a0:	11003fcc 	andi	r4,r2,255
  80b8a4:	18803fcc 	andi	r2,r3,255
  80b8a8:	20801126 	beq	r4,r2,80b8f0 <OSIntExit+0xdc>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
  80b8ac:	d0a71d03 	ldbu	r2,-25484(gp)
  80b8b0:	10803fcc 	andi	r2,r2,255
  80b8b4:	00c020b4 	movhi	r3,130
  80b8b8:	18c6d204 	addi	r3,r3,6984
  80b8bc:	1085883a 	add	r2,r2,r2
  80b8c0:	1085883a 	add	r2,r2,r2
  80b8c4:	10c5883a 	add	r2,r2,r3
  80b8c8:	10800017 	ldw	r2,0(r2)
  80b8cc:	d0a72515 	stw	r2,-25452(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
  80b8d0:	d0e72517 	ldw	r3,-25452(gp)
  80b8d4:	18800e17 	ldw	r2,56(r3)
  80b8d8:	10800044 	addi	r2,r2,1
  80b8dc:	18800e15 	stw	r2,56(r3)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
  80b8e0:	d0a72017 	ldw	r2,-25472(gp)
  80b8e4:	10800044 	addi	r2,r2,1
  80b8e8:	d0a72015 	stw	r2,-25472(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
  80b8ec:	08160d00 	call	8160d0 <OSCtxSw>
  80b8f0:	e0bfff17 	ldw	r2,-4(fp)
  80b8f4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b8f8:	e0bffd17 	ldw	r2,-12(fp)
  80b8fc:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  80b900:	e037883a 	mov	sp,fp
  80b904:	dfc00117 	ldw	ra,4(sp)
  80b908:	df000017 	ldw	fp,0(sp)
  80b90c:	dec00204 	addi	sp,sp,8
  80b910:	f800283a 	ret

0080b914 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
  80b914:	defffc04 	addi	sp,sp,-16
  80b918:	df000315 	stw	fp,12(sp)
  80b91c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80b920:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
  80b924:	d0a71b43 	ldbu	r2,-25491(gp)
  80b928:	10803fcc 	andi	r2,r2,255
  80b92c:	10800058 	cmpnei	r2,r2,1
  80b930:	1000171e 	bne	r2,zero,80b990 <OSSchedLock+0x7c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b934:	0005303a 	rdctl	r2,status
  80b938:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b93c:	e0fffe17 	ldw	r3,-8(fp)
  80b940:	00bfff84 	movi	r2,-2
  80b944:	1884703a 	and	r2,r3,r2
  80b948:	1001703a 	wrctl	status,r2
  
  return context;
  80b94c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  80b950:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
  80b954:	d0a72903 	ldbu	r2,-25436(gp)
  80b958:	10803fcc 	andi	r2,r2,255
  80b95c:	1004c03a 	cmpne	r2,r2,zero
  80b960:	1000071e 	bne	r2,zero,80b980 <OSSchedLock+0x6c>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
  80b964:	d0a71b03 	ldbu	r2,-25492(gp)
  80b968:	10803fcc 	andi	r2,r2,255
  80b96c:	10803fe0 	cmpeqi	r2,r2,255
  80b970:	1000031e 	bne	r2,zero,80b980 <OSSchedLock+0x6c>
                OSLockNesting++;                 /* Increment lock nesting level                       */
  80b974:	d0a71b03 	ldbu	r2,-25492(gp)
  80b978:	10800044 	addi	r2,r2,1
  80b97c:	d0a71b05 	stb	r2,-25492(gp)
  80b980:	e0bfff17 	ldw	r2,-4(fp)
  80b984:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b988:	e0bffd17 	ldw	r2,-12(fp)
  80b98c:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  80b990:	e037883a 	mov	sp,fp
  80b994:	df000017 	ldw	fp,0(sp)
  80b998:	dec00104 	addi	sp,sp,4
  80b99c:	f800283a 	ret

0080b9a0 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
  80b9a0:	defff804 	addi	sp,sp,-32
  80b9a4:	dfc00715 	stw	ra,28(sp)
  80b9a8:	df000615 	stw	fp,24(sp)
  80b9ac:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80b9b0:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
  80b9b4:	d0a71b43 	ldbu	r2,-25491(gp)
  80b9b8:	10803fcc 	andi	r2,r2,255
  80b9bc:	10800058 	cmpnei	r2,r2,1
  80b9c0:	10002b1e 	bne	r2,zero,80ba70 <OSSchedUnlock+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b9c4:	0005303a 	rdctl	r2,status
  80b9c8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b9cc:	e0fffe17 	ldw	r3,-8(fp)
  80b9d0:	00bfff84 	movi	r2,-2
  80b9d4:	1884703a 	and	r2,r3,r2
  80b9d8:	1001703a 	wrctl	status,r2
  
  return context;
  80b9dc:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  80b9e0:	e0bfff15 	stw	r2,-4(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
  80b9e4:	d0a71b03 	ldbu	r2,-25492(gp)
  80b9e8:	10803fcc 	andi	r2,r2,255
  80b9ec:	1005003a 	cmpeq	r2,r2,zero
  80b9f0:	10001b1e 	bne	r2,zero,80ba60 <OSSchedUnlock+0xc0>
            OSLockNesting--;                               /* Decrement lock nesting level             */
  80b9f4:	d0a71b03 	ldbu	r2,-25492(gp)
  80b9f8:	10bfffc4 	addi	r2,r2,-1
  80b9fc:	d0a71b05 	stb	r2,-25492(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
  80ba00:	d0a71b03 	ldbu	r2,-25492(gp)
  80ba04:	10803fcc 	andi	r2,r2,255
  80ba08:	1004c03a 	cmpne	r2,r2,zero
  80ba0c:	10000f1e 	bne	r2,zero,80ba4c <OSSchedUnlock+0xac>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
  80ba10:	d0a72903 	ldbu	r2,-25436(gp)
  80ba14:	10803fcc 	andi	r2,r2,255
  80ba18:	1004c03a 	cmpne	r2,r2,zero
  80ba1c:	1000061e 	bne	r2,zero,80ba38 <OSSchedUnlock+0x98>
  80ba20:	e0bfff17 	ldw	r2,-4(fp)
  80ba24:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ba28:	e0bffd17 	ldw	r2,-12(fp)
  80ba2c:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
  80ba30:	080c85c0 	call	80c85c <OS_Sched>
  80ba34:	00000e06 	br	80ba70 <OSSchedUnlock+0xd0>
  80ba38:	e0bfff17 	ldw	r2,-4(fp)
  80ba3c:	e0bffc15 	stw	r2,-16(fp)
  80ba40:	e0bffc17 	ldw	r2,-16(fp)
  80ba44:	1001703a 	wrctl	status,r2
  80ba48:	00000906 	br	80ba70 <OSSchedUnlock+0xd0>
  80ba4c:	e0bfff17 	ldw	r2,-4(fp)
  80ba50:	e0bffb15 	stw	r2,-20(fp)
  80ba54:	e0bffb17 	ldw	r2,-20(fp)
  80ba58:	1001703a 	wrctl	status,r2
  80ba5c:	00000406 	br	80ba70 <OSSchedUnlock+0xd0>
  80ba60:	e0bfff17 	ldw	r2,-4(fp)
  80ba64:	e0bffa15 	stw	r2,-24(fp)
  80ba68:	e0bffa17 	ldw	r2,-24(fp)
  80ba6c:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
  80ba70:	e037883a 	mov	sp,fp
  80ba74:	dfc00117 	ldw	ra,4(sp)
  80ba78:	df000017 	ldw	fp,0(sp)
  80ba7c:	dec00204 	addi	sp,sp,8
  80ba80:	f800283a 	ret

0080ba84 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
  80ba84:	defffe04 	addi	sp,sp,-8
  80ba88:	dfc00115 	stw	ra,4(sp)
  80ba8c:	df000015 	stw	fp,0(sp)
  80ba90:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
  80ba94:	d0a71b43 	ldbu	r2,-25491(gp)
  80ba98:	10803fcc 	andi	r2,r2,255
  80ba9c:	1004c03a 	cmpne	r2,r2,zero
  80baa0:	10000f1e 	bne	r2,zero,80bae0 <OSStart+0x5c>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
  80baa4:	080c9300 	call	80c930 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
  80baa8:	d0a71d03 	ldbu	r2,-25484(gp)
  80baac:	d0a71d45 	stb	r2,-25483(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
  80bab0:	d0a71d03 	ldbu	r2,-25484(gp)
  80bab4:	10803fcc 	andi	r2,r2,255
  80bab8:	00c020b4 	movhi	r3,130
  80babc:	18c6d204 	addi	r3,r3,6984
  80bac0:	1085883a 	add	r2,r2,r2
  80bac4:	1085883a 	add	r2,r2,r2
  80bac8:	10c5883a 	add	r2,r2,r3
  80bacc:	10800017 	ldw	r2,0(r2)
  80bad0:	d0a72515 	stw	r2,-25452(gp)
        OSTCBCur      = OSTCBHighRdy;
  80bad4:	d0a72517 	ldw	r2,-25452(gp)
  80bad8:	d0a72a15 	stw	r2,-25432(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
  80badc:	081615c0 	call	81615c <OSStartHighRdy>
    }
}
  80bae0:	e037883a 	mov	sp,fp
  80bae4:	dfc00117 	ldw	ra,4(sp)
  80bae8:	df000017 	ldw	fp,0(sp)
  80baec:	dec00204 	addi	sp,sp,8
  80baf0:	f800283a 	ret

0080baf4 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
  80baf4:	defff904 	addi	sp,sp,-28
  80baf8:	dfc00615 	stw	ra,24(sp)
  80bafc:	df000515 	stw	fp,20(sp)
  80bb00:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80bb04:	e03fff15 	stw	zero,-4(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
  80bb08:	01000084 	movi	r4,2
  80bb0c:	0812b540 	call	812b54 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80bb10:	0005303a 	rdctl	r2,status
  80bb14:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80bb18:	e0fffe17 	ldw	r3,-8(fp)
  80bb1c:	00bfff84 	movi	r2,-2
  80bb20:	1884703a 	and	r2,r3,r2
  80bb24:	1001703a 	wrctl	status,r2
  
  return context;
  80bb28:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
  80bb2c:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
  80bb30:	d0271c15 	stw	zero,-25488(gp)
  80bb34:	e0bfff17 	ldw	r2,-4(fp)
  80bb38:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80bb3c:	e0bffd17 	ldw	r2,-12(fp)
  80bb40:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
  80bb44:	01001904 	movi	r4,100
  80bb48:	0812b540 	call	812b54 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80bb4c:	0005303a 	rdctl	r2,status
  80bb50:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80bb54:	e0fffc17 	ldw	r3,-16(fp)
  80bb58:	00bfff84 	movi	r2,-2
  80bb5c:	1884703a 	and	r2,r3,r2
  80bb60:	1001703a 	wrctl	status,r2
  
  return context;
  80bb64:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
  80bb68:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
  80bb6c:	d0a71c17 	ldw	r2,-25488(gp)
  80bb70:	d0a72115 	stw	r2,-25468(gp)
    OSStatRdy    = OS_TRUE;
  80bb74:	00800044 	movi	r2,1
  80bb78:	d0a72d05 	stb	r2,-25420(gp)
  80bb7c:	e0bfff17 	ldw	r2,-4(fp)
  80bb80:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80bb84:	e0bffb17 	ldw	r2,-20(fp)
  80bb88:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  80bb8c:	e037883a 	mov	sp,fp
  80bb90:	dfc00117 	ldw	ra,4(sp)
  80bb94:	df000017 	ldw	fp,0(sp)
  80bb98:	dec00204 	addi	sp,sp,8
  80bb9c:	f800283a 	ret

0080bba0 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
  80bba0:	defff604 	addi	sp,sp,-40
  80bba4:	dfc00915 	stw	ra,36(sp)
  80bba8:	df000815 	stw	fp,32(sp)
  80bbac:	df000804 	addi	fp,sp,32
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  80bbb0:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
  80bbb4:	08165280 	call	816528 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80bbb8:	0005303a 	rdctl	r2,status
  80bbbc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80bbc0:	e0fffb17 	ldw	r3,-20(fp)
  80bbc4:	00bfff84 	movi	r2,-2
  80bbc8:	1884703a 	and	r2,r3,r2
  80bbcc:	1001703a 	wrctl	status,r2
  
  return context;
  80bbd0:	e0bffb17 	ldw	r2,-20(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
  80bbd4:	e0bffc15 	stw	r2,-16(fp)
    OSTime++;
  80bbd8:	d0a72b17 	ldw	r2,-25428(gp)
  80bbdc:	10800044 	addi	r2,r2,1
  80bbe0:	d0a72b15 	stw	r2,-25428(gp)
  80bbe4:	e0bffc17 	ldw	r2,-16(fp)
  80bbe8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80bbec:	e0bffa17 	ldw	r2,-24(fp)
  80bbf0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
  80bbf4:	d0a71b43 	ldbu	r2,-25491(gp)
  80bbf8:	10803fcc 	andi	r2,r2,255
  80bbfc:	10800058 	cmpnei	r2,r2,1
  80bc00:	1000721e 	bne	r2,zero,80bdcc <OSTimeTick+0x22c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
  80bc04:	d0a71f03 	ldbu	r2,-25476(gp)
  80bc08:	10803fcc 	andi	r2,r2,255
  80bc0c:	e0bfff15 	stw	r2,-4(fp)
  80bc10:	e0ffff17 	ldw	r3,-4(fp)
  80bc14:	18800060 	cmpeqi	r2,r3,1
  80bc18:	10000a1e 	bne	r2,zero,80bc44 <OSTimeTick+0xa4>
  80bc1c:	e0ffff17 	ldw	r3,-4(fp)
  80bc20:	188000a0 	cmpeqi	r2,r3,2
  80bc24:	1000091e 	bne	r2,zero,80bc4c <OSTimeTick+0xac>
  80bc28:	e0ffff17 	ldw	r3,-4(fp)
  80bc2c:	1805003a 	cmpeq	r2,r3,zero
  80bc30:	1000011e 	bne	r2,zero,80bc38 <OSTimeTick+0x98>
  80bc34:	00000a06 	br	80bc60 <OSTimeTick+0xc0>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
  80bc38:	00800044 	movi	r2,1
  80bc3c:	e0bffd05 	stb	r2,-12(fp)
                 break;
  80bc40:	00000a06 	br	80bc6c <OSTimeTick+0xcc>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
  80bc44:	e03ffd05 	stb	zero,-12(fp)
                 break;
  80bc48:	00000806 	br	80bc6c <OSTimeTick+0xcc>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
  80bc4c:	00800044 	movi	r2,1
  80bc50:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
  80bc54:	00800044 	movi	r2,1
  80bc58:	d0a71f05 	stb	r2,-25476(gp)
                 break;
  80bc5c:	00000306 	br	80bc6c <OSTimeTick+0xcc>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
  80bc60:	00800044 	movi	r2,1
  80bc64:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
  80bc68:	d0271f05 	stb	zero,-25476(gp)
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
  80bc6c:	e0bffd03 	ldbu	r2,-12(fp)
  80bc70:	1005003a 	cmpeq	r2,r2,zero
  80bc74:	1000551e 	bne	r2,zero,80bdcc <OSTimeTick+0x22c>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
  80bc78:	d0a71e17 	ldw	r2,-25480(gp)
  80bc7c:	e0bffe15 	stw	r2,-8(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  80bc80:	00004d06 	br	80bdb8 <OSTimeTick+0x218>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80bc84:	0005303a 	rdctl	r2,status
  80bc88:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80bc8c:	e0fff917 	ldw	r3,-28(fp)
  80bc90:	00bfff84 	movi	r2,-2
  80bc94:	1884703a 	and	r2,r3,r2
  80bc98:	1001703a 	wrctl	status,r2
  
  return context;
  80bc9c:	e0bff917 	ldw	r2,-28(fp)
            OS_ENTER_CRITICAL();
  80bca0:	e0bffc15 	stw	r2,-16(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
  80bca4:	e0bffe17 	ldw	r2,-8(fp)
  80bca8:	10800b8b 	ldhu	r2,46(r2)
  80bcac:	10bfffcc 	andi	r2,r2,65535
  80bcb0:	1005003a 	cmpeq	r2,r2,zero
  80bcb4:	1000391e 	bne	r2,zero,80bd9c <OSTimeTick+0x1fc>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
  80bcb8:	e0bffe17 	ldw	r2,-8(fp)
  80bcbc:	10800b8b 	ldhu	r2,46(r2)
  80bcc0:	10bfffc4 	addi	r2,r2,-1
  80bcc4:	1007883a 	mov	r3,r2
  80bcc8:	e0bffe17 	ldw	r2,-8(fp)
  80bccc:	10c00b8d 	sth	r3,46(r2)
  80bcd0:	e0bffe17 	ldw	r2,-8(fp)
  80bcd4:	10800b8b 	ldhu	r2,46(r2)
  80bcd8:	10bfffcc 	andi	r2,r2,65535
  80bcdc:	1004c03a 	cmpne	r2,r2,zero
  80bce0:	10002e1e 	bne	r2,zero,80bd9c <OSTimeTick+0x1fc>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  80bce4:	e0bffe17 	ldw	r2,-8(fp)
  80bce8:	10800c03 	ldbu	r2,48(r2)
  80bcec:	10803fcc 	andi	r2,r2,255
  80bcf0:	10800dcc 	andi	r2,r2,55
  80bcf4:	1005003a 	cmpeq	r2,r2,zero
  80bcf8:	10000b1e 	bne	r2,zero,80bd28 <OSTimeTick+0x188>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
  80bcfc:	e0bffe17 	ldw	r2,-8(fp)
  80bd00:	10c00c03 	ldbu	r3,48(r2)
  80bd04:	00bff204 	movi	r2,-56
  80bd08:	1884703a 	and	r2,r3,r2
  80bd0c:	1007883a 	mov	r3,r2
  80bd10:	e0bffe17 	ldw	r2,-8(fp)
  80bd14:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
  80bd18:	e0fffe17 	ldw	r3,-8(fp)
  80bd1c:	00800044 	movi	r2,1
  80bd20:	18800c45 	stb	r2,49(r3)
  80bd24:	00000206 	br	80bd30 <OSTimeTick+0x190>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  80bd28:	e0bffe17 	ldw	r2,-8(fp)
  80bd2c:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
  80bd30:	e0bffe17 	ldw	r2,-8(fp)
  80bd34:	10800c03 	ldbu	r2,48(r2)
  80bd38:	10803fcc 	andi	r2,r2,255
  80bd3c:	1080020c 	andi	r2,r2,8
  80bd40:	1004c03a 	cmpne	r2,r2,zero
  80bd44:	1000151e 	bne	r2,zero,80bd9c <OSTimeTick+0x1fc>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
  80bd48:	e0bffe17 	ldw	r2,-8(fp)
  80bd4c:	10c00d83 	ldbu	r3,54(r2)
  80bd50:	d0a72703 	ldbu	r2,-25444(gp)
  80bd54:	1884b03a 	or	r2,r3,r2
  80bd58:	d0a72705 	stb	r2,-25444(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  80bd5c:	e0bffe17 	ldw	r2,-8(fp)
  80bd60:	10800d03 	ldbu	r2,52(r2)
  80bd64:	11003fcc 	andi	r4,r2,255
  80bd68:	e0bffe17 	ldw	r2,-8(fp)
  80bd6c:	10800d03 	ldbu	r2,52(r2)
  80bd70:	10c03fcc 	andi	r3,r2,255
  80bd74:	d0a72744 	addi	r2,gp,-25443
  80bd78:	1885883a 	add	r2,r3,r2
  80bd7c:	10c00003 	ldbu	r3,0(r2)
  80bd80:	e0bffe17 	ldw	r2,-8(fp)
  80bd84:	10800d43 	ldbu	r2,53(r2)
  80bd88:	1884b03a 	or	r2,r3,r2
  80bd8c:	1007883a 	mov	r3,r2
  80bd90:	d0a72744 	addi	r2,gp,-25443
  80bd94:	2085883a 	add	r2,r4,r2
  80bd98:	10c00005 	stb	r3,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
  80bd9c:	e0bffe17 	ldw	r2,-8(fp)
  80bda0:	10800517 	ldw	r2,20(r2)
  80bda4:	e0bffe15 	stw	r2,-8(fp)
  80bda8:	e0bffc17 	ldw	r2,-16(fp)
  80bdac:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80bdb0:	e0bff817 	ldw	r2,-32(fp)
  80bdb4:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  80bdb8:	e0bffe17 	ldw	r2,-8(fp)
  80bdbc:	10800c83 	ldbu	r2,50(r2)
  80bdc0:	10803fcc 	andi	r2,r2,255
  80bdc4:	10800518 	cmpnei	r2,r2,20
  80bdc8:	103fae1e 	bne	r2,zero,80bc84 <OSTimeTick+0xe4>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
  80bdcc:	e037883a 	mov	sp,fp
  80bdd0:	dfc00117 	ldw	ra,4(sp)
  80bdd4:	df000017 	ldw	fp,0(sp)
  80bdd8:	dec00204 	addi	sp,sp,8
  80bddc:	f800283a 	ret

0080bde0 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
  80bde0:	deffff04 	addi	sp,sp,-4
  80bde4:	df000015 	stw	fp,0(sp)
  80bde8:	d839883a 	mov	fp,sp
    return (OS_VERSION);
  80bdec:	00804784 	movi	r2,286
}
  80bdf0:	e037883a 	mov	sp,fp
  80bdf4:	df000017 	ldw	fp,0(sp)
  80bdf8:	dec00104 	addi	sp,sp,4
  80bdfc:	f800283a 	ret

0080be00 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
  80be00:	deffff04 	addi	sp,sp,-4
  80be04:	df000015 	stw	fp,0(sp)
  80be08:	d839883a 	mov	fp,sp
}
  80be0c:	e037883a 	mov	sp,fp
  80be10:	df000017 	ldw	fp,0(sp)
  80be14:	dec00104 	addi	sp,sp,4
  80be18:	f800283a 	ret

0080be1c <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
  80be1c:	defff804 	addi	sp,sp,-32
  80be20:	dfc00715 	stw	ra,28(sp)
  80be24:	df000615 	stw	fp,24(sp)
  80be28:	df000604 	addi	fp,sp,24
  80be2c:	e13ffc15 	stw	r4,-16(fp)
  80be30:	e17ffd15 	stw	r5,-12(fp)
  80be34:	e1bffe05 	stb	r6,-8(fp)
  80be38:	e1ffff05 	stb	r7,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
  80be3c:	e0bffc17 	ldw	r2,-16(fp)
  80be40:	10800283 	ldbu	r2,10(r2)
  80be44:	10c03fcc 	andi	r3,r2,255
  80be48:	00802074 	movhi	r2,129
  80be4c:	109c1504 	addi	r2,r2,28756
  80be50:	10c5883a 	add	r2,r2,r3
  80be54:	10800003 	ldbu	r2,0(r2)
  80be58:	e0bffa85 	stb	r2,-22(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
  80be5c:	e0fffa83 	ldbu	r3,-22(fp)
  80be60:	e0bffc17 	ldw	r2,-16(fp)
  80be64:	1885883a 	add	r2,r3,r2
  80be68:	10800204 	addi	r2,r2,8
  80be6c:	108000c3 	ldbu	r2,3(r2)
  80be70:	10c03fcc 	andi	r3,r2,255
  80be74:	00802074 	movhi	r2,129
  80be78:	109c1504 	addi	r2,r2,28756
  80be7c:	10c5883a 	add	r2,r2,r3
  80be80:	10800003 	ldbu	r2,0(r2)
  80be84:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
  80be88:	e0bffa83 	ldbu	r2,-22(fp)
  80be8c:	100490fa 	slli	r2,r2,3
  80be90:	1007883a 	mov	r3,r2
  80be94:	e0bffa43 	ldbu	r2,-23(fp)
  80be98:	1885883a 	add	r2,r3,r2
  80be9c:	e0bffa05 	stb	r2,-24(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
  80bea0:	e0bffa03 	ldbu	r2,-24(fp)
  80bea4:	00c020b4 	movhi	r3,130
  80bea8:	18c6d204 	addi	r3,r3,6984
  80beac:	1085883a 	add	r2,r2,r2
  80beb0:	1085883a 	add	r2,r2,r2
  80beb4:	10c5883a 	add	r2,r2,r3
  80beb8:	10800017 	ldw	r2,0(r2)
  80bebc:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
  80bec0:	e0bffb17 	ldw	r2,-20(fp)
  80bec4:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
  80bec8:	e0fffb17 	ldw	r3,-20(fp)
  80becc:	e0bffd17 	ldw	r2,-12(fp)
  80bed0:	18800915 	stw	r2,36(r3)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
  80bed4:	e0bffb17 	ldw	r2,-20(fp)
  80bed8:	10800c03 	ldbu	r2,48(r2)
  80bedc:	1007883a 	mov	r3,r2
  80bee0:	e0bffe03 	ldbu	r2,-8(fp)
  80bee4:	0084303a 	nor	r2,zero,r2
  80bee8:	1884703a 	and	r2,r3,r2
  80beec:	1007883a 	mov	r3,r2
  80bef0:	e0bffb17 	ldw	r2,-20(fp)
  80bef4:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
  80bef8:	e0fffb17 	ldw	r3,-20(fp)
  80befc:	e0bfff03 	ldbu	r2,-4(fp)
  80bf00:	18800c45 	stb	r2,49(r3)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
  80bf04:	e0bffb17 	ldw	r2,-20(fp)
  80bf08:	10800c03 	ldbu	r2,48(r2)
  80bf0c:	10803fcc 	andi	r2,r2,255
  80bf10:	1080020c 	andi	r2,r2,8
  80bf14:	1004c03a 	cmpne	r2,r2,zero
  80bf18:	1000111e 	bne	r2,zero,80bf60 <OS_EventTaskRdy+0x144>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
  80bf1c:	e0bffb17 	ldw	r2,-20(fp)
  80bf20:	10c00d83 	ldbu	r3,54(r2)
  80bf24:	d0a72703 	ldbu	r2,-25444(gp)
  80bf28:	1884b03a 	or	r2,r3,r2
  80bf2c:	d0a72705 	stb	r2,-25444(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
  80bf30:	e13ffa83 	ldbu	r4,-22(fp)
  80bf34:	e0fffa83 	ldbu	r3,-22(fp)
  80bf38:	d0a72744 	addi	r2,gp,-25443
  80bf3c:	1885883a 	add	r2,r3,r2
  80bf40:	10c00003 	ldbu	r3,0(r2)
  80bf44:	e0bffb17 	ldw	r2,-20(fp)
  80bf48:	10800d43 	ldbu	r2,53(r2)
  80bf4c:	1884b03a 	or	r2,r3,r2
  80bf50:	1007883a 	mov	r3,r2
  80bf54:	d0a72744 	addi	r2,gp,-25443
  80bf58:	2085883a 	add	r2,r4,r2
  80bf5c:	10c00005 	stb	r3,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
  80bf60:	e13ffb17 	ldw	r4,-20(fp)
  80bf64:	e17ffc17 	ldw	r5,-16(fp)
  80bf68:	080c2140 	call	80c214 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
  80bf6c:	e0bffb17 	ldw	r2,-20(fp)
  80bf70:	10800817 	ldw	r2,32(r2)
  80bf74:	1005003a 	cmpeq	r2,r2,zero
  80bf78:	1000071e 	bne	r2,zero,80bf98 <OS_EventTaskRdy+0x17c>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  80bf7c:	e0bffb17 	ldw	r2,-20(fp)
  80bf80:	11400817 	ldw	r5,32(r2)
  80bf84:	e13ffb17 	ldw	r4,-20(fp)
  80bf88:	080c2cc0 	call	80c2cc <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
  80bf8c:	e0fffb17 	ldw	r3,-20(fp)
  80bf90:	e0bffc17 	ldw	r2,-16(fp)
  80bf94:	18800715 	stw	r2,28(r3)
    }
#endif

    return (prio);
  80bf98:	e0bffa03 	ldbu	r2,-24(fp)
}
  80bf9c:	e037883a 	mov	sp,fp
  80bfa0:	dfc00117 	ldw	ra,4(sp)
  80bfa4:	df000017 	ldw	fp,0(sp)
  80bfa8:	dec00204 	addi	sp,sp,8
  80bfac:	f800283a 	ret

0080bfb0 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
  80bfb0:	defffd04 	addi	sp,sp,-12
  80bfb4:	df000215 	stw	fp,8(sp)
  80bfb8:	df000204 	addi	fp,sp,8
  80bfbc:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
  80bfc0:	d0e72a17 	ldw	r3,-25432(gp)
  80bfc4:	e0bfff17 	ldw	r2,-4(fp)
  80bfc8:	18800715 	stw	r2,28(r3)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
  80bfcc:	d0a72a17 	ldw	r2,-25432(gp)
  80bfd0:	10800d03 	ldbu	r2,52(r2)
  80bfd4:	11003fcc 	andi	r4,r2,255
  80bfd8:	d0a72a17 	ldw	r2,-25432(gp)
  80bfdc:	10800d03 	ldbu	r2,52(r2)
  80bfe0:	10c03fcc 	andi	r3,r2,255
  80bfe4:	e0bfff17 	ldw	r2,-4(fp)
  80bfe8:	1885883a 	add	r2,r3,r2
  80bfec:	10800204 	addi	r2,r2,8
  80bff0:	10c000c3 	ldbu	r3,3(r2)
  80bff4:	d0a72a17 	ldw	r2,-25432(gp)
  80bff8:	10800d43 	ldbu	r2,53(r2)
  80bffc:	1884b03a 	or	r2,r3,r2
  80c000:	1007883a 	mov	r3,r2
  80c004:	e0bfff17 	ldw	r2,-4(fp)
  80c008:	2085883a 	add	r2,r4,r2
  80c00c:	10800204 	addi	r2,r2,8
  80c010:	10c000c5 	stb	r3,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  80c014:	e0bfff17 	ldw	r2,-4(fp)
  80c018:	10c00283 	ldbu	r3,10(r2)
  80c01c:	d0a72a17 	ldw	r2,-25432(gp)
  80c020:	10800d83 	ldbu	r2,54(r2)
  80c024:	1884b03a 	or	r2,r3,r2
  80c028:	1007883a 	mov	r3,r2
  80c02c:	e0bfff17 	ldw	r2,-4(fp)
  80c030:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  80c034:	d0a72a17 	ldw	r2,-25432(gp)
  80c038:	10800d03 	ldbu	r2,52(r2)
  80c03c:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  80c040:	e13ffe03 	ldbu	r4,-8(fp)
  80c044:	e0fffe03 	ldbu	r3,-8(fp)
  80c048:	d0a72744 	addi	r2,gp,-25443
  80c04c:	1885883a 	add	r2,r3,r2
  80c050:	10800003 	ldbu	r2,0(r2)
  80c054:	1007883a 	mov	r3,r2
  80c058:	d0a72a17 	ldw	r2,-25432(gp)
  80c05c:	10800d43 	ldbu	r2,53(r2)
  80c060:	0084303a 	nor	r2,zero,r2
  80c064:	1884703a 	and	r2,r3,r2
  80c068:	1007883a 	mov	r3,r2
  80c06c:	d0a72744 	addi	r2,gp,-25443
  80c070:	2085883a 	add	r2,r4,r2
  80c074:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  80c078:	e0fffe03 	ldbu	r3,-8(fp)
  80c07c:	d0a72744 	addi	r2,gp,-25443
  80c080:	1885883a 	add	r2,r3,r2
  80c084:	10800003 	ldbu	r2,0(r2)
  80c088:	10803fcc 	andi	r2,r2,255
  80c08c:	1004c03a 	cmpne	r2,r2,zero
  80c090:	1000071e 	bne	r2,zero,80c0b0 <OS_EventTaskWait+0x100>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  80c094:	d0a72a17 	ldw	r2,-25432(gp)
  80c098:	10800d83 	ldbu	r2,54(r2)
  80c09c:	0084303a 	nor	r2,zero,r2
  80c0a0:	1007883a 	mov	r3,r2
  80c0a4:	d0a72703 	ldbu	r2,-25444(gp)
  80c0a8:	1884703a 	and	r2,r3,r2
  80c0ac:	d0a72705 	stb	r2,-25444(gp)
    }
}
  80c0b0:	e037883a 	mov	sp,fp
  80c0b4:	df000017 	ldw	fp,0(sp)
  80c0b8:	dec00104 	addi	sp,sp,4
  80c0bc:	f800283a 	ret

0080c0c0 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
  80c0c0:	defffb04 	addi	sp,sp,-20
  80c0c4:	df000415 	stw	fp,16(sp)
  80c0c8:	df000404 	addi	fp,sp,16
  80c0cc:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
  80c0d0:	d0a72a17 	ldw	r2,-25432(gp)
  80c0d4:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
  80c0d8:	d0e72a17 	ldw	r3,-25432(gp)
  80c0dc:	e0bfff17 	ldw	r2,-4(fp)
  80c0e0:	18800815 	stw	r2,32(r3)

    pevents =  pevents_wait;
  80c0e4:	e0bfff17 	ldw	r2,-4(fp)
  80c0e8:	e0bffe15 	stw	r2,-8(fp)
    pevent  = *pevents;
  80c0ec:	e0bffe17 	ldw	r2,-8(fp)
  80c0f0:	10800017 	ldw	r2,0(r2)
  80c0f4:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  80c0f8:	00002006 	br	80c17c <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
  80c0fc:	d0a72a17 	ldw	r2,-25432(gp)
  80c100:	10800d03 	ldbu	r2,52(r2)
  80c104:	11003fcc 	andi	r4,r2,255
  80c108:	d0a72a17 	ldw	r2,-25432(gp)
  80c10c:	10800d03 	ldbu	r2,52(r2)
  80c110:	10c03fcc 	andi	r3,r2,255
  80c114:	e0bffd17 	ldw	r2,-12(fp)
  80c118:	1885883a 	add	r2,r3,r2
  80c11c:	10800204 	addi	r2,r2,8
  80c120:	10c000c3 	ldbu	r3,3(r2)
  80c124:	d0a72a17 	ldw	r2,-25432(gp)
  80c128:	10800d43 	ldbu	r2,53(r2)
  80c12c:	1884b03a 	or	r2,r3,r2
  80c130:	1007883a 	mov	r3,r2
  80c134:	e0bffd17 	ldw	r2,-12(fp)
  80c138:	2085883a 	add	r2,r4,r2
  80c13c:	10800204 	addi	r2,r2,8
  80c140:	10c000c5 	stb	r3,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  80c144:	e0bffd17 	ldw	r2,-12(fp)
  80c148:	10c00283 	ldbu	r3,10(r2)
  80c14c:	d0a72a17 	ldw	r2,-25432(gp)
  80c150:	10800d83 	ldbu	r2,54(r2)
  80c154:	1884b03a 	or	r2,r3,r2
  80c158:	1007883a 	mov	r3,r2
  80c15c:	e0bffd17 	ldw	r2,-12(fp)
  80c160:	10c00285 	stb	r3,10(r2)
        pevents++;
  80c164:	e0bffe17 	ldw	r2,-8(fp)
  80c168:	10800104 	addi	r2,r2,4
  80c16c:	e0bffe15 	stw	r2,-8(fp)
        pevent = *pevents;
  80c170:	e0bffe17 	ldw	r2,-8(fp)
  80c174:	10800017 	ldw	r2,0(r2)
  80c178:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  80c17c:	e0bffd17 	ldw	r2,-12(fp)
  80c180:	1004c03a 	cmpne	r2,r2,zero
  80c184:	103fdd1e 	bne	r2,zero,80c0fc <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  80c188:	d0a72a17 	ldw	r2,-25432(gp)
  80c18c:	10800d03 	ldbu	r2,52(r2)
  80c190:	e0bffc05 	stb	r2,-16(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  80c194:	e13ffc03 	ldbu	r4,-16(fp)
  80c198:	e0fffc03 	ldbu	r3,-16(fp)
  80c19c:	d0a72744 	addi	r2,gp,-25443
  80c1a0:	1885883a 	add	r2,r3,r2
  80c1a4:	10800003 	ldbu	r2,0(r2)
  80c1a8:	1007883a 	mov	r3,r2
  80c1ac:	d0a72a17 	ldw	r2,-25432(gp)
  80c1b0:	10800d43 	ldbu	r2,53(r2)
  80c1b4:	0084303a 	nor	r2,zero,r2
  80c1b8:	1884703a 	and	r2,r3,r2
  80c1bc:	1007883a 	mov	r3,r2
  80c1c0:	d0a72744 	addi	r2,gp,-25443
  80c1c4:	2085883a 	add	r2,r4,r2
  80c1c8:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  80c1cc:	e0fffc03 	ldbu	r3,-16(fp)
  80c1d0:	d0a72744 	addi	r2,gp,-25443
  80c1d4:	1885883a 	add	r2,r3,r2
  80c1d8:	10800003 	ldbu	r2,0(r2)
  80c1dc:	10803fcc 	andi	r2,r2,255
  80c1e0:	1004c03a 	cmpne	r2,r2,zero
  80c1e4:	1000071e 	bne	r2,zero,80c204 <OS_EventTaskWaitMulti+0x144>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  80c1e8:	d0a72a17 	ldw	r2,-25432(gp)
  80c1ec:	10800d83 	ldbu	r2,54(r2)
  80c1f0:	0084303a 	nor	r2,zero,r2
  80c1f4:	1007883a 	mov	r3,r2
  80c1f8:	d0a72703 	ldbu	r2,-25444(gp)
  80c1fc:	1884703a 	and	r2,r3,r2
  80c200:	d0a72705 	stb	r2,-25444(gp)
    }
}
  80c204:	e037883a 	mov	sp,fp
  80c208:	df000017 	ldw	fp,0(sp)
  80c20c:	dec00104 	addi	sp,sp,4
  80c210:	f800283a 	ret

0080c214 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
  80c214:	defffc04 	addi	sp,sp,-16
  80c218:	df000315 	stw	fp,12(sp)
  80c21c:	df000304 	addi	fp,sp,12
  80c220:	e13ffe15 	stw	r4,-8(fp)
  80c224:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
  80c228:	e0bffe17 	ldw	r2,-8(fp)
  80c22c:	10800d03 	ldbu	r2,52(r2)
  80c230:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
  80c234:	e13ffd03 	ldbu	r4,-12(fp)
  80c238:	e0fffd03 	ldbu	r3,-12(fp)
  80c23c:	e0bfff17 	ldw	r2,-4(fp)
  80c240:	1885883a 	add	r2,r3,r2
  80c244:	10800204 	addi	r2,r2,8
  80c248:	108000c3 	ldbu	r2,3(r2)
  80c24c:	1007883a 	mov	r3,r2
  80c250:	e0bffe17 	ldw	r2,-8(fp)
  80c254:	10800d43 	ldbu	r2,53(r2)
  80c258:	0084303a 	nor	r2,zero,r2
  80c25c:	1884703a 	and	r2,r3,r2
  80c260:	1007883a 	mov	r3,r2
  80c264:	e0bfff17 	ldw	r2,-4(fp)
  80c268:	2085883a 	add	r2,r4,r2
  80c26c:	10800204 	addi	r2,r2,8
  80c270:	10c000c5 	stb	r3,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
  80c274:	e0fffd03 	ldbu	r3,-12(fp)
  80c278:	e0bfff17 	ldw	r2,-4(fp)
  80c27c:	1885883a 	add	r2,r3,r2
  80c280:	10800204 	addi	r2,r2,8
  80c284:	108000c3 	ldbu	r2,3(r2)
  80c288:	10803fcc 	andi	r2,r2,255
  80c28c:	1004c03a 	cmpne	r2,r2,zero
  80c290:	10000a1e 	bne	r2,zero,80c2bc <OS_EventTaskRemove+0xa8>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
  80c294:	e0bfff17 	ldw	r2,-4(fp)
  80c298:	10800283 	ldbu	r2,10(r2)
  80c29c:	1007883a 	mov	r3,r2
  80c2a0:	e0bffe17 	ldw	r2,-8(fp)
  80c2a4:	10800d83 	ldbu	r2,54(r2)
  80c2a8:	0084303a 	nor	r2,zero,r2
  80c2ac:	1884703a 	and	r2,r3,r2
  80c2b0:	1007883a 	mov	r3,r2
  80c2b4:	e0bfff17 	ldw	r2,-4(fp)
  80c2b8:	10c00285 	stb	r3,10(r2)
    }
}
  80c2bc:	e037883a 	mov	sp,fp
  80c2c0:	df000017 	ldw	fp,0(sp)
  80c2c4:	dec00104 	addi	sp,sp,4
  80c2c8:	f800283a 	ret

0080c2cc <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
  80c2cc:	defffa04 	addi	sp,sp,-24
  80c2d0:	df000515 	stw	fp,20(sp)
  80c2d4:	df000504 	addi	fp,sp,20
  80c2d8:	e13ffe15 	stw	r4,-8(fp)
  80c2dc:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
  80c2e0:	e0bffe17 	ldw	r2,-8(fp)
  80c2e4:	10800d03 	ldbu	r2,52(r2)
  80c2e8:	e0bffb85 	stb	r2,-18(fp)
    bity    =  ptcb->OSTCBBitY;
  80c2ec:	e0bffe17 	ldw	r2,-8(fp)
  80c2f0:	10800d83 	ldbu	r2,54(r2)
  80c2f4:	e0bffb45 	stb	r2,-19(fp)
    bitx    =  ptcb->OSTCBBitX;
  80c2f8:	e0bffe17 	ldw	r2,-8(fp)
  80c2fc:	10800d43 	ldbu	r2,53(r2)
  80c300:	e0bffb05 	stb	r2,-20(fp)
    pevents =  pevents_multi;
  80c304:	e0bfff17 	ldw	r2,-4(fp)
  80c308:	e0bffd15 	stw	r2,-12(fp)
    pevent  = *pevents;
  80c30c:	e0bffd17 	ldw	r2,-12(fp)
  80c310:	10800017 	ldw	r2,0(r2)
  80c314:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  80c318:	00002606 	br	80c3b4 <OS_EventTaskRemoveMulti+0xe8>
        pevent->OSEventTbl[y]  &= ~bitx;
  80c31c:	e13ffb83 	ldbu	r4,-18(fp)
  80c320:	e0fffb83 	ldbu	r3,-18(fp)
  80c324:	e0bffc17 	ldw	r2,-16(fp)
  80c328:	1885883a 	add	r2,r3,r2
  80c32c:	10800204 	addi	r2,r2,8
  80c330:	108000c3 	ldbu	r2,3(r2)
  80c334:	1007883a 	mov	r3,r2
  80c338:	e0bffb03 	ldbu	r2,-20(fp)
  80c33c:	0084303a 	nor	r2,zero,r2
  80c340:	1884703a 	and	r2,r3,r2
  80c344:	1007883a 	mov	r3,r2
  80c348:	e0bffc17 	ldw	r2,-16(fp)
  80c34c:	2085883a 	add	r2,r4,r2
  80c350:	10800204 	addi	r2,r2,8
  80c354:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
  80c358:	e0fffb83 	ldbu	r3,-18(fp)
  80c35c:	e0bffc17 	ldw	r2,-16(fp)
  80c360:	1885883a 	add	r2,r3,r2
  80c364:	10800204 	addi	r2,r2,8
  80c368:	108000c3 	ldbu	r2,3(r2)
  80c36c:	10803fcc 	andi	r2,r2,255
  80c370:	1004c03a 	cmpne	r2,r2,zero
  80c374:	1000091e 	bne	r2,zero,80c39c <OS_EventTaskRemoveMulti+0xd0>
            pevent->OSEventGrp &= ~bity;
  80c378:	e0bffc17 	ldw	r2,-16(fp)
  80c37c:	10800283 	ldbu	r2,10(r2)
  80c380:	1007883a 	mov	r3,r2
  80c384:	e0bffb43 	ldbu	r2,-19(fp)
  80c388:	0084303a 	nor	r2,zero,r2
  80c38c:	1884703a 	and	r2,r3,r2
  80c390:	1007883a 	mov	r3,r2
  80c394:	e0bffc17 	ldw	r2,-16(fp)
  80c398:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
  80c39c:	e0bffd17 	ldw	r2,-12(fp)
  80c3a0:	10800104 	addi	r2,r2,4
  80c3a4:	e0bffd15 	stw	r2,-12(fp)
        pevent = *pevents;
  80c3a8:	e0bffd17 	ldw	r2,-12(fp)
  80c3ac:	10800017 	ldw	r2,0(r2)
  80c3b0:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  80c3b4:	e0bffc17 	ldw	r2,-16(fp)
  80c3b8:	1004c03a 	cmpne	r2,r2,zero
  80c3bc:	103fd71e 	bne	r2,zero,80c31c <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
  80c3c0:	e037883a 	mov	sp,fp
  80c3c4:	df000017 	ldw	fp,0(sp)
  80c3c8:	dec00104 	addi	sp,sp,4
  80c3cc:	f800283a 	ret

0080c3d0 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
  80c3d0:	defffc04 	addi	sp,sp,-16
  80c3d4:	df000315 	stw	fp,12(sp)
  80c3d8:	df000304 	addi	fp,sp,12
  80c3dc:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
  80c3e0:	e0bfff17 	ldw	r2,-4(fp)
  80c3e4:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
  80c3e8:	e0bfff17 	ldw	r2,-4(fp)
  80c3ec:	108002c4 	addi	r2,r2,11
  80c3f0:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  80c3f4:	e03ffd05 	stb	zero,-12(fp)
  80c3f8:	00000806 	br	80c41c <OS_EventWaitListInit+0x4c>
        *ptbl++ = 0;
  80c3fc:	e0bffe17 	ldw	r2,-8(fp)
  80c400:	10000005 	stb	zero,0(r2)
  80c404:	e0bffe17 	ldw	r2,-8(fp)
  80c408:	10800044 	addi	r2,r2,1
  80c40c:	e0bffe15 	stw	r2,-8(fp)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  80c410:	e0bffd03 	ldbu	r2,-12(fp)
  80c414:	10800044 	addi	r2,r2,1
  80c418:	e0bffd05 	stb	r2,-12(fp)
  80c41c:	e0bffd03 	ldbu	r2,-12(fp)
  80c420:	108000f0 	cmpltui	r2,r2,3
  80c424:	103ff51e 	bne	r2,zero,80c3fc <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
  80c428:	e037883a 	mov	sp,fp
  80c42c:	df000017 	ldw	fp,0(sp)
  80c430:	dec00104 	addi	sp,sp,4
  80c434:	f800283a 	ret

0080c438 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
  80c438:	defffb04 	addi	sp,sp,-20
  80c43c:	dfc00415 	stw	ra,16(sp)
  80c440:	df000315 	stw	fp,12(sp)
  80c444:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
  80c448:	010020b4 	movhi	r4,130
  80c44c:	2102be04 	addi	r4,r4,2808
  80c450:	0142d004 	movi	r5,2880
  80c454:	080c79c0 	call	80c79c <OS_MemClr>
    pevent1 = &OSEventTbl[0];
  80c458:	008020b4 	movhi	r2,130
  80c45c:	1082be04 	addi	r2,r2,2808
  80c460:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
  80c464:	008020b4 	movhi	r2,130
  80c468:	1082ca04 	addi	r2,r2,2856
  80c46c:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  80c470:	e03fff0d 	sth	zero,-4(fp)
  80c474:	00001306 	br	80c4c4 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
  80c478:	e0bffe17 	ldw	r2,-8(fp)
  80c47c:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
  80c480:	e0fffe17 	ldw	r3,-8(fp)
  80c484:	e0bffd17 	ldw	r2,-12(fp)
  80c488:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
  80c48c:	e0fffe17 	ldw	r3,-8(fp)
  80c490:	00800fc4 	movi	r2,63
  80c494:	18800385 	stb	r2,14(r3)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
  80c498:	e0bffe17 	ldw	r2,-8(fp)
  80c49c:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
  80c4a0:	e0bffe17 	ldw	r2,-8(fp)
  80c4a4:	10800c04 	addi	r2,r2,48
  80c4a8:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
  80c4ac:	e0bffd17 	ldw	r2,-12(fp)
  80c4b0:	10800c04 	addi	r2,r2,48
  80c4b4:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  80c4b8:	e0bfff0b 	ldhu	r2,-4(fp)
  80c4bc:	10800044 	addi	r2,r2,1
  80c4c0:	e0bfff0d 	sth	r2,-4(fp)
  80c4c4:	e0bfff0b 	ldhu	r2,-4(fp)
  80c4c8:	10800ef0 	cmpltui	r2,r2,59
  80c4cc:	103fea1e 	bne	r2,zero,80c478 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
  80c4d0:	e0bffe17 	ldw	r2,-8(fp)
  80c4d4:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
  80c4d8:	e0bffe17 	ldw	r2,-8(fp)
  80c4dc:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
  80c4e0:	e0fffe17 	ldw	r3,-8(fp)
  80c4e4:	00800fc4 	movi	r2,63
  80c4e8:	18800385 	stb	r2,14(r3)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
  80c4ec:	e0bffe17 	ldw	r2,-8(fp)
  80c4f0:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
  80c4f4:	008020b4 	movhi	r2,130
  80c4f8:	1082be04 	addi	r2,r2,2808
  80c4fc:	d0a72815 	stw	r2,-25440(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
  80c500:	e037883a 	mov	sp,fp
  80c504:	dfc00117 	ldw	ra,4(sp)
  80c508:	df000017 	ldw	fp,0(sp)
  80c50c:	dec00204 	addi	sp,sp,8
  80c510:	f800283a 	ret

0080c514 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
  80c514:	deffff04 	addi	sp,sp,-4
  80c518:	df000015 	stw	fp,0(sp)
  80c51c:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
  80c520:	d0272b15 	stw	zero,-25428(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
  80c524:	d0272905 	stb	zero,-25436(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
  80c528:	d0271b05 	stb	zero,-25492(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
  80c52c:	d0272345 	stb	zero,-25459(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
  80c530:	d0271b45 	stb	zero,-25491(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
  80c534:	d0272015 	stw	zero,-25472(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
  80c538:	d0271c15 	stw	zero,-25488(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
  80c53c:	d0272e15 	stw	zero,-25416(gp)
    OSIdleCtrMax  = 0L;
  80c540:	d0272115 	stw	zero,-25468(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
  80c544:	d0272d05 	stb	zero,-25420(gp)
#endif
}
  80c548:	e037883a 	mov	sp,fp
  80c54c:	df000017 	ldw	fp,0(sp)
  80c550:	dec00104 	addi	sp,sp,4
  80c554:	f800283a 	ret

0080c558 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
  80c558:	defffd04 	addi	sp,sp,-12
  80c55c:	df000215 	stw	fp,8(sp)
  80c560:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
  80c564:	d0272705 	stb	zero,-25444(gp)
    prdytbl       = &OSRdyTbl[0];
  80c568:	d0a72744 	addi	r2,gp,-25443
  80c56c:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  80c570:	e03fff05 	stb	zero,-4(fp)
  80c574:	00000806 	br	80c598 <OS_InitRdyList+0x40>
        *prdytbl++ = 0;
  80c578:	e0bffe17 	ldw	r2,-8(fp)
  80c57c:	10000005 	stb	zero,0(r2)
  80c580:	e0bffe17 	ldw	r2,-8(fp)
  80c584:	10800044 	addi	r2,r2,1
  80c588:	e0bffe15 	stw	r2,-8(fp)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  80c58c:	e0bfff03 	ldbu	r2,-4(fp)
  80c590:	10800044 	addi	r2,r2,1
  80c594:	e0bfff05 	stb	r2,-4(fp)
  80c598:	e0bfff03 	ldbu	r2,-4(fp)
  80c59c:	108000f0 	cmpltui	r2,r2,3
  80c5a0:	103ff51e 	bne	r2,zero,80c578 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
  80c5a4:	d0271d45 	stb	zero,-25483(gp)
    OSPrioHighRdy = 0;
  80c5a8:	d0271d05 	stb	zero,-25484(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
  80c5ac:	d0272515 	stw	zero,-25452(gp)
    OSTCBCur      = (OS_TCB *)0;
  80c5b0:	d0272a15 	stw	zero,-25432(gp)
}
  80c5b4:	e037883a 	mov	sp,fp
  80c5b8:	df000017 	ldw	fp,0(sp)
  80c5bc:	dec00104 	addi	sp,sp,4
  80c5c0:	f800283a 	ret

0080c5c4 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
  80c5c4:	defff804 	addi	sp,sp,-32
  80c5c8:	dfc00715 	stw	ra,28(sp)
  80c5cc:	df000615 	stw	fp,24(sp)
  80c5d0:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
  80c5d4:	018020b4 	movhi	r6,130
  80c5d8:	3182bd04 	addi	r6,r6,2804
  80c5dc:	00bfffd4 	movui	r2,65535
  80c5e0:	d8800015 	stw	r2,0(sp)
  80c5e4:	008020b4 	movhi	r2,130
  80c5e8:	1080be04 	addi	r2,r2,760
  80c5ec:	d8800115 	stw	r2,4(sp)
  80c5f0:	00808004 	movi	r2,512
  80c5f4:	d8800215 	stw	r2,8(sp)
  80c5f8:	d8000315 	stw	zero,12(sp)
  80c5fc:	008000c4 	movi	r2,3
  80c600:	d8800415 	stw	r2,16(sp)
  80c604:	01002074 	movhi	r4,129
  80c608:	21329e04 	addi	r4,r4,-13704
  80c60c:	000b883a 	mov	r5,zero
  80c610:	01c00504 	movi	r7,20
  80c614:	081185c0 	call	81185c <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
  80c618:	01402074 	movhi	r5,129
  80c61c:	295c5504 	addi	r5,r5,29012
  80c620:	01000504 	movi	r4,20
  80c624:	e1bfff04 	addi	r6,fp,-4
  80c628:	08121900 	call	812190 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
  80c62c:	e037883a 	mov	sp,fp
  80c630:	dfc00117 	ldw	ra,4(sp)
  80c634:	df000017 	ldw	fp,0(sp)
  80c638:	dec00204 	addi	sp,sp,8
  80c63c:	f800283a 	ret

0080c640 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
  80c640:	defff804 	addi	sp,sp,-32
  80c644:	dfc00715 	stw	ra,28(sp)
  80c648:	df000615 	stw	fp,24(sp)
  80c64c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
  80c650:	018020b4 	movhi	r6,130
  80c654:	31804504 	addi	r6,r6,276
  80c658:	00bfff94 	movui	r2,65534
  80c65c:	d8800015 	stw	r2,0(sp)
  80c660:	008020b4 	movhi	r2,130
  80c664:	10be4604 	addi	r2,r2,-1768
  80c668:	d8800115 	stw	r2,4(sp)
  80c66c:	00808004 	movi	r2,512
  80c670:	d8800215 	stw	r2,8(sp)
  80c674:	d8000315 	stw	zero,12(sp)
  80c678:	008000c4 	movi	r2,3
  80c67c:	d8800415 	stw	r2,16(sp)
  80c680:	01002074 	movhi	r4,129
  80c684:	2132b504 	addi	r4,r4,-13612
  80c688:	000b883a 	mov	r5,zero
  80c68c:	01c004c4 	movi	r7,19
  80c690:	081185c0 	call	81185c <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
  80c694:	01402074 	movhi	r5,129
  80c698:	295c5904 	addi	r5,r5,29028
  80c69c:	010004c4 	movi	r4,19
  80c6a0:	e1bfff04 	addi	r6,fp,-4
  80c6a4:	08121900 	call	812190 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
  80c6a8:	e037883a 	mov	sp,fp
  80c6ac:	dfc00117 	ldw	ra,4(sp)
  80c6b0:	df000017 	ldw	fp,0(sp)
  80c6b4:	dec00204 	addi	sp,sp,8
  80c6b8:	f800283a 	ret

0080c6bc <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
  80c6bc:	defffb04 	addi	sp,sp,-20
  80c6c0:	dfc00415 	stw	ra,16(sp)
  80c6c4:	df000315 	stw	fp,12(sp)
  80c6c8:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
  80c6cc:	010020b4 	movhi	r4,130
  80c6d0:	21058e04 	addi	r4,r4,5688
  80c6d4:	01414404 	movi	r5,1296
  80c6d8:	080c79c0 	call	80c79c <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
  80c6dc:	010020b4 	movhi	r4,130
  80c6e0:	2106d204 	addi	r4,r4,6984
  80c6e4:	01401504 	movi	r5,84
  80c6e8:	080c79c0 	call	80c79c <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
  80c6ec:	008020b4 	movhi	r2,130
  80c6f0:	10858e04 	addi	r2,r2,5688
  80c6f4:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
  80c6f8:	008020b4 	movhi	r2,130
  80c6fc:	1085a904 	addi	r2,r2,5796
  80c700:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  80c704:	e03fff05 	stb	zero,-4(fp)
  80c708:	00001106 	br	80c750 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
  80c70c:	e0fffe17 	ldw	r3,-8(fp)
  80c710:	e0bffd17 	ldw	r2,-12(fp)
  80c714:	18800515 	stw	r2,20(r3)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
  80c718:	e0fffe17 	ldw	r3,-8(fp)
  80c71c:	00800fc4 	movi	r2,63
  80c720:	18801305 	stb	r2,76(r3)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  80c724:	e0bffe17 	ldw	r2,-8(fp)
  80c728:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
  80c72c:	e0bffe17 	ldw	r2,-8(fp)
  80c730:	10801b04 	addi	r2,r2,108
  80c734:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
  80c738:	e0bffd17 	ldw	r2,-12(fp)
  80c73c:	10801b04 	addi	r2,r2,108
  80c740:	e0bffd15 	stw	r2,-12(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  80c744:	e0bfff03 	ldbu	r2,-4(fp)
  80c748:	10800044 	addi	r2,r2,1
  80c74c:	e0bfff05 	stb	r2,-4(fp)
  80c750:	e0bfff03 	ldbu	r2,-4(fp)
  80c754:	108002f0 	cmpltui	r2,r2,11
  80c758:	103fec1e 	bne	r2,zero,80c70c <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
  80c75c:	e0bffe17 	ldw	r2,-8(fp)
  80c760:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
  80c764:	e0fffe17 	ldw	r3,-8(fp)
  80c768:	00800fc4 	movi	r2,63
  80c76c:	18801305 	stb	r2,76(r3)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  80c770:	e0bffe17 	ldw	r2,-8(fp)
  80c774:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
  80c778:	d0271e15 	stw	zero,-25480(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
  80c77c:	008020b4 	movhi	r2,130
  80c780:	10858e04 	addi	r2,r2,5688
  80c784:	d0a72215 	stw	r2,-25464(gp)
}
  80c788:	e037883a 	mov	sp,fp
  80c78c:	dfc00117 	ldw	ra,4(sp)
  80c790:	df000017 	ldw	fp,0(sp)
  80c794:	dec00204 	addi	sp,sp,8
  80c798:	f800283a 	ret

0080c79c <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
  80c79c:	defffd04 	addi	sp,sp,-12
  80c7a0:	df000215 	stw	fp,8(sp)
  80c7a4:	df000204 	addi	fp,sp,8
  80c7a8:	e13ffe15 	stw	r4,-8(fp)
  80c7ac:	e17fff0d 	sth	r5,-4(fp)
    while (size > 0) {
  80c7b0:	00000806 	br	80c7d4 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
  80c7b4:	e0bffe17 	ldw	r2,-8(fp)
  80c7b8:	10000005 	stb	zero,0(r2)
  80c7bc:	e0bffe17 	ldw	r2,-8(fp)
  80c7c0:	10800044 	addi	r2,r2,1
  80c7c4:	e0bffe15 	stw	r2,-8(fp)
        size--;
  80c7c8:	e0bfff0b 	ldhu	r2,-4(fp)
  80c7cc:	10bfffc4 	addi	r2,r2,-1
  80c7d0:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
  80c7d4:	e0bfff0b 	ldhu	r2,-4(fp)
  80c7d8:	1004c03a 	cmpne	r2,r2,zero
  80c7dc:	103ff51e 	bne	r2,zero,80c7b4 <OS_MemClr+0x18>
        *pdest++ = (INT8U)0;
        size--;
    }
}
  80c7e0:	e037883a 	mov	sp,fp
  80c7e4:	df000017 	ldw	fp,0(sp)
  80c7e8:	dec00104 	addi	sp,sp,4
  80c7ec:	f800283a 	ret

0080c7f0 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
  80c7f0:	defffc04 	addi	sp,sp,-16
  80c7f4:	df000315 	stw	fp,12(sp)
  80c7f8:	df000304 	addi	fp,sp,12
  80c7fc:	e13ffd15 	stw	r4,-12(fp)
  80c800:	e17ffe15 	stw	r5,-8(fp)
  80c804:	e1bfff0d 	sth	r6,-4(fp)
    while (size > 0) {
  80c808:	00000d06 	br	80c840 <OS_MemCopy+0x50>
        *pdest++ = *psrc++;
  80c80c:	e0bffe17 	ldw	r2,-8(fp)
  80c810:	10c00003 	ldbu	r3,0(r2)
  80c814:	e0bffd17 	ldw	r2,-12(fp)
  80c818:	10c00005 	stb	r3,0(r2)
  80c81c:	e0bffd17 	ldw	r2,-12(fp)
  80c820:	10800044 	addi	r2,r2,1
  80c824:	e0bffd15 	stw	r2,-12(fp)
  80c828:	e0bffe17 	ldw	r2,-8(fp)
  80c82c:	10800044 	addi	r2,r2,1
  80c830:	e0bffe15 	stw	r2,-8(fp)
        size--;
  80c834:	e0bfff0b 	ldhu	r2,-4(fp)
  80c838:	10bfffc4 	addi	r2,r2,-1
  80c83c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
  80c840:	e0bfff0b 	ldhu	r2,-4(fp)
  80c844:	1004c03a 	cmpne	r2,r2,zero
  80c848:	103ff01e 	bne	r2,zero,80c80c <OS_MemCopy+0x1c>
        *pdest++ = *psrc++;
        size--;
    }
}
  80c84c:	e037883a 	mov	sp,fp
  80c850:	df000017 	ldw	fp,0(sp)
  80c854:	dec00104 	addi	sp,sp,4
  80c858:	f800283a 	ret

0080c85c <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
  80c85c:	defffb04 	addi	sp,sp,-20
  80c860:	dfc00415 	stw	ra,16(sp)
  80c864:	df000315 	stw	fp,12(sp)
  80c868:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  80c86c:	e03fff15 	stw	zero,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c870:	0005303a 	rdctl	r2,status
  80c874:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c878:	e0fffe17 	ldw	r3,-8(fp)
  80c87c:	00bfff84 	movi	r2,-2
  80c880:	1884703a 	and	r2,r3,r2
  80c884:	1001703a 	wrctl	status,r2
  
  return context;
  80c888:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
  80c88c:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
  80c890:	d0a72903 	ldbu	r2,-25436(gp)
  80c894:	10803fcc 	andi	r2,r2,255
  80c898:	1004c03a 	cmpne	r2,r2,zero
  80c89c:	10001b1e 	bne	r2,zero,80c90c <OS_Sched+0xb0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
  80c8a0:	d0a71b03 	ldbu	r2,-25492(gp)
  80c8a4:	10803fcc 	andi	r2,r2,255
  80c8a8:	1004c03a 	cmpne	r2,r2,zero
  80c8ac:	1000171e 	bne	r2,zero,80c90c <OS_Sched+0xb0>
            OS_SchedNew();
  80c8b0:	080c9300 	call	80c930 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
  80c8b4:	d0a71d03 	ldbu	r2,-25484(gp)
  80c8b8:	d0e71d43 	ldbu	r3,-25483(gp)
  80c8bc:	11003fcc 	andi	r4,r2,255
  80c8c0:	18803fcc 	andi	r2,r3,255
  80c8c4:	20801126 	beq	r4,r2,80c90c <OS_Sched+0xb0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
  80c8c8:	d0a71d03 	ldbu	r2,-25484(gp)
  80c8cc:	10803fcc 	andi	r2,r2,255
  80c8d0:	00c020b4 	movhi	r3,130
  80c8d4:	18c6d204 	addi	r3,r3,6984
  80c8d8:	1085883a 	add	r2,r2,r2
  80c8dc:	1085883a 	add	r2,r2,r2
  80c8e0:	10c5883a 	add	r2,r2,r3
  80c8e4:	10800017 	ldw	r2,0(r2)
  80c8e8:	d0a72515 	stw	r2,-25452(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
  80c8ec:	d0e72517 	ldw	r3,-25452(gp)
  80c8f0:	18800e17 	ldw	r2,56(r3)
  80c8f4:	10800044 	addi	r2,r2,1
  80c8f8:	18800e15 	stw	r2,56(r3)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
  80c8fc:	d0a72017 	ldw	r2,-25472(gp)
  80c900:	10800044 	addi	r2,r2,1
  80c904:	d0a72015 	stw	r2,-25472(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
  80c908:	08160d00 	call	8160d0 <OSCtxSw>
  80c90c:	e0bfff17 	ldw	r2,-4(fp)
  80c910:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c914:	e0bffd17 	ldw	r2,-12(fp)
  80c918:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
  80c91c:	e037883a 	mov	sp,fp
  80c920:	dfc00117 	ldw	ra,4(sp)
  80c924:	df000017 	ldw	fp,0(sp)
  80c928:	dec00204 	addi	sp,sp,8
  80c92c:	f800283a 	ret

0080c930 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
  80c930:	defffe04 	addi	sp,sp,-8
  80c934:	df000115 	stw	fp,4(sp)
  80c938:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
  80c93c:	d0a72703 	ldbu	r2,-25444(gp)
  80c940:	10c03fcc 	andi	r3,r2,255
  80c944:	00802074 	movhi	r2,129
  80c948:	109c1504 	addi	r2,r2,28756
  80c94c:	10c5883a 	add	r2,r2,r3
  80c950:	10800003 	ldbu	r2,0(r2)
  80c954:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
  80c958:	e0bfff03 	ldbu	r2,-4(fp)
  80c95c:	100490fa 	slli	r2,r2,3
  80c960:	1009883a 	mov	r4,r2
  80c964:	e0ffff03 	ldbu	r3,-4(fp)
  80c968:	d0a72744 	addi	r2,gp,-25443
  80c96c:	1885883a 	add	r2,r3,r2
  80c970:	10800003 	ldbu	r2,0(r2)
  80c974:	10c03fcc 	andi	r3,r2,255
  80c978:	00802074 	movhi	r2,129
  80c97c:	109c1504 	addi	r2,r2,28756
  80c980:	10c5883a 	add	r2,r2,r3
  80c984:	10800003 	ldbu	r2,0(r2)
  80c988:	2085883a 	add	r2,r4,r2
  80c98c:	d0a71d05 	stb	r2,-25484(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
  80c990:	e037883a 	mov	sp,fp
  80c994:	df000017 	ldw	fp,0(sp)
  80c998:	dec00104 	addi	sp,sp,4
  80c99c:	f800283a 	ret

0080c9a0 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
  80c9a0:	defffc04 	addi	sp,sp,-16
  80c9a4:	df000315 	stw	fp,12(sp)
  80c9a8:	df000304 	addi	fp,sp,12
  80c9ac:	e13ffe15 	stw	r4,-8(fp)
  80c9b0:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
  80c9b4:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
  80c9b8:	00000d06 	br	80c9f0 <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
  80c9bc:	e0bfff17 	ldw	r2,-4(fp)
  80c9c0:	10c00003 	ldbu	r3,0(r2)
  80c9c4:	e0bffe17 	ldw	r2,-8(fp)
  80c9c8:	10c00005 	stb	r3,0(r2)
  80c9cc:	e0bffe17 	ldw	r2,-8(fp)
  80c9d0:	10800044 	addi	r2,r2,1
  80c9d4:	e0bffe15 	stw	r2,-8(fp)
  80c9d8:	e0bfff17 	ldw	r2,-4(fp)
  80c9dc:	10800044 	addi	r2,r2,1
  80c9e0:	e0bfff15 	stw	r2,-4(fp)
        len++;
  80c9e4:	e0bffd03 	ldbu	r2,-12(fp)
  80c9e8:	10800044 	addi	r2,r2,1
  80c9ec:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  80c9f0:	e0bfff17 	ldw	r2,-4(fp)
  80c9f4:	10800003 	ldbu	r2,0(r2)
  80c9f8:	10803fcc 	andi	r2,r2,255
  80c9fc:	1004c03a 	cmpne	r2,r2,zero
  80ca00:	103fee1e 	bne	r2,zero,80c9bc <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
  80ca04:	e0bffe17 	ldw	r2,-8(fp)
  80ca08:	10000005 	stb	zero,0(r2)
    return (len);
  80ca0c:	e0bffd03 	ldbu	r2,-12(fp)
}
  80ca10:	e037883a 	mov	sp,fp
  80ca14:	df000017 	ldw	fp,0(sp)
  80ca18:	dec00104 	addi	sp,sp,4
  80ca1c:	f800283a 	ret

0080ca20 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
  80ca20:	defffd04 	addi	sp,sp,-12
  80ca24:	df000215 	stw	fp,8(sp)
  80ca28:	df000204 	addi	fp,sp,8
  80ca2c:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
  80ca30:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
  80ca34:	00000606 	br	80ca50 <OS_StrLen+0x30>
        psrc++;
  80ca38:	e0bfff17 	ldw	r2,-4(fp)
  80ca3c:	10800044 	addi	r2,r2,1
  80ca40:	e0bfff15 	stw	r2,-4(fp)
        len++;
  80ca44:	e0bffe03 	ldbu	r2,-8(fp)
  80ca48:	10800044 	addi	r2,r2,1
  80ca4c:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  80ca50:	e0bfff17 	ldw	r2,-4(fp)
  80ca54:	10800003 	ldbu	r2,0(r2)
  80ca58:	10803fcc 	andi	r2,r2,255
  80ca5c:	1004c03a 	cmpne	r2,r2,zero
  80ca60:	103ff51e 	bne	r2,zero,80ca38 <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
  80ca64:	e0bffe03 	ldbu	r2,-8(fp)
}
  80ca68:	e037883a 	mov	sp,fp
  80ca6c:	df000017 	ldw	fp,0(sp)
  80ca70:	dec00104 	addi	sp,sp,4
  80ca74:	f800283a 	ret

0080ca78 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
  80ca78:	defffa04 	addi	sp,sp,-24
  80ca7c:	dfc00515 	stw	ra,20(sp)
  80ca80:	df000415 	stw	fp,16(sp)
  80ca84:	df000404 	addi	fp,sp,16
  80ca88:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80ca8c:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ca90:	0005303a 	rdctl	r2,status
  80ca94:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ca98:	e0fffd17 	ldw	r3,-12(fp)
  80ca9c:	00bfff84 	movi	r2,-2
  80caa0:	1884703a 	and	r2,r3,r2
  80caa4:	1001703a 	wrctl	status,r2
  
  return context;
  80caa8:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
  80caac:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtr++;
  80cab0:	d0a71c17 	ldw	r2,-25488(gp)
  80cab4:	10800044 	addi	r2,r2,1
  80cab8:	d0a71c15 	stw	r2,-25488(gp)
  80cabc:	e0bffe17 	ldw	r2,-8(fp)
  80cac0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80cac4:	e0bffc17 	ldw	r2,-16(fp)
  80cac8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
  80cacc:	081657c0 	call	81657c <OSTaskIdleHook>
    }
  80cad0:	003fef06 	br	80ca90 <OS_TaskIdle+0x18>

0080cad4 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
  80cad4:	defffa04 	addi	sp,sp,-24
  80cad8:	dfc00515 	stw	ra,20(sp)
  80cadc:	df000415 	stw	fp,16(sp)
  80cae0:	df000404 	addi	fp,sp,16
  80cae4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80cae8:	e03ffe15 	stw	zero,-8(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  80caec:	00000206 	br	80caf8 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
  80caf0:	01003204 	movi	r4,200
  80caf4:	0812b540 	call	812b54 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  80caf8:	d0a72d03 	ldbu	r2,-25420(gp)
  80cafc:	10803fcc 	andi	r2,r2,255
  80cb00:	1005003a 	cmpeq	r2,r2,zero
  80cb04:	103ffa1e 	bne	r2,zero,80caf0 <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
  80cb08:	d1272117 	ldw	r4,-25468(gp)
  80cb0c:	01401904 	movi	r5,100
  80cb10:	08099100 	call	809910 <__udivsi3>
  80cb14:	d0a72115 	stw	r2,-25468(gp)
    if (OSIdleCtrMax == 0L) {
  80cb18:	d0a72117 	ldw	r2,-25468(gp)
  80cb1c:	1004c03a 	cmpne	r2,r2,zero
  80cb20:	1000031e 	bne	r2,zero,80cb30 <OS_TaskStat+0x5c>
        OSCPUUsage = 0;
  80cb24:	d0272305 	stb	zero,-25460(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
  80cb28:	01003fc4 	movi	r4,255
  80cb2c:	08127680 	call	812768 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80cb30:	0005303a 	rdctl	r2,status
  80cb34:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80cb38:	e0fffd17 	ldw	r3,-12(fp)
  80cb3c:	00bfff84 	movi	r2,-2
  80cb40:	1884703a 	and	r2,r3,r2
  80cb44:	1001703a 	wrctl	status,r2
  
  return context;
  80cb48:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
  80cb4c:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
  80cb50:	d0a71c17 	ldw	r2,-25488(gp)
  80cb54:	d0a72e15 	stw	r2,-25416(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
  80cb58:	d0271c15 	stw	zero,-25488(gp)
  80cb5c:	e0bffe17 	ldw	r2,-8(fp)
  80cb60:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80cb64:	e0bffc17 	ldw	r2,-16(fp)
  80cb68:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
  80cb6c:	d1272e17 	ldw	r4,-25416(gp)
  80cb70:	d1672117 	ldw	r5,-25468(gp)
  80cb74:	08099100 	call	809910 <__udivsi3>
  80cb78:	1007883a 	mov	r3,r2
  80cb7c:	00801904 	movi	r2,100
  80cb80:	10c5c83a 	sub	r2,r2,r3
  80cb84:	d0a72305 	stb	r2,-25460(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
  80cb88:	081650c0 	call	81650c <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
  80cb8c:	080cb9c0 	call	80cb9c <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
  80cb90:	01001904 	movi	r4,100
  80cb94:	0812b540 	call	812b54 <OSTimeDly>
    }
  80cb98:	003fe506 	br	80cb30 <OS_TaskStat+0x5c>

0080cb9c <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
  80cb9c:	defffa04 	addi	sp,sp,-24
  80cba0:	dfc00515 	stw	ra,20(sp)
  80cba4:	df000415 	stw	fp,16(sp)
  80cba8:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  80cbac:	e03ffc05 	stb	zero,-16(fp)
  80cbb0:	00002406 	br	80cc44 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
  80cbb4:	e13ffc03 	ldbu	r4,-16(fp)
  80cbb8:	e17ffe04 	addi	r5,fp,-8
  80cbbc:	081256c0 	call	81256c <OSTaskStkChk>
  80cbc0:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
  80cbc4:	e0bffc43 	ldbu	r2,-15(fp)
  80cbc8:	1004c03a 	cmpne	r2,r2,zero
  80cbcc:	10001a1e 	bne	r2,zero,80cc38 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
  80cbd0:	e0bffc03 	ldbu	r2,-16(fp)
  80cbd4:	00c020b4 	movhi	r3,130
  80cbd8:	18c6d204 	addi	r3,r3,6984
  80cbdc:	1085883a 	add	r2,r2,r2
  80cbe0:	1085883a 	add	r2,r2,r2
  80cbe4:	10c5883a 	add	r2,r2,r3
  80cbe8:	10800017 	ldw	r2,0(r2)
  80cbec:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
  80cbf0:	e0bffd17 	ldw	r2,-12(fp)
  80cbf4:	1005003a 	cmpeq	r2,r2,zero
  80cbf8:	10000f1e 	bne	r2,zero,80cc38 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
  80cbfc:	e0bffd17 	ldw	r2,-12(fp)
  80cc00:	10800060 	cmpeqi	r2,r2,1
  80cc04:	10000c1e 	bne	r2,zero,80cc38 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
  80cc08:	e0bffd17 	ldw	r2,-12(fp)
  80cc0c:	10c00217 	ldw	r3,8(r2)
  80cc10:	e0bffd17 	ldw	r2,-12(fp)
  80cc14:	10800317 	ldw	r2,12(r2)
  80cc18:	1085883a 	add	r2,r2,r2
  80cc1c:	1085883a 	add	r2,r2,r2
  80cc20:	1887883a 	add	r3,r3,r2
  80cc24:	e0bffd17 	ldw	r2,-12(fp)
  80cc28:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
  80cc2c:	e0ffff17 	ldw	r3,-4(fp)
  80cc30:	e0bffd17 	ldw	r2,-12(fp)
  80cc34:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  80cc38:	e0bffc03 	ldbu	r2,-16(fp)
  80cc3c:	10800044 	addi	r2,r2,1
  80cc40:	e0bffc05 	stb	r2,-16(fp)
  80cc44:	e0bffc03 	ldbu	r2,-16(fp)
  80cc48:	10800570 	cmpltui	r2,r2,21
  80cc4c:	103fd91e 	bne	r2,zero,80cbb4 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
  80cc50:	e037883a 	mov	sp,fp
  80cc54:	dfc00117 	ldw	ra,4(sp)
  80cc58:	df000017 	ldw	fp,0(sp)
  80cc5c:	dec00204 	addi	sp,sp,8
  80cc60:	f800283a 	ret

0080cc64 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
  80cc64:	defff104 	addi	sp,sp,-60
  80cc68:	dfc00e15 	stw	ra,56(sp)
  80cc6c:	df000d15 	stw	fp,52(sp)
  80cc70:	df000d04 	addi	fp,sp,52
  80cc74:	e17ffb15 	stw	r5,-20(fp)
  80cc78:	e1bffc15 	stw	r6,-16(fp)
  80cc7c:	e0800417 	ldw	r2,16(fp)
  80cc80:	e13ffa05 	stb	r4,-24(fp)
  80cc84:	e1fffd0d 	sth	r7,-12(fp)
  80cc88:	e0bffe0d 	sth	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80cc8c:	e03ff815 	stw	zero,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80cc90:	0005303a 	rdctl	r2,status
  80cc94:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80cc98:	e0fff717 	ldw	r3,-36(fp)
  80cc9c:	00bfff84 	movi	r2,-2
  80cca0:	1884703a 	and	r2,r3,r2
  80cca4:	1001703a 	wrctl	status,r2
  
  return context;
  80cca8:	e0bff717 	ldw	r2,-36(fp)
#endif



    OS_ENTER_CRITICAL();
  80ccac:	e0bff815 	stw	r2,-32(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
  80ccb0:	d0a72217 	ldw	r2,-25464(gp)
  80ccb4:	e0bff915 	stw	r2,-28(fp)
    if (ptcb != (OS_TCB *)0) {
  80ccb8:	e0bff917 	ldw	r2,-28(fp)
  80ccbc:	1005003a 	cmpeq	r2,r2,zero
  80ccc0:	1000941e 	bne	r2,zero,80cf14 <OS_TCBInit+0x2b0>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
  80ccc4:	e0bff917 	ldw	r2,-28(fp)
  80ccc8:	10800517 	ldw	r2,20(r2)
  80cccc:	d0a72215 	stw	r2,-25464(gp)
  80ccd0:	e0bff817 	ldw	r2,-32(fp)
  80ccd4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ccd8:	e0bff617 	ldw	r2,-40(fp)
  80ccdc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
  80cce0:	e0fff917 	ldw	r3,-28(fp)
  80cce4:	e0bffb17 	ldw	r2,-20(fp)
  80cce8:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
  80ccec:	e0fff917 	ldw	r3,-28(fp)
  80ccf0:	e0bffa03 	ldbu	r2,-24(fp)
  80ccf4:	18800c85 	stb	r2,50(r3)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
  80ccf8:	e0bff917 	ldw	r2,-28(fp)
  80ccfc:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
  80cd00:	e0bff917 	ldw	r2,-28(fp)
  80cd04:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
  80cd08:	e0bff917 	ldw	r2,-28(fp)
  80cd0c:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
  80cd10:	e0fff917 	ldw	r3,-28(fp)
  80cd14:	e0800317 	ldw	r2,12(fp)
  80cd18:	18800115 	stw	r2,4(r3)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
  80cd1c:	e0fff917 	ldw	r3,-28(fp)
  80cd20:	e0800217 	ldw	r2,8(fp)
  80cd24:	18800315 	stw	r2,12(r3)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
  80cd28:	e0fff917 	ldw	r3,-28(fp)
  80cd2c:	e0bffc17 	ldw	r2,-16(fp)
  80cd30:	18800215 	stw	r2,8(r3)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
  80cd34:	e0fff917 	ldw	r3,-28(fp)
  80cd38:	e0bffe0b 	ldhu	r2,-8(fp)
  80cd3c:	1880040d 	sth	r2,16(r3)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
  80cd40:	e0fff917 	ldw	r3,-28(fp)
  80cd44:	e0bffd0b 	ldhu	r2,-12(fp)
  80cd48:	1880048d 	sth	r2,18(r3)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
  80cd4c:	e0bff917 	ldw	r2,-28(fp)
  80cd50:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
  80cd54:	e0bffa03 	ldbu	r2,-24(fp)
  80cd58:	1004d0fa 	srli	r2,r2,3
  80cd5c:	1007883a 	mov	r3,r2
  80cd60:	e0bff917 	ldw	r2,-28(fp)
  80cd64:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
  80cd68:	e0bffa03 	ldbu	r2,-24(fp)
  80cd6c:	108001cc 	andi	r2,r2,7
  80cd70:	1007883a 	mov	r3,r2
  80cd74:	e0bff917 	ldw	r2,-28(fp)
  80cd78:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
  80cd7c:	e0bff917 	ldw	r2,-28(fp)
  80cd80:	10800d03 	ldbu	r2,52(r2)
  80cd84:	10c03fcc 	andi	r3,r2,255
  80cd88:	00800044 	movi	r2,1
  80cd8c:	10c4983a 	sll	r2,r2,r3
  80cd90:	1007883a 	mov	r3,r2
  80cd94:	e0bff917 	ldw	r2,-28(fp)
  80cd98:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
  80cd9c:	e0bff917 	ldw	r2,-28(fp)
  80cda0:	10800cc3 	ldbu	r2,51(r2)
  80cda4:	10c03fcc 	andi	r3,r2,255
  80cda8:	00800044 	movi	r2,1
  80cdac:	10c4983a 	sll	r2,r2,r3
  80cdb0:	1007883a 	mov	r3,r2
  80cdb4:	e0bff917 	ldw	r2,-28(fp)
  80cdb8:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
  80cdbc:	e0bff917 	ldw	r2,-28(fp)
  80cdc0:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
  80cdc4:	e0bff917 	ldw	r2,-28(fp)
  80cdc8:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
  80cdcc:	e0bff917 	ldw	r2,-28(fp)
  80cdd0:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
  80cdd4:	e0bff917 	ldw	r2,-28(fp)
  80cdd8:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
  80cddc:	e0bff917 	ldw	r2,-28(fp)
  80cde0:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
  80cde4:	e0bff917 	ldw	r2,-28(fp)
  80cde8:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
  80cdec:	e0bff917 	ldw	r2,-28(fp)
  80cdf0:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
  80cdf4:	e0bff917 	ldw	r2,-28(fp)
  80cdf8:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
  80cdfc:	e0bff917 	ldw	r2,-28(fp)
  80ce00:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
  80ce04:	e0fff917 	ldw	r3,-28(fp)
  80ce08:	00800fc4 	movi	r2,63
  80ce0c:	18801305 	stb	r2,76(r3)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  80ce10:	e0bff917 	ldw	r2,-28(fp)
  80ce14:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
  80ce18:	e13ff917 	ldw	r4,-28(fp)
  80ce1c:	08165980 	call	816598 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
  80ce20:	e13ff917 	ldw	r4,-28(fp)
  80ce24:	08164b00 	call	8164b0 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ce28:	0005303a 	rdctl	r2,status
  80ce2c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ce30:	e0fff517 	ldw	r3,-44(fp)
  80ce34:	00bfff84 	movi	r2,-2
  80ce38:	1884703a 	and	r2,r3,r2
  80ce3c:	1001703a 	wrctl	status,r2
  
  return context;
  80ce40:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
  80ce44:	e0bff815 	stw	r2,-32(fp)
        OSTCBPrioTbl[prio] = ptcb;
  80ce48:	e0bffa03 	ldbu	r2,-24(fp)
  80ce4c:	00c020b4 	movhi	r3,130
  80ce50:	18c6d204 	addi	r3,r3,6984
  80ce54:	1085883a 	add	r2,r2,r2
  80ce58:	1085883a 	add	r2,r2,r2
  80ce5c:	10c7883a 	add	r3,r2,r3
  80ce60:	e0bff917 	ldw	r2,-28(fp)
  80ce64:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
  80ce68:	d0e71e17 	ldw	r3,-25480(gp)
  80ce6c:	e0bff917 	ldw	r2,-28(fp)
  80ce70:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
  80ce74:	e0bff917 	ldw	r2,-28(fp)
  80ce78:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
  80ce7c:	d0a71e17 	ldw	r2,-25480(gp)
  80ce80:	1005003a 	cmpeq	r2,r2,zero
  80ce84:	1000031e 	bne	r2,zero,80ce94 <OS_TCBInit+0x230>
            OSTCBList->OSTCBPrev = ptcb;
  80ce88:	d0e71e17 	ldw	r3,-25480(gp)
  80ce8c:	e0bff917 	ldw	r2,-28(fp)
  80ce90:	18800615 	stw	r2,24(r3)
        }
        OSTCBList               = ptcb;
  80ce94:	e0bff917 	ldw	r2,-28(fp)
  80ce98:	d0a71e15 	stw	r2,-25480(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
  80ce9c:	e0bff917 	ldw	r2,-28(fp)
  80cea0:	10c00d83 	ldbu	r3,54(r2)
  80cea4:	d0a72703 	ldbu	r2,-25444(gp)
  80cea8:	1884b03a 	or	r2,r3,r2
  80ceac:	d0a72705 	stb	r2,-25444(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  80ceb0:	e0bff917 	ldw	r2,-28(fp)
  80ceb4:	10800d03 	ldbu	r2,52(r2)
  80ceb8:	11003fcc 	andi	r4,r2,255
  80cebc:	e0bff917 	ldw	r2,-28(fp)
  80cec0:	10800d03 	ldbu	r2,52(r2)
  80cec4:	10c03fcc 	andi	r3,r2,255
  80cec8:	d0a72744 	addi	r2,gp,-25443
  80cecc:	1885883a 	add	r2,r3,r2
  80ced0:	10c00003 	ldbu	r3,0(r2)
  80ced4:	e0bff917 	ldw	r2,-28(fp)
  80ced8:	10800d43 	ldbu	r2,53(r2)
  80cedc:	1884b03a 	or	r2,r3,r2
  80cee0:	1007883a 	mov	r3,r2
  80cee4:	d0a72744 	addi	r2,gp,-25443
  80cee8:	2085883a 	add	r2,r4,r2
  80ceec:	10c00005 	stb	r3,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
  80cef0:	d0a72343 	ldbu	r2,-25459(gp)
  80cef4:	10800044 	addi	r2,r2,1
  80cef8:	d0a72345 	stb	r2,-25459(gp)
  80cefc:	e0bff817 	ldw	r2,-32(fp)
  80cf00:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80cf04:	e0bff417 	ldw	r2,-48(fp)
  80cf08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  80cf0c:	e03fff15 	stw	zero,-4(fp)
  80cf10:	00000606 	br	80cf2c <OS_TCBInit+0x2c8>
  80cf14:	e0bff817 	ldw	r2,-32(fp)
  80cf18:	e0bff315 	stw	r2,-52(fp)
  80cf1c:	e0bff317 	ldw	r2,-52(fp)
  80cf20:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
  80cf24:	00801084 	movi	r2,66
  80cf28:	e0bfff15 	stw	r2,-4(fp)
  80cf2c:	e0bfff17 	ldw	r2,-4(fp)
}
  80cf30:	e037883a 	mov	sp,fp
  80cf34:	dfc00117 	ldw	ra,4(sp)
  80cf38:	df000017 	ldw	fp,0(sp)
  80cf3c:	dec00204 	addi	sp,sp,8
  80cf40:	f800283a 	ret

0080cf44 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
  80cf44:	defffe04 	addi	sp,sp,-8
  80cf48:	df000115 	stw	fp,4(sp)
  80cf4c:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
  80cf50:	d0a00f04 	addi	r2,gp,-32708
  80cf54:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
  80cf58:	d0a01004 	addi	r2,gp,-32704
  80cf5c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
  80cf60:	d0a01184 	addi	r2,gp,-32698
  80cf64:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
  80cf68:	d0a01204 	addi	r2,gp,-32696
  80cf6c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
  80cf70:	d0a01104 	addi	r2,gp,-32700
  80cf74:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
  80cf78:	d0a01284 	addi	r2,gp,-32694
  80cf7c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
  80cf80:	d0a01304 	addi	r2,gp,-32692
  80cf84:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
  80cf88:	d0a01384 	addi	r2,gp,-32690
  80cf8c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
  80cf90:	d0a01404 	addi	r2,gp,-32688
  80cf94:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
  80cf98:	d0a01484 	addi	r2,gp,-32686
  80cf9c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
  80cfa0:	d0a01504 	addi	r2,gp,-32684
  80cfa4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
  80cfa8:	d0a01584 	addi	r2,gp,-32682
  80cfac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
  80cfb0:	d0a01604 	addi	r2,gp,-32680
  80cfb4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
  80cfb8:	d0a01684 	addi	r2,gp,-32678
  80cfbc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
  80cfc0:	d0a01704 	addi	r2,gp,-32676
  80cfc4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
  80cfc8:	d0a01784 	addi	r2,gp,-32674
  80cfcc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
  80cfd0:	d0a01804 	addi	r2,gp,-32672
  80cfd4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
  80cfd8:	d0a01884 	addi	r2,gp,-32670
  80cfdc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
  80cfe0:	d0a01904 	addi	r2,gp,-32668
  80cfe4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
  80cfe8:	d0a01984 	addi	r2,gp,-32666
  80cfec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
  80cff0:	d0a01a04 	addi	r2,gp,-32664
  80cff4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
  80cff8:	d0a01a84 	addi	r2,gp,-32662
  80cffc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
  80d000:	d0a01b04 	addi	r2,gp,-32660
  80d004:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
  80d008:	d0a01b84 	addi	r2,gp,-32658
  80d00c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
  80d010:	d0a01c04 	addi	r2,gp,-32656
  80d014:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
  80d018:	d0a01c84 	addi	r2,gp,-32654
  80d01c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
  80d020:	d0a01d04 	addi	r2,gp,-32652
  80d024:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
  80d028:	d0a01d84 	addi	r2,gp,-32650
  80d02c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
  80d030:	d0a01e04 	addi	r2,gp,-32648
  80d034:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
  80d038:	d0a01e84 	addi	r2,gp,-32646
  80d03c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
  80d040:	d0a01f04 	addi	r2,gp,-32644
  80d044:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
  80d048:	d0a01f84 	addi	r2,gp,-32642
  80d04c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
  80d050:	d0a02004 	addi	r2,gp,-32640
  80d054:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
  80d058:	d0a02084 	addi	r2,gp,-32638
  80d05c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
  80d060:	d0a02104 	addi	r2,gp,-32636
  80d064:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
  80d068:	d0a02184 	addi	r2,gp,-32634
  80d06c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
  80d070:	d0a02204 	addi	r2,gp,-32632
  80d074:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
  80d078:	d0a02284 	addi	r2,gp,-32630
  80d07c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
  80d080:	d0a02304 	addi	r2,gp,-32628
  80d084:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
  80d088:	d0a02384 	addi	r2,gp,-32626
  80d08c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
  80d090:	d0a02404 	addi	r2,gp,-32624
  80d094:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
  80d098:	d0a02484 	addi	r2,gp,-32622
  80d09c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
  80d0a0:	d0a02504 	addi	r2,gp,-32620
  80d0a4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
  80d0a8:	d0a02584 	addi	r2,gp,-32618
  80d0ac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
  80d0b0:	d0a02604 	addi	r2,gp,-32616
  80d0b4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
  80d0b8:	d0a02b04 	addi	r2,gp,-32596
  80d0bc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
  80d0c0:	e037883a 	mov	sp,fp
  80d0c4:	df000017 	ldw	fp,0(sp)
  80d0c8:	dec00104 	addi	sp,sp,4
  80d0cc:	f800283a 	ret

0080d0d0 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
  80d0d0:	defff104 	addi	sp,sp,-60
  80d0d4:	df000e15 	stw	fp,56(sp)
  80d0d8:	df000e04 	addi	fp,sp,56
  80d0dc:	e13ffa15 	stw	r4,-24(fp)
  80d0e0:	e1fffd15 	stw	r7,-12(fp)
  80d0e4:	e17ffb0d 	sth	r5,-20(fp)
  80d0e8:	e1bffc05 	stb	r6,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  80d0ec:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  80d0f0:	e0bffd17 	ldw	r2,-12(fp)
  80d0f4:	1004c03a 	cmpne	r2,r2,zero
  80d0f8:	1000021e 	bne	r2,zero,80d104 <OSFlagAccept+0x34>
        return ((OS_FLAGS)0);
  80d0fc:	e03fff15 	stw	zero,-4(fp)
  80d100:	0000bb06 	br	80d3f0 <OSFlagAccept+0x320>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  80d104:	e0bffa17 	ldw	r2,-24(fp)
  80d108:	1004c03a 	cmpne	r2,r2,zero
  80d10c:	1000051e 	bne	r2,zero,80d124 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80d110:	e0fffd17 	ldw	r3,-12(fp)
  80d114:	00801b84 	movi	r2,110
  80d118:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80d11c:	e03fff15 	stw	zero,-4(fp)
  80d120:	0000b306 	br	80d3f0 <OSFlagAccept+0x320>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  80d124:	e0bffa17 	ldw	r2,-24(fp)
  80d128:	10800003 	ldbu	r2,0(r2)
  80d12c:	10803fcc 	andi	r2,r2,255
  80d130:	10800160 	cmpeqi	r2,r2,5
  80d134:	1000051e 	bne	r2,zero,80d14c <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  80d138:	e0fffd17 	ldw	r3,-12(fp)
  80d13c:	00800044 	movi	r2,1
  80d140:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80d144:	e03fff15 	stw	zero,-4(fp)
  80d148:	0000a906 	br	80d3f0 <OSFlagAccept+0x320>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  80d14c:	e0fffc03 	ldbu	r3,-16(fp)
  80d150:	00bfe004 	movi	r2,-128
  80d154:	1884703a 	and	r2,r3,r2
  80d158:	e0bff945 	stb	r2,-27(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
  80d15c:	e0bff943 	ldbu	r2,-27(fp)
  80d160:	1005003a 	cmpeq	r2,r2,zero
  80d164:	1000061e 	bne	r2,zero,80d180 <OSFlagAccept+0xb0>
        wait_type &= ~OS_FLAG_CONSUME;
  80d168:	e0bffc03 	ldbu	r2,-16(fp)
  80d16c:	10801fcc 	andi	r2,r2,127
  80d170:	e0bffc05 	stb	r2,-16(fp)
        consume    = OS_TRUE;
  80d174:	00800044 	movi	r2,1
  80d178:	e0bff905 	stb	r2,-28(fp)
  80d17c:	00000106 	br	80d184 <OSFlagAccept+0xb4>
    } else {
        consume    = OS_FALSE;
  80d180:	e03ff905 	stb	zero,-28(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
  80d184:	e0bffd17 	ldw	r2,-12(fp)
  80d188:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d18c:	0005303a 	rdctl	r2,status
  80d190:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d194:	e0fff717 	ldw	r3,-36(fp)
  80d198:	00bfff84 	movi	r2,-2
  80d19c:	1884703a 	and	r2,r3,r2
  80d1a0:	1001703a 	wrctl	status,r2
  
  return context;
  80d1a4:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  80d1a8:	e0bff815 	stw	r2,-32(fp)
    switch (wait_type) {
  80d1ac:	e0bffc03 	ldbu	r2,-16(fp)
  80d1b0:	e0bffe15 	stw	r2,-8(fp)
  80d1b4:	e0fffe17 	ldw	r3,-8(fp)
  80d1b8:	18800060 	cmpeqi	r2,r3,1
  80d1bc:	1000651e 	bne	r2,zero,80d354 <OSFlagAccept+0x284>
  80d1c0:	e0fffe17 	ldw	r3,-8(fp)
  80d1c4:	18800088 	cmpgei	r2,r3,2
  80d1c8:	1000041e 	bne	r2,zero,80d1dc <OSFlagAccept+0x10c>
  80d1cc:	e0fffe17 	ldw	r3,-8(fp)
  80d1d0:	1805003a 	cmpeq	r2,r3,zero
  80d1d4:	1000421e 	bne	r2,zero,80d2e0 <OSFlagAccept+0x210>
  80d1d8:	00007b06 	br	80d3c8 <OSFlagAccept+0x2f8>
  80d1dc:	e0fffe17 	ldw	r3,-8(fp)
  80d1e0:	188000a0 	cmpeqi	r2,r3,2
  80d1e4:	1000041e 	bne	r2,zero,80d1f8 <OSFlagAccept+0x128>
  80d1e8:	e0fffe17 	ldw	r3,-8(fp)
  80d1ec:	188000e0 	cmpeqi	r2,r3,3
  80d1f0:	10001e1e 	bne	r2,zero,80d26c <OSFlagAccept+0x19c>
  80d1f4:	00007406 	br	80d3c8 <OSFlagAccept+0x2f8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  80d1f8:	e0bffa17 	ldw	r2,-24(fp)
  80d1fc:	10c0020b 	ldhu	r3,8(r2)
  80d200:	e0bffb0b 	ldhu	r2,-20(fp)
  80d204:	1884703a 	and	r2,r3,r2
  80d208:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  80d20c:	e0fff98b 	ldhu	r3,-26(fp)
  80d210:	e0bffb0b 	ldhu	r2,-20(fp)
  80d214:	18800d1e 	bne	r3,r2,80d24c <OSFlagAccept+0x17c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80d218:	e0bff903 	ldbu	r2,-28(fp)
  80d21c:	10800058 	cmpnei	r2,r2,1
  80d220:	10000d1e 	bne	r2,zero,80d258 <OSFlagAccept+0x188>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  80d224:	e0bffa17 	ldw	r2,-24(fp)
  80d228:	1080020b 	ldhu	r2,8(r2)
  80d22c:	1007883a 	mov	r3,r2
  80d230:	e0bff98b 	ldhu	r2,-26(fp)
  80d234:	0084303a 	nor	r2,zero,r2
  80d238:	1884703a 	and	r2,r3,r2
  80d23c:	1007883a 	mov	r3,r2
  80d240:	e0bffa17 	ldw	r2,-24(fp)
  80d244:	10c0020d 	sth	r3,8(r2)
  80d248:	00000306 	br	80d258 <OSFlagAccept+0x188>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  80d24c:	e0fffd17 	ldw	r3,-12(fp)
  80d250:	00801c04 	movi	r2,112
  80d254:	18800005 	stb	r2,0(r3)
  80d258:	e0bff817 	ldw	r2,-32(fp)
  80d25c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d260:	e0bff617 	ldw	r2,-40(fp)
  80d264:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  80d268:	00005f06 	br	80d3e8 <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  80d26c:	e0bffa17 	ldw	r2,-24(fp)
  80d270:	10c0020b 	ldhu	r3,8(r2)
  80d274:	e0bffb0b 	ldhu	r2,-20(fp)
  80d278:	1884703a 	and	r2,r3,r2
  80d27c:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  80d280:	e0bff98b 	ldhu	r2,-26(fp)
  80d284:	1005003a 	cmpeq	r2,r2,zero
  80d288:	10000d1e 	bne	r2,zero,80d2c0 <OSFlagAccept+0x1f0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80d28c:	e0bff903 	ldbu	r2,-28(fp)
  80d290:	10800058 	cmpnei	r2,r2,1
  80d294:	10000d1e 	bne	r2,zero,80d2cc <OSFlagAccept+0x1fc>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  80d298:	e0bffa17 	ldw	r2,-24(fp)
  80d29c:	1080020b 	ldhu	r2,8(r2)
  80d2a0:	1007883a 	mov	r3,r2
  80d2a4:	e0bff98b 	ldhu	r2,-26(fp)
  80d2a8:	0084303a 	nor	r2,zero,r2
  80d2ac:	1884703a 	and	r2,r3,r2
  80d2b0:	1007883a 	mov	r3,r2
  80d2b4:	e0bffa17 	ldw	r2,-24(fp)
  80d2b8:	10c0020d 	sth	r3,8(r2)
  80d2bc:	00000306 	br	80d2cc <OSFlagAccept+0x1fc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  80d2c0:	e0fffd17 	ldw	r3,-12(fp)
  80d2c4:	00801c04 	movi	r2,112
  80d2c8:	18800005 	stb	r2,0(r3)
  80d2cc:	e0bff817 	ldw	r2,-32(fp)
  80d2d0:	e0bff515 	stw	r2,-44(fp)
  80d2d4:	e0bff517 	ldw	r2,-44(fp)
  80d2d8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  80d2dc:	00004206 	br	80d3e8 <OSFlagAccept+0x318>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  80d2e0:	e0bffa17 	ldw	r2,-24(fp)
  80d2e4:	1080020b 	ldhu	r2,8(r2)
  80d2e8:	0084303a 	nor	r2,zero,r2
  80d2ec:	1007883a 	mov	r3,r2
  80d2f0:	e0bffb0b 	ldhu	r2,-20(fp)
  80d2f4:	1884703a 	and	r2,r3,r2
  80d2f8:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  80d2fc:	e0fff98b 	ldhu	r3,-26(fp)
  80d300:	e0bffb0b 	ldhu	r2,-20(fp)
  80d304:	18800b1e 	bne	r3,r2,80d334 <OSFlagAccept+0x264>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80d308:	e0bff903 	ldbu	r2,-28(fp)
  80d30c:	10800058 	cmpnei	r2,r2,1
  80d310:	10000b1e 	bne	r2,zero,80d340 <OSFlagAccept+0x270>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  80d314:	e0bffa17 	ldw	r2,-24(fp)
  80d318:	10c0020b 	ldhu	r3,8(r2)
  80d31c:	e0bff98b 	ldhu	r2,-26(fp)
  80d320:	1884b03a 	or	r2,r3,r2
  80d324:	1007883a 	mov	r3,r2
  80d328:	e0bffa17 	ldw	r2,-24(fp)
  80d32c:	10c0020d 	sth	r3,8(r2)
  80d330:	00000306 	br	80d340 <OSFlagAccept+0x270>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  80d334:	e0fffd17 	ldw	r3,-12(fp)
  80d338:	00801c04 	movi	r2,112
  80d33c:	18800005 	stb	r2,0(r3)
  80d340:	e0bff817 	ldw	r2,-32(fp)
  80d344:	e0bff415 	stw	r2,-48(fp)
  80d348:	e0bff417 	ldw	r2,-48(fp)
  80d34c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  80d350:	00002506 	br	80d3e8 <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  80d354:	e0bffa17 	ldw	r2,-24(fp)
  80d358:	1080020b 	ldhu	r2,8(r2)
  80d35c:	0084303a 	nor	r2,zero,r2
  80d360:	1007883a 	mov	r3,r2
  80d364:	e0bffb0b 	ldhu	r2,-20(fp)
  80d368:	1884703a 	and	r2,r3,r2
  80d36c:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  80d370:	e0bff98b 	ldhu	r2,-26(fp)
  80d374:	1005003a 	cmpeq	r2,r2,zero
  80d378:	10000b1e 	bne	r2,zero,80d3a8 <OSFlagAccept+0x2d8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80d37c:	e0bff903 	ldbu	r2,-28(fp)
  80d380:	10800058 	cmpnei	r2,r2,1
  80d384:	10000b1e 	bne	r2,zero,80d3b4 <OSFlagAccept+0x2e4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  80d388:	e0bffa17 	ldw	r2,-24(fp)
  80d38c:	10c0020b 	ldhu	r3,8(r2)
  80d390:	e0bff98b 	ldhu	r2,-26(fp)
  80d394:	1884b03a 	or	r2,r3,r2
  80d398:	1007883a 	mov	r3,r2
  80d39c:	e0bffa17 	ldw	r2,-24(fp)
  80d3a0:	10c0020d 	sth	r3,8(r2)
  80d3a4:	00000306 	br	80d3b4 <OSFlagAccept+0x2e4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  80d3a8:	e0fffd17 	ldw	r3,-12(fp)
  80d3ac:	00801c04 	movi	r2,112
  80d3b0:	18800005 	stb	r2,0(r3)
  80d3b4:	e0bff817 	ldw	r2,-32(fp)
  80d3b8:	e0bff315 	stw	r2,-52(fp)
  80d3bc:	e0bff317 	ldw	r2,-52(fp)
  80d3c0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  80d3c4:	00000806 	br	80d3e8 <OSFlagAccept+0x318>
  80d3c8:	e0bff817 	ldw	r2,-32(fp)
  80d3cc:	e0bff215 	stw	r2,-56(fp)
  80d3d0:	e0bff217 	ldw	r2,-56(fp)
  80d3d4:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  80d3d8:	e03ff98d 	sth	zero,-26(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
  80d3dc:	e0fffd17 	ldw	r3,-12(fp)
  80d3e0:	00801bc4 	movi	r2,111
  80d3e4:	18800005 	stb	r2,0(r3)
             break;
    }
    return (flags_rdy);
  80d3e8:	e0bff98b 	ldhu	r2,-26(fp)
  80d3ec:	e0bfff15 	stw	r2,-4(fp)
  80d3f0:	e0bfff17 	ldw	r2,-4(fp)
}
  80d3f4:	e037883a 	mov	sp,fp
  80d3f8:	df000017 	ldw	fp,0(sp)
  80d3fc:	dec00104 	addi	sp,sp,4
  80d400:	f800283a 	ret

0080d404 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
  80d404:	defff704 	addi	sp,sp,-36
  80d408:	df000815 	stw	fp,32(sp)
  80d40c:	df000804 	addi	fp,sp,32
  80d410:	e17ffe15 	stw	r5,-8(fp)
  80d414:	e13ffd0d 	sth	r4,-12(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
  80d418:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
  80d41c:	e0bffe17 	ldw	r2,-8(fp)
  80d420:	1004c03a 	cmpne	r2,r2,zero
  80d424:	1000021e 	bne	r2,zero,80d430 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
  80d428:	e03fff15 	stw	zero,-4(fp)
  80d42c:	00003f06 	br	80d52c <OSFlagCreate+0x128>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
  80d430:	008020b4 	movhi	r2,130
  80d434:	10aa4b04 	addi	r2,r2,-22228
  80d438:	10800003 	ldbu	r2,0(r2)
  80d43c:	10803fcc 	andi	r2,r2,255
  80d440:	1005003a 	cmpeq	r2,r2,zero
  80d444:	1000051e 	bne	r2,zero,80d45c <OSFlagCreate+0x58>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
  80d448:	e0fffe17 	ldw	r3,-8(fp)
  80d44c:	00800404 	movi	r2,16
  80d450:	18800005 	stb	r2,0(r3)
        return ((OS_FLAG_GRP *)0);
  80d454:	e03fff15 	stw	zero,-4(fp)
  80d458:	00003406 	br	80d52c <OSFlagCreate+0x128>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d45c:	0005303a 	rdctl	r2,status
  80d460:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d464:	e0fffa17 	ldw	r3,-24(fp)
  80d468:	00bfff84 	movi	r2,-2
  80d46c:	1884703a 	and	r2,r3,r2
  80d470:	1001703a 	wrctl	status,r2
  
  return context;
  80d474:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  80d478:	e0bffb15 	stw	r2,-20(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
  80d47c:	008020b4 	movhi	r2,130
  80d480:	10aa4e04 	addi	r2,r2,-22216
  80d484:	10800017 	ldw	r2,0(r2)
  80d488:	e0bffc15 	stw	r2,-16(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
  80d48c:	e0bffc17 	ldw	r2,-16(fp)
  80d490:	1005003a 	cmpeq	r2,r2,zero
  80d494:	10001c1e 	bne	r2,zero,80d508 <OSFlagCreate+0x104>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
  80d498:	008020b4 	movhi	r2,130
  80d49c:	10aa4e04 	addi	r2,r2,-22216
  80d4a0:	10800017 	ldw	r2,0(r2)
  80d4a4:	10800117 	ldw	r2,4(r2)
  80d4a8:	1007883a 	mov	r3,r2
  80d4ac:	008020b4 	movhi	r2,130
  80d4b0:	10aa4e04 	addi	r2,r2,-22216
  80d4b4:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
  80d4b8:	e0fffc17 	ldw	r3,-16(fp)
  80d4bc:	00800144 	movi	r2,5
  80d4c0:	18800005 	stb	r2,0(r3)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
  80d4c4:	e0fffc17 	ldw	r3,-16(fp)
  80d4c8:	e0bffd0b 	ldhu	r2,-12(fp)
  80d4cc:	1880020d 	sth	r2,8(r3)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
  80d4d0:	e0bffc17 	ldw	r2,-16(fp)
  80d4d4:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
  80d4d8:	e0fffc17 	ldw	r3,-16(fp)
  80d4dc:	00800fc4 	movi	r2,63
  80d4e0:	18800285 	stb	r2,10(r3)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  80d4e4:	e0bffc17 	ldw	r2,-16(fp)
  80d4e8:	100002c5 	stb	zero,11(r2)
  80d4ec:	e0bffb17 	ldw	r2,-20(fp)
  80d4f0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d4f4:	e0bff917 	ldw	r2,-28(fp)
  80d4f8:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
  80d4fc:	e0bffe17 	ldw	r2,-8(fp)
  80d500:	10000005 	stb	zero,0(r2)
  80d504:	00000706 	br	80d524 <OSFlagCreate+0x120>
  80d508:	e0bffb17 	ldw	r2,-20(fp)
  80d50c:	e0bff815 	stw	r2,-32(fp)
  80d510:	e0bff817 	ldw	r2,-32(fp)
  80d514:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
  80d518:	e0fffe17 	ldw	r3,-8(fp)
  80d51c:	00801c84 	movi	r2,114
  80d520:	18800005 	stb	r2,0(r3)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
  80d524:	e0bffc17 	ldw	r2,-16(fp)
  80d528:	e0bfff15 	stw	r2,-4(fp)
  80d52c:	e0bfff17 	ldw	r2,-4(fp)
}
  80d530:	e037883a 	mov	sp,fp
  80d534:	df000017 	ldw	fp,0(sp)
  80d538:	dec00104 	addi	sp,sp,4
  80d53c:	f800283a 	ret

0080d540 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
  80d540:	defff004 	addi	sp,sp,-64
  80d544:	dfc00f15 	stw	ra,60(sp)
  80d548:	df000e15 	stw	fp,56(sp)
  80d54c:	df000e04 	addi	fp,sp,56
  80d550:	e13ffb15 	stw	r4,-20(fp)
  80d554:	e1bffd15 	stw	r6,-12(fp)
  80d558:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  80d55c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  80d560:	e0bffd17 	ldw	r2,-12(fp)
  80d564:	1004c03a 	cmpne	r2,r2,zero
  80d568:	1000031e 	bne	r2,zero,80d578 <OSFlagDel+0x38>
        return (pgrp);
  80d56c:	e0bffb17 	ldw	r2,-20(fp)
  80d570:	e0bfff15 	stw	r2,-4(fp)
  80d574:	00009606 	br	80d7d0 <OSFlagDel+0x290>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  80d578:	e0bffb17 	ldw	r2,-20(fp)
  80d57c:	1004c03a 	cmpne	r2,r2,zero
  80d580:	1000061e 	bne	r2,zero,80d59c <OSFlagDel+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80d584:	e0fffd17 	ldw	r3,-12(fp)
  80d588:	00801b84 	movi	r2,110
  80d58c:	18800005 	stb	r2,0(r3)
        return (pgrp);
  80d590:	e0fffb17 	ldw	r3,-20(fp)
  80d594:	e0ffff15 	stw	r3,-4(fp)
  80d598:	00008d06 	br	80d7d0 <OSFlagDel+0x290>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  80d59c:	008020b4 	movhi	r2,130
  80d5a0:	10aa4b04 	addi	r2,r2,-22228
  80d5a4:	10800003 	ldbu	r2,0(r2)
  80d5a8:	10803fcc 	andi	r2,r2,255
  80d5ac:	1005003a 	cmpeq	r2,r2,zero
  80d5b0:	1000061e 	bne	r2,zero,80d5cc <OSFlagDel+0x8c>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  80d5b4:	e0fffd17 	ldw	r3,-12(fp)
  80d5b8:	008003c4 	movi	r2,15
  80d5bc:	18800005 	stb	r2,0(r3)
        return (pgrp);
  80d5c0:	e0bffb17 	ldw	r2,-20(fp)
  80d5c4:	e0bfff15 	stw	r2,-4(fp)
  80d5c8:	00008106 	br	80d7d0 <OSFlagDel+0x290>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
  80d5cc:	e0bffb17 	ldw	r2,-20(fp)
  80d5d0:	10800003 	ldbu	r2,0(r2)
  80d5d4:	10803fcc 	andi	r2,r2,255
  80d5d8:	10800160 	cmpeqi	r2,r2,5
  80d5dc:	1000061e 	bne	r2,zero,80d5f8 <OSFlagDel+0xb8>
        *perr = OS_ERR_EVENT_TYPE;
  80d5e0:	e0fffd17 	ldw	r3,-12(fp)
  80d5e4:	00800044 	movi	r2,1
  80d5e8:	18800005 	stb	r2,0(r3)
        return (pgrp);
  80d5ec:	e0fffb17 	ldw	r3,-20(fp)
  80d5f0:	e0ffff15 	stw	r3,-4(fp)
  80d5f4:	00007606 	br	80d7d0 <OSFlagDel+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d5f8:	0005303a 	rdctl	r2,status
  80d5fc:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d600:	e0fff617 	ldw	r3,-40(fp)
  80d604:	00bfff84 	movi	r2,-2
  80d608:	1884703a 	and	r2,r3,r2
  80d60c:	1001703a 	wrctl	status,r2
  
  return context;
  80d610:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
  80d614:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
  80d618:	e0bffb17 	ldw	r2,-20(fp)
  80d61c:	10800117 	ldw	r2,4(r2)
  80d620:	1005003a 	cmpeq	r2,r2,zero
  80d624:	1000031e 	bne	r2,zero,80d634 <OSFlagDel+0xf4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  80d628:	00800044 	movi	r2,1
  80d62c:	e0bffa05 	stb	r2,-24(fp)
  80d630:	00000106 	br	80d638 <OSFlagDel+0xf8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  80d634:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  80d638:	e0bffc03 	ldbu	r2,-16(fp)
  80d63c:	e0bffe15 	stw	r2,-8(fp)
  80d640:	e0fffe17 	ldw	r3,-8(fp)
  80d644:	1805003a 	cmpeq	r2,r3,zero
  80d648:	1000041e 	bne	r2,zero,80d65c <OSFlagDel+0x11c>
  80d64c:	e0fffe17 	ldw	r3,-8(fp)
  80d650:	18800060 	cmpeqi	r2,r3,1
  80d654:	1000281e 	bne	r2,zero,80d6f8 <OSFlagDel+0x1b8>
  80d658:	00005206 	br	80d7a4 <OSFlagDel+0x264>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
  80d65c:	e0bffa03 	ldbu	r2,-24(fp)
  80d660:	1004c03a 	cmpne	r2,r2,zero
  80d664:	10001a1e 	bne	r2,zero,80d6d0 <OSFlagDel+0x190>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
  80d668:	e0fffb17 	ldw	r3,-20(fp)
  80d66c:	00800fc4 	movi	r2,63
  80d670:	18800285 	stb	r2,10(r3)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  80d674:	e0bffb17 	ldw	r2,-20(fp)
  80d678:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  80d67c:	e0bffb17 	ldw	r2,-20(fp)
  80d680:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
  80d684:	008020b4 	movhi	r2,130
  80d688:	10aa4e04 	addi	r2,r2,-22216
  80d68c:	10c00017 	ldw	r3,0(r2)
  80d690:	e0bffb17 	ldw	r2,-20(fp)
  80d694:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
  80d698:	e0bffb17 	ldw	r2,-20(fp)
  80d69c:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
  80d6a0:	00c020b4 	movhi	r3,130
  80d6a4:	18ea4e04 	addi	r3,r3,-22216
  80d6a8:	e0bffb17 	ldw	r2,-20(fp)
  80d6ac:	18800015 	stw	r2,0(r3)
  80d6b0:	e0bff717 	ldw	r2,-36(fp)
  80d6b4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d6b8:	e0bff517 	ldw	r2,-44(fp)
  80d6bc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
  80d6c0:	e0bffd17 	ldw	r2,-12(fp)
  80d6c4:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
  80d6c8:	e03ff815 	stw	zero,-32(fp)
  80d6cc:	00003e06 	br	80d7c8 <OSFlagDel+0x288>
  80d6d0:	e0bff717 	ldw	r2,-36(fp)
  80d6d4:	e0bff415 	stw	r2,-48(fp)
  80d6d8:	e0bff417 	ldw	r2,-48(fp)
  80d6dc:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
  80d6e0:	e0fffd17 	ldw	r3,-12(fp)
  80d6e4:	00801244 	movi	r2,73
  80d6e8:	18800005 	stb	r2,0(r3)
                 pgrp_return          = pgrp;
  80d6ec:	e0bffb17 	ldw	r2,-20(fp)
  80d6f0:	e0bff815 	stw	r2,-32(fp)
             }
             break;
  80d6f4:	00003406 	br	80d7c8 <OSFlagDel+0x288>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  80d6f8:	e0bffb17 	ldw	r2,-20(fp)
  80d6fc:	10800117 	ldw	r2,4(r2)
  80d700:	e0bff915 	stw	r2,-28(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  80d704:	00000606 	br	80d720 <OSFlagDel+0x1e0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
  80d708:	e13ff917 	ldw	r4,-28(fp)
  80d70c:	000b883a 	mov	r5,zero
  80d710:	080e8500 	call	80e850 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  80d714:	e0bff917 	ldw	r2,-28(fp)
  80d718:	10800017 	ldw	r2,0(r2)
  80d71c:	e0bff915 	stw	r2,-28(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  80d720:	e0bff917 	ldw	r2,-28(fp)
  80d724:	1004c03a 	cmpne	r2,r2,zero
  80d728:	103ff71e 	bne	r2,zero,80d708 <OSFlagDel+0x1c8>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
  80d72c:	e0fffb17 	ldw	r3,-20(fp)
  80d730:	00800fc4 	movi	r2,63
  80d734:	18800285 	stb	r2,10(r3)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  80d738:	e0bffb17 	ldw	r2,-20(fp)
  80d73c:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  80d740:	e0bffb17 	ldw	r2,-20(fp)
  80d744:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
  80d748:	008020b4 	movhi	r2,130
  80d74c:	10aa4e04 	addi	r2,r2,-22216
  80d750:	10c00017 	ldw	r3,0(r2)
  80d754:	e0bffb17 	ldw	r2,-20(fp)
  80d758:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
  80d75c:	e0bffb17 	ldw	r2,-20(fp)
  80d760:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
  80d764:	00c020b4 	movhi	r3,130
  80d768:	18ea4e04 	addi	r3,r3,-22216
  80d76c:	e0bffb17 	ldw	r2,-20(fp)
  80d770:	18800015 	stw	r2,0(r3)
  80d774:	e0bff717 	ldw	r2,-36(fp)
  80d778:	e0bff315 	stw	r2,-52(fp)
  80d77c:	e0bff317 	ldw	r2,-52(fp)
  80d780:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  80d784:	e0bffa03 	ldbu	r2,-24(fp)
  80d788:	10800058 	cmpnei	r2,r2,1
  80d78c:	1000011e 	bne	r2,zero,80d794 <OSFlagDel+0x254>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  80d790:	080c85c0 	call	80c85c <OS_Sched>
             }
             *perr = OS_ERR_NONE;
  80d794:	e0bffd17 	ldw	r2,-12(fp)
  80d798:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
  80d79c:	e03ff815 	stw	zero,-32(fp)
             break;
  80d7a0:	00000906 	br	80d7c8 <OSFlagDel+0x288>
  80d7a4:	e0bff717 	ldw	r2,-36(fp)
  80d7a8:	e0bff215 	stw	r2,-56(fp)
  80d7ac:	e0bff217 	ldw	r2,-56(fp)
  80d7b0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
  80d7b4:	e0fffd17 	ldw	r3,-12(fp)
  80d7b8:	008001c4 	movi	r2,7
  80d7bc:	18800005 	stb	r2,0(r3)
             pgrp_return          = pgrp;
  80d7c0:	e0bffb17 	ldw	r2,-20(fp)
  80d7c4:	e0bff815 	stw	r2,-32(fp)
             break;
    }
    return (pgrp_return);
  80d7c8:	e0bff817 	ldw	r2,-32(fp)
  80d7cc:	e0bfff15 	stw	r2,-4(fp)
  80d7d0:	e0bfff17 	ldw	r2,-4(fp)
}
  80d7d4:	e037883a 	mov	sp,fp
  80d7d8:	dfc00117 	ldw	ra,4(sp)
  80d7dc:	df000017 	ldw	fp,0(sp)
  80d7e0:	dec00204 	addi	sp,sp,8
  80d7e4:	f800283a 	ret

0080d7e8 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  80d7e8:	defff504 	addi	sp,sp,-44
  80d7ec:	dfc00a15 	stw	ra,40(sp)
  80d7f0:	df000915 	stw	fp,36(sp)
  80d7f4:	df000904 	addi	fp,sp,36
  80d7f8:	e13ffc15 	stw	r4,-16(fp)
  80d7fc:	e17ffd15 	stw	r5,-12(fp)
  80d800:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80d804:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80d808:	e0bffe17 	ldw	r2,-8(fp)
  80d80c:	1004c03a 	cmpne	r2,r2,zero
  80d810:	1000021e 	bne	r2,zero,80d81c <OSFlagNameGet+0x34>
        return (0);
  80d814:	e03fff15 	stw	zero,-4(fp)
  80d818:	00003e06 	br	80d914 <OSFlagNameGet+0x12c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  80d81c:	e0bffc17 	ldw	r2,-16(fp)
  80d820:	1004c03a 	cmpne	r2,r2,zero
  80d824:	1000051e 	bne	r2,zero,80d83c <OSFlagNameGet+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80d828:	e0fffe17 	ldw	r3,-8(fp)
  80d82c:	00801b84 	movi	r2,110
  80d830:	18800005 	stb	r2,0(r3)
        return (0);
  80d834:	e03fff15 	stw	zero,-4(fp)
  80d838:	00003606 	br	80d914 <OSFlagNameGet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80d83c:	e0bffd17 	ldw	r2,-12(fp)
  80d840:	1004c03a 	cmpne	r2,r2,zero
  80d844:	1000051e 	bne	r2,zero,80d85c <OSFlagNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  80d848:	e0fffe17 	ldw	r3,-8(fp)
  80d84c:	00800304 	movi	r2,12
  80d850:	18800005 	stb	r2,0(r3)
        return (0);
  80d854:	e03fff15 	stw	zero,-4(fp)
  80d858:	00002e06 	br	80d914 <OSFlagNameGet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80d85c:	008020b4 	movhi	r2,130
  80d860:	10aa4b04 	addi	r2,r2,-22228
  80d864:	10800003 	ldbu	r2,0(r2)
  80d868:	10803fcc 	andi	r2,r2,255
  80d86c:	1005003a 	cmpeq	r2,r2,zero
  80d870:	1000051e 	bne	r2,zero,80d888 <OSFlagNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
  80d874:	e0fffe17 	ldw	r3,-8(fp)
  80d878:	00800444 	movi	r2,17
  80d87c:	18800005 	stb	r2,0(r3)
        return (0);
  80d880:	e03fff15 	stw	zero,-4(fp)
  80d884:	00002306 	br	80d914 <OSFlagNameGet+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d888:	0005303a 	rdctl	r2,status
  80d88c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d890:	e0fff917 	ldw	r3,-28(fp)
  80d894:	00bfff84 	movi	r2,-2
  80d898:	1884703a 	and	r2,r3,r2
  80d89c:	1001703a 	wrctl	status,r2
  
  return context;
  80d8a0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  80d8a4:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  80d8a8:	e0bffc17 	ldw	r2,-16(fp)
  80d8ac:	10800003 	ldbu	r2,0(r2)
  80d8b0:	10803fcc 	andi	r2,r2,255
  80d8b4:	10800160 	cmpeqi	r2,r2,5
  80d8b8:	1000091e 	bne	r2,zero,80d8e0 <OSFlagNameGet+0xf8>
  80d8bc:	e0bffa17 	ldw	r2,-24(fp)
  80d8c0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d8c4:	e0bff817 	ldw	r2,-32(fp)
  80d8c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  80d8cc:	e0fffe17 	ldw	r3,-8(fp)
  80d8d0:	00800044 	movi	r2,1
  80d8d4:	18800005 	stb	r2,0(r3)
        return (0);
  80d8d8:	e03fff15 	stw	zero,-4(fp)
  80d8dc:	00000d06 	br	80d914 <OSFlagNameGet+0x12c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
  80d8e0:	e0bffc17 	ldw	r2,-16(fp)
  80d8e4:	11400284 	addi	r5,r2,10
  80d8e8:	e13ffd17 	ldw	r4,-12(fp)
  80d8ec:	080c9a00 	call	80c9a0 <OS_StrCopy>
  80d8f0:	e0bffb05 	stb	r2,-20(fp)
  80d8f4:	e0bffa17 	ldw	r2,-24(fp)
  80d8f8:	e0bff715 	stw	r2,-36(fp)
  80d8fc:	e0bff717 	ldw	r2,-36(fp)
  80d900:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80d904:	e0bffe17 	ldw	r2,-8(fp)
  80d908:	10000005 	stb	zero,0(r2)
    return (len);
  80d90c:	e0bffb03 	ldbu	r2,-20(fp)
  80d910:	e0bfff15 	stw	r2,-4(fp)
  80d914:	e0bfff17 	ldw	r2,-4(fp)
}
  80d918:	e037883a 	mov	sp,fp
  80d91c:	dfc00117 	ldw	ra,4(sp)
  80d920:	df000017 	ldw	fp,0(sp)
  80d924:	dec00204 	addi	sp,sp,8
  80d928:	f800283a 	ret

0080d92c <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  80d92c:	defff504 	addi	sp,sp,-44
  80d930:	dfc00a15 	stw	ra,40(sp)
  80d934:	df000915 	stw	fp,36(sp)
  80d938:	df000904 	addi	fp,sp,36
  80d93c:	e13ffd15 	stw	r4,-12(fp)
  80d940:	e17ffe15 	stw	r5,-8(fp)
  80d944:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80d948:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80d94c:	e0bfff17 	ldw	r2,-4(fp)
  80d950:	1005003a 	cmpeq	r2,r2,zero
  80d954:	1000451e 	bne	r2,zero,80da6c <OSFlagNameSet+0x140>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  80d958:	e0bffd17 	ldw	r2,-12(fp)
  80d95c:	1004c03a 	cmpne	r2,r2,zero
  80d960:	1000041e 	bne	r2,zero,80d974 <OSFlagNameSet+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80d964:	e0ffff17 	ldw	r3,-4(fp)
  80d968:	00801b84 	movi	r2,110
  80d96c:	18800005 	stb	r2,0(r3)
        return;
  80d970:	00003e06 	br	80da6c <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80d974:	e0bffe17 	ldw	r2,-8(fp)
  80d978:	1004c03a 	cmpne	r2,r2,zero
  80d97c:	1000041e 	bne	r2,zero,80d990 <OSFlagNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  80d980:	e0ffff17 	ldw	r3,-4(fp)
  80d984:	00800304 	movi	r2,12
  80d988:	18800005 	stb	r2,0(r3)
        return;
  80d98c:	00003706 	br	80da6c <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80d990:	008020b4 	movhi	r2,130
  80d994:	10aa4b04 	addi	r2,r2,-22228
  80d998:	10800003 	ldbu	r2,0(r2)
  80d99c:	10803fcc 	andi	r2,r2,255
  80d9a0:	1005003a 	cmpeq	r2,r2,zero
  80d9a4:	1000041e 	bne	r2,zero,80d9b8 <OSFlagNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
  80d9a8:	e0ffff17 	ldw	r3,-4(fp)
  80d9ac:	00800484 	movi	r2,18
  80d9b0:	18800005 	stb	r2,0(r3)
        return;
  80d9b4:	00002d06 	br	80da6c <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d9b8:	0005303a 	rdctl	r2,status
  80d9bc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d9c0:	e0fffa17 	ldw	r3,-24(fp)
  80d9c4:	00bfff84 	movi	r2,-2
  80d9c8:	1884703a 	and	r2,r3,r2
  80d9cc:	1001703a 	wrctl	status,r2
  
  return context;
  80d9d0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  80d9d4:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  80d9d8:	e0bffd17 	ldw	r2,-12(fp)
  80d9dc:	10800003 	ldbu	r2,0(r2)
  80d9e0:	10803fcc 	andi	r2,r2,255
  80d9e4:	10800160 	cmpeqi	r2,r2,5
  80d9e8:	1000081e 	bne	r2,zero,80da0c <OSFlagNameSet+0xe0>
  80d9ec:	e0bffb17 	ldw	r2,-20(fp)
  80d9f0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d9f4:	e0bff917 	ldw	r2,-28(fp)
  80d9f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  80d9fc:	e0ffff17 	ldw	r3,-4(fp)
  80da00:	00800044 	movi	r2,1
  80da04:	18800005 	stb	r2,0(r3)
        return;
  80da08:	00001806 	br	80da6c <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  80da0c:	e13ffe17 	ldw	r4,-8(fp)
  80da10:	080ca200 	call	80ca20 <OS_StrLen>
  80da14:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
  80da18:	e0bffc03 	ldbu	r2,-16(fp)
  80da1c:	10800830 	cmpltui	r2,r2,32
  80da20:	1000081e 	bne	r2,zero,80da44 <OSFlagNameSet+0x118>
  80da24:	e0bffb17 	ldw	r2,-20(fp)
  80da28:	e0bff815 	stw	r2,-32(fp)
  80da2c:	e0bff817 	ldw	r2,-32(fp)
  80da30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
  80da34:	e0ffff17 	ldw	r3,-4(fp)
  80da38:	00801cc4 	movi	r2,115
  80da3c:	18800005 	stb	r2,0(r3)
        return;
  80da40:	00000a06 	br	80da6c <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
  80da44:	e0bffd17 	ldw	r2,-12(fp)
  80da48:	11000284 	addi	r4,r2,10
  80da4c:	e17ffe17 	ldw	r5,-8(fp)
  80da50:	080c9a00 	call	80c9a0 <OS_StrCopy>
  80da54:	e0bffb17 	ldw	r2,-20(fp)
  80da58:	e0bff715 	stw	r2,-36(fp)
  80da5c:	e0bff717 	ldw	r2,-36(fp)
  80da60:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80da64:	e0bfff17 	ldw	r2,-4(fp)
  80da68:	10000005 	stb	zero,0(r2)
    return;
}
  80da6c:	e037883a 	mov	sp,fp
  80da70:	dfc00117 	ldw	ra,4(sp)
  80da74:	df000017 	ldw	fp,0(sp)
  80da78:	dec00204 	addi	sp,sp,8
  80da7c:	f800283a 	ret

0080da80 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
  80da80:	deffe004 	addi	sp,sp,-128
  80da84:	dfc01f15 	stw	ra,124(sp)
  80da88:	df001e15 	stw	fp,120(sp)
  80da8c:	df001e04 	addi	fp,sp,120
  80da90:	e13ff915 	stw	r4,-28(fp)
  80da94:	e17ffa0d 	sth	r5,-24(fp)
  80da98:	e1bffb05 	stb	r6,-20(fp)
  80da9c:	e1fffc0d 	sth	r7,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  80daa0:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  80daa4:	e0800217 	ldw	r2,8(fp)
  80daa8:	1004c03a 	cmpne	r2,r2,zero
  80daac:	1000021e 	bne	r2,zero,80dab8 <OSFlagPend+0x38>
        return ((OS_FLAGS)0);
  80dab0:	e03fff15 	stw	zero,-4(fp)
  80dab4:	00017d06 	br	80e0ac <OSFlagPend+0x62c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  80dab8:	e0bff917 	ldw	r2,-28(fp)
  80dabc:	1004c03a 	cmpne	r2,r2,zero
  80dac0:	1000051e 	bne	r2,zero,80dad8 <OSFlagPend+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80dac4:	e0c00217 	ldw	r3,8(fp)
  80dac8:	00801b84 	movi	r2,110
  80dacc:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80dad0:	e03fff15 	stw	zero,-4(fp)
  80dad4:	00017506 	br	80e0ac <OSFlagPend+0x62c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  80dad8:	008020b4 	movhi	r2,130
  80dadc:	10aa4b04 	addi	r2,r2,-22228
  80dae0:	10800003 	ldbu	r2,0(r2)
  80dae4:	10803fcc 	andi	r2,r2,255
  80dae8:	1005003a 	cmpeq	r2,r2,zero
  80daec:	1000051e 	bne	r2,zero,80db04 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
  80daf0:	e0c00217 	ldw	r3,8(fp)
  80daf4:	00800084 	movi	r2,2
  80daf8:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80dafc:	e03fff15 	stw	zero,-4(fp)
  80db00:	00016a06 	br	80e0ac <OSFlagPend+0x62c>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
  80db04:	008020b4 	movhi	r2,130
  80db08:	10aa3d04 	addi	r2,r2,-22284
  80db0c:	10800003 	ldbu	r2,0(r2)
  80db10:	10803fcc 	andi	r2,r2,255
  80db14:	1005003a 	cmpeq	r2,r2,zero
  80db18:	1000051e 	bne	r2,zero,80db30 <OSFlagPend+0xb0>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
  80db1c:	e0c00217 	ldw	r3,8(fp)
  80db20:	00800344 	movi	r2,13
  80db24:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80db28:	e03fff15 	stw	zero,-4(fp)
  80db2c:	00015f06 	br	80e0ac <OSFlagPend+0x62c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  80db30:	e0bff917 	ldw	r2,-28(fp)
  80db34:	10800003 	ldbu	r2,0(r2)
  80db38:	10803fcc 	andi	r2,r2,255
  80db3c:	10800160 	cmpeqi	r2,r2,5
  80db40:	1000051e 	bne	r2,zero,80db58 <OSFlagPend+0xd8>
        *perr = OS_ERR_EVENT_TYPE;
  80db44:	e0c00217 	ldw	r3,8(fp)
  80db48:	00800044 	movi	r2,1
  80db4c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80db50:	e03fff15 	stw	zero,-4(fp)
  80db54:	00015506 	br	80e0ac <OSFlagPend+0x62c>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  80db58:	e0fffb03 	ldbu	r3,-20(fp)
  80db5c:	00bfe004 	movi	r2,-128
  80db60:	1884703a 	and	r2,r3,r2
  80db64:	e0bff285 	stb	r2,-54(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
  80db68:	e0bff283 	ldbu	r2,-54(fp)
  80db6c:	1005003a 	cmpeq	r2,r2,zero
  80db70:	1000071e 	bne	r2,zero,80db90 <OSFlagPend+0x110>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
  80db74:	00c01fc4 	movi	r3,127
  80db78:	e0bffb03 	ldbu	r2,-20(fp)
  80db7c:	10c4703a 	and	r2,r2,r3
  80db80:	e0bffb05 	stb	r2,-20(fp)
        consume    = OS_TRUE;
  80db84:	00800044 	movi	r2,1
  80db88:	e0bff205 	stb	r2,-56(fp)
  80db8c:	00000106 	br	80db94 <OSFlagPend+0x114>
    } else {
        consume    = OS_FALSE;
  80db90:	e03ff205 	stb	zero,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80db94:	0005303a 	rdctl	r2,status
  80db98:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80db9c:	e0fff017 	ldw	r3,-64(fp)
  80dba0:	00bfff84 	movi	r2,-2
  80dba4:	1884703a 	and	r2,r3,r2
  80dba8:	1001703a 	wrctl	status,r2
  
  return context;
  80dbac:	e0bff017 	ldw	r2,-64(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  80dbb0:	e0bff115 	stw	r2,-60(fp)
    switch (wait_type) {
  80dbb4:	e0bffb03 	ldbu	r2,-20(fp)
  80dbb8:	e0bffe15 	stw	r2,-8(fp)
  80dbbc:	e0fffe17 	ldw	r3,-8(fp)
  80dbc0:	18800060 	cmpeqi	r2,r3,1
  80dbc4:	1000981e 	bne	r2,zero,80de28 <OSFlagPend+0x3a8>
  80dbc8:	e0fffe17 	ldw	r3,-8(fp)
  80dbcc:	18800088 	cmpgei	r2,r3,2
  80dbd0:	1000041e 	bne	r2,zero,80dbe4 <OSFlagPend+0x164>
  80dbd4:	e0fffe17 	ldw	r3,-8(fp)
  80dbd8:	1805003a 	cmpeq	r2,r3,zero
  80dbdc:	1000641e 	bne	r2,zero,80dd70 <OSFlagPend+0x2f0>
  80dbe0:	0000bf06 	br	80dee0 <OSFlagPend+0x460>
  80dbe4:	e0fffe17 	ldw	r3,-8(fp)
  80dbe8:	188000a0 	cmpeqi	r2,r3,2
  80dbec:	1000041e 	bne	r2,zero,80dc00 <OSFlagPend+0x180>
  80dbf0:	e0fffe17 	ldw	r3,-8(fp)
  80dbf4:	188000e0 	cmpeqi	r2,r3,3
  80dbf8:	10002f1e 	bne	r2,zero,80dcb8 <OSFlagPend+0x238>
  80dbfc:	0000b806 	br	80dee0 <OSFlagPend+0x460>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
  80dc00:	e0bff917 	ldw	r2,-28(fp)
  80dc04:	10c0020b 	ldhu	r3,8(r2)
  80dc08:	e0bffa0b 	ldhu	r2,-24(fp)
  80dc0c:	1884703a 	and	r2,r3,r2
  80dc10:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  80dc14:	e0fff30b 	ldhu	r3,-52(fp)
  80dc18:	e0bffa0b 	ldhu	r2,-24(fp)
  80dc1c:	18801a1e 	bne	r3,r2,80dc88 <OSFlagPend+0x208>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80dc20:	e0bff203 	ldbu	r2,-56(fp)
  80dc24:	10800058 	cmpnei	r2,r2,1
  80dc28:	1000091e 	bne	r2,zero,80dc50 <OSFlagPend+0x1d0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  80dc2c:	e0bff917 	ldw	r2,-28(fp)
  80dc30:	1080020b 	ldhu	r2,8(r2)
  80dc34:	1007883a 	mov	r3,r2
  80dc38:	e0bff30b 	ldhu	r2,-52(fp)
  80dc3c:	0084303a 	nor	r2,zero,r2
  80dc40:	1884703a 	and	r2,r3,r2
  80dc44:	1007883a 	mov	r3,r2
  80dc48:	e0bff917 	ldw	r2,-28(fp)
  80dc4c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  80dc50:	008020b4 	movhi	r2,130
  80dc54:	10aa4c04 	addi	r2,r2,-22224
  80dc58:	10c00017 	ldw	r3,0(r2)
  80dc5c:	e0bff30b 	ldhu	r2,-52(fp)
  80dc60:	18800b0d 	sth	r2,44(r3)
  80dc64:	e0bff117 	ldw	r2,-60(fp)
  80dc68:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80dc6c:	e0bfef17 	ldw	r2,-68(fp)
  80dc70:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  80dc74:	e0800217 	ldw	r2,8(fp)
  80dc78:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  80dc7c:	e0bff30b 	ldhu	r2,-52(fp)
  80dc80:	e0bfff15 	stw	r2,-4(fp)
  80dc84:	00010906 	br	80e0ac <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  80dc88:	e1bffa0b 	ldhu	r6,-24(fp)
  80dc8c:	e1fffb03 	ldbu	r7,-20(fp)
  80dc90:	e0bffc0b 	ldhu	r2,-16(fp)
  80dc94:	e17ff404 	addi	r5,fp,-48
  80dc98:	d8800015 	stw	r2,0(sp)
  80dc9c:	e13ff917 	ldw	r4,-28(fp)
  80dca0:	080e5a80 	call	80e5a8 <OS_FlagBlock>
  80dca4:	e0bff117 	ldw	r2,-60(fp)
  80dca8:	e0bfee15 	stw	r2,-72(fp)
  80dcac:	e0bfee17 	ldw	r2,-72(fp)
  80dcb0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  80dcb4:	00009506 	br	80df0c <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
  80dcb8:	e0bff917 	ldw	r2,-28(fp)
  80dcbc:	10c0020b 	ldhu	r3,8(r2)
  80dcc0:	e0bffa0b 	ldhu	r2,-24(fp)
  80dcc4:	1884703a 	and	r2,r3,r2
  80dcc8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  80dccc:	e0bff30b 	ldhu	r2,-52(fp)
  80dcd0:	1005003a 	cmpeq	r2,r2,zero
  80dcd4:	10001a1e 	bne	r2,zero,80dd40 <OSFlagPend+0x2c0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80dcd8:	e0bff203 	ldbu	r2,-56(fp)
  80dcdc:	10800058 	cmpnei	r2,r2,1
  80dce0:	1000091e 	bne	r2,zero,80dd08 <OSFlagPend+0x288>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  80dce4:	e0bff917 	ldw	r2,-28(fp)
  80dce8:	1080020b 	ldhu	r2,8(r2)
  80dcec:	1007883a 	mov	r3,r2
  80dcf0:	e0bff30b 	ldhu	r2,-52(fp)
  80dcf4:	0084303a 	nor	r2,zero,r2
  80dcf8:	1884703a 	and	r2,r3,r2
  80dcfc:	1007883a 	mov	r3,r2
  80dd00:	e0bff917 	ldw	r2,-28(fp)
  80dd04:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  80dd08:	008020b4 	movhi	r2,130
  80dd0c:	10aa4c04 	addi	r2,r2,-22224
  80dd10:	10c00017 	ldw	r3,0(r2)
  80dd14:	e0bff30b 	ldhu	r2,-52(fp)
  80dd18:	18800b0d 	sth	r2,44(r3)
  80dd1c:	e0bff117 	ldw	r2,-60(fp)
  80dd20:	e0bfed15 	stw	r2,-76(fp)
  80dd24:	e0bfed17 	ldw	r2,-76(fp)
  80dd28:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  80dd2c:	e0800217 	ldw	r2,8(fp)
  80dd30:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  80dd34:	e0fff30b 	ldhu	r3,-52(fp)
  80dd38:	e0ffff15 	stw	r3,-4(fp)
  80dd3c:	0000db06 	br	80e0ac <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  80dd40:	e1bffa0b 	ldhu	r6,-24(fp)
  80dd44:	e1fffb03 	ldbu	r7,-20(fp)
  80dd48:	e0bffc0b 	ldhu	r2,-16(fp)
  80dd4c:	e17ff404 	addi	r5,fp,-48
  80dd50:	d8800015 	stw	r2,0(sp)
  80dd54:	e13ff917 	ldw	r4,-28(fp)
  80dd58:	080e5a80 	call	80e5a8 <OS_FlagBlock>
  80dd5c:	e0bff117 	ldw	r2,-60(fp)
  80dd60:	e0bfec15 	stw	r2,-80(fp)
  80dd64:	e0bfec17 	ldw	r2,-80(fp)
  80dd68:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  80dd6c:	00006706 	br	80df0c <OSFlagPend+0x48c>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  80dd70:	e0bff917 	ldw	r2,-28(fp)
  80dd74:	1080020b 	ldhu	r2,8(r2)
  80dd78:	0084303a 	nor	r2,zero,r2
  80dd7c:	1007883a 	mov	r3,r2
  80dd80:	e0bffa0b 	ldhu	r2,-24(fp)
  80dd84:	1884703a 	and	r2,r3,r2
  80dd88:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  80dd8c:	e0fff30b 	ldhu	r3,-52(fp)
  80dd90:	e0bffa0b 	ldhu	r2,-24(fp)
  80dd94:	1880181e 	bne	r3,r2,80ddf8 <OSFlagPend+0x378>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80dd98:	e0bff203 	ldbu	r2,-56(fp)
  80dd9c:	10800058 	cmpnei	r2,r2,1
  80dda0:	1000071e 	bne	r2,zero,80ddc0 <OSFlagPend+0x340>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  80dda4:	e0bff917 	ldw	r2,-28(fp)
  80dda8:	10c0020b 	ldhu	r3,8(r2)
  80ddac:	e0bff30b 	ldhu	r2,-52(fp)
  80ddb0:	1884b03a 	or	r2,r3,r2
  80ddb4:	1007883a 	mov	r3,r2
  80ddb8:	e0bff917 	ldw	r2,-28(fp)
  80ddbc:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  80ddc0:	008020b4 	movhi	r2,130
  80ddc4:	10aa4c04 	addi	r2,r2,-22224
  80ddc8:	10c00017 	ldw	r3,0(r2)
  80ddcc:	e0bff30b 	ldhu	r2,-52(fp)
  80ddd0:	18800b0d 	sth	r2,44(r3)
  80ddd4:	e0bff117 	ldw	r2,-60(fp)
  80ddd8:	e0bfeb15 	stw	r2,-84(fp)
  80dddc:	e0bfeb17 	ldw	r2,-84(fp)
  80dde0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  80dde4:	e0800217 	ldw	r2,8(fp)
  80dde8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  80ddec:	e0bff30b 	ldhu	r2,-52(fp)
  80ddf0:	e0bfff15 	stw	r2,-4(fp)
  80ddf4:	0000ad06 	br	80e0ac <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  80ddf8:	e1bffa0b 	ldhu	r6,-24(fp)
  80ddfc:	e1fffb03 	ldbu	r7,-20(fp)
  80de00:	e0bffc0b 	ldhu	r2,-16(fp)
  80de04:	e17ff404 	addi	r5,fp,-48
  80de08:	d8800015 	stw	r2,0(sp)
  80de0c:	e13ff917 	ldw	r4,-28(fp)
  80de10:	080e5a80 	call	80e5a8 <OS_FlagBlock>
  80de14:	e0bff117 	ldw	r2,-60(fp)
  80de18:	e0bfea15 	stw	r2,-88(fp)
  80de1c:	e0bfea17 	ldw	r2,-88(fp)
  80de20:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  80de24:	00003906 	br	80df0c <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  80de28:	e0bff917 	ldw	r2,-28(fp)
  80de2c:	1080020b 	ldhu	r2,8(r2)
  80de30:	0084303a 	nor	r2,zero,r2
  80de34:	1007883a 	mov	r3,r2
  80de38:	e0bffa0b 	ldhu	r2,-24(fp)
  80de3c:	1884703a 	and	r2,r3,r2
  80de40:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  80de44:	e0bff30b 	ldhu	r2,-52(fp)
  80de48:	1005003a 	cmpeq	r2,r2,zero
  80de4c:	1000181e 	bne	r2,zero,80deb0 <OSFlagPend+0x430>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80de50:	e0bff203 	ldbu	r2,-56(fp)
  80de54:	10800058 	cmpnei	r2,r2,1
  80de58:	1000071e 	bne	r2,zero,80de78 <OSFlagPend+0x3f8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  80de5c:	e0bff917 	ldw	r2,-28(fp)
  80de60:	10c0020b 	ldhu	r3,8(r2)
  80de64:	e0bff30b 	ldhu	r2,-52(fp)
  80de68:	1884b03a 	or	r2,r3,r2
  80de6c:	1007883a 	mov	r3,r2
  80de70:	e0bff917 	ldw	r2,-28(fp)
  80de74:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  80de78:	008020b4 	movhi	r2,130
  80de7c:	10aa4c04 	addi	r2,r2,-22224
  80de80:	10c00017 	ldw	r3,0(r2)
  80de84:	e0bff30b 	ldhu	r2,-52(fp)
  80de88:	18800b0d 	sth	r2,44(r3)
  80de8c:	e0bff117 	ldw	r2,-60(fp)
  80de90:	e0bfe915 	stw	r2,-92(fp)
  80de94:	e0bfe917 	ldw	r2,-92(fp)
  80de98:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  80de9c:	e0800217 	ldw	r2,8(fp)
  80dea0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  80dea4:	e0fff30b 	ldhu	r3,-52(fp)
  80dea8:	e0ffff15 	stw	r3,-4(fp)
  80deac:	00007f06 	br	80e0ac <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  80deb0:	e1bffa0b 	ldhu	r6,-24(fp)
  80deb4:	e1fffb03 	ldbu	r7,-20(fp)
  80deb8:	e0bffc0b 	ldhu	r2,-16(fp)
  80debc:	e17ff404 	addi	r5,fp,-48
  80dec0:	d8800015 	stw	r2,0(sp)
  80dec4:	e13ff917 	ldw	r4,-28(fp)
  80dec8:	080e5a80 	call	80e5a8 <OS_FlagBlock>
  80decc:	e0bff117 	ldw	r2,-60(fp)
  80ded0:	e0bfe815 	stw	r2,-96(fp)
  80ded4:	e0bfe817 	ldw	r2,-96(fp)
  80ded8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  80dedc:	00000b06 	br	80df0c <OSFlagPend+0x48c>
  80dee0:	e0bff117 	ldw	r2,-60(fp)
  80dee4:	e0bfe715 	stw	r2,-100(fp)
  80dee8:	e0bfe717 	ldw	r2,-100(fp)
  80deec:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  80def0:	e03ff30d 	sth	zero,-52(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
  80def4:	e0c00217 	ldw	r3,8(fp)
  80def8:	00801bc4 	movi	r2,111
  80defc:	18800005 	stb	r2,0(r3)
             return (flags_rdy);
  80df00:	e0bff30b 	ldhu	r2,-52(fp)
  80df04:	e0bfff15 	stw	r2,-4(fp)
  80df08:	00006806 	br	80e0ac <OSFlagPend+0x62c>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
  80df0c:	080c85c0 	call	80c85c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80df10:	0005303a 	rdctl	r2,status
  80df14:	e0bfe615 	stw	r2,-104(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80df18:	e0ffe617 	ldw	r3,-104(fp)
  80df1c:	00bfff84 	movi	r2,-2
  80df20:	1884703a 	and	r2,r3,r2
  80df24:	1001703a 	wrctl	status,r2
  
  return context;
  80df28:	e0bfe617 	ldw	r2,-104(fp)
    OS_ENTER_CRITICAL();
  80df2c:	e0bff115 	stw	r2,-60(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
  80df30:	008020b4 	movhi	r2,130
  80df34:	10aa4c04 	addi	r2,r2,-22224
  80df38:	10800017 	ldw	r2,0(r2)
  80df3c:	10800c43 	ldbu	r2,49(r2)
  80df40:	10803fcc 	andi	r2,r2,255
  80df44:	1005003a 	cmpeq	r2,r2,zero
  80df48:	1000221e 	bne	r2,zero,80dfd4 <OSFlagPend+0x554>
        pend_stat                = OSTCBCur->OSTCBStatPend;
  80df4c:	008020b4 	movhi	r2,130
  80df50:	10aa4c04 	addi	r2,r2,-22224
  80df54:	10800017 	ldw	r2,0(r2)
  80df58:	10800c43 	ldbu	r2,49(r2)
  80df5c:	e0bff245 	stb	r2,-55(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  80df60:	008020b4 	movhi	r2,130
  80df64:	10aa4c04 	addi	r2,r2,-22224
  80df68:	10800017 	ldw	r2,0(r2)
  80df6c:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
  80df70:	e13ff404 	addi	r4,fp,-48
  80df74:	080e9600 	call	80e960 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
  80df78:	008020b4 	movhi	r2,130
  80df7c:	10aa4c04 	addi	r2,r2,-22224
  80df80:	10800017 	ldw	r2,0(r2)
  80df84:	10000c05 	stb	zero,48(r2)
  80df88:	e0bff117 	ldw	r2,-60(fp)
  80df8c:	e0bfe515 	stw	r2,-108(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80df90:	e0bfe517 	ldw	r2,-108(fp)
  80df94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
  80df98:	e03ff30d 	sth	zero,-52(fp)
        switch (pend_stat) {
  80df9c:	e0bff243 	ldbu	r2,-55(fp)
  80dfa0:	108000a0 	cmpeqi	r2,r2,2
  80dfa4:	1000011e 	bne	r2,zero,80dfac <OSFlagPend+0x52c>
  80dfa8:	00000406 	br	80dfbc <OSFlagPend+0x53c>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
  80dfac:	e0c00217 	ldw	r3,8(fp)
  80dfb0:	00800384 	movi	r2,14
  80dfb4:	18800005 	stb	r2,0(r3)
                 break;
  80dfb8:	00000306 	br	80dfc8 <OSFlagPend+0x548>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
  80dfbc:	e0c00217 	ldw	r3,8(fp)
  80dfc0:	00800284 	movi	r2,10
  80dfc4:	18800005 	stb	r2,0(r3)
                 break;
        }
        return (flags_rdy);
  80dfc8:	e0fff30b 	ldhu	r3,-52(fp)
  80dfcc:	e0ffff15 	stw	r3,-4(fp)
  80dfd0:	00003606 	br	80e0ac <OSFlagPend+0x62c>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
  80dfd4:	008020b4 	movhi	r2,130
  80dfd8:	10aa4c04 	addi	r2,r2,-22224
  80dfdc:	10800017 	ldw	r2,0(r2)
  80dfe0:	10800b0b 	ldhu	r2,44(r2)
  80dfe4:	e0bff30d 	sth	r2,-52(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
  80dfe8:	e0bff203 	ldbu	r2,-56(fp)
  80dfec:	10800058 	cmpnei	r2,r2,1
  80dff0:	1000261e 	bne	r2,zero,80e08c <OSFlagPend+0x60c>
        switch (wait_type) {
  80dff4:	e0bffb03 	ldbu	r2,-20(fp)
  80dff8:	e0bffd15 	stw	r2,-12(fp)
  80dffc:	e0fffd17 	ldw	r3,-12(fp)
  80e000:	1804803a 	cmplt	r2,r3,zero
  80e004:	1000181e 	bne	r2,zero,80e068 <OSFlagPend+0x5e8>
  80e008:	e0fffd17 	ldw	r3,-12(fp)
  80e00c:	18800090 	cmplti	r2,r3,2
  80e010:	10000d1e 	bne	r2,zero,80e048 <OSFlagPend+0x5c8>
  80e014:	e0fffd17 	ldw	r3,-12(fp)
  80e018:	18800108 	cmpgei	r2,r3,4
  80e01c:	1000121e 	bne	r2,zero,80e068 <OSFlagPend+0x5e8>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
  80e020:	e0bff917 	ldw	r2,-28(fp)
  80e024:	1080020b 	ldhu	r2,8(r2)
  80e028:	1007883a 	mov	r3,r2
  80e02c:	e0bff30b 	ldhu	r2,-52(fp)
  80e030:	0084303a 	nor	r2,zero,r2
  80e034:	1884703a 	and	r2,r3,r2
  80e038:	1007883a 	mov	r3,r2
  80e03c:	e0bff917 	ldw	r2,-28(fp)
  80e040:	10c0020d 	sth	r3,8(r2)
                 break;
  80e044:	00001106 	br	80e08c <OSFlagPend+0x60c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
  80e048:	e0bff917 	ldw	r2,-28(fp)
  80e04c:	10c0020b 	ldhu	r3,8(r2)
  80e050:	e0bff30b 	ldhu	r2,-52(fp)
  80e054:	1884b03a 	or	r2,r3,r2
  80e058:	1007883a 	mov	r3,r2
  80e05c:	e0bff917 	ldw	r2,-28(fp)
  80e060:	10c0020d 	sth	r3,8(r2)
                 break;
  80e064:	00000906 	br	80e08c <OSFlagPend+0x60c>
  80e068:	e0bff117 	ldw	r2,-60(fp)
  80e06c:	e0bfe415 	stw	r2,-112(fp)
  80e070:	e0bfe417 	ldw	r2,-112(fp)
  80e074:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  80e078:	e0c00217 	ldw	r3,8(fp)
  80e07c:	00801bc4 	movi	r2,111
  80e080:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
  80e084:	e03fff15 	stw	zero,-4(fp)
  80e088:	00000806 	br	80e0ac <OSFlagPend+0x62c>
  80e08c:	e0bff117 	ldw	r2,-60(fp)
  80e090:	e0bfe315 	stw	r2,-116(fp)
  80e094:	e0bfe317 	ldw	r2,-116(fp)
  80e098:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
  80e09c:	e0800217 	ldw	r2,8(fp)
  80e0a0:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
  80e0a4:	e0bff30b 	ldhu	r2,-52(fp)
  80e0a8:	e0bfff15 	stw	r2,-4(fp)
  80e0ac:	e0bfff17 	ldw	r2,-4(fp)
}
  80e0b0:	e037883a 	mov	sp,fp
  80e0b4:	dfc00117 	ldw	ra,4(sp)
  80e0b8:	df000017 	ldw	fp,0(sp)
  80e0bc:	dec00204 	addi	sp,sp,8
  80e0c0:	f800283a 	ret

0080e0c4 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
  80e0c4:	defffb04 	addi	sp,sp,-20
  80e0c8:	df000415 	stw	fp,16(sp)
  80e0cc:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  80e0d0:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e0d4:	0005303a 	rdctl	r2,status
  80e0d8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e0dc:	e0fffd17 	ldw	r3,-12(fp)
  80e0e0:	00bfff84 	movi	r2,-2
  80e0e4:	1884703a 	and	r2,r3,r2
  80e0e8:	1001703a 	wrctl	status,r2
  
  return context;
  80e0ec:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  80e0f0:	e0bffe15 	stw	r2,-8(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
  80e0f4:	008020b4 	movhi	r2,130
  80e0f8:	10aa4c04 	addi	r2,r2,-22224
  80e0fc:	10800017 	ldw	r2,0(r2)
  80e100:	10800b0b 	ldhu	r2,44(r2)
  80e104:	e0bfff0d 	sth	r2,-4(fp)
  80e108:	e0bffe17 	ldw	r2,-8(fp)
  80e10c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e110:	e0bffc17 	ldw	r2,-16(fp)
  80e114:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
  80e118:	e0bfff0b 	ldhu	r2,-4(fp)
}
  80e11c:	e037883a 	mov	sp,fp
  80e120:	df000017 	ldw	fp,0(sp)
  80e124:	dec00104 	addi	sp,sp,4
  80e128:	f800283a 	ret

0080e12c <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
  80e12c:	deffed04 	addi	sp,sp,-76
  80e130:	dfc01215 	stw	ra,72(sp)
  80e134:	df001115 	stw	fp,68(sp)
  80e138:	df001104 	addi	fp,sp,68
  80e13c:	e13ff915 	stw	r4,-28(fp)
  80e140:	e1fffc15 	stw	r7,-16(fp)
  80e144:	e17ffa0d 	sth	r5,-24(fp)
  80e148:	e1bffb05 	stb	r6,-20(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
  80e14c:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  80e150:	e0bffc17 	ldw	r2,-16(fp)
  80e154:	1004c03a 	cmpne	r2,r2,zero
  80e158:	1000021e 	bne	r2,zero,80e164 <OSFlagPost+0x38>
        return ((OS_FLAGS)0);
  80e15c:	e03fff15 	stw	zero,-4(fp)
  80e160:	0000d606 	br	80e4bc <OSFlagPost+0x390>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
  80e164:	e0bff917 	ldw	r2,-28(fp)
  80e168:	1004c03a 	cmpne	r2,r2,zero
  80e16c:	1000051e 	bne	r2,zero,80e184 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80e170:	e0fffc17 	ldw	r3,-16(fp)
  80e174:	00801b84 	movi	r2,110
  80e178:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80e17c:	e03fff15 	stw	zero,-4(fp)
  80e180:	0000ce06 	br	80e4bc <OSFlagPost+0x390>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
  80e184:	e0bff917 	ldw	r2,-28(fp)
  80e188:	10800003 	ldbu	r2,0(r2)
  80e18c:	10803fcc 	andi	r2,r2,255
  80e190:	10800160 	cmpeqi	r2,r2,5
  80e194:	1000051e 	bne	r2,zero,80e1ac <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
  80e198:	e0fffc17 	ldw	r3,-16(fp)
  80e19c:	00800044 	movi	r2,1
  80e1a0:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80e1a4:	e03fff15 	stw	zero,-4(fp)
  80e1a8:	0000c406 	br	80e4bc <OSFlagPost+0x390>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e1ac:	0005303a 	rdctl	r2,status
  80e1b0:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e1b4:	e0fff417 	ldw	r3,-48(fp)
  80e1b8:	00bfff84 	movi	r2,-2
  80e1bc:	1884703a 	and	r2,r3,r2
  80e1c0:	1001703a 	wrctl	status,r2
  
  return context;
  80e1c4:	e0bff417 	ldw	r2,-48(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  80e1c8:	e0bff515 	stw	r2,-44(fp)
    switch (opt) {
  80e1cc:	e0bffb03 	ldbu	r2,-20(fp)
  80e1d0:	e0bffe15 	stw	r2,-8(fp)
  80e1d4:	e0fffe17 	ldw	r3,-8(fp)
  80e1d8:	1805003a 	cmpeq	r2,r3,zero
  80e1dc:	1000041e 	bne	r2,zero,80e1f0 <OSFlagPost+0xc4>
  80e1e0:	e0fffe17 	ldw	r3,-8(fp)
  80e1e4:	18800060 	cmpeqi	r2,r3,1
  80e1e8:	10000b1e 	bne	r2,zero,80e218 <OSFlagPost+0xec>
  80e1ec:	00001206 	br	80e238 <OSFlagPost+0x10c>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
  80e1f0:	e0bff917 	ldw	r2,-28(fp)
  80e1f4:	1080020b 	ldhu	r2,8(r2)
  80e1f8:	1007883a 	mov	r3,r2
  80e1fc:	e0bffa0b 	ldhu	r2,-24(fp)
  80e200:	0084303a 	nor	r2,zero,r2
  80e204:	1884703a 	and	r2,r3,r2
  80e208:	1007883a 	mov	r3,r2
  80e20c:	e0bff917 	ldw	r2,-28(fp)
  80e210:	10c0020d 	sth	r3,8(r2)
             break;
  80e214:	00001106 	br	80e25c <OSFlagPost+0x130>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
  80e218:	e0bff917 	ldw	r2,-28(fp)
  80e21c:	10c0020b 	ldhu	r3,8(r2)
  80e220:	e0bffa0b 	ldhu	r2,-24(fp)
  80e224:	1884b03a 	or	r2,r3,r2
  80e228:	1007883a 	mov	r3,r2
  80e22c:	e0bff917 	ldw	r2,-28(fp)
  80e230:	10c0020d 	sth	r3,8(r2)
             break;
  80e234:	00000906 	br	80e25c <OSFlagPost+0x130>
  80e238:	e0bff517 	ldw	r2,-44(fp)
  80e23c:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e240:	e0bff317 	ldw	r2,-52(fp)
  80e244:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
  80e248:	e0fffc17 	ldw	r3,-16(fp)
  80e24c:	00801c44 	movi	r2,113
  80e250:	18800005 	stb	r2,0(r3)
             return ((OS_FLAGS)0);
  80e254:	e03fff15 	stw	zero,-4(fp)
  80e258:	00009806 	br	80e4bc <OSFlagPost+0x390>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
  80e25c:	e03ff785 	stb	zero,-34(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  80e260:	e0bff917 	ldw	r2,-28(fp)
  80e264:	10800117 	ldw	r2,4(r2)
  80e268:	e0bff815 	stw	r2,-32(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  80e26c:	00007506 	br	80e444 <OSFlagPost+0x318>
        switch (pnode->OSFlagNodeWaitType) {
  80e270:	e0bff817 	ldw	r2,-32(fp)
  80e274:	10800483 	ldbu	r2,18(r2)
  80e278:	10803fcc 	andi	r2,r2,255
  80e27c:	e0bffd15 	stw	r2,-12(fp)
  80e280:	e0fffd17 	ldw	r3,-12(fp)
  80e284:	18800060 	cmpeqi	r2,r3,1
  80e288:	10004d1e 	bne	r2,zero,80e3c0 <OSFlagPost+0x294>
  80e28c:	e0fffd17 	ldw	r3,-12(fp)
  80e290:	18800088 	cmpgei	r2,r3,2
  80e294:	1000041e 	bne	r2,zero,80e2a8 <OSFlagPost+0x17c>
  80e298:	e0fffd17 	ldw	r3,-12(fp)
  80e29c:	1805003a 	cmpeq	r2,r3,zero
  80e2a0:	1000301e 	bne	r2,zero,80e364 <OSFlagPost+0x238>
  80e2a4:	00005b06 	br	80e414 <OSFlagPost+0x2e8>
  80e2a8:	e0fffd17 	ldw	r3,-12(fp)
  80e2ac:	188000a0 	cmpeqi	r2,r3,2
  80e2b0:	1000041e 	bne	r2,zero,80e2c4 <OSFlagPost+0x198>
  80e2b4:	e0fffd17 	ldw	r3,-12(fp)
  80e2b8:	188000e0 	cmpeqi	r2,r3,3
  80e2bc:	1000161e 	bne	r2,zero,80e318 <OSFlagPost+0x1ec>
  80e2c0:	00005406 	br	80e414 <OSFlagPost+0x2e8>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  80e2c4:	e0bff917 	ldw	r2,-28(fp)
  80e2c8:	10c0020b 	ldhu	r3,8(r2)
  80e2cc:	e0bff817 	ldw	r2,-32(fp)
  80e2d0:	1080040b 	ldhu	r2,16(r2)
  80e2d4:	1884703a 	and	r2,r3,r2
  80e2d8:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  80e2dc:	e0bff817 	ldw	r2,-32(fp)
  80e2e0:	1080040b 	ldhu	r2,16(r2)
  80e2e4:	10ffffcc 	andi	r3,r2,65535
  80e2e8:	e0bff68b 	ldhu	r2,-38(fp)
  80e2ec:	1880521e 	bne	r3,r2,80e438 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  80e2f0:	e17ff68b 	ldhu	r5,-38(fp)
  80e2f4:	e13ff817 	ldw	r4,-32(fp)
  80e2f8:	080e8500 	call	80e850 <OS_FlagTaskRdy>
  80e2fc:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  80e300:	e0bff603 	ldbu	r2,-40(fp)
  80e304:	10800058 	cmpnei	r2,r2,1
  80e308:	10004b1e 	bne	r2,zero,80e438 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  80e30c:	00800044 	movi	r2,1
  80e310:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  80e314:	00004806 	br	80e438 <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  80e318:	e0bff917 	ldw	r2,-28(fp)
  80e31c:	10c0020b 	ldhu	r3,8(r2)
  80e320:	e0bff817 	ldw	r2,-32(fp)
  80e324:	1080040b 	ldhu	r2,16(r2)
  80e328:	1884703a 	and	r2,r3,r2
  80e32c:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  80e330:	e0bff68b 	ldhu	r2,-38(fp)
  80e334:	1005003a 	cmpeq	r2,r2,zero
  80e338:	10003f1e 	bne	r2,zero,80e438 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  80e33c:	e17ff68b 	ldhu	r5,-38(fp)
  80e340:	e13ff817 	ldw	r4,-32(fp)
  80e344:	080e8500 	call	80e850 <OS_FlagTaskRdy>
  80e348:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  80e34c:	e0bff603 	ldbu	r2,-40(fp)
  80e350:	10800058 	cmpnei	r2,r2,1
  80e354:	1000381e 	bne	r2,zero,80e438 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  80e358:	00800044 	movi	r2,1
  80e35c:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  80e360:	00003506 	br	80e438 <OSFlagPost+0x30c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  80e364:	e0bff917 	ldw	r2,-28(fp)
  80e368:	1080020b 	ldhu	r2,8(r2)
  80e36c:	0084303a 	nor	r2,zero,r2
  80e370:	1007883a 	mov	r3,r2
  80e374:	e0bff817 	ldw	r2,-32(fp)
  80e378:	1080040b 	ldhu	r2,16(r2)
  80e37c:	1884703a 	and	r2,r3,r2
  80e380:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  80e384:	e0bff817 	ldw	r2,-32(fp)
  80e388:	1080040b 	ldhu	r2,16(r2)
  80e38c:	10ffffcc 	andi	r3,r2,65535
  80e390:	e0bff68b 	ldhu	r2,-38(fp)
  80e394:	1880281e 	bne	r3,r2,80e438 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  80e398:	e17ff68b 	ldhu	r5,-38(fp)
  80e39c:	e13ff817 	ldw	r4,-32(fp)
  80e3a0:	080e8500 	call	80e850 <OS_FlagTaskRdy>
  80e3a4:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  80e3a8:	e0bff603 	ldbu	r2,-40(fp)
  80e3ac:	10800058 	cmpnei	r2,r2,1
  80e3b0:	1000211e 	bne	r2,zero,80e438 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  80e3b4:	00800044 	movi	r2,1
  80e3b8:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  80e3bc:	00001e06 	br	80e438 <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  80e3c0:	e0bff917 	ldw	r2,-28(fp)
  80e3c4:	1080020b 	ldhu	r2,8(r2)
  80e3c8:	0084303a 	nor	r2,zero,r2
  80e3cc:	1007883a 	mov	r3,r2
  80e3d0:	e0bff817 	ldw	r2,-32(fp)
  80e3d4:	1080040b 	ldhu	r2,16(r2)
  80e3d8:	1884703a 	and	r2,r3,r2
  80e3dc:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  80e3e0:	e0bff68b 	ldhu	r2,-38(fp)
  80e3e4:	1005003a 	cmpeq	r2,r2,zero
  80e3e8:	1000131e 	bne	r2,zero,80e438 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  80e3ec:	e17ff68b 	ldhu	r5,-38(fp)
  80e3f0:	e13ff817 	ldw	r4,-32(fp)
  80e3f4:	080e8500 	call	80e850 <OS_FlagTaskRdy>
  80e3f8:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  80e3fc:	e0bff603 	ldbu	r2,-40(fp)
  80e400:	10800058 	cmpnei	r2,r2,1
  80e404:	10000c1e 	bne	r2,zero,80e438 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  80e408:	00800044 	movi	r2,1
  80e40c:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  80e410:	00000906 	br	80e438 <OSFlagPost+0x30c>
  80e414:	e0bff517 	ldw	r2,-44(fp)
  80e418:	e0bff215 	stw	r2,-56(fp)
  80e41c:	e0bff217 	ldw	r2,-56(fp)
  80e420:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  80e424:	e0fffc17 	ldw	r3,-16(fp)
  80e428:	00801bc4 	movi	r2,111
  80e42c:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
  80e430:	e03fff15 	stw	zero,-4(fp)
  80e434:	00002106 	br	80e4bc <OSFlagPost+0x390>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
  80e438:	e0bff817 	ldw	r2,-32(fp)
  80e43c:	10800017 	ldw	r2,0(r2)
  80e440:	e0bff815 	stw	r2,-32(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  80e444:	e0bff817 	ldw	r2,-32(fp)
  80e448:	1004c03a 	cmpne	r2,r2,zero
  80e44c:	103f881e 	bne	r2,zero,80e270 <OSFlagPost+0x144>
  80e450:	e0bff517 	ldw	r2,-44(fp)
  80e454:	e0bff115 	stw	r2,-60(fp)
  80e458:	e0bff117 	ldw	r2,-60(fp)
  80e45c:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
  80e460:	e0bff783 	ldbu	r2,-34(fp)
  80e464:	10800058 	cmpnei	r2,r2,1
  80e468:	1000011e 	bne	r2,zero,80e470 <OSFlagPost+0x344>
        OS_Sched();
  80e46c:	080c85c0 	call	80c85c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e470:	0005303a 	rdctl	r2,status
  80e474:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e478:	e0fff017 	ldw	r3,-64(fp)
  80e47c:	00bfff84 	movi	r2,-2
  80e480:	1884703a 	and	r2,r3,r2
  80e484:	1001703a 	wrctl	status,r2
  
  return context;
  80e488:	e0bff017 	ldw	r2,-64(fp)
    }
    OS_ENTER_CRITICAL();
  80e48c:	e0bff515 	stw	r2,-44(fp)
    flags_cur = pgrp->OSFlagFlags;
  80e490:	e0bff917 	ldw	r2,-28(fp)
  80e494:	1080020b 	ldhu	r2,8(r2)
  80e498:	e0bff70d 	sth	r2,-36(fp)
  80e49c:	e0bff517 	ldw	r2,-44(fp)
  80e4a0:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e4a4:	e0bfef17 	ldw	r2,-68(fp)
  80e4a8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
  80e4ac:	e0bffc17 	ldw	r2,-16(fp)
  80e4b0:	10000005 	stb	zero,0(r2)
    return (flags_cur);
  80e4b4:	e0bff70b 	ldhu	r2,-36(fp)
  80e4b8:	e0bfff15 	stw	r2,-4(fp)
  80e4bc:	e0bfff17 	ldw	r2,-4(fp)
}
  80e4c0:	e037883a 	mov	sp,fp
  80e4c4:	dfc00117 	ldw	ra,4(sp)
  80e4c8:	df000017 	ldw	fp,0(sp)
  80e4cc:	dec00204 	addi	sp,sp,8
  80e4d0:	f800283a 	ret

0080e4d4 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
  80e4d4:	defff804 	addi	sp,sp,-32
  80e4d8:	df000715 	stw	fp,28(sp)
  80e4dc:	df000704 	addi	fp,sp,28
  80e4e0:	e13ffd15 	stw	r4,-12(fp)
  80e4e4:	e17ffe15 	stw	r5,-8(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
  80e4e8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
  80e4ec:	e0bffe17 	ldw	r2,-8(fp)
  80e4f0:	1004c03a 	cmpne	r2,r2,zero
  80e4f4:	1000021e 	bne	r2,zero,80e500 <OSFlagQuery+0x2c>
        return ((OS_FLAGS)0);
  80e4f8:	e03fff15 	stw	zero,-4(fp)
  80e4fc:	00002506 	br	80e594 <OSFlagQuery+0xc0>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
  80e500:	e0bffd17 	ldw	r2,-12(fp)
  80e504:	1004c03a 	cmpne	r2,r2,zero
  80e508:	1000051e 	bne	r2,zero,80e520 <OSFlagQuery+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80e50c:	e0fffe17 	ldw	r3,-8(fp)
  80e510:	00801b84 	movi	r2,110
  80e514:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80e518:	e03fff15 	stw	zero,-4(fp)
  80e51c:	00001d06 	br	80e594 <OSFlagQuery+0xc0>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
  80e520:	e0bffd17 	ldw	r2,-12(fp)
  80e524:	10800003 	ldbu	r2,0(r2)
  80e528:	10803fcc 	andi	r2,r2,255
  80e52c:	10800160 	cmpeqi	r2,r2,5
  80e530:	1000051e 	bne	r2,zero,80e548 <OSFlagQuery+0x74>
        *perr = OS_ERR_EVENT_TYPE;
  80e534:	e0fffe17 	ldw	r3,-8(fp)
  80e538:	00800044 	movi	r2,1
  80e53c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80e540:	e03fff15 	stw	zero,-4(fp)
  80e544:	00001306 	br	80e594 <OSFlagQuery+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e548:	0005303a 	rdctl	r2,status
  80e54c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e550:	e0fffa17 	ldw	r3,-24(fp)
  80e554:	00bfff84 	movi	r2,-2
  80e558:	1884703a 	and	r2,r3,r2
  80e55c:	1001703a 	wrctl	status,r2
  
  return context;
  80e560:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  80e564:	e0bffb15 	stw	r2,-20(fp)
    flags = pgrp->OSFlagFlags;
  80e568:	e0bffd17 	ldw	r2,-12(fp)
  80e56c:	1080020b 	ldhu	r2,8(r2)
  80e570:	e0bffc0d 	sth	r2,-16(fp)
  80e574:	e0bffb17 	ldw	r2,-20(fp)
  80e578:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e57c:	e0bff917 	ldw	r2,-28(fp)
  80e580:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80e584:	e0bffe17 	ldw	r2,-8(fp)
  80e588:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
  80e58c:	e0bffc0b 	ldhu	r2,-16(fp)
  80e590:	e0bfff15 	stw	r2,-4(fp)
  80e594:	e0bfff17 	ldw	r2,-4(fp)
}
  80e598:	e037883a 	mov	sp,fp
  80e59c:	df000017 	ldw	fp,0(sp)
  80e5a0:	dec00104 	addi	sp,sp,4
  80e5a4:	f800283a 	ret

0080e5a8 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
  80e5a8:	defff804 	addi	sp,sp,-32
  80e5ac:	df000715 	stw	fp,28(sp)
  80e5b0:	df000704 	addi	fp,sp,28
  80e5b4:	e13ffb15 	stw	r4,-20(fp)
  80e5b8:	e17ffc15 	stw	r5,-16(fp)
  80e5bc:	e0800117 	ldw	r2,4(fp)
  80e5c0:	e1bffd0d 	sth	r6,-12(fp)
  80e5c4:	e1fffe05 	stb	r7,-8(fp)
  80e5c8:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
  80e5cc:	008020b4 	movhi	r2,130
  80e5d0:	10aa4c04 	addi	r2,r2,-22224
  80e5d4:	10c00017 	ldw	r3,0(r2)
  80e5d8:	008020b4 	movhi	r2,130
  80e5dc:	10aa4c04 	addi	r2,r2,-22224
  80e5e0:	10800017 	ldw	r2,0(r2)
  80e5e4:	10800c03 	ldbu	r2,48(r2)
  80e5e8:	10800814 	ori	r2,r2,32
  80e5ec:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
  80e5f0:	008020b4 	movhi	r2,130
  80e5f4:	10aa4c04 	addi	r2,r2,-22224
  80e5f8:	10800017 	ldw	r2,0(r2)
  80e5fc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
  80e600:	008020b4 	movhi	r2,130
  80e604:	10aa4c04 	addi	r2,r2,-22224
  80e608:	10c00017 	ldw	r3,0(r2)
  80e60c:	e0bfff0b 	ldhu	r2,-4(fp)
  80e610:	18800b8d 	sth	r2,46(r3)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
  80e614:	008020b4 	movhi	r2,130
  80e618:	10aa4c04 	addi	r2,r2,-22224
  80e61c:	10c00017 	ldw	r3,0(r2)
  80e620:	e0bffc17 	ldw	r2,-16(fp)
  80e624:	18800a15 	stw	r2,40(r3)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
  80e628:	e0fffc17 	ldw	r3,-16(fp)
  80e62c:	e0bffd0b 	ldhu	r2,-12(fp)
  80e630:	1880040d 	sth	r2,16(r3)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
  80e634:	e0fffc17 	ldw	r3,-16(fp)
  80e638:	e0bffe03 	ldbu	r2,-8(fp)
  80e63c:	18800485 	stb	r2,18(r3)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
  80e640:	008020b4 	movhi	r2,130
  80e644:	10aa4c04 	addi	r2,r2,-22224
  80e648:	10c00017 	ldw	r3,0(r2)
  80e64c:	e0bffc17 	ldw	r2,-16(fp)
  80e650:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
  80e654:	e0bffb17 	ldw	r2,-20(fp)
  80e658:	10c00117 	ldw	r3,4(r2)
  80e65c:	e0bffc17 	ldw	r2,-16(fp)
  80e660:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
  80e664:	e0bffc17 	ldw	r2,-16(fp)
  80e668:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
  80e66c:	e0fffc17 	ldw	r3,-16(fp)
  80e670:	e0bffb17 	ldw	r2,-20(fp)
  80e674:	18800315 	stw	r2,12(r3)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  80e678:	e0bffb17 	ldw	r2,-20(fp)
  80e67c:	10800117 	ldw	r2,4(r2)
  80e680:	e0bffa15 	stw	r2,-24(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
  80e684:	e0bffa17 	ldw	r2,-24(fp)
  80e688:	1005003a 	cmpeq	r2,r2,zero
  80e68c:	1000031e 	bne	r2,zero,80e69c <OS_FlagBlock+0xf4>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
  80e690:	e0fffa17 	ldw	r3,-24(fp)
  80e694:	e0bffc17 	ldw	r2,-16(fp)
  80e698:	18800115 	stw	r2,4(r3)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
  80e69c:	e0fffb17 	ldw	r3,-20(fp)
  80e6a0:	e0bffc17 	ldw	r2,-16(fp)
  80e6a4:	18800115 	stw	r2,4(r3)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
  80e6a8:	008020b4 	movhi	r2,130
  80e6ac:	10aa4c04 	addi	r2,r2,-22224
  80e6b0:	10800017 	ldw	r2,0(r2)
  80e6b4:	10800d03 	ldbu	r2,52(r2)
  80e6b8:	e0bff905 	stb	r2,-28(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  80e6bc:	e13ff903 	ldbu	r4,-28(fp)
  80e6c0:	e0fff903 	ldbu	r3,-28(fp)
  80e6c4:	008020b4 	movhi	r2,130
  80e6c8:	10aa4944 	addi	r2,r2,-22235
  80e6cc:	10c5883a 	add	r2,r2,r3
  80e6d0:	10800003 	ldbu	r2,0(r2)
  80e6d4:	1007883a 	mov	r3,r2
  80e6d8:	008020b4 	movhi	r2,130
  80e6dc:	10aa4c04 	addi	r2,r2,-22224
  80e6e0:	10800017 	ldw	r2,0(r2)
  80e6e4:	10800d43 	ldbu	r2,53(r2)
  80e6e8:	0084303a 	nor	r2,zero,r2
  80e6ec:	1884703a 	and	r2,r3,r2
  80e6f0:	1007883a 	mov	r3,r2
  80e6f4:	008020b4 	movhi	r2,130
  80e6f8:	10aa4944 	addi	r2,r2,-22235
  80e6fc:	1105883a 	add	r2,r2,r4
  80e700:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0x00) {
  80e704:	e0fff903 	ldbu	r3,-28(fp)
  80e708:	008020b4 	movhi	r2,130
  80e70c:	10aa4944 	addi	r2,r2,-22235
  80e710:	10c5883a 	add	r2,r2,r3
  80e714:	10800003 	ldbu	r2,0(r2)
  80e718:	10803fcc 	andi	r2,r2,255
  80e71c:	1004c03a 	cmpne	r2,r2,zero
  80e720:	10000e1e 	bne	r2,zero,80e75c <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  80e724:	008020b4 	movhi	r2,130
  80e728:	10aa4c04 	addi	r2,r2,-22224
  80e72c:	10800017 	ldw	r2,0(r2)
  80e730:	10800d83 	ldbu	r2,54(r2)
  80e734:	0084303a 	nor	r2,zero,r2
  80e738:	1007883a 	mov	r3,r2
  80e73c:	008020b4 	movhi	r2,130
  80e740:	10aa4904 	addi	r2,r2,-22236
  80e744:	10800003 	ldbu	r2,0(r2)
  80e748:	1884703a 	and	r2,r3,r2
  80e74c:	1007883a 	mov	r3,r2
  80e750:	008020b4 	movhi	r2,130
  80e754:	10aa4904 	addi	r2,r2,-22236
  80e758:	10c00005 	stb	r3,0(r2)
    }
}
  80e75c:	e037883a 	mov	sp,fp
  80e760:	df000017 	ldw	fp,0(sp)
  80e764:	dec00104 	addi	sp,sp,4
  80e768:	f800283a 	ret

0080e76c <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
  80e76c:	defffb04 	addi	sp,sp,-20
  80e770:	dfc00415 	stw	ra,16(sp)
  80e774:	df000315 	stw	fp,12(sp)
  80e778:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
  80e77c:	010020b4 	movhi	r4,130
  80e780:	213a5e04 	addi	r4,r4,-5768
  80e784:	0140dc04 	movi	r5,880
  80e788:	080c79c0 	call	80c79c <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
  80e78c:	008020b4 	movhi	r2,130
  80e790:	10ba5e04 	addi	r2,r2,-5768
  80e794:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
  80e798:	008020b4 	movhi	r2,130
  80e79c:	10ba6904 	addi	r2,r2,-5724
  80e7a0:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  80e7a4:	e03fff0d 	sth	zero,-4(fp)
  80e7a8:	00001306 	br	80e7f8 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  80e7ac:	e0bffe17 	ldw	r2,-8(fp)
  80e7b0:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
  80e7b4:	e0fffe17 	ldw	r3,-8(fp)
  80e7b8:	e0bffd17 	ldw	r2,-12(fp)
  80e7bc:	18800115 	stw	r2,4(r3)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
  80e7c0:	e0fffe17 	ldw	r3,-8(fp)
  80e7c4:	00800fc4 	movi	r2,63
  80e7c8:	18800285 	stb	r2,10(r3)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  80e7cc:	e0bffe17 	ldw	r2,-8(fp)
  80e7d0:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
  80e7d4:	e0bffe17 	ldw	r2,-8(fp)
  80e7d8:	10800b04 	addi	r2,r2,44
  80e7dc:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
  80e7e0:	e0bffd17 	ldw	r2,-12(fp)
  80e7e4:	10800b04 	addi	r2,r2,44
  80e7e8:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  80e7ec:	e0bfff0b 	ldhu	r2,-4(fp)
  80e7f0:	10800044 	addi	r2,r2,1
  80e7f4:	e0bfff0d 	sth	r2,-4(fp)
  80e7f8:	e0bfff0b 	ldhu	r2,-4(fp)
  80e7fc:	108004f0 	cmpltui	r2,r2,19
  80e800:	103fea1e 	bne	r2,zero,80e7ac <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  80e804:	e0bffe17 	ldw	r2,-8(fp)
  80e808:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
  80e80c:	e0bffe17 	ldw	r2,-8(fp)
  80e810:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
  80e814:	e0fffe17 	ldw	r3,-8(fp)
  80e818:	00800fc4 	movi	r2,63
  80e81c:	18800285 	stb	r2,10(r3)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  80e820:	e0bffe17 	ldw	r2,-8(fp)
  80e824:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
  80e828:	00c020b4 	movhi	r3,130
  80e82c:	18ea4e04 	addi	r3,r3,-22216
  80e830:	008020b4 	movhi	r2,130
  80e834:	10ba5e04 	addi	r2,r2,-5768
  80e838:	18800015 	stw	r2,0(r3)
#endif
}
  80e83c:	e037883a 	mov	sp,fp
  80e840:	dfc00117 	ldw	ra,4(sp)
  80e844:	df000017 	ldw	fp,0(sp)
  80e848:	dec00204 	addi	sp,sp,8
  80e84c:	f800283a 	ret

0080e850 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
  80e850:	defffa04 	addi	sp,sp,-24
  80e854:	dfc00515 	stw	ra,20(sp)
  80e858:	df000415 	stw	fp,16(sp)
  80e85c:	df000404 	addi	fp,sp,16
  80e860:	e13ffe15 	stw	r4,-8(fp)
  80e864:	e17fff0d 	sth	r5,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
  80e868:	e0bffe17 	ldw	r2,-8(fp)
  80e86c:	10800217 	ldw	r2,8(r2)
  80e870:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
  80e874:	e0bffd17 	ldw	r2,-12(fp)
  80e878:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
  80e87c:	e0fffd17 	ldw	r3,-12(fp)
  80e880:	e0bfff0b 	ldhu	r2,-4(fp)
  80e884:	18800b0d 	sth	r2,44(r3)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
  80e888:	e0bffd17 	ldw	r2,-12(fp)
  80e88c:	10c00c03 	ldbu	r3,48(r2)
  80e890:	00bff7c4 	movi	r2,-33
  80e894:	1884703a 	and	r2,r3,r2
  80e898:	1007883a 	mov	r3,r2
  80e89c:	e0bffd17 	ldw	r2,-12(fp)
  80e8a0:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
  80e8a4:	e0bffd17 	ldw	r2,-12(fp)
  80e8a8:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
  80e8ac:	e0bffd17 	ldw	r2,-12(fp)
  80e8b0:	10800c03 	ldbu	r2,48(r2)
  80e8b4:	10803fcc 	andi	r2,r2,255
  80e8b8:	1004c03a 	cmpne	r2,r2,zero
  80e8bc:	10001f1e 	bne	r2,zero,80e93c <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
  80e8c0:	e0bffd17 	ldw	r2,-12(fp)
  80e8c4:	10c00d83 	ldbu	r3,54(r2)
  80e8c8:	008020b4 	movhi	r2,130
  80e8cc:	10aa4904 	addi	r2,r2,-22236
  80e8d0:	10800003 	ldbu	r2,0(r2)
  80e8d4:	1884b03a 	or	r2,r3,r2
  80e8d8:	1007883a 	mov	r3,r2
  80e8dc:	008020b4 	movhi	r2,130
  80e8e0:	10aa4904 	addi	r2,r2,-22236
  80e8e4:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  80e8e8:	e0bffd17 	ldw	r2,-12(fp)
  80e8ec:	10800d03 	ldbu	r2,52(r2)
  80e8f0:	11003fcc 	andi	r4,r2,255
  80e8f4:	e0bffd17 	ldw	r2,-12(fp)
  80e8f8:	10800d03 	ldbu	r2,52(r2)
  80e8fc:	10c03fcc 	andi	r3,r2,255
  80e900:	008020b4 	movhi	r2,130
  80e904:	10aa4944 	addi	r2,r2,-22235
  80e908:	10c5883a 	add	r2,r2,r3
  80e90c:	10c00003 	ldbu	r3,0(r2)
  80e910:	e0bffd17 	ldw	r2,-12(fp)
  80e914:	10800d43 	ldbu	r2,53(r2)
  80e918:	1884b03a 	or	r2,r3,r2
  80e91c:	1007883a 	mov	r3,r2
  80e920:	008020b4 	movhi	r2,130
  80e924:	10aa4944 	addi	r2,r2,-22235
  80e928:	1105883a 	add	r2,r2,r4
  80e92c:	10c00005 	stb	r3,0(r2)
        sched                   = OS_TRUE;
  80e930:	00800044 	movi	r2,1
  80e934:	e0bffc05 	stb	r2,-16(fp)
  80e938:	00000106 	br	80e940 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
  80e93c:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
  80e940:	e13ffe17 	ldw	r4,-8(fp)
  80e944:	080e9600 	call	80e960 <OS_FlagUnlink>
    return (sched);
  80e948:	e0bffc03 	ldbu	r2,-16(fp)
}
  80e94c:	e037883a 	mov	sp,fp
  80e950:	dfc00117 	ldw	ra,4(sp)
  80e954:	df000017 	ldw	fp,0(sp)
  80e958:	dec00204 	addi	sp,sp,8
  80e95c:	f800283a 	ret

0080e960 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
  80e960:	defffa04 	addi	sp,sp,-24
  80e964:	df000515 	stw	fp,20(sp)
  80e968:	df000504 	addi	fp,sp,20
  80e96c:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
  80e970:	e0bfff17 	ldw	r2,-4(fp)
  80e974:	10800117 	ldw	r2,4(r2)
  80e978:	e0bffc15 	stw	r2,-16(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  80e97c:	e0bfff17 	ldw	r2,-4(fp)
  80e980:	10800017 	ldw	r2,0(r2)
  80e984:	e0bffb15 	stw	r2,-20(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
  80e988:	e0bffc17 	ldw	r2,-16(fp)
  80e98c:	1004c03a 	cmpne	r2,r2,zero
  80e990:	10000c1e 	bne	r2,zero,80e9c4 <OS_FlagUnlink+0x64>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
  80e994:	e0bfff17 	ldw	r2,-4(fp)
  80e998:	10800317 	ldw	r2,12(r2)
  80e99c:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
  80e9a0:	e0fffd17 	ldw	r3,-12(fp)
  80e9a4:	e0bffb17 	ldw	r2,-20(fp)
  80e9a8:	18800115 	stw	r2,4(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {
  80e9ac:	e0bffb17 	ldw	r2,-20(fp)
  80e9b0:	1005003a 	cmpeq	r2,r2,zero
  80e9b4:	10000c1e 	bne	r2,zero,80e9e8 <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
  80e9b8:	e0bffb17 	ldw	r2,-20(fp)
  80e9bc:	10000115 	stw	zero,4(r2)
  80e9c0:	00000906 	br	80e9e8 <OS_FlagUnlink+0x88>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
  80e9c4:	e0fffc17 	ldw	r3,-16(fp)
  80e9c8:	e0bffb17 	ldw	r2,-20(fp)
  80e9cc:	18800015 	stw	r2,0(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
  80e9d0:	e0bffb17 	ldw	r2,-20(fp)
  80e9d4:	1005003a 	cmpeq	r2,r2,zero
  80e9d8:	1000031e 	bne	r2,zero,80e9e8 <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
  80e9dc:	e0fffb17 	ldw	r3,-20(fp)
  80e9e0:	e0bffc17 	ldw	r2,-16(fp)
  80e9e4:	18800115 	stw	r2,4(r3)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
  80e9e8:	e0bfff17 	ldw	r2,-4(fp)
  80e9ec:	10800217 	ldw	r2,8(r2)
  80e9f0:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
  80e9f4:	e0bffe17 	ldw	r2,-8(fp)
  80e9f8:	10000a15 	stw	zero,40(r2)
#endif
}
  80e9fc:	e037883a 	mov	sp,fp
  80ea00:	df000017 	ldw	fp,0(sp)
  80ea04:	dec00104 	addi	sp,sp,4
  80ea08:	f800283a 	ret

0080ea0c <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
  80ea0c:	defff304 	addi	sp,sp,-52
  80ea10:	df000c15 	stw	fp,48(sp)
  80ea14:	df000c04 	addi	fp,sp,48
  80ea18:	e13ffb15 	stw	r4,-20(fp)
  80ea1c:	e17ffc15 	stw	r5,-16(fp)
  80ea20:	e1bffd15 	stw	r6,-12(fp)
  80ea24:	e1fffe15 	stw	r7,-8(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80ea28:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  80ea2c:	e0bffe17 	ldw	r2,-8(fp)
  80ea30:	1004c03a 	cmpne	r2,r2,zero
  80ea34:	1000021e 	bne	r2,zero,80ea40 <OSMemCreate+0x34>
        return ((OS_MEM *)0);
  80ea38:	e03fff15 	stw	zero,-4(fp)
  80ea3c:	00007506 	br	80ec14 <OSMemCreate+0x208>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
  80ea40:	e0bffb17 	ldw	r2,-20(fp)
  80ea44:	1004c03a 	cmpne	r2,r2,zero
  80ea48:	1000051e 	bne	r2,zero,80ea60 <OSMemCreate+0x54>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  80ea4c:	e0fffe17 	ldw	r3,-8(fp)
  80ea50:	00801884 	movi	r2,98
  80ea54:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  80ea58:	e03fff15 	stw	zero,-4(fp)
  80ea5c:	00006d06 	br	80ec14 <OSMemCreate+0x208>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
  80ea60:	e0bffb17 	ldw	r2,-20(fp)
  80ea64:	108000cc 	andi	r2,r2,3
  80ea68:	1005003a 	cmpeq	r2,r2,zero
  80ea6c:	1000051e 	bne	r2,zero,80ea84 <OSMemCreate+0x78>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  80ea70:	e0fffe17 	ldw	r3,-8(fp)
  80ea74:	00801884 	movi	r2,98
  80ea78:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  80ea7c:	e03fff15 	stw	zero,-4(fp)
  80ea80:	00006406 	br	80ec14 <OSMemCreate+0x208>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
  80ea84:	e0bffc17 	ldw	r2,-16(fp)
  80ea88:	108000a8 	cmpgeui	r2,r2,2
  80ea8c:	1000051e 	bne	r2,zero,80eaa4 <OSMemCreate+0x98>
        *perr = OS_ERR_MEM_INVALID_BLKS;
  80ea90:	e0fffe17 	ldw	r3,-8(fp)
  80ea94:	008016c4 	movi	r2,91
  80ea98:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  80ea9c:	e03fff15 	stw	zero,-4(fp)
  80eaa0:	00005c06 	br	80ec14 <OSMemCreate+0x208>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
  80eaa4:	e0bffd17 	ldw	r2,-12(fp)
  80eaa8:	10800128 	cmpgeui	r2,r2,4
  80eaac:	1000051e 	bne	r2,zero,80eac4 <OSMemCreate+0xb8>
        *perr = OS_ERR_MEM_INVALID_SIZE;
  80eab0:	e0fffe17 	ldw	r3,-8(fp)
  80eab4:	00801704 	movi	r2,92
  80eab8:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  80eabc:	e03fff15 	stw	zero,-4(fp)
  80eac0:	00005406 	br	80ec14 <OSMemCreate+0x208>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80eac4:	0005303a 	rdctl	r2,status
  80eac8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80eacc:	e0fff517 	ldw	r3,-44(fp)
  80ead0:	00bfff84 	movi	r2,-2
  80ead4:	1884703a 	and	r2,r3,r2
  80ead8:	1001703a 	wrctl	status,r2
  
  return context;
  80eadc:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80eae0:	e0bff615 	stw	r2,-40(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
  80eae4:	008020b4 	movhi	r2,130
  80eae8:	10aa4604 	addi	r2,r2,-22248
  80eaec:	10800017 	ldw	r2,0(r2)
  80eaf0:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
  80eaf4:	008020b4 	movhi	r2,130
  80eaf8:	10aa4604 	addi	r2,r2,-22248
  80eafc:	10800017 	ldw	r2,0(r2)
  80eb00:	1005003a 	cmpeq	r2,r2,zero
  80eb04:	1000081e 	bne	r2,zero,80eb28 <OSMemCreate+0x11c>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
  80eb08:	008020b4 	movhi	r2,130
  80eb0c:	10aa4604 	addi	r2,r2,-22248
  80eb10:	10800017 	ldw	r2,0(r2)
  80eb14:	10800117 	ldw	r2,4(r2)
  80eb18:	1007883a 	mov	r3,r2
  80eb1c:	008020b4 	movhi	r2,130
  80eb20:	10aa4604 	addi	r2,r2,-22248
  80eb24:	10c00015 	stw	r3,0(r2)
  80eb28:	e0bff617 	ldw	r2,-40(fp)
  80eb2c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80eb30:	e0bff417 	ldw	r2,-48(fp)
  80eb34:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
  80eb38:	e0bffa17 	ldw	r2,-24(fp)
  80eb3c:	1004c03a 	cmpne	r2,r2,zero
  80eb40:	1000051e 	bne	r2,zero,80eb58 <OSMemCreate+0x14c>
        *perr = OS_ERR_MEM_INVALID_PART;
  80eb44:	e0fffe17 	ldw	r3,-8(fp)
  80eb48:	00801684 	movi	r2,90
  80eb4c:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  80eb50:	e03fff15 	stw	zero,-4(fp)
  80eb54:	00002f06 	br	80ec14 <OSMemCreate+0x208>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
  80eb58:	e0bffb17 	ldw	r2,-20(fp)
  80eb5c:	e0bff815 	stw	r2,-32(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
  80eb60:	e0bffb17 	ldw	r2,-20(fp)
  80eb64:	1007883a 	mov	r3,r2
  80eb68:	e0bffd17 	ldw	r2,-12(fp)
  80eb6c:	1885883a 	add	r2,r3,r2
  80eb70:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < (nblks - 1); i++) {
  80eb74:	e03ff715 	stw	zero,-36(fp)
  80eb78:	00000d06 	br	80ebb0 <OSMemCreate+0x1a4>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
  80eb7c:	e0fff817 	ldw	r3,-32(fp)
  80eb80:	e0bff917 	ldw	r2,-28(fp)
  80eb84:	18800015 	stw	r2,0(r3)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
  80eb88:	e0bff917 	ldw	r2,-28(fp)
  80eb8c:	e0bff815 	stw	r2,-32(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
  80eb90:	e0bff917 	ldw	r2,-28(fp)
  80eb94:	1007883a 	mov	r3,r2
  80eb98:	e0bffd17 	ldw	r2,-12(fp)
  80eb9c:	1885883a 	add	r2,r3,r2
  80eba0:	e0bff915 	stw	r2,-28(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
  80eba4:	e0bff717 	ldw	r2,-36(fp)
  80eba8:	10800044 	addi	r2,r2,1
  80ebac:	e0bff715 	stw	r2,-36(fp)
  80ebb0:	e0bffc17 	ldw	r2,-16(fp)
  80ebb4:	10ffffc4 	addi	r3,r2,-1
  80ebb8:	e0bff717 	ldw	r2,-36(fp)
  80ebbc:	10ffef36 	bltu	r2,r3,80eb7c <OSMemCreate+0x170>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
  80ebc0:	e0bff817 	ldw	r2,-32(fp)
  80ebc4:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
  80ebc8:	e0fffa17 	ldw	r3,-24(fp)
  80ebcc:	e0bffb17 	ldw	r2,-20(fp)
  80ebd0:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
  80ebd4:	e0fffa17 	ldw	r3,-24(fp)
  80ebd8:	e0bffb17 	ldw	r2,-20(fp)
  80ebdc:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
  80ebe0:	e0fffa17 	ldw	r3,-24(fp)
  80ebe4:	e0bffc17 	ldw	r2,-16(fp)
  80ebe8:	18800415 	stw	r2,16(r3)
    pmem->OSMemNBlks    = nblks;
  80ebec:	e0fffa17 	ldw	r3,-24(fp)
  80ebf0:	e0bffc17 	ldw	r2,-16(fp)
  80ebf4:	18800315 	stw	r2,12(r3)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
  80ebf8:	e0fffa17 	ldw	r3,-24(fp)
  80ebfc:	e0bffd17 	ldw	r2,-12(fp)
  80ec00:	18800215 	stw	r2,8(r3)
    *perr               = OS_ERR_NONE;
  80ec04:	e0bffe17 	ldw	r2,-8(fp)
  80ec08:	10000005 	stb	zero,0(r2)
    return (pmem);
  80ec0c:	e0bffa17 	ldw	r2,-24(fp)
  80ec10:	e0bfff15 	stw	r2,-4(fp)
  80ec14:	e0bfff17 	ldw	r2,-4(fp)
}
  80ec18:	e037883a 	mov	sp,fp
  80ec1c:	df000017 	ldw	fp,0(sp)
  80ec20:	dec00104 	addi	sp,sp,4
  80ec24:	f800283a 	ret

0080ec28 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
  80ec28:	defff704 	addi	sp,sp,-36
  80ec2c:	df000815 	stw	fp,32(sp)
  80ec30:	df000804 	addi	fp,sp,32
  80ec34:	e13ffd15 	stw	r4,-12(fp)
  80ec38:	e17ffe15 	stw	r5,-8(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80ec3c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  80ec40:	e0bffe17 	ldw	r2,-8(fp)
  80ec44:	1004c03a 	cmpne	r2,r2,zero
  80ec48:	1000021e 	bne	r2,zero,80ec54 <OSMemGet+0x2c>
        return ((void *)0);
  80ec4c:	e03fff15 	stw	zero,-4(fp)
  80ec50:	00003106 	br	80ed18 <OSMemGet+0xf0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
  80ec54:	e0bffd17 	ldw	r2,-12(fp)
  80ec58:	1004c03a 	cmpne	r2,r2,zero
  80ec5c:	1000051e 	bne	r2,zero,80ec74 <OSMemGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  80ec60:	e0fffe17 	ldw	r3,-8(fp)
  80ec64:	00801804 	movi	r2,96
  80ec68:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  80ec6c:	e03fff15 	stw	zero,-4(fp)
  80ec70:	00002906 	br	80ed18 <OSMemGet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ec74:	0005303a 	rdctl	r2,status
  80ec78:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ec7c:	e0fffa17 	ldw	r3,-24(fp)
  80ec80:	00bfff84 	movi	r2,-2
  80ec84:	1884703a 	and	r2,r3,r2
  80ec88:	1001703a 	wrctl	status,r2
  
  return context;
  80ec8c:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80ec90:	e0bffb15 	stw	r2,-20(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
  80ec94:	e0bffd17 	ldw	r2,-12(fp)
  80ec98:	10800417 	ldw	r2,16(r2)
  80ec9c:	1005003a 	cmpeq	r2,r2,zero
  80eca0:	1000151e 	bne	r2,zero,80ecf8 <OSMemGet+0xd0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
  80eca4:	e0bffd17 	ldw	r2,-12(fp)
  80eca8:	10800117 	ldw	r2,4(r2)
  80ecac:	e0bffc15 	stw	r2,-16(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
  80ecb0:	e0bffc17 	ldw	r2,-16(fp)
  80ecb4:	10c00017 	ldw	r3,0(r2)
  80ecb8:	e0bffd17 	ldw	r2,-12(fp)
  80ecbc:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
  80ecc0:	e0bffd17 	ldw	r2,-12(fp)
  80ecc4:	10800417 	ldw	r2,16(r2)
  80ecc8:	10ffffc4 	addi	r3,r2,-1
  80eccc:	e0bffd17 	ldw	r2,-12(fp)
  80ecd0:	10c00415 	stw	r3,16(r2)
  80ecd4:	e0bffb17 	ldw	r2,-20(fp)
  80ecd8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ecdc:	e0bff917 	ldw	r2,-28(fp)
  80ece0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
  80ece4:	e0bffe17 	ldw	r2,-8(fp)
  80ece8:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
  80ecec:	e0bffc17 	ldw	r2,-16(fp)
  80ecf0:	e0bfff15 	stw	r2,-4(fp)
  80ecf4:	00000806 	br	80ed18 <OSMemGet+0xf0>
  80ecf8:	e0bffb17 	ldw	r2,-20(fp)
  80ecfc:	e0bff815 	stw	r2,-32(fp)
  80ed00:	e0bff817 	ldw	r2,-32(fp)
  80ed04:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
  80ed08:	e0fffe17 	ldw	r3,-8(fp)
  80ed0c:	00801744 	movi	r2,93
  80ed10:	18800005 	stb	r2,0(r3)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
  80ed14:	e03fff15 	stw	zero,-4(fp)
  80ed18:	e0bfff17 	ldw	r2,-4(fp)
}
  80ed1c:	e037883a 	mov	sp,fp
  80ed20:	df000017 	ldw	fp,0(sp)
  80ed24:	dec00104 	addi	sp,sp,4
  80ed28:	f800283a 	ret

0080ed2c <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  80ed2c:	defff604 	addi	sp,sp,-40
  80ed30:	dfc00915 	stw	ra,36(sp)
  80ed34:	df000815 	stw	fp,32(sp)
  80ed38:	df000804 	addi	fp,sp,32
  80ed3c:	e13ffc15 	stw	r4,-16(fp)
  80ed40:	e17ffd15 	stw	r5,-12(fp)
  80ed44:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80ed48:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80ed4c:	e0bffe17 	ldw	r2,-8(fp)
  80ed50:	1004c03a 	cmpne	r2,r2,zero
  80ed54:	1000021e 	bne	r2,zero,80ed60 <OSMemNameGet+0x34>
        return (0);
  80ed58:	e03fff15 	stw	zero,-4(fp)
  80ed5c:	00003006 	br	80ee20 <OSMemNameGet+0xf4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  80ed60:	e0bffc17 	ldw	r2,-16(fp)
  80ed64:	1004c03a 	cmpne	r2,r2,zero
  80ed68:	1000051e 	bne	r2,zero,80ed80 <OSMemNameGet+0x54>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  80ed6c:	e0fffe17 	ldw	r3,-8(fp)
  80ed70:	00801804 	movi	r2,96
  80ed74:	18800005 	stb	r2,0(r3)
        return (0);
  80ed78:	e03fff15 	stw	zero,-4(fp)
  80ed7c:	00002806 	br	80ee20 <OSMemNameGet+0xf4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80ed80:	e0bffd17 	ldw	r2,-12(fp)
  80ed84:	1004c03a 	cmpne	r2,r2,zero
  80ed88:	1000051e 	bne	r2,zero,80eda0 <OSMemNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  80ed8c:	e0fffe17 	ldw	r3,-8(fp)
  80ed90:	00800304 	movi	r2,12
  80ed94:	18800005 	stb	r2,0(r3)
        return (0);
  80ed98:	e03fff15 	stw	zero,-4(fp)
  80ed9c:	00002006 	br	80ee20 <OSMemNameGet+0xf4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80eda0:	008020b4 	movhi	r2,130
  80eda4:	10aa4b04 	addi	r2,r2,-22228
  80eda8:	10800003 	ldbu	r2,0(r2)
  80edac:	10803fcc 	andi	r2,r2,255
  80edb0:	1005003a 	cmpeq	r2,r2,zero
  80edb4:	1000051e 	bne	r2,zero,80edcc <OSMemNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
  80edb8:	e0fffe17 	ldw	r3,-8(fp)
  80edbc:	00800444 	movi	r2,17
  80edc0:	18800005 	stb	r2,0(r3)
        return (0);
  80edc4:	e03fff15 	stw	zero,-4(fp)
  80edc8:	00001506 	br	80ee20 <OSMemNameGet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80edcc:	0005303a 	rdctl	r2,status
  80edd0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80edd4:	e0fff917 	ldw	r3,-28(fp)
  80edd8:	00bfff84 	movi	r2,-2
  80eddc:	1884703a 	and	r2,r3,r2
  80ede0:	1001703a 	wrctl	status,r2
  
  return context;
  80ede4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  80ede8:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
  80edec:	e0bffc17 	ldw	r2,-16(fp)
  80edf0:	11400504 	addi	r5,r2,20
  80edf4:	e13ffd17 	ldw	r4,-12(fp)
  80edf8:	080c9a00 	call	80c9a0 <OS_StrCopy>
  80edfc:	e0bffb05 	stb	r2,-20(fp)
  80ee00:	e0bffa17 	ldw	r2,-24(fp)
  80ee04:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ee08:	e0bff817 	ldw	r2,-32(fp)
  80ee0c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80ee10:	e0bffe17 	ldw	r2,-8(fp)
  80ee14:	10000005 	stb	zero,0(r2)
    return (len);
  80ee18:	e0bffb03 	ldbu	r2,-20(fp)
  80ee1c:	e0bfff15 	stw	r2,-4(fp)
  80ee20:	e0bfff17 	ldw	r2,-4(fp)
}
  80ee24:	e037883a 	mov	sp,fp
  80ee28:	dfc00117 	ldw	ra,4(sp)
  80ee2c:	df000017 	ldw	fp,0(sp)
  80ee30:	dec00204 	addi	sp,sp,8
  80ee34:	f800283a 	ret

0080ee38 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  80ee38:	defff604 	addi	sp,sp,-40
  80ee3c:	dfc00915 	stw	ra,36(sp)
  80ee40:	df000815 	stw	fp,32(sp)
  80ee44:	df000804 	addi	fp,sp,32
  80ee48:	e13ffd15 	stw	r4,-12(fp)
  80ee4c:	e17ffe15 	stw	r5,-8(fp)
  80ee50:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80ee54:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80ee58:	e0bfff17 	ldw	r2,-4(fp)
  80ee5c:	1005003a 	cmpeq	r2,r2,zero
  80ee60:	1000381e 	bne	r2,zero,80ef44 <OSMemNameSet+0x10c>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  80ee64:	e0bffd17 	ldw	r2,-12(fp)
  80ee68:	1004c03a 	cmpne	r2,r2,zero
  80ee6c:	1000041e 	bne	r2,zero,80ee80 <OSMemNameSet+0x48>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  80ee70:	e0ffff17 	ldw	r3,-4(fp)
  80ee74:	00801804 	movi	r2,96
  80ee78:	18800005 	stb	r2,0(r3)
        return;
  80ee7c:	00003106 	br	80ef44 <OSMemNameSet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80ee80:	e0bffe17 	ldw	r2,-8(fp)
  80ee84:	1004c03a 	cmpne	r2,r2,zero
  80ee88:	1000041e 	bne	r2,zero,80ee9c <OSMemNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  80ee8c:	e0ffff17 	ldw	r3,-4(fp)
  80ee90:	00800304 	movi	r2,12
  80ee94:	18800005 	stb	r2,0(r3)
        return;
  80ee98:	00002a06 	br	80ef44 <OSMemNameSet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80ee9c:	008020b4 	movhi	r2,130
  80eea0:	10aa4b04 	addi	r2,r2,-22228
  80eea4:	10800003 	ldbu	r2,0(r2)
  80eea8:	10803fcc 	andi	r2,r2,255
  80eeac:	1005003a 	cmpeq	r2,r2,zero
  80eeb0:	1000041e 	bne	r2,zero,80eec4 <OSMemNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
  80eeb4:	e0ffff17 	ldw	r3,-4(fp)
  80eeb8:	00800484 	movi	r2,18
  80eebc:	18800005 	stb	r2,0(r3)
        return;
  80eec0:	00002006 	br	80ef44 <OSMemNameSet+0x10c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80eec4:	0005303a 	rdctl	r2,status
  80eec8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80eecc:	e0fffa17 	ldw	r3,-24(fp)
  80eed0:	00bfff84 	movi	r2,-2
  80eed4:	1884703a 	and	r2,r3,r2
  80eed8:	1001703a 	wrctl	status,r2
  
  return context;
  80eedc:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  80eee0:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  80eee4:	e13ffe17 	ldw	r4,-8(fp)
  80eee8:	080ca200 	call	80ca20 <OS_StrLen>
  80eeec:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
  80eef0:	e0bffc03 	ldbu	r2,-16(fp)
  80eef4:	10800830 	cmpltui	r2,r2,32
  80eef8:	1000081e 	bne	r2,zero,80ef1c <OSMemNameSet+0xe4>
  80eefc:	e0bffb17 	ldw	r2,-20(fp)
  80ef00:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ef04:	e0bff917 	ldw	r2,-28(fp)
  80ef08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
  80ef0c:	e0ffff17 	ldw	r3,-4(fp)
  80ef10:	008018c4 	movi	r2,99
  80ef14:	18800005 	stb	r2,0(r3)
        return;
  80ef18:	00000a06 	br	80ef44 <OSMemNameSet+0x10c>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
  80ef1c:	e0bffd17 	ldw	r2,-12(fp)
  80ef20:	11000504 	addi	r4,r2,20
  80ef24:	e17ffe17 	ldw	r5,-8(fp)
  80ef28:	080c9a00 	call	80c9a0 <OS_StrCopy>
  80ef2c:	e0bffb17 	ldw	r2,-20(fp)
  80ef30:	e0bff815 	stw	r2,-32(fp)
  80ef34:	e0bff817 	ldw	r2,-32(fp)
  80ef38:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80ef3c:	e0bfff17 	ldw	r2,-4(fp)
  80ef40:	10000005 	stb	zero,0(r2)
}
  80ef44:	e037883a 	mov	sp,fp
  80ef48:	dfc00117 	ldw	ra,4(sp)
  80ef4c:	df000017 	ldw	fp,0(sp)
  80ef50:	dec00204 	addi	sp,sp,8
  80ef54:	f800283a 	ret

0080ef58 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
  80ef58:	defff804 	addi	sp,sp,-32
  80ef5c:	df000715 	stw	fp,28(sp)
  80ef60:	df000704 	addi	fp,sp,28
  80ef64:	e13ffd15 	stw	r4,-12(fp)
  80ef68:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80ef6c:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  80ef70:	e0bffd17 	ldw	r2,-12(fp)
  80ef74:	1004c03a 	cmpne	r2,r2,zero
  80ef78:	1000031e 	bne	r2,zero,80ef88 <OSMemPut+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
  80ef7c:	00801804 	movi	r2,96
  80ef80:	e0bfff15 	stw	r2,-4(fp)
  80ef84:	00002b06 	br	80f034 <OSMemPut+0xdc>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
  80ef88:	e0bffe17 	ldw	r2,-8(fp)
  80ef8c:	1004c03a 	cmpne	r2,r2,zero
  80ef90:	1000031e 	bne	r2,zero,80efa0 <OSMemPut+0x48>
        return (OS_ERR_MEM_INVALID_PBLK);
  80ef94:	008017c4 	movi	r2,95
  80ef98:	e0bfff15 	stw	r2,-4(fp)
  80ef9c:	00002506 	br	80f034 <OSMemPut+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80efa0:	0005303a 	rdctl	r2,status
  80efa4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80efa8:	e0fffb17 	ldw	r3,-20(fp)
  80efac:	00bfff84 	movi	r2,-2
  80efb0:	1884703a 	and	r2,r3,r2
  80efb4:	1001703a 	wrctl	status,r2
  
  return context;
  80efb8:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80efbc:	e0bffc15 	stw	r2,-16(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
  80efc0:	e0bffd17 	ldw	r2,-12(fp)
  80efc4:	10c00417 	ldw	r3,16(r2)
  80efc8:	e0bffd17 	ldw	r2,-12(fp)
  80efcc:	10800317 	ldw	r2,12(r2)
  80efd0:	18800736 	bltu	r3,r2,80eff0 <OSMemPut+0x98>
  80efd4:	e0bffc17 	ldw	r2,-16(fp)
  80efd8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80efdc:	e0bffa17 	ldw	r2,-24(fp)
  80efe0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
  80efe4:	00801784 	movi	r2,94
  80efe8:	e0bfff15 	stw	r2,-4(fp)
  80efec:	00001106 	br	80f034 <OSMemPut+0xdc>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
  80eff0:	e0fffe17 	ldw	r3,-8(fp)
  80eff4:	e0bffd17 	ldw	r2,-12(fp)
  80eff8:	10800117 	ldw	r2,4(r2)
  80effc:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = pblk;
  80f000:	e0fffd17 	ldw	r3,-12(fp)
  80f004:	e0bffe17 	ldw	r2,-8(fp)
  80f008:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
  80f00c:	e0bffd17 	ldw	r2,-12(fp)
  80f010:	10800417 	ldw	r2,16(r2)
  80f014:	10c00044 	addi	r3,r2,1
  80f018:	e0bffd17 	ldw	r2,-12(fp)
  80f01c:	10c00415 	stw	r3,16(r2)
  80f020:	e0bffc17 	ldw	r2,-16(fp)
  80f024:	e0bff915 	stw	r2,-28(fp)
  80f028:	e0bff917 	ldw	r2,-28(fp)
  80f02c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
  80f030:	e03fff15 	stw	zero,-4(fp)
  80f034:	e0bfff17 	ldw	r2,-4(fp)
}
  80f038:	e037883a 	mov	sp,fp
  80f03c:	df000017 	ldw	fp,0(sp)
  80f040:	dec00104 	addi	sp,sp,4
  80f044:	f800283a 	ret

0080f048 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
  80f048:	defff904 	addi	sp,sp,-28
  80f04c:	df000615 	stw	fp,24(sp)
  80f050:	df000604 	addi	fp,sp,24
  80f054:	e13ffd15 	stw	r4,-12(fp)
  80f058:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80f05c:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  80f060:	e0bffd17 	ldw	r2,-12(fp)
  80f064:	1004c03a 	cmpne	r2,r2,zero
  80f068:	1000031e 	bne	r2,zero,80f078 <OSMemQuery+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
  80f06c:	00801804 	movi	r2,96
  80f070:	e0bfff15 	stw	r2,-4(fp)
  80f074:	00002e06 	br	80f130 <OSMemQuery+0xe8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
  80f078:	e0bffe17 	ldw	r2,-8(fp)
  80f07c:	1004c03a 	cmpne	r2,r2,zero
  80f080:	1000031e 	bne	r2,zero,80f090 <OSMemQuery+0x48>
        return (OS_ERR_MEM_INVALID_PDATA);
  80f084:	00801844 	movi	r2,97
  80f088:	e0bfff15 	stw	r2,-4(fp)
  80f08c:	00002806 	br	80f130 <OSMemQuery+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f090:	0005303a 	rdctl	r2,status
  80f094:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f098:	e0fffb17 	ldw	r3,-20(fp)
  80f09c:	00bfff84 	movi	r2,-2
  80f0a0:	1884703a 	and	r2,r3,r2
  80f0a4:	1001703a 	wrctl	status,r2
  
  return context;
  80f0a8:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80f0ac:	e0bffc15 	stw	r2,-16(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
  80f0b0:	e0bffd17 	ldw	r2,-12(fp)
  80f0b4:	10c00017 	ldw	r3,0(r2)
  80f0b8:	e0bffe17 	ldw	r2,-8(fp)
  80f0bc:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
  80f0c0:	e0bffd17 	ldw	r2,-12(fp)
  80f0c4:	10c00117 	ldw	r3,4(r2)
  80f0c8:	e0bffe17 	ldw	r2,-8(fp)
  80f0cc:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
  80f0d0:	e0bffd17 	ldw	r2,-12(fp)
  80f0d4:	10c00217 	ldw	r3,8(r2)
  80f0d8:	e0bffe17 	ldw	r2,-8(fp)
  80f0dc:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
  80f0e0:	e0bffd17 	ldw	r2,-12(fp)
  80f0e4:	10c00317 	ldw	r3,12(r2)
  80f0e8:	e0bffe17 	ldw	r2,-8(fp)
  80f0ec:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
  80f0f0:	e0bffd17 	ldw	r2,-12(fp)
  80f0f4:	10c00417 	ldw	r3,16(r2)
  80f0f8:	e0bffe17 	ldw	r2,-8(fp)
  80f0fc:	10c00415 	stw	r3,16(r2)
  80f100:	e0bffc17 	ldw	r2,-16(fp)
  80f104:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f108:	e0bffa17 	ldw	r2,-24(fp)
  80f10c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
  80f110:	e0bffe17 	ldw	r2,-8(fp)
  80f114:	10c00317 	ldw	r3,12(r2)
  80f118:	e0bffe17 	ldw	r2,-8(fp)
  80f11c:	10800417 	ldw	r2,16(r2)
  80f120:	1887c83a 	sub	r3,r3,r2
  80f124:	e0bffe17 	ldw	r2,-8(fp)
  80f128:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
  80f12c:	e03fff15 	stw	zero,-4(fp)
  80f130:	e0bfff17 	ldw	r2,-4(fp)
}
  80f134:	e037883a 	mov	sp,fp
  80f138:	df000017 	ldw	fp,0(sp)
  80f13c:	dec00104 	addi	sp,sp,4
  80f140:	f800283a 	ret

0080f144 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
  80f144:	defffc04 	addi	sp,sp,-16
  80f148:	dfc00315 	stw	ra,12(sp)
  80f14c:	df000215 	stw	fp,8(sp)
  80f150:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
  80f154:	010020b4 	movhi	r4,130
  80f158:	213b3a04 	addi	r4,r4,-4888
  80f15c:	01430c04 	movi	r5,3120
  80f160:	080c79c0 	call	80c79c <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
  80f164:	008020b4 	movhi	r2,130
  80f168:	10bb3a04 	addi	r2,r2,-4888
  80f16c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  80f170:	e03ffe0d 	sth	zero,-8(fp)
  80f174:	00001406 	br	80f1c8 <OS_MemInit+0x84>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
  80f178:	e13ffe0b 	ldhu	r4,-8(fp)
  80f17c:	01400d04 	movi	r5,52
  80f180:	08099200 	call	809920 <__mulsi3>
  80f184:	1007883a 	mov	r3,r2
  80f188:	008020b4 	movhi	r2,130
  80f18c:	10bb4704 	addi	r2,r2,-4836
  80f190:	1887883a 	add	r3,r3,r2
  80f194:	e0bfff17 	ldw	r2,-4(fp)
  80f198:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
  80f19c:	e0ffff17 	ldw	r3,-4(fp)
  80f1a0:	00800fc4 	movi	r2,63
  80f1a4:	18800505 	stb	r2,20(r3)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
  80f1a8:	e0bfff17 	ldw	r2,-4(fp)
  80f1ac:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
  80f1b0:	e0bfff17 	ldw	r2,-4(fp)
  80f1b4:	10800d04 	addi	r2,r2,52
  80f1b8:	e0bfff15 	stw	r2,-4(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  80f1bc:	e0bffe0b 	ldhu	r2,-8(fp)
  80f1c0:	10800044 	addi	r2,r2,1
  80f1c4:	e0bffe0d 	sth	r2,-8(fp)
  80f1c8:	e0bffe0b 	ldhu	r2,-8(fp)
  80f1cc:	10800ef0 	cmpltui	r2,r2,59
  80f1d0:	103fe91e 	bne	r2,zero,80f178 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
  80f1d4:	e0bfff17 	ldw	r2,-4(fp)
  80f1d8:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
  80f1dc:	e0ffff17 	ldw	r3,-4(fp)
  80f1e0:	00800fc4 	movi	r2,63
  80f1e4:	18800505 	stb	r2,20(r3)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
  80f1e8:	e0bfff17 	ldw	r2,-4(fp)
  80f1ec:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
  80f1f0:	00c020b4 	movhi	r3,130
  80f1f4:	18ea4604 	addi	r3,r3,-22248
  80f1f8:	008020b4 	movhi	r2,130
  80f1fc:	10bb3a04 	addi	r2,r2,-4888
  80f200:	18800015 	stw	r2,0(r3)
#endif
}
  80f204:	e037883a 	mov	sp,fp
  80f208:	dfc00117 	ldw	ra,4(sp)
  80f20c:	df000017 	ldw	fp,0(sp)
  80f210:	dec00204 	addi	sp,sp,8
  80f214:	f800283a 	ret

0080f218 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
  80f218:	defff704 	addi	sp,sp,-36
  80f21c:	df000815 	stw	fp,32(sp)
  80f220:	df000804 	addi	fp,sp,32
  80f224:	e13ffd15 	stw	r4,-12(fp)
  80f228:	e17ffe15 	stw	r5,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80f22c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80f230:	e0bffe17 	ldw	r2,-8(fp)
  80f234:	1004c03a 	cmpne	r2,r2,zero
  80f238:	1000021e 	bne	r2,zero,80f244 <OSQAccept+0x2c>
        return ((void *)0);
  80f23c:	e03fff15 	stw	zero,-4(fp)
  80f240:	00004506 	br	80f358 <OSQAccept+0x140>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  80f244:	e0bffd17 	ldw	r2,-12(fp)
  80f248:	1004c03a 	cmpne	r2,r2,zero
  80f24c:	1000051e 	bne	r2,zero,80f264 <OSQAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
  80f250:	e0fffe17 	ldw	r3,-8(fp)
  80f254:	00800104 	movi	r2,4
  80f258:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  80f25c:	e03fff15 	stw	zero,-4(fp)
  80f260:	00003d06 	br	80f358 <OSQAccept+0x140>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  80f264:	e0bffd17 	ldw	r2,-12(fp)
  80f268:	10800003 	ldbu	r2,0(r2)
  80f26c:	10803fcc 	andi	r2,r2,255
  80f270:	108000a0 	cmpeqi	r2,r2,2
  80f274:	1000051e 	bne	r2,zero,80f28c <OSQAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
  80f278:	e0fffe17 	ldw	r3,-8(fp)
  80f27c:	00800044 	movi	r2,1
  80f280:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  80f284:	e03fff15 	stw	zero,-4(fp)
  80f288:	00003306 	br	80f358 <OSQAccept+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f28c:	0005303a 	rdctl	r2,status
  80f290:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f294:	e0fff917 	ldw	r3,-28(fp)
  80f298:	00bfff84 	movi	r2,-2
  80f29c:	1884703a 	and	r2,r3,r2
  80f2a0:	1001703a 	wrctl	status,r2
  
  return context;
  80f2a4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  80f2a8:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  80f2ac:	e0bffd17 	ldw	r2,-12(fp)
  80f2b0:	10800117 	ldw	r2,4(r2)
  80f2b4:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  80f2b8:	e0bffb17 	ldw	r2,-20(fp)
  80f2bc:	1080058b 	ldhu	r2,22(r2)
  80f2c0:	10bfffcc 	andi	r2,r2,65535
  80f2c4:	1005003a 	cmpeq	r2,r2,zero
  80f2c8:	1000191e 	bne	r2,zero,80f330 <OSQAccept+0x118>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  80f2cc:	e0bffb17 	ldw	r2,-20(fp)
  80f2d0:	10c00417 	ldw	r3,16(r2)
  80f2d4:	18800017 	ldw	r2,0(r3)
  80f2d8:	e0bffc15 	stw	r2,-16(fp)
  80f2dc:	18c00104 	addi	r3,r3,4
  80f2e0:	e0bffb17 	ldw	r2,-20(fp)
  80f2e4:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  80f2e8:	e0bffb17 	ldw	r2,-20(fp)
  80f2ec:	1080058b 	ldhu	r2,22(r2)
  80f2f0:	10bfffc4 	addi	r2,r2,-1
  80f2f4:	1007883a 	mov	r3,r2
  80f2f8:	e0bffb17 	ldw	r2,-20(fp)
  80f2fc:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  80f300:	e0bffb17 	ldw	r2,-20(fp)
  80f304:	10c00417 	ldw	r3,16(r2)
  80f308:	e0bffb17 	ldw	r2,-20(fp)
  80f30c:	10800217 	ldw	r2,8(r2)
  80f310:	1880041e 	bne	r3,r2,80f324 <OSQAccept+0x10c>
            pq->OSQOut = pq->OSQStart;
  80f314:	e0bffb17 	ldw	r2,-20(fp)
  80f318:	10c00117 	ldw	r3,4(r2)
  80f31c:	e0bffb17 	ldw	r2,-20(fp)
  80f320:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
  80f324:	e0bffe17 	ldw	r2,-8(fp)
  80f328:	10000005 	stb	zero,0(r2)
  80f32c:	00000406 	br	80f340 <OSQAccept+0x128>
    } else {
        *perr = OS_ERR_Q_EMPTY;
  80f330:	e0fffe17 	ldw	r3,-8(fp)
  80f334:	008007c4 	movi	r2,31
  80f338:	18800005 	stb	r2,0(r3)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
  80f33c:	e03ffc15 	stw	zero,-16(fp)
  80f340:	e0bffa17 	ldw	r2,-24(fp)
  80f344:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f348:	e0bff817 	ldw	r2,-32(fp)
  80f34c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
  80f350:	e0bffc17 	ldw	r2,-16(fp)
  80f354:	e0bfff15 	stw	r2,-4(fp)
  80f358:	e0bfff17 	ldw	r2,-4(fp)
}
  80f35c:	e037883a 	mov	sp,fp
  80f360:	df000017 	ldw	fp,0(sp)
  80f364:	dec00104 	addi	sp,sp,4
  80f368:	f800283a 	ret

0080f36c <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
  80f36c:	defff304 	addi	sp,sp,-52
  80f370:	dfc00c15 	stw	ra,48(sp)
  80f374:	df000b15 	stw	fp,44(sp)
  80f378:	df000b04 	addi	fp,sp,44
  80f37c:	e13ffd15 	stw	r4,-12(fp)
  80f380:	e17ffe0d 	sth	r5,-8(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80f384:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  80f388:	008020b4 	movhi	r2,130
  80f38c:	10aa4b04 	addi	r2,r2,-22228
  80f390:	10800003 	ldbu	r2,0(r2)
  80f394:	10803fcc 	andi	r2,r2,255
  80f398:	1005003a 	cmpeq	r2,r2,zero
  80f39c:	1000021e 	bne	r2,zero,80f3a8 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
  80f3a0:	e03fff15 	stw	zero,-4(fp)
  80f3a4:	00007006 	br	80f568 <OSQCreate+0x1fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f3a8:	0005303a 	rdctl	r2,status
  80f3ac:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f3b0:	e0fff917 	ldw	r3,-28(fp)
  80f3b4:	00bfff84 	movi	r2,-2
  80f3b8:	1884703a 	and	r2,r3,r2
  80f3bc:	1001703a 	wrctl	status,r2
  
  return context;
  80f3c0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  80f3c4:	e0bffa15 	stw	r2,-24(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
  80f3c8:	008020b4 	movhi	r2,130
  80f3cc:	10aa4a04 	addi	r2,r2,-22232
  80f3d0:	10800017 	ldw	r2,0(r2)
  80f3d4:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
  80f3d8:	008020b4 	movhi	r2,130
  80f3dc:	10aa4a04 	addi	r2,r2,-22232
  80f3e0:	10800017 	ldw	r2,0(r2)
  80f3e4:	1005003a 	cmpeq	r2,r2,zero
  80f3e8:	1000081e 	bne	r2,zero,80f40c <OSQCreate+0xa0>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  80f3ec:	008020b4 	movhi	r2,130
  80f3f0:	10aa4a04 	addi	r2,r2,-22232
  80f3f4:	10800017 	ldw	r2,0(r2)
  80f3f8:	10800117 	ldw	r2,4(r2)
  80f3fc:	1007883a 	mov	r3,r2
  80f400:	008020b4 	movhi	r2,130
  80f404:	10aa4a04 	addi	r2,r2,-22232
  80f408:	10c00015 	stw	r3,0(r2)
  80f40c:	e0bffa17 	ldw	r2,-24(fp)
  80f410:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f414:	e0bff817 	ldw	r2,-32(fp)
  80f418:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
  80f41c:	e0bffc17 	ldw	r2,-16(fp)
  80f420:	1005003a 	cmpeq	r2,r2,zero
  80f424:	10004e1e 	bne	r2,zero,80f560 <OSQCreate+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f428:	0005303a 	rdctl	r2,status
  80f42c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f430:	e0fff717 	ldw	r3,-36(fp)
  80f434:	00bfff84 	movi	r2,-2
  80f438:	1884703a 	and	r2,r3,r2
  80f43c:	1001703a 	wrctl	status,r2
  
  return context;
  80f440:	e0bff717 	ldw	r2,-36(fp)
        OS_ENTER_CRITICAL();
  80f444:	e0bffa15 	stw	r2,-24(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
  80f448:	008020b4 	movhi	r2,130
  80f44c:	10aa4804 	addi	r2,r2,-22240
  80f450:	10800017 	ldw	r2,0(r2)
  80f454:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
  80f458:	e0bffb17 	ldw	r2,-20(fp)
  80f45c:	1005003a 	cmpeq	r2,r2,zero
  80f460:	1000311e 	bne	r2,zero,80f528 <OSQCreate+0x1bc>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
  80f464:	008020b4 	movhi	r2,130
  80f468:	10aa4804 	addi	r2,r2,-22240
  80f46c:	10800017 	ldw	r2,0(r2)
  80f470:	10c00017 	ldw	r3,0(r2)
  80f474:	008020b4 	movhi	r2,130
  80f478:	10aa4804 	addi	r2,r2,-22240
  80f47c:	10c00015 	stw	r3,0(r2)
  80f480:	e0bffa17 	ldw	r2,-24(fp)
  80f484:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f488:	e0bff617 	ldw	r2,-40(fp)
  80f48c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
  80f490:	e0fffb17 	ldw	r3,-20(fp)
  80f494:	e0bffd17 	ldw	r2,-12(fp)
  80f498:	18800115 	stw	r2,4(r3)
            pq->OSQEnd             = &start[size];
  80f49c:	e0bffe0b 	ldhu	r2,-8(fp)
  80f4a0:	1085883a 	add	r2,r2,r2
  80f4a4:	1085883a 	add	r2,r2,r2
  80f4a8:	1007883a 	mov	r3,r2
  80f4ac:	e0bffd17 	ldw	r2,-12(fp)
  80f4b0:	1887883a 	add	r3,r3,r2
  80f4b4:	e0bffb17 	ldw	r2,-20(fp)
  80f4b8:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
  80f4bc:	e0fffb17 	ldw	r3,-20(fp)
  80f4c0:	e0bffd17 	ldw	r2,-12(fp)
  80f4c4:	18800315 	stw	r2,12(r3)
            pq->OSQOut             = start;
  80f4c8:	e0fffb17 	ldw	r3,-20(fp)
  80f4cc:	e0bffd17 	ldw	r2,-12(fp)
  80f4d0:	18800415 	stw	r2,16(r3)
            pq->OSQSize            = size;
  80f4d4:	e0fffb17 	ldw	r3,-20(fp)
  80f4d8:	e0bffe0b 	ldhu	r2,-8(fp)
  80f4dc:	1880050d 	sth	r2,20(r3)
            pq->OSQEntries         = 0;
  80f4e0:	e0bffb17 	ldw	r2,-20(fp)
  80f4e4:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
  80f4e8:	e0fffc17 	ldw	r3,-16(fp)
  80f4ec:	00800084 	movi	r2,2
  80f4f0:	18800005 	stb	r2,0(r3)
            pevent->OSEventCnt     = 0;
  80f4f4:	e0bffc17 	ldw	r2,-16(fp)
  80f4f8:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
  80f4fc:	e0fffc17 	ldw	r3,-16(fp)
  80f500:	e0bffb17 	ldw	r2,-20(fp)
  80f504:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
  80f508:	e0fffc17 	ldw	r3,-16(fp)
  80f50c:	00800fc4 	movi	r2,63
  80f510:	18800385 	stb	r2,14(r3)
            pevent->OSEventName[1] = OS_ASCII_NUL;
  80f514:	e0bffc17 	ldw	r2,-16(fp)
  80f518:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
  80f51c:	e13ffc17 	ldw	r4,-16(fp)
  80f520:	080c3d00 	call	80c3d0 <OS_EventWaitListInit>
  80f524:	00000e06 	br	80f560 <OSQCreate+0x1f4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
  80f528:	008020b4 	movhi	r2,130
  80f52c:	10aa4a04 	addi	r2,r2,-22232
  80f530:	10c00017 	ldw	r3,0(r2)
  80f534:	e0bffc17 	ldw	r2,-16(fp)
  80f538:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
  80f53c:	00c020b4 	movhi	r3,130
  80f540:	18ea4a04 	addi	r3,r3,-22232
  80f544:	e0bffc17 	ldw	r2,-16(fp)
  80f548:	18800015 	stw	r2,0(r3)
  80f54c:	e0bffa17 	ldw	r2,-24(fp)
  80f550:	e0bff515 	stw	r2,-44(fp)
  80f554:	e0bff517 	ldw	r2,-44(fp)
  80f558:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
  80f55c:	e03ffc15 	stw	zero,-16(fp)
        }
    }
    return (pevent);
  80f560:	e0bffc17 	ldw	r2,-16(fp)
  80f564:	e0bfff15 	stw	r2,-4(fp)
  80f568:	e0bfff17 	ldw	r2,-4(fp)
}
  80f56c:	e037883a 	mov	sp,fp
  80f570:	dfc00117 	ldw	ra,4(sp)
  80f574:	df000017 	ldw	fp,0(sp)
  80f578:	dec00204 	addi	sp,sp,8
  80f57c:	f800283a 	ret

0080f580 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  80f580:	defff004 	addi	sp,sp,-64
  80f584:	dfc00f15 	stw	ra,60(sp)
  80f588:	df000e15 	stw	fp,56(sp)
  80f58c:	df000e04 	addi	fp,sp,56
  80f590:	e13ffb15 	stw	r4,-20(fp)
  80f594:	e1bffd15 	stw	r6,-12(fp)
  80f598:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80f59c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  80f5a0:	e0bffd17 	ldw	r2,-12(fp)
  80f5a4:	1004c03a 	cmpne	r2,r2,zero
  80f5a8:	1000031e 	bne	r2,zero,80f5b8 <OSQDel+0x38>
        return (pevent);
  80f5ac:	e0bffb17 	ldw	r2,-20(fp)
  80f5b0:	e0bfff15 	stw	r2,-4(fp)
  80f5b4:	0000ac06 	br	80f868 <OSQDel+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  80f5b8:	e0bffb17 	ldw	r2,-20(fp)
  80f5bc:	1004c03a 	cmpne	r2,r2,zero
  80f5c0:	1000061e 	bne	r2,zero,80f5dc <OSQDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
  80f5c4:	e0fffd17 	ldw	r3,-12(fp)
  80f5c8:	00800104 	movi	r2,4
  80f5cc:	18800005 	stb	r2,0(r3)
        return (pevent);
  80f5d0:	e0fffb17 	ldw	r3,-20(fp)
  80f5d4:	e0ffff15 	stw	r3,-4(fp)
  80f5d8:	0000a306 	br	80f868 <OSQDel+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  80f5dc:	e0bffb17 	ldw	r2,-20(fp)
  80f5e0:	10800003 	ldbu	r2,0(r2)
  80f5e4:	10803fcc 	andi	r2,r2,255
  80f5e8:	108000a0 	cmpeqi	r2,r2,2
  80f5ec:	1000061e 	bne	r2,zero,80f608 <OSQDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
  80f5f0:	e0fffd17 	ldw	r3,-12(fp)
  80f5f4:	00800044 	movi	r2,1
  80f5f8:	18800005 	stb	r2,0(r3)
        return (pevent);
  80f5fc:	e0bffb17 	ldw	r2,-20(fp)
  80f600:	e0bfff15 	stw	r2,-4(fp)
  80f604:	00009806 	br	80f868 <OSQDel+0x2e8>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  80f608:	008020b4 	movhi	r2,130
  80f60c:	10aa4b04 	addi	r2,r2,-22228
  80f610:	10800003 	ldbu	r2,0(r2)
  80f614:	10803fcc 	andi	r2,r2,255
  80f618:	1005003a 	cmpeq	r2,r2,zero
  80f61c:	1000061e 	bne	r2,zero,80f638 <OSQDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  80f620:	e0fffd17 	ldw	r3,-12(fp)
  80f624:	008003c4 	movi	r2,15
  80f628:	18800005 	stb	r2,0(r3)
        return (pevent);
  80f62c:	e0fffb17 	ldw	r3,-20(fp)
  80f630:	e0ffff15 	stw	r3,-4(fp)
  80f634:	00008c06 	br	80f868 <OSQDel+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f638:	0005303a 	rdctl	r2,status
  80f63c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f640:	e0fff617 	ldw	r3,-40(fp)
  80f644:	00bfff84 	movi	r2,-2
  80f648:	1884703a 	and	r2,r3,r2
  80f64c:	1001703a 	wrctl	status,r2
  
  return context;
  80f650:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
  80f654:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
  80f658:	e0bffb17 	ldw	r2,-20(fp)
  80f65c:	10800283 	ldbu	r2,10(r2)
  80f660:	10803fcc 	andi	r2,r2,255
  80f664:	1005003a 	cmpeq	r2,r2,zero
  80f668:	1000031e 	bne	r2,zero,80f678 <OSQDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  80f66c:	00800044 	movi	r2,1
  80f670:	e0bffa05 	stb	r2,-24(fp)
  80f674:	00000106 	br	80f67c <OSQDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  80f678:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  80f67c:	e0bffc03 	ldbu	r2,-16(fp)
  80f680:	e0bffe15 	stw	r2,-8(fp)
  80f684:	e0fffe17 	ldw	r3,-8(fp)
  80f688:	1805003a 	cmpeq	r2,r3,zero
  80f68c:	1000041e 	bne	r2,zero,80f6a0 <OSQDel+0x120>
  80f690:	e0fffe17 	ldw	r3,-8(fp)
  80f694:	18800060 	cmpeqi	r2,r3,1
  80f698:	1000391e 	bne	r2,zero,80f780 <OSQDel+0x200>
  80f69c:	00006706 	br	80f83c <OSQDel+0x2bc>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
  80f6a0:	e0bffa03 	ldbu	r2,-24(fp)
  80f6a4:	1004c03a 	cmpne	r2,r2,zero
  80f6a8:	1000261e 	bne	r2,zero,80f744 <OSQDel+0x1c4>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  80f6ac:	e0fffb17 	ldw	r3,-20(fp)
  80f6b0:	00800fc4 	movi	r2,63
  80f6b4:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  80f6b8:	e0bffb17 	ldw	r2,-20(fp)
  80f6bc:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
  80f6c0:	e0bffb17 	ldw	r2,-20(fp)
  80f6c4:	10800117 	ldw	r2,4(r2)
  80f6c8:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
  80f6cc:	008020b4 	movhi	r2,130
  80f6d0:	10aa4804 	addi	r2,r2,-22240
  80f6d4:	10c00017 	ldw	r3,0(r2)
  80f6d8:	e0bff817 	ldw	r2,-32(fp)
  80f6dc:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
  80f6e0:	00c020b4 	movhi	r3,130
  80f6e4:	18ea4804 	addi	r3,r3,-22240
  80f6e8:	e0bff817 	ldw	r2,-32(fp)
  80f6ec:	18800015 	stw	r2,0(r3)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  80f6f0:	e0bffb17 	ldw	r2,-20(fp)
  80f6f4:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  80f6f8:	008020b4 	movhi	r2,130
  80f6fc:	10aa4a04 	addi	r2,r2,-22232
  80f700:	10c00017 	ldw	r3,0(r2)
  80f704:	e0bffb17 	ldw	r2,-20(fp)
  80f708:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  80f70c:	e0bffb17 	ldw	r2,-20(fp)
  80f710:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  80f714:	00c020b4 	movhi	r3,130
  80f718:	18ea4a04 	addi	r3,r3,-22232
  80f71c:	e0bffb17 	ldw	r2,-20(fp)
  80f720:	18800015 	stw	r2,0(r3)
  80f724:	e0bff717 	ldw	r2,-36(fp)
  80f728:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f72c:	e0bff517 	ldw	r2,-44(fp)
  80f730:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  80f734:	e0bffd17 	ldw	r2,-12(fp)
  80f738:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
  80f73c:	e03ff915 	stw	zero,-28(fp)
  80f740:	00004706 	br	80f860 <OSQDel+0x2e0>
  80f744:	e0bff717 	ldw	r2,-36(fp)
  80f748:	e0bff415 	stw	r2,-48(fp)
  80f74c:	e0bff417 	ldw	r2,-48(fp)
  80f750:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  80f754:	e0fffd17 	ldw	r3,-12(fp)
  80f758:	00801244 	movi	r2,73
  80f75c:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
  80f760:	e0bffb17 	ldw	r2,-20(fp)
  80f764:	e0bff915 	stw	r2,-28(fp)
             }
             break;
  80f768:	00003d06 	br	80f860 <OSQDel+0x2e0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
  80f76c:	e13ffb17 	ldw	r4,-20(fp)
  80f770:	000b883a 	mov	r5,zero
  80f774:	01800104 	movi	r6,4
  80f778:	000f883a 	mov	r7,zero
  80f77c:	080be1c0 	call	80be1c <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
  80f780:	e0bffb17 	ldw	r2,-20(fp)
  80f784:	10800283 	ldbu	r2,10(r2)
  80f788:	10803fcc 	andi	r2,r2,255
  80f78c:	1004c03a 	cmpne	r2,r2,zero
  80f790:	103ff61e 	bne	r2,zero,80f76c <OSQDel+0x1ec>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  80f794:	e0fffb17 	ldw	r3,-20(fp)
  80f798:	00800fc4 	movi	r2,63
  80f79c:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  80f7a0:	e0bffb17 	ldw	r2,-20(fp)
  80f7a4:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
  80f7a8:	e0bffb17 	ldw	r2,-20(fp)
  80f7ac:	10800117 	ldw	r2,4(r2)
  80f7b0:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
  80f7b4:	008020b4 	movhi	r2,130
  80f7b8:	10aa4804 	addi	r2,r2,-22240
  80f7bc:	10c00017 	ldw	r3,0(r2)
  80f7c0:	e0bff817 	ldw	r2,-32(fp)
  80f7c4:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
  80f7c8:	00c020b4 	movhi	r3,130
  80f7cc:	18ea4804 	addi	r3,r3,-22240
  80f7d0:	e0bff817 	ldw	r2,-32(fp)
  80f7d4:	18800015 	stw	r2,0(r3)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  80f7d8:	e0bffb17 	ldw	r2,-20(fp)
  80f7dc:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  80f7e0:	008020b4 	movhi	r2,130
  80f7e4:	10aa4a04 	addi	r2,r2,-22232
  80f7e8:	10c00017 	ldw	r3,0(r2)
  80f7ec:	e0bffb17 	ldw	r2,-20(fp)
  80f7f0:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  80f7f4:	e0bffb17 	ldw	r2,-20(fp)
  80f7f8:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  80f7fc:	00c020b4 	movhi	r3,130
  80f800:	18ea4a04 	addi	r3,r3,-22232
  80f804:	e0bffb17 	ldw	r2,-20(fp)
  80f808:	18800015 	stw	r2,0(r3)
  80f80c:	e0bff717 	ldw	r2,-36(fp)
  80f810:	e0bff315 	stw	r2,-52(fp)
  80f814:	e0bff317 	ldw	r2,-52(fp)
  80f818:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  80f81c:	e0bffa03 	ldbu	r2,-24(fp)
  80f820:	10800058 	cmpnei	r2,r2,1
  80f824:	1000011e 	bne	r2,zero,80f82c <OSQDel+0x2ac>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  80f828:	080c85c0 	call	80c85c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  80f82c:	e0bffd17 	ldw	r2,-12(fp)
  80f830:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
  80f834:	e03ff915 	stw	zero,-28(fp)
             break;
  80f838:	00000906 	br	80f860 <OSQDel+0x2e0>
  80f83c:	e0bff717 	ldw	r2,-36(fp)
  80f840:	e0bff215 	stw	r2,-56(fp)
  80f844:	e0bff217 	ldw	r2,-56(fp)
  80f848:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  80f84c:	e0fffd17 	ldw	r3,-12(fp)
  80f850:	008001c4 	movi	r2,7
  80f854:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
  80f858:	e0bffb17 	ldw	r2,-20(fp)
  80f85c:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
  80f860:	e0bff917 	ldw	r2,-28(fp)
  80f864:	e0bfff15 	stw	r2,-4(fp)
  80f868:	e0bfff17 	ldw	r2,-4(fp)
}
  80f86c:	e037883a 	mov	sp,fp
  80f870:	dfc00117 	ldw	ra,4(sp)
  80f874:	df000017 	ldw	fp,0(sp)
  80f878:	dec00204 	addi	sp,sp,8
  80f87c:	f800283a 	ret

0080f880 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
  80f880:	defff904 	addi	sp,sp,-28
  80f884:	df000615 	stw	fp,24(sp)
  80f888:	df000604 	addi	fp,sp,24
  80f88c:	e13ffe15 	stw	r4,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80f890:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  80f894:	e0bffe17 	ldw	r2,-8(fp)
  80f898:	1004c03a 	cmpne	r2,r2,zero
  80f89c:	1000031e 	bne	r2,zero,80f8ac <OSQFlush+0x2c>
        return (OS_ERR_PEVENT_NULL);
  80f8a0:	00800104 	movi	r2,4
  80f8a4:	e0bfff15 	stw	r2,-4(fp)
  80f8a8:	00002206 	br	80f934 <OSQFlush+0xb4>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  80f8ac:	e0bffe17 	ldw	r2,-8(fp)
  80f8b0:	10800003 	ldbu	r2,0(r2)
  80f8b4:	10803fcc 	andi	r2,r2,255
  80f8b8:	108000a0 	cmpeqi	r2,r2,2
  80f8bc:	1000031e 	bne	r2,zero,80f8cc <OSQFlush+0x4c>
        return (OS_ERR_EVENT_TYPE);
  80f8c0:	00800044 	movi	r2,1
  80f8c4:	e0bfff15 	stw	r2,-4(fp)
  80f8c8:	00001a06 	br	80f934 <OSQFlush+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f8cc:	0005303a 	rdctl	r2,status
  80f8d0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f8d4:	e0fffb17 	ldw	r3,-20(fp)
  80f8d8:	00bfff84 	movi	r2,-2
  80f8dc:	1884703a 	and	r2,r3,r2
  80f8e0:	1001703a 	wrctl	status,r2
  
  return context;
  80f8e4:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80f8e8:	e0bffc15 	stw	r2,-16(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
  80f8ec:	e0bffe17 	ldw	r2,-8(fp)
  80f8f0:	10800117 	ldw	r2,4(r2)
  80f8f4:	e0bffd15 	stw	r2,-12(fp)
    pq->OSQIn      = pq->OSQStart;
  80f8f8:	e0bffd17 	ldw	r2,-12(fp)
  80f8fc:	10c00117 	ldw	r3,4(r2)
  80f900:	e0bffd17 	ldw	r2,-12(fp)
  80f904:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
  80f908:	e0bffd17 	ldw	r2,-12(fp)
  80f90c:	10c00117 	ldw	r3,4(r2)
  80f910:	e0bffd17 	ldw	r2,-12(fp)
  80f914:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
  80f918:	e0bffd17 	ldw	r2,-12(fp)
  80f91c:	1000058d 	sth	zero,22(r2)
  80f920:	e0bffc17 	ldw	r2,-16(fp)
  80f924:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f928:	e0bffa17 	ldw	r2,-24(fp)
  80f92c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  80f930:	e03fff15 	stw	zero,-4(fp)
  80f934:	e0bfff17 	ldw	r2,-4(fp)
}
  80f938:	e037883a 	mov	sp,fp
  80f93c:	df000017 	ldw	fp,0(sp)
  80f940:	dec00104 	addi	sp,sp,4
  80f944:	f800283a 	ret

0080f948 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  80f948:	defff104 	addi	sp,sp,-60
  80f94c:	dfc00e15 	stw	ra,56(sp)
  80f950:	df000d15 	stw	fp,52(sp)
  80f954:	df000d04 	addi	fp,sp,52
  80f958:	e13ffb15 	stw	r4,-20(fp)
  80f95c:	e1bffd15 	stw	r6,-12(fp)
  80f960:	e17ffc0d 	sth	r5,-16(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80f964:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80f968:	e0bffd17 	ldw	r2,-12(fp)
  80f96c:	1004c03a 	cmpne	r2,r2,zero
  80f970:	1000021e 	bne	r2,zero,80f97c <OSQPend+0x34>
        return ((void *)0);
  80f974:	e03fff15 	stw	zero,-4(fp)
  80f978:	0000b506 	br	80fc50 <OSQPend+0x308>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  80f97c:	e0bffb17 	ldw	r2,-20(fp)
  80f980:	1004c03a 	cmpne	r2,r2,zero
  80f984:	1000051e 	bne	r2,zero,80f99c <OSQPend+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  80f988:	e0fffd17 	ldw	r3,-12(fp)
  80f98c:	00800104 	movi	r2,4
  80f990:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  80f994:	e03fff15 	stw	zero,-4(fp)
  80f998:	0000ad06 	br	80fc50 <OSQPend+0x308>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  80f99c:	e0bffb17 	ldw	r2,-20(fp)
  80f9a0:	10800003 	ldbu	r2,0(r2)
  80f9a4:	10803fcc 	andi	r2,r2,255
  80f9a8:	108000a0 	cmpeqi	r2,r2,2
  80f9ac:	1000051e 	bne	r2,zero,80f9c4 <OSQPend+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  80f9b0:	e0fffd17 	ldw	r3,-12(fp)
  80f9b4:	00800044 	movi	r2,1
  80f9b8:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  80f9bc:	e03fff15 	stw	zero,-4(fp)
  80f9c0:	0000a306 	br	80fc50 <OSQPend+0x308>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  80f9c4:	008020b4 	movhi	r2,130
  80f9c8:	10aa4b04 	addi	r2,r2,-22228
  80f9cc:	10800003 	ldbu	r2,0(r2)
  80f9d0:	10803fcc 	andi	r2,r2,255
  80f9d4:	1005003a 	cmpeq	r2,r2,zero
  80f9d8:	1000051e 	bne	r2,zero,80f9f0 <OSQPend+0xa8>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
  80f9dc:	e0fffd17 	ldw	r3,-12(fp)
  80f9e0:	00800084 	movi	r2,2
  80f9e4:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  80f9e8:	e03fff15 	stw	zero,-4(fp)
  80f9ec:	00009806 	br	80fc50 <OSQPend+0x308>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
  80f9f0:	008020b4 	movhi	r2,130
  80f9f4:	10aa3d04 	addi	r2,r2,-22284
  80f9f8:	10800003 	ldbu	r2,0(r2)
  80f9fc:	10803fcc 	andi	r2,r2,255
  80fa00:	1005003a 	cmpeq	r2,r2,zero
  80fa04:	1000051e 	bne	r2,zero,80fa1c <OSQPend+0xd4>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
  80fa08:	e0fffd17 	ldw	r3,-12(fp)
  80fa0c:	00800344 	movi	r2,13
  80fa10:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  80fa14:	e03fff15 	stw	zero,-4(fp)
  80fa18:	00008d06 	br	80fc50 <OSQPend+0x308>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fa1c:	0005303a 	rdctl	r2,status
  80fa20:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fa24:	e0fff717 	ldw	r3,-36(fp)
  80fa28:	00bfff84 	movi	r2,-2
  80fa2c:	1884703a 	and	r2,r3,r2
  80fa30:	1001703a 	wrctl	status,r2
  
  return context;
  80fa34:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  80fa38:	e0bff815 	stw	r2,-32(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  80fa3c:	e0bffb17 	ldw	r2,-20(fp)
  80fa40:	10800117 	ldw	r2,4(r2)
  80fa44:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  80fa48:	e0bff917 	ldw	r2,-28(fp)
  80fa4c:	1080058b 	ldhu	r2,22(r2)
  80fa50:	10bfffcc 	andi	r2,r2,65535
  80fa54:	1005003a 	cmpeq	r2,r2,zero
  80fa58:	10001f1e 	bne	r2,zero,80fad8 <OSQPend+0x190>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  80fa5c:	e0bff917 	ldw	r2,-28(fp)
  80fa60:	10c00417 	ldw	r3,16(r2)
  80fa64:	18800017 	ldw	r2,0(r3)
  80fa68:	e0bffa15 	stw	r2,-24(fp)
  80fa6c:	18c00104 	addi	r3,r3,4
  80fa70:	e0bff917 	ldw	r2,-28(fp)
  80fa74:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  80fa78:	e0bff917 	ldw	r2,-28(fp)
  80fa7c:	1080058b 	ldhu	r2,22(r2)
  80fa80:	10bfffc4 	addi	r2,r2,-1
  80fa84:	1007883a 	mov	r3,r2
  80fa88:	e0bff917 	ldw	r2,-28(fp)
  80fa8c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  80fa90:	e0bff917 	ldw	r2,-28(fp)
  80fa94:	10c00417 	ldw	r3,16(r2)
  80fa98:	e0bff917 	ldw	r2,-28(fp)
  80fa9c:	10800217 	ldw	r2,8(r2)
  80faa0:	1880041e 	bne	r3,r2,80fab4 <OSQPend+0x16c>
            pq->OSQOut = pq->OSQStart;
  80faa4:	e0bff917 	ldw	r2,-28(fp)
  80faa8:	10c00117 	ldw	r3,4(r2)
  80faac:	e0bff917 	ldw	r2,-28(fp)
  80fab0:	10c00415 	stw	r3,16(r2)
  80fab4:	e0bff817 	ldw	r2,-32(fp)
  80fab8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fabc:	e0bff617 	ldw	r2,-40(fp)
  80fac0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  80fac4:	e0bffd17 	ldw	r2,-12(fp)
  80fac8:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
  80facc:	e0bffa17 	ldw	r2,-24(fp)
  80fad0:	e0bfff15 	stw	r2,-4(fp)
  80fad4:	00005e06 	br	80fc50 <OSQPend+0x308>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
  80fad8:	008020b4 	movhi	r2,130
  80fadc:	10aa4c04 	addi	r2,r2,-22224
  80fae0:	10c00017 	ldw	r3,0(r2)
  80fae4:	008020b4 	movhi	r2,130
  80fae8:	10aa4c04 	addi	r2,r2,-22224
  80faec:	10800017 	ldw	r2,0(r2)
  80faf0:	10800c03 	ldbu	r2,48(r2)
  80faf4:	10800114 	ori	r2,r2,4
  80faf8:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  80fafc:	008020b4 	movhi	r2,130
  80fb00:	10aa4c04 	addi	r2,r2,-22224
  80fb04:	10800017 	ldw	r2,0(r2)
  80fb08:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
  80fb0c:	008020b4 	movhi	r2,130
  80fb10:	10aa4c04 	addi	r2,r2,-22224
  80fb14:	10c00017 	ldw	r3,0(r2)
  80fb18:	e0bffc0b 	ldhu	r2,-16(fp)
  80fb1c:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
  80fb20:	e13ffb17 	ldw	r4,-20(fp)
  80fb24:	080bfb00 	call	80bfb0 <OS_EventTaskWait>
  80fb28:	e0bff817 	ldw	r2,-32(fp)
  80fb2c:	e0bff515 	stw	r2,-44(fp)
  80fb30:	e0bff517 	ldw	r2,-44(fp)
  80fb34:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
  80fb38:	080c85c0 	call	80c85c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fb3c:	0005303a 	rdctl	r2,status
  80fb40:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fb44:	e0fff417 	ldw	r3,-48(fp)
  80fb48:	00bfff84 	movi	r2,-2
  80fb4c:	1884703a 	and	r2,r3,r2
  80fb50:	1001703a 	wrctl	status,r2
  
  return context;
  80fb54:	e0bff417 	ldw	r2,-48(fp)
    OS_ENTER_CRITICAL();
  80fb58:	e0bff815 	stw	r2,-32(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  80fb5c:	008020b4 	movhi	r2,130
  80fb60:	10aa4c04 	addi	r2,r2,-22224
  80fb64:	10800017 	ldw	r2,0(r2)
  80fb68:	10800c43 	ldbu	r2,49(r2)
  80fb6c:	10803fcc 	andi	r2,r2,255
  80fb70:	e0bffe15 	stw	r2,-8(fp)
  80fb74:	e0fffe17 	ldw	r3,-8(fp)
  80fb78:	1805003a 	cmpeq	r2,r3,zero
  80fb7c:	1000041e 	bne	r2,zero,80fb90 <OSQPend+0x248>
  80fb80:	e0fffe17 	ldw	r3,-8(fp)
  80fb84:	188000a0 	cmpeqi	r2,r3,2
  80fb88:	1000091e 	bne	r2,zero,80fbb0 <OSQPend+0x268>
  80fb8c:	00000d06 	br	80fbc4 <OSQPend+0x27c>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
  80fb90:	008020b4 	movhi	r2,130
  80fb94:	10aa4c04 	addi	r2,r2,-22224
  80fb98:	10800017 	ldw	r2,0(r2)
  80fb9c:	10800917 	ldw	r2,36(r2)
  80fba0:	e0bffa15 	stw	r2,-24(fp)
            *perr =  OS_ERR_NONE;
  80fba4:	e0bffd17 	ldw	r2,-12(fp)
  80fba8:	10000005 	stb	zero,0(r2)
             break;
  80fbac:	00000e06 	br	80fbe8 <OSQPend+0x2a0>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
  80fbb0:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  80fbb4:	e0fffd17 	ldw	r3,-12(fp)
  80fbb8:	00800384 	movi	r2,14
  80fbbc:	18800005 	stb	r2,0(r3)
             break;
  80fbc0:	00000906 	br	80fbe8 <OSQPend+0x2a0>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
  80fbc4:	008020b4 	movhi	r2,130
  80fbc8:	10aa4c04 	addi	r2,r2,-22224
  80fbcc:	11000017 	ldw	r4,0(r2)
  80fbd0:	e17ffb17 	ldw	r5,-20(fp)
  80fbd4:	080c2140 	call	80c214 <OS_EventTaskRemove>
             pmsg = (void *)0;
  80fbd8:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  80fbdc:	e0fffd17 	ldw	r3,-12(fp)
  80fbe0:	00800284 	movi	r2,10
  80fbe4:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  80fbe8:	008020b4 	movhi	r2,130
  80fbec:	10aa4c04 	addi	r2,r2,-22224
  80fbf0:	10800017 	ldw	r2,0(r2)
  80fbf4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  80fbf8:	008020b4 	movhi	r2,130
  80fbfc:	10aa4c04 	addi	r2,r2,-22224
  80fc00:	10800017 	ldw	r2,0(r2)
  80fc04:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  80fc08:	008020b4 	movhi	r2,130
  80fc0c:	10aa4c04 	addi	r2,r2,-22224
  80fc10:	10800017 	ldw	r2,0(r2)
  80fc14:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  80fc18:	008020b4 	movhi	r2,130
  80fc1c:	10aa4c04 	addi	r2,r2,-22224
  80fc20:	10800017 	ldw	r2,0(r2)
  80fc24:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
  80fc28:	008020b4 	movhi	r2,130
  80fc2c:	10aa4c04 	addi	r2,r2,-22224
  80fc30:	10800017 	ldw	r2,0(r2)
  80fc34:	10000915 	stw	zero,36(r2)
  80fc38:	e0bff817 	ldw	r2,-32(fp)
  80fc3c:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fc40:	e0bff317 	ldw	r2,-52(fp)
  80fc44:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
  80fc48:	e0bffa17 	ldw	r2,-24(fp)
  80fc4c:	e0bfff15 	stw	r2,-4(fp)
  80fc50:	e0bfff17 	ldw	r2,-4(fp)
}
  80fc54:	e037883a 	mov	sp,fp
  80fc58:	dfc00117 	ldw	ra,4(sp)
  80fc5c:	df000017 	ldw	fp,0(sp)
  80fc60:	dec00204 	addi	sp,sp,8
  80fc64:	f800283a 	ret

0080fc68 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  80fc68:	defff504 	addi	sp,sp,-44
  80fc6c:	dfc00a15 	stw	ra,40(sp)
  80fc70:	df000915 	stw	fp,36(sp)
  80fc74:	df000904 	addi	fp,sp,36
  80fc78:	e13ffc15 	stw	r4,-16(fp)
  80fc7c:	e1bffe15 	stw	r6,-8(fp)
  80fc80:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80fc84:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  80fc88:	e0bffe17 	ldw	r2,-8(fp)
  80fc8c:	1004c03a 	cmpne	r2,r2,zero
  80fc90:	1000021e 	bne	r2,zero,80fc9c <OSQPendAbort+0x34>
        return (0);
  80fc94:	e03fff15 	stw	zero,-4(fp)
  80fc98:	00004c06 	br	80fdcc <OSQPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  80fc9c:	e0bffc17 	ldw	r2,-16(fp)
  80fca0:	1004c03a 	cmpne	r2,r2,zero
  80fca4:	1000051e 	bne	r2,zero,80fcbc <OSQPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  80fca8:	e0fffe17 	ldw	r3,-8(fp)
  80fcac:	00800104 	movi	r2,4
  80fcb0:	18800005 	stb	r2,0(r3)
        return (0);
  80fcb4:	e03fff15 	stw	zero,-4(fp)
  80fcb8:	00004406 	br	80fdcc <OSQPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  80fcbc:	e0bffc17 	ldw	r2,-16(fp)
  80fcc0:	10800003 	ldbu	r2,0(r2)
  80fcc4:	10803fcc 	andi	r2,r2,255
  80fcc8:	108000a0 	cmpeqi	r2,r2,2
  80fccc:	1000051e 	bne	r2,zero,80fce4 <OSQPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  80fcd0:	e0fffe17 	ldw	r3,-8(fp)
  80fcd4:	00800044 	movi	r2,1
  80fcd8:	18800005 	stb	r2,0(r3)
        return (0);
  80fcdc:	e03fff15 	stw	zero,-4(fp)
  80fce0:	00003a06 	br	80fdcc <OSQPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fce4:	0005303a 	rdctl	r2,status
  80fce8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fcec:	e0fff917 	ldw	r3,-28(fp)
  80fcf0:	00bfff84 	movi	r2,-2
  80fcf4:	1884703a 	and	r2,r3,r2
  80fcf8:	1001703a 	wrctl	status,r2
  
  return context;
  80fcfc:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  80fd00:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
  80fd04:	e0bffc17 	ldw	r2,-16(fp)
  80fd08:	10800283 	ldbu	r2,10(r2)
  80fd0c:	10803fcc 	andi	r2,r2,255
  80fd10:	1005003a 	cmpeq	r2,r2,zero
  80fd14:	1000261e 	bne	r2,zero,80fdb0 <OSQPendAbort+0x148>
        nbr_tasks = 0;
  80fd18:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
  80fd1c:	e0bffd03 	ldbu	r2,-12(fp)
  80fd20:	10800060 	cmpeqi	r2,r2,1
  80fd24:	1000091e 	bne	r2,zero,80fd4c <OSQPendAbort+0xe4>
  80fd28:	00000e06 	br	80fd64 <OSQPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  80fd2c:	e13ffc17 	ldw	r4,-16(fp)
  80fd30:	000b883a 	mov	r5,zero
  80fd34:	01800104 	movi	r6,4
  80fd38:	01c00084 	movi	r7,2
  80fd3c:	080be1c0 	call	80be1c <OS_EventTaskRdy>
                     nbr_tasks++;
  80fd40:	e0bffb03 	ldbu	r2,-20(fp)
  80fd44:	10800044 	addi	r2,r2,1
  80fd48:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
  80fd4c:	e0bffc17 	ldw	r2,-16(fp)
  80fd50:	10800283 	ldbu	r2,10(r2)
  80fd54:	10803fcc 	andi	r2,r2,255
  80fd58:	1004c03a 	cmpne	r2,r2,zero
  80fd5c:	103ff31e 	bne	r2,zero,80fd2c <OSQPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  80fd60:	00000806 	br	80fd84 <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  80fd64:	e13ffc17 	ldw	r4,-16(fp)
  80fd68:	000b883a 	mov	r5,zero
  80fd6c:	01800104 	movi	r6,4
  80fd70:	01c00084 	movi	r7,2
  80fd74:	080be1c0 	call	80be1c <OS_EventTaskRdy>
                 nbr_tasks++;
  80fd78:	e0bffb03 	ldbu	r2,-20(fp)
  80fd7c:	10800044 	addi	r2,r2,1
  80fd80:	e0bffb05 	stb	r2,-20(fp)
  80fd84:	e0bffa17 	ldw	r2,-24(fp)
  80fd88:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fd8c:	e0bff817 	ldw	r2,-32(fp)
  80fd90:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
  80fd94:	080c85c0 	call	80c85c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  80fd98:	e0fffe17 	ldw	r3,-8(fp)
  80fd9c:	00800384 	movi	r2,14
  80fda0:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
  80fda4:	e0bffb03 	ldbu	r2,-20(fp)
  80fda8:	e0bfff15 	stw	r2,-4(fp)
  80fdac:	00000706 	br	80fdcc <OSQPendAbort+0x164>
  80fdb0:	e0bffa17 	ldw	r2,-24(fp)
  80fdb4:	e0bff715 	stw	r2,-36(fp)
  80fdb8:	e0bff717 	ldw	r2,-36(fp)
  80fdbc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80fdc0:	e0bffe17 	ldw	r2,-8(fp)
  80fdc4:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
  80fdc8:	e03fff15 	stw	zero,-4(fp)
  80fdcc:	e0bfff17 	ldw	r2,-4(fp)
}
  80fdd0:	e037883a 	mov	sp,fp
  80fdd4:	dfc00117 	ldw	ra,4(sp)
  80fdd8:	df000017 	ldw	fp,0(sp)
  80fddc:	dec00204 	addi	sp,sp,8
  80fde0:	f800283a 	ret

0080fde4 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
  80fde4:	defff504 	addi	sp,sp,-44
  80fde8:	dfc00a15 	stw	ra,40(sp)
  80fdec:	df000915 	stw	fp,36(sp)
  80fdf0:	df000904 	addi	fp,sp,36
  80fdf4:	e13ffd15 	stw	r4,-12(fp)
  80fdf8:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  80fdfc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  80fe00:	e0bffd17 	ldw	r2,-12(fp)
  80fe04:	1004c03a 	cmpne	r2,r2,zero
  80fe08:	1000031e 	bne	r2,zero,80fe18 <OSQPost+0x34>
        return (OS_ERR_PEVENT_NULL);
  80fe0c:	00800104 	movi	r2,4
  80fe10:	e0bfff15 	stw	r2,-4(fp)
  80fe14:	00004d06 	br	80ff4c <OSQPost+0x168>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  80fe18:	e0bffd17 	ldw	r2,-12(fp)
  80fe1c:	10800003 	ldbu	r2,0(r2)
  80fe20:	10803fcc 	andi	r2,r2,255
  80fe24:	108000a0 	cmpeqi	r2,r2,2
  80fe28:	1000031e 	bne	r2,zero,80fe38 <OSQPost+0x54>
        return (OS_ERR_EVENT_TYPE);
  80fe2c:	00800044 	movi	r2,1
  80fe30:	e0bfff15 	stw	r2,-4(fp)
  80fe34:	00004506 	br	80ff4c <OSQPost+0x168>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fe38:	0005303a 	rdctl	r2,status
  80fe3c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fe40:	e0fffa17 	ldw	r3,-24(fp)
  80fe44:	00bfff84 	movi	r2,-2
  80fe48:	1884703a 	and	r2,r3,r2
  80fe4c:	1001703a 	wrctl	status,r2
  
  return context;
  80fe50:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  80fe54:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
  80fe58:	e0bffd17 	ldw	r2,-12(fp)
  80fe5c:	10800283 	ldbu	r2,10(r2)
  80fe60:	10803fcc 	andi	r2,r2,255
  80fe64:	1005003a 	cmpeq	r2,r2,zero
  80fe68:	10000c1e 	bne	r2,zero,80fe9c <OSQPost+0xb8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  80fe6c:	e13ffd17 	ldw	r4,-12(fp)
  80fe70:	e17ffe17 	ldw	r5,-8(fp)
  80fe74:	01800104 	movi	r6,4
  80fe78:	000f883a 	mov	r7,zero
  80fe7c:	080be1c0 	call	80be1c <OS_EventTaskRdy>
  80fe80:	e0bffb17 	ldw	r2,-20(fp)
  80fe84:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fe88:	e0bff917 	ldw	r2,-28(fp)
  80fe8c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
  80fe90:	080c85c0 	call	80c85c <OS_Sched>
        return (OS_ERR_NONE);
  80fe94:	e03fff15 	stw	zero,-4(fp)
  80fe98:	00002c06 	br	80ff4c <OSQPost+0x168>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
  80fe9c:	e0bffd17 	ldw	r2,-12(fp)
  80fea0:	10800117 	ldw	r2,4(r2)
  80fea4:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
  80fea8:	e0bffc17 	ldw	r2,-16(fp)
  80feac:	10c0058b 	ldhu	r3,22(r2)
  80feb0:	e0bffc17 	ldw	r2,-16(fp)
  80feb4:	1080050b 	ldhu	r2,20(r2)
  80feb8:	18ffffcc 	andi	r3,r3,65535
  80febc:	10bfffcc 	andi	r2,r2,65535
  80fec0:	18800736 	bltu	r3,r2,80fee0 <OSQPost+0xfc>
  80fec4:	e0bffb17 	ldw	r2,-20(fp)
  80fec8:	e0bff815 	stw	r2,-32(fp)
  80fecc:	e0bff817 	ldw	r2,-32(fp)
  80fed0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  80fed4:	00800784 	movi	r2,30
  80fed8:	e0bfff15 	stw	r2,-4(fp)
  80fedc:	00001b06 	br	80ff4c <OSQPost+0x168>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
  80fee0:	e0bffc17 	ldw	r2,-16(fp)
  80fee4:	10c00317 	ldw	r3,12(r2)
  80fee8:	e0bffe17 	ldw	r2,-8(fp)
  80feec:	18800015 	stw	r2,0(r3)
  80fef0:	18c00104 	addi	r3,r3,4
  80fef4:	e0bffc17 	ldw	r2,-16(fp)
  80fef8:	10c00315 	stw	r3,12(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
  80fefc:	e0bffc17 	ldw	r2,-16(fp)
  80ff00:	1080058b 	ldhu	r2,22(r2)
  80ff04:	10800044 	addi	r2,r2,1
  80ff08:	1007883a 	mov	r3,r2
  80ff0c:	e0bffc17 	ldw	r2,-16(fp)
  80ff10:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
  80ff14:	e0bffc17 	ldw	r2,-16(fp)
  80ff18:	10c00317 	ldw	r3,12(r2)
  80ff1c:	e0bffc17 	ldw	r2,-16(fp)
  80ff20:	10800217 	ldw	r2,8(r2)
  80ff24:	1880041e 	bne	r3,r2,80ff38 <OSQPost+0x154>
        pq->OSQIn = pq->OSQStart;
  80ff28:	e0bffc17 	ldw	r2,-16(fp)
  80ff2c:	10c00117 	ldw	r3,4(r2)
  80ff30:	e0bffc17 	ldw	r2,-16(fp)
  80ff34:	10c00315 	stw	r3,12(r2)
  80ff38:	e0bffb17 	ldw	r2,-20(fp)
  80ff3c:	e0bff715 	stw	r2,-36(fp)
  80ff40:	e0bff717 	ldw	r2,-36(fp)
  80ff44:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  80ff48:	e03fff15 	stw	zero,-4(fp)
  80ff4c:	e0bfff17 	ldw	r2,-4(fp)
}
  80ff50:	e037883a 	mov	sp,fp
  80ff54:	dfc00117 	ldw	ra,4(sp)
  80ff58:	df000017 	ldw	fp,0(sp)
  80ff5c:	dec00204 	addi	sp,sp,8
  80ff60:	f800283a 	ret

0080ff64 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
  80ff64:	defff504 	addi	sp,sp,-44
  80ff68:	dfc00a15 	stw	ra,40(sp)
  80ff6c:	df000915 	stw	fp,36(sp)
  80ff70:	df000904 	addi	fp,sp,36
  80ff74:	e13ffd15 	stw	r4,-12(fp)
  80ff78:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80ff7c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  80ff80:	e0bffd17 	ldw	r2,-12(fp)
  80ff84:	1004c03a 	cmpne	r2,r2,zero
  80ff88:	1000031e 	bne	r2,zero,80ff98 <OSQPostFront+0x34>
        return (OS_ERR_PEVENT_NULL);
  80ff8c:	00800104 	movi	r2,4
  80ff90:	e0bfff15 	stw	r2,-4(fp)
  80ff94:	00004f06 	br	8100d4 <OSQPostFront+0x170>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  80ff98:	e0bffd17 	ldw	r2,-12(fp)
  80ff9c:	10800003 	ldbu	r2,0(r2)
  80ffa0:	10803fcc 	andi	r2,r2,255
  80ffa4:	108000a0 	cmpeqi	r2,r2,2
  80ffa8:	1000031e 	bne	r2,zero,80ffb8 <OSQPostFront+0x54>
        return (OS_ERR_EVENT_TYPE);
  80ffac:	00800044 	movi	r2,1
  80ffb0:	e0bfff15 	stw	r2,-4(fp)
  80ffb4:	00004706 	br	8100d4 <OSQPostFront+0x170>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ffb8:	0005303a 	rdctl	r2,status
  80ffbc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ffc0:	e0fffa17 	ldw	r3,-24(fp)
  80ffc4:	00bfff84 	movi	r2,-2
  80ffc8:	1884703a 	and	r2,r3,r2
  80ffcc:	1001703a 	wrctl	status,r2
  
  return context;
  80ffd0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  80ffd4:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
  80ffd8:	e0bffd17 	ldw	r2,-12(fp)
  80ffdc:	10800283 	ldbu	r2,10(r2)
  80ffe0:	10803fcc 	andi	r2,r2,255
  80ffe4:	1005003a 	cmpeq	r2,r2,zero
  80ffe8:	10000c1e 	bne	r2,zero,81001c <OSQPostFront+0xb8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  80ffec:	e13ffd17 	ldw	r4,-12(fp)
  80fff0:	e17ffe17 	ldw	r5,-8(fp)
  80fff4:	01800104 	movi	r6,4
  80fff8:	000f883a 	mov	r7,zero
  80fffc:	080be1c0 	call	80be1c <OS_EventTaskRdy>
  810000:	e0bffb17 	ldw	r2,-20(fp)
  810004:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810008:	e0bff917 	ldw	r2,-28(fp)
  81000c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
  810010:	080c85c0 	call	80c85c <OS_Sched>
        return (OS_ERR_NONE);
  810014:	e03fff15 	stw	zero,-4(fp)
  810018:	00002e06 	br	8100d4 <OSQPostFront+0x170>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  81001c:	e0bffd17 	ldw	r2,-12(fp)
  810020:	10800117 	ldw	r2,4(r2)
  810024:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  810028:	e0bffc17 	ldw	r2,-16(fp)
  81002c:	10c0058b 	ldhu	r3,22(r2)
  810030:	e0bffc17 	ldw	r2,-16(fp)
  810034:	1080050b 	ldhu	r2,20(r2)
  810038:	18ffffcc 	andi	r3,r3,65535
  81003c:	10bfffcc 	andi	r2,r2,65535
  810040:	18800736 	bltu	r3,r2,810060 <OSQPostFront+0xfc>
  810044:	e0bffb17 	ldw	r2,-20(fp)
  810048:	e0bff815 	stw	r2,-32(fp)
  81004c:	e0bff817 	ldw	r2,-32(fp)
  810050:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  810054:	00800784 	movi	r2,30
  810058:	e0bfff15 	stw	r2,-4(fp)
  81005c:	00001d06 	br	8100d4 <OSQPostFront+0x170>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
  810060:	e0bffc17 	ldw	r2,-16(fp)
  810064:	10c00417 	ldw	r3,16(r2)
  810068:	e0bffc17 	ldw	r2,-16(fp)
  81006c:	10800117 	ldw	r2,4(r2)
  810070:	1880041e 	bne	r3,r2,810084 <OSQPostFront+0x120>
        pq->OSQOut = pq->OSQEnd;
  810074:	e0bffc17 	ldw	r2,-16(fp)
  810078:	10c00217 	ldw	r3,8(r2)
  81007c:	e0bffc17 	ldw	r2,-16(fp)
  810080:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
  810084:	e0bffc17 	ldw	r2,-16(fp)
  810088:	10800417 	ldw	r2,16(r2)
  81008c:	10ffff04 	addi	r3,r2,-4
  810090:	e0bffc17 	ldw	r2,-16(fp)
  810094:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
  810098:	e0bffc17 	ldw	r2,-16(fp)
  81009c:	10c00417 	ldw	r3,16(r2)
  8100a0:	e0bffe17 	ldw	r2,-8(fp)
  8100a4:	18800015 	stw	r2,0(r3)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  8100a8:	e0bffc17 	ldw	r2,-16(fp)
  8100ac:	1080058b 	ldhu	r2,22(r2)
  8100b0:	10800044 	addi	r2,r2,1
  8100b4:	1007883a 	mov	r3,r2
  8100b8:	e0bffc17 	ldw	r2,-16(fp)
  8100bc:	10c0058d 	sth	r3,22(r2)
  8100c0:	e0bffb17 	ldw	r2,-20(fp)
  8100c4:	e0bff715 	stw	r2,-36(fp)
  8100c8:	e0bff717 	ldw	r2,-36(fp)
  8100cc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  8100d0:	e03fff15 	stw	zero,-4(fp)
  8100d4:	e0bfff17 	ldw	r2,-4(fp)
}
  8100d8:	e037883a 	mov	sp,fp
  8100dc:	dfc00117 	ldw	ra,4(sp)
  8100e0:	df000017 	ldw	fp,0(sp)
  8100e4:	dec00204 	addi	sp,sp,8
  8100e8:	f800283a 	ret

008100ec <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
  8100ec:	defff404 	addi	sp,sp,-48
  8100f0:	dfc00b15 	stw	ra,44(sp)
  8100f4:	df000a15 	stw	fp,40(sp)
  8100f8:	df000a04 	addi	fp,sp,40
  8100fc:	e13ffc15 	stw	r4,-16(fp)
  810100:	e17ffd15 	stw	r5,-12(fp)
  810104:	e1bffe05 	stb	r6,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  810108:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  81010c:	e0bffc17 	ldw	r2,-16(fp)
  810110:	1004c03a 	cmpne	r2,r2,zero
  810114:	1000031e 	bne	r2,zero,810124 <OSQPostOpt+0x38>
        return (OS_ERR_PEVENT_NULL);
  810118:	00800104 	movi	r2,4
  81011c:	e0bfff15 	stw	r2,-4(fp)
  810120:	00007906 	br	810308 <OSQPostOpt+0x21c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  810124:	e0bffc17 	ldw	r2,-16(fp)
  810128:	10800003 	ldbu	r2,0(r2)
  81012c:	10803fcc 	andi	r2,r2,255
  810130:	108000a0 	cmpeqi	r2,r2,2
  810134:	1000031e 	bne	r2,zero,810144 <OSQPostOpt+0x58>
        return (OS_ERR_EVENT_TYPE);
  810138:	00800044 	movi	r2,1
  81013c:	e0bfff15 	stw	r2,-4(fp)
  810140:	00007106 	br	810308 <OSQPostOpt+0x21c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810144:	0005303a 	rdctl	r2,status
  810148:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81014c:	e0fff917 	ldw	r3,-28(fp)
  810150:	00bfff84 	movi	r2,-2
  810154:	1884703a 	and	r2,r3,r2
  810158:	1001703a 	wrctl	status,r2
  
  return context;
  81015c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  810160:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
  810164:	e0bffc17 	ldw	r2,-16(fp)
  810168:	10800283 	ldbu	r2,10(r2)
  81016c:	10803fcc 	andi	r2,r2,255
  810170:	1005003a 	cmpeq	r2,r2,zero
  810174:	1000211e 	bne	r2,zero,8101fc <OSQPostOpt+0x110>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
  810178:	e0bffe03 	ldbu	r2,-8(fp)
  81017c:	1080004c 	andi	r2,r2,1
  810180:	10803fcc 	andi	r2,r2,255
  810184:	1005003a 	cmpeq	r2,r2,zero
  810188:	10000c1e 	bne	r2,zero,8101bc <OSQPostOpt+0xd0>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  81018c:	00000506 	br	8101a4 <OSQPostOpt+0xb8>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  810190:	e13ffc17 	ldw	r4,-16(fp)
  810194:	e17ffd17 	ldw	r5,-12(fp)
  810198:	01800104 	movi	r6,4
  81019c:	000f883a 	mov	r7,zero
  8101a0:	080be1c0 	call	80be1c <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  8101a4:	e0bffc17 	ldw	r2,-16(fp)
  8101a8:	10800283 	ldbu	r2,10(r2)
  8101ac:	10803fcc 	andi	r2,r2,255
  8101b0:	1004c03a 	cmpne	r2,r2,zero
  8101b4:	103ff61e 	bne	r2,zero,810190 <OSQPostOpt+0xa4>
  8101b8:	00000506 	br	8101d0 <OSQPostOpt+0xe4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  8101bc:	e13ffc17 	ldw	r4,-16(fp)
  8101c0:	e17ffd17 	ldw	r5,-12(fp)
  8101c4:	01800104 	movi	r6,4
  8101c8:	000f883a 	mov	r7,zero
  8101cc:	080be1c0 	call	80be1c <OS_EventTaskRdy>
  8101d0:	e0bffa17 	ldw	r2,-24(fp)
  8101d4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8101d8:	e0bff817 	ldw	r2,-32(fp)
  8101dc:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
  8101e0:	e0bffe03 	ldbu	r2,-8(fp)
  8101e4:	1080010c 	andi	r2,r2,4
  8101e8:	1004c03a 	cmpne	r2,r2,zero
  8101ec:	1000011e 	bne	r2,zero,8101f4 <OSQPostOpt+0x108>
            OS_Sched();                               /* Find highest priority task ready to run       */
  8101f0:	080c85c0 	call	80c85c <OS_Sched>
        }
        return (OS_ERR_NONE);
  8101f4:	e03fff15 	stw	zero,-4(fp)
  8101f8:	00004306 	br	810308 <OSQPostOpt+0x21c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  8101fc:	e0bffc17 	ldw	r2,-16(fp)
  810200:	10800117 	ldw	r2,4(r2)
  810204:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  810208:	e0bffb17 	ldw	r2,-20(fp)
  81020c:	10c0058b 	ldhu	r3,22(r2)
  810210:	e0bffb17 	ldw	r2,-20(fp)
  810214:	1080050b 	ldhu	r2,20(r2)
  810218:	18ffffcc 	andi	r3,r3,65535
  81021c:	10bfffcc 	andi	r2,r2,65535
  810220:	18800736 	bltu	r3,r2,810240 <OSQPostOpt+0x154>
  810224:	e0bffa17 	ldw	r2,-24(fp)
  810228:	e0bff715 	stw	r2,-36(fp)
  81022c:	e0bff717 	ldw	r2,-36(fp)
  810230:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  810234:	00800784 	movi	r2,30
  810238:	e0bfff15 	stw	r2,-4(fp)
  81023c:	00003206 	br	810308 <OSQPostOpt+0x21c>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
  810240:	e0bffe03 	ldbu	r2,-8(fp)
  810244:	1080008c 	andi	r2,r2,2
  810248:	1005003a 	cmpeq	r2,r2,zero
  81024c:	1000131e 	bne	r2,zero,81029c <OSQPostOpt+0x1b0>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
  810250:	e0bffb17 	ldw	r2,-20(fp)
  810254:	10c00417 	ldw	r3,16(r2)
  810258:	e0bffb17 	ldw	r2,-20(fp)
  81025c:	10800117 	ldw	r2,4(r2)
  810260:	1880041e 	bne	r3,r2,810274 <OSQPostOpt+0x188>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
  810264:	e0bffb17 	ldw	r2,-20(fp)
  810268:	10c00217 	ldw	r3,8(r2)
  81026c:	e0bffb17 	ldw	r2,-20(fp)
  810270:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
  810274:	e0bffb17 	ldw	r2,-20(fp)
  810278:	10800417 	ldw	r2,16(r2)
  81027c:	10ffff04 	addi	r3,r2,-4
  810280:	e0bffb17 	ldw	r2,-20(fp)
  810284:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
  810288:	e0bffb17 	ldw	r2,-20(fp)
  81028c:	10c00417 	ldw	r3,16(r2)
  810290:	e0bffd17 	ldw	r2,-12(fp)
  810294:	18800015 	stw	r2,0(r3)
  810298:	00001006 	br	8102dc <OSQPostOpt+0x1f0>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
  81029c:	e0bffb17 	ldw	r2,-20(fp)
  8102a0:	10c00317 	ldw	r3,12(r2)
  8102a4:	e0bffd17 	ldw	r2,-12(fp)
  8102a8:	18800015 	stw	r2,0(r3)
  8102ac:	18c00104 	addi	r3,r3,4
  8102b0:	e0bffb17 	ldw	r2,-20(fp)
  8102b4:	10c00315 	stw	r3,12(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
  8102b8:	e0bffb17 	ldw	r2,-20(fp)
  8102bc:	10c00317 	ldw	r3,12(r2)
  8102c0:	e0bffb17 	ldw	r2,-20(fp)
  8102c4:	10800217 	ldw	r2,8(r2)
  8102c8:	1880041e 	bne	r3,r2,8102dc <OSQPostOpt+0x1f0>
            pq->OSQIn = pq->OSQStart;
  8102cc:	e0bffb17 	ldw	r2,-20(fp)
  8102d0:	10c00117 	ldw	r3,4(r2)
  8102d4:	e0bffb17 	ldw	r2,-20(fp)
  8102d8:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  8102dc:	e0bffb17 	ldw	r2,-20(fp)
  8102e0:	1080058b 	ldhu	r2,22(r2)
  8102e4:	10800044 	addi	r2,r2,1
  8102e8:	1007883a 	mov	r3,r2
  8102ec:	e0bffb17 	ldw	r2,-20(fp)
  8102f0:	10c0058d 	sth	r3,22(r2)
  8102f4:	e0bffa17 	ldw	r2,-24(fp)
  8102f8:	e0bff615 	stw	r2,-40(fp)
  8102fc:	e0bff617 	ldw	r2,-40(fp)
  810300:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  810304:	e03fff15 	stw	zero,-4(fp)
  810308:	e0bfff17 	ldw	r2,-4(fp)
}
  81030c:	e037883a 	mov	sp,fp
  810310:	dfc00117 	ldw	ra,4(sp)
  810314:	df000017 	ldw	fp,0(sp)
  810318:	dec00204 	addi	sp,sp,8
  81031c:	f800283a 	ret

00810320 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
  810320:	defff504 	addi	sp,sp,-44
  810324:	df000a15 	stw	fp,40(sp)
  810328:	df000a04 	addi	fp,sp,40
  81032c:	e13ffd15 	stw	r4,-12(fp)
  810330:	e17ffe15 	stw	r5,-8(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  810334:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  810338:	e0bffd17 	ldw	r2,-12(fp)
  81033c:	1004c03a 	cmpne	r2,r2,zero
  810340:	1000031e 	bne	r2,zero,810350 <OSQQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
  810344:	00800104 	movi	r2,4
  810348:	e0bfff15 	stw	r2,-4(fp)
  81034c:	00004f06 	br	81048c <OSQQuery+0x16c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
  810350:	e0bffe17 	ldw	r2,-8(fp)
  810354:	1004c03a 	cmpne	r2,r2,zero
  810358:	1000031e 	bne	r2,zero,810368 <OSQQuery+0x48>
        return (OS_ERR_PDATA_NULL);
  81035c:	00800244 	movi	r2,9
  810360:	e0bfff15 	stw	r2,-4(fp)
  810364:	00004906 	br	81048c <OSQQuery+0x16c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  810368:	e0bffd17 	ldw	r2,-12(fp)
  81036c:	10800003 	ldbu	r2,0(r2)
  810370:	10803fcc 	andi	r2,r2,255
  810374:	108000a0 	cmpeqi	r2,r2,2
  810378:	1000031e 	bne	r2,zero,810388 <OSQQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
  81037c:	00800044 	movi	r2,1
  810380:	e0bfff15 	stw	r2,-4(fp)
  810384:	00004106 	br	81048c <OSQQuery+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810388:	0005303a 	rdctl	r2,status
  81038c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810390:	e0fff717 	ldw	r3,-36(fp)
  810394:	00bfff84 	movi	r2,-2
  810398:	1884703a 	and	r2,r3,r2
  81039c:	1001703a 	wrctl	status,r2
  
  return context;
  8103a0:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  8103a4:	e0bff815 	stw	r2,-32(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
  8103a8:	e0bffd17 	ldw	r2,-12(fp)
  8103ac:	10c00283 	ldbu	r3,10(r2)
  8103b0:	e0bffe17 	ldw	r2,-8(fp)
  8103b4:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
  8103b8:	e0bffd17 	ldw	r2,-12(fp)
  8103bc:	108002c4 	addi	r2,r2,11
  8103c0:	e0bffa15 	stw	r2,-24(fp)
    pdest                = &p_q_data->OSEventTbl[0];
  8103c4:	e0bffe17 	ldw	r2,-8(fp)
  8103c8:	10800204 	addi	r2,r2,8
  8103cc:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  8103d0:	e03ffb05 	stb	zero,-20(fp)
  8103d4:	00000d06 	br	81040c <OSQQuery+0xec>
        *pdest++ = *psrc++;
  8103d8:	e0bffa17 	ldw	r2,-24(fp)
  8103dc:	10c00003 	ldbu	r3,0(r2)
  8103e0:	e0bff917 	ldw	r2,-28(fp)
  8103e4:	10c00005 	stb	r3,0(r2)
  8103e8:	e0bff917 	ldw	r2,-28(fp)
  8103ec:	10800044 	addi	r2,r2,1
  8103f0:	e0bff915 	stw	r2,-28(fp)
  8103f4:	e0bffa17 	ldw	r2,-24(fp)
  8103f8:	10800044 	addi	r2,r2,1
  8103fc:	e0bffa15 	stw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  810400:	e0bffb03 	ldbu	r2,-20(fp)
  810404:	10800044 	addi	r2,r2,1
  810408:	e0bffb05 	stb	r2,-20(fp)
  81040c:	e0bffb03 	ldbu	r2,-20(fp)
  810410:	108000f0 	cmpltui	r2,r2,3
  810414:	103ff01e 	bne	r2,zero,8103d8 <OSQQuery+0xb8>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
  810418:	e0bffd17 	ldw	r2,-12(fp)
  81041c:	10800117 	ldw	r2,4(r2)
  810420:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
  810424:	e0bffc17 	ldw	r2,-16(fp)
  810428:	1080058b 	ldhu	r2,22(r2)
  81042c:	10bfffcc 	andi	r2,r2,65535
  810430:	1005003a 	cmpeq	r2,r2,zero
  810434:	1000061e 	bne	r2,zero,810450 <OSQQuery+0x130>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
  810438:	e0bffc17 	ldw	r2,-16(fp)
  81043c:	10800417 	ldw	r2,16(r2)
  810440:	10c00017 	ldw	r3,0(r2)
  810444:	e0bffe17 	ldw	r2,-8(fp)
  810448:	10c00015 	stw	r3,0(r2)
  81044c:	00000206 	br	810458 <OSQQuery+0x138>
    } else {
        p_q_data->OSMsg = (void *)0;
  810450:	e0bffe17 	ldw	r2,-8(fp)
  810454:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
  810458:	e0bffc17 	ldw	r2,-16(fp)
  81045c:	10c0058b 	ldhu	r3,22(r2)
  810460:	e0bffe17 	ldw	r2,-8(fp)
  810464:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
  810468:	e0bffc17 	ldw	r2,-16(fp)
  81046c:	10c0050b 	ldhu	r3,20(r2)
  810470:	e0bffe17 	ldw	r2,-8(fp)
  810474:	10c0018d 	sth	r3,6(r2)
  810478:	e0bff817 	ldw	r2,-32(fp)
  81047c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810480:	e0bff617 	ldw	r2,-40(fp)
  810484:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  810488:	e03fff15 	stw	zero,-4(fp)
  81048c:	e0bfff17 	ldw	r2,-4(fp)
}
  810490:	e037883a 	mov	sp,fp
  810494:	df000017 	ldw	fp,0(sp)
  810498:	dec00104 	addi	sp,sp,4
  81049c:	f800283a 	ret

008104a0 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
  8104a0:	defffb04 	addi	sp,sp,-20
  8104a4:	dfc00415 	stw	ra,16(sp)
  8104a8:	df000315 	stw	fp,12(sp)
  8104ac:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
  8104b0:	010020b4 	movhi	r4,130
  8104b4:	21004604 	addi	r4,r4,280
  8104b8:	01407804 	movi	r5,480
  8104bc:	080c79c0 	call	80c79c <OS_MemClr>
    pq1 = &OSQTbl[0];
  8104c0:	008020b4 	movhi	r2,130
  8104c4:	10804604 	addi	r2,r2,280
  8104c8:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
  8104cc:	008020b4 	movhi	r2,130
  8104d0:	10804c04 	addi	r2,r2,304
  8104d4:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  8104d8:	e03fff0d 	sth	zero,-4(fp)
  8104dc:	00000c06 	br	810510 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
  8104e0:	e0fffe17 	ldw	r3,-8(fp)
  8104e4:	e0bffd17 	ldw	r2,-12(fp)
  8104e8:	18800015 	stw	r2,0(r3)
        pq1++;
  8104ec:	e0bffe17 	ldw	r2,-8(fp)
  8104f0:	10800604 	addi	r2,r2,24
  8104f4:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
  8104f8:	e0bffd17 	ldw	r2,-12(fp)
  8104fc:	10800604 	addi	r2,r2,24
  810500:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  810504:	e0bfff0b 	ldhu	r2,-4(fp)
  810508:	10800044 	addi	r2,r2,1
  81050c:	e0bfff0d 	sth	r2,-4(fp)
  810510:	e0bfff0b 	ldhu	r2,-4(fp)
  810514:	108004f0 	cmpltui	r2,r2,19
  810518:	103ff11e 	bne	r2,zero,8104e0 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
  81051c:	e0bffe17 	ldw	r2,-8(fp)
  810520:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
  810524:	00c020b4 	movhi	r3,130
  810528:	18ea4804 	addi	r3,r3,-22240
  81052c:	008020b4 	movhi	r2,130
  810530:	10804604 	addi	r2,r2,280
  810534:	18800015 	stw	r2,0(r3)
#endif
}
  810538:	e037883a 	mov	sp,fp
  81053c:	dfc00117 	ldw	ra,4(sp)
  810540:	df000017 	ldw	fp,0(sp)
  810544:	dec00204 	addi	sp,sp,8
  810548:	f800283a 	ret

0081054c <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
  81054c:	defff904 	addi	sp,sp,-28
  810550:	df000615 	stw	fp,24(sp)
  810554:	df000604 	addi	fp,sp,24
  810558:	e13ffe15 	stw	r4,-8(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  81055c:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  810560:	e0bffe17 	ldw	r2,-8(fp)
  810564:	1004c03a 	cmpne	r2,r2,zero
  810568:	1000021e 	bne	r2,zero,810574 <OSSemAccept+0x28>
        return (0);
  81056c:	e03fff15 	stw	zero,-4(fp)
  810570:	00002106 	br	8105f8 <OSSemAccept+0xac>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  810574:	e0bffe17 	ldw	r2,-8(fp)
  810578:	10800003 	ldbu	r2,0(r2)
  81057c:	10803fcc 	andi	r2,r2,255
  810580:	108000e0 	cmpeqi	r2,r2,3
  810584:	1000021e 	bne	r2,zero,810590 <OSSemAccept+0x44>
        return (0);
  810588:	e03fff15 	stw	zero,-4(fp)
  81058c:	00001a06 	br	8105f8 <OSSemAccept+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810590:	0005303a 	rdctl	r2,status
  810594:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810598:	e0fffb17 	ldw	r3,-20(fp)
  81059c:	00bfff84 	movi	r2,-2
  8105a0:	1884703a 	and	r2,r3,r2
  8105a4:	1001703a 	wrctl	status,r2
  
  return context;
  8105a8:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  8105ac:	e0bffc15 	stw	r2,-16(fp)
    cnt = pevent->OSEventCnt;
  8105b0:	e0bffe17 	ldw	r2,-8(fp)
  8105b4:	1080020b 	ldhu	r2,8(r2)
  8105b8:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
  8105bc:	e0bffd0b 	ldhu	r2,-12(fp)
  8105c0:	1005003a 	cmpeq	r2,r2,zero
  8105c4:	1000061e 	bne	r2,zero,8105e0 <OSSemAccept+0x94>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
  8105c8:	e0bffe17 	ldw	r2,-8(fp)
  8105cc:	1080020b 	ldhu	r2,8(r2)
  8105d0:	10bfffc4 	addi	r2,r2,-1
  8105d4:	1007883a 	mov	r3,r2
  8105d8:	e0bffe17 	ldw	r2,-8(fp)
  8105dc:	10c0020d 	sth	r3,8(r2)
  8105e0:	e0bffc17 	ldw	r2,-16(fp)
  8105e4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8105e8:	e0bffa17 	ldw	r2,-24(fp)
  8105ec:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
  8105f0:	e0bffd0b 	ldhu	r2,-12(fp)
  8105f4:	e0bfff15 	stw	r2,-4(fp)
  8105f8:	e0bfff17 	ldw	r2,-4(fp)
}
  8105fc:	e037883a 	mov	sp,fp
  810600:	df000017 	ldw	fp,0(sp)
  810604:	dec00104 	addi	sp,sp,4
  810608:	f800283a 	ret

0081060c <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
  81060c:	defff804 	addi	sp,sp,-32
  810610:	dfc00715 	stw	ra,28(sp)
  810614:	df000615 	stw	fp,24(sp)
  810618:	df000604 	addi	fp,sp,24
  81061c:	e13ffe0d 	sth	r4,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  810620:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  810624:	008020b4 	movhi	r2,130
  810628:	10aa4b04 	addi	r2,r2,-22228
  81062c:	10800003 	ldbu	r2,0(r2)
  810630:	10803fcc 	andi	r2,r2,255
  810634:	1005003a 	cmpeq	r2,r2,zero
  810638:	1000021e 	bne	r2,zero,810644 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
  81063c:	e03fff15 	stw	zero,-4(fp)
  810640:	00003106 	br	810708 <OSSemCreate+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810644:	0005303a 	rdctl	r2,status
  810648:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81064c:	e0fffb17 	ldw	r3,-20(fp)
  810650:	00bfff84 	movi	r2,-2
  810654:	1884703a 	and	r2,r3,r2
  810658:	1001703a 	wrctl	status,r2
  
  return context;
  81065c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  810660:	e0bffc15 	stw	r2,-16(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
  810664:	008020b4 	movhi	r2,130
  810668:	10aa4a04 	addi	r2,r2,-22232
  81066c:	10800017 	ldw	r2,0(r2)
  810670:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
  810674:	008020b4 	movhi	r2,130
  810678:	10aa4a04 	addi	r2,r2,-22232
  81067c:	10800017 	ldw	r2,0(r2)
  810680:	1005003a 	cmpeq	r2,r2,zero
  810684:	1000081e 	bne	r2,zero,8106a8 <OSSemCreate+0x9c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  810688:	008020b4 	movhi	r2,130
  81068c:	10aa4a04 	addi	r2,r2,-22232
  810690:	10800017 	ldw	r2,0(r2)
  810694:	10800117 	ldw	r2,4(r2)
  810698:	1007883a 	mov	r3,r2
  81069c:	008020b4 	movhi	r2,130
  8106a0:	10aa4a04 	addi	r2,r2,-22232
  8106a4:	10c00015 	stw	r3,0(r2)
  8106a8:	e0bffc17 	ldw	r2,-16(fp)
  8106ac:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8106b0:	e0bffa17 	ldw	r2,-24(fp)
  8106b4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
  8106b8:	e0bffd17 	ldw	r2,-12(fp)
  8106bc:	1005003a 	cmpeq	r2,r2,zero
  8106c0:	10000f1e 	bne	r2,zero,810700 <OSSemCreate+0xf4>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
  8106c4:	e0fffd17 	ldw	r3,-12(fp)
  8106c8:	008000c4 	movi	r2,3
  8106cc:	18800005 	stb	r2,0(r3)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
  8106d0:	e0fffd17 	ldw	r3,-12(fp)
  8106d4:	e0bffe0b 	ldhu	r2,-8(fp)
  8106d8:	1880020d 	sth	r2,8(r3)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
  8106dc:	e0bffd17 	ldw	r2,-12(fp)
  8106e0:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
  8106e4:	e0fffd17 	ldw	r3,-12(fp)
  8106e8:	00800fc4 	movi	r2,63
  8106ec:	18800385 	stb	r2,14(r3)
        pevent->OSEventName[1] = OS_ASCII_NUL;
  8106f0:	e0bffd17 	ldw	r2,-12(fp)
  8106f4:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
  8106f8:	e13ffd17 	ldw	r4,-12(fp)
  8106fc:	080c3d00 	call	80c3d0 <OS_EventWaitListInit>
    }
    return (pevent);
  810700:	e0bffd17 	ldw	r2,-12(fp)
  810704:	e0bfff15 	stw	r2,-4(fp)
  810708:	e0bfff17 	ldw	r2,-4(fp)
}
  81070c:	e037883a 	mov	sp,fp
  810710:	dfc00117 	ldw	ra,4(sp)
  810714:	df000017 	ldw	fp,0(sp)
  810718:	dec00204 	addi	sp,sp,8
  81071c:	f800283a 	ret

00810720 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  810720:	defff104 	addi	sp,sp,-60
  810724:	dfc00e15 	stw	ra,56(sp)
  810728:	df000d15 	stw	fp,52(sp)
  81072c:	df000d04 	addi	fp,sp,52
  810730:	e13ffb15 	stw	r4,-20(fp)
  810734:	e1bffd15 	stw	r6,-12(fp)
  810738:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  81073c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  810740:	e0bffd17 	ldw	r2,-12(fp)
  810744:	1004c03a 	cmpne	r2,r2,zero
  810748:	1000031e 	bne	r2,zero,810758 <OSSemDel+0x38>
        return (pevent);
  81074c:	e0bffb17 	ldw	r2,-20(fp)
  810750:	e0bfff15 	stw	r2,-4(fp)
  810754:	00009406 	br	8109a8 <OSSemDel+0x288>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  810758:	e0bffb17 	ldw	r2,-20(fp)
  81075c:	1004c03a 	cmpne	r2,r2,zero
  810760:	1000061e 	bne	r2,zero,81077c <OSSemDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
  810764:	e0fffd17 	ldw	r3,-12(fp)
  810768:	00800104 	movi	r2,4
  81076c:	18800005 	stb	r2,0(r3)
        return (pevent);
  810770:	e0fffb17 	ldw	r3,-20(fp)
  810774:	e0ffff15 	stw	r3,-4(fp)
  810778:	00008b06 	br	8109a8 <OSSemDel+0x288>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  81077c:	e0bffb17 	ldw	r2,-20(fp)
  810780:	10800003 	ldbu	r2,0(r2)
  810784:	10803fcc 	andi	r2,r2,255
  810788:	108000e0 	cmpeqi	r2,r2,3
  81078c:	1000061e 	bne	r2,zero,8107a8 <OSSemDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
  810790:	e0fffd17 	ldw	r3,-12(fp)
  810794:	00800044 	movi	r2,1
  810798:	18800005 	stb	r2,0(r3)
        return (pevent);
  81079c:	e0bffb17 	ldw	r2,-20(fp)
  8107a0:	e0bfff15 	stw	r2,-4(fp)
  8107a4:	00008006 	br	8109a8 <OSSemDel+0x288>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  8107a8:	008020b4 	movhi	r2,130
  8107ac:	10aa4b04 	addi	r2,r2,-22228
  8107b0:	10800003 	ldbu	r2,0(r2)
  8107b4:	10803fcc 	andi	r2,r2,255
  8107b8:	1005003a 	cmpeq	r2,r2,zero
  8107bc:	1000061e 	bne	r2,zero,8107d8 <OSSemDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
  8107c0:	e0fffd17 	ldw	r3,-12(fp)
  8107c4:	008003c4 	movi	r2,15
  8107c8:	18800005 	stb	r2,0(r3)
        return (pevent);
  8107cc:	e0fffb17 	ldw	r3,-20(fp)
  8107d0:	e0ffff15 	stw	r3,-4(fp)
  8107d4:	00007406 	br	8109a8 <OSSemDel+0x288>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8107d8:	0005303a 	rdctl	r2,status
  8107dc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8107e0:	e0fff717 	ldw	r3,-36(fp)
  8107e4:	00bfff84 	movi	r2,-2
  8107e8:	1884703a 	and	r2,r3,r2
  8107ec:	1001703a 	wrctl	status,r2
  
  return context;
  8107f0:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  8107f4:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
  8107f8:	e0bffb17 	ldw	r2,-20(fp)
  8107fc:	10800283 	ldbu	r2,10(r2)
  810800:	10803fcc 	andi	r2,r2,255
  810804:	1005003a 	cmpeq	r2,r2,zero
  810808:	1000031e 	bne	r2,zero,810818 <OSSemDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  81080c:	00800044 	movi	r2,1
  810810:	e0bffa05 	stb	r2,-24(fp)
  810814:	00000106 	br	81081c <OSSemDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  810818:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  81081c:	e0bffc03 	ldbu	r2,-16(fp)
  810820:	e0bffe15 	stw	r2,-8(fp)
  810824:	e0fffe17 	ldw	r3,-8(fp)
  810828:	1805003a 	cmpeq	r2,r3,zero
  81082c:	1000041e 	bne	r2,zero,810840 <OSSemDel+0x120>
  810830:	e0fffe17 	ldw	r3,-8(fp)
  810834:	18800060 	cmpeqi	r2,r3,1
  810838:	10002d1e 	bne	r2,zero,8108f0 <OSSemDel+0x1d0>
  81083c:	00004f06 	br	81097c <OSSemDel+0x25c>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
  810840:	e0bffa03 	ldbu	r2,-24(fp)
  810844:	1004c03a 	cmpne	r2,r2,zero
  810848:	10001a1e 	bne	r2,zero,8108b4 <OSSemDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  81084c:	e0fffb17 	ldw	r3,-20(fp)
  810850:	00800fc4 	movi	r2,63
  810854:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  810858:	e0bffb17 	ldw	r2,-20(fp)
  81085c:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  810860:	e0bffb17 	ldw	r2,-20(fp)
  810864:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  810868:	008020b4 	movhi	r2,130
  81086c:	10aa4a04 	addi	r2,r2,-22232
  810870:	10c00017 	ldw	r3,0(r2)
  810874:	e0bffb17 	ldw	r2,-20(fp)
  810878:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  81087c:	e0bffb17 	ldw	r2,-20(fp)
  810880:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  810884:	00c020b4 	movhi	r3,130
  810888:	18ea4a04 	addi	r3,r3,-22232
  81088c:	e0bffb17 	ldw	r2,-20(fp)
  810890:	18800015 	stw	r2,0(r3)
  810894:	e0bff817 	ldw	r2,-32(fp)
  810898:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81089c:	e0bff617 	ldw	r2,-40(fp)
  8108a0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  8108a4:	e0bffd17 	ldw	r2,-12(fp)
  8108a8:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
  8108ac:	e03ff915 	stw	zero,-28(fp)
  8108b0:	00003b06 	br	8109a0 <OSSemDel+0x280>
  8108b4:	e0bff817 	ldw	r2,-32(fp)
  8108b8:	e0bff515 	stw	r2,-44(fp)
  8108bc:	e0bff517 	ldw	r2,-44(fp)
  8108c0:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  8108c4:	e0fffd17 	ldw	r3,-12(fp)
  8108c8:	00801244 	movi	r2,73
  8108cc:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
  8108d0:	e0bffb17 	ldw	r2,-20(fp)
  8108d4:	e0bff915 	stw	r2,-28(fp)
             }
             break;
  8108d8:	00003106 	br	8109a0 <OSSemDel+0x280>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  8108dc:	e13ffb17 	ldw	r4,-20(fp)
  8108e0:	000b883a 	mov	r5,zero
  8108e4:	01800044 	movi	r6,1
  8108e8:	000f883a 	mov	r7,zero
  8108ec:	080be1c0 	call	80be1c <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
  8108f0:	e0bffb17 	ldw	r2,-20(fp)
  8108f4:	10800283 	ldbu	r2,10(r2)
  8108f8:	10803fcc 	andi	r2,r2,255
  8108fc:	1004c03a 	cmpne	r2,r2,zero
  810900:	103ff61e 	bne	r2,zero,8108dc <OSSemDel+0x1bc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  810904:	e0fffb17 	ldw	r3,-20(fp)
  810908:	00800fc4 	movi	r2,63
  81090c:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  810910:	e0bffb17 	ldw	r2,-20(fp)
  810914:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  810918:	e0bffb17 	ldw	r2,-20(fp)
  81091c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  810920:	008020b4 	movhi	r2,130
  810924:	10aa4a04 	addi	r2,r2,-22232
  810928:	10c00017 	ldw	r3,0(r2)
  81092c:	e0bffb17 	ldw	r2,-20(fp)
  810930:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  810934:	e0bffb17 	ldw	r2,-20(fp)
  810938:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  81093c:	00c020b4 	movhi	r3,130
  810940:	18ea4a04 	addi	r3,r3,-22232
  810944:	e0bffb17 	ldw	r2,-20(fp)
  810948:	18800015 	stw	r2,0(r3)
  81094c:	e0bff817 	ldw	r2,-32(fp)
  810950:	e0bff415 	stw	r2,-48(fp)
  810954:	e0bff417 	ldw	r2,-48(fp)
  810958:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  81095c:	e0bffa03 	ldbu	r2,-24(fp)
  810960:	10800058 	cmpnei	r2,r2,1
  810964:	1000011e 	bne	r2,zero,81096c <OSSemDel+0x24c>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  810968:	080c85c0 	call	80c85c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  81096c:	e0bffd17 	ldw	r2,-12(fp)
  810970:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
  810974:	e03ff915 	stw	zero,-28(fp)
             break;
  810978:	00000906 	br	8109a0 <OSSemDel+0x280>
  81097c:	e0bff817 	ldw	r2,-32(fp)
  810980:	e0bff315 	stw	r2,-52(fp)
  810984:	e0bff317 	ldw	r2,-52(fp)
  810988:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  81098c:	e0fffd17 	ldw	r3,-12(fp)
  810990:	008001c4 	movi	r2,7
  810994:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
  810998:	e0bffb17 	ldw	r2,-20(fp)
  81099c:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
  8109a0:	e0bff917 	ldw	r2,-28(fp)
  8109a4:	e0bfff15 	stw	r2,-4(fp)
  8109a8:	e0bfff17 	ldw	r2,-4(fp)
}
  8109ac:	e037883a 	mov	sp,fp
  8109b0:	dfc00117 	ldw	ra,4(sp)
  8109b4:	df000017 	ldw	fp,0(sp)
  8109b8:	dec00204 	addi	sp,sp,8
  8109bc:	f800283a 	ret

008109c0 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  8109c0:	defff404 	addi	sp,sp,-48
  8109c4:	dfc00b15 	stw	ra,44(sp)
  8109c8:	df000a15 	stw	fp,40(sp)
  8109cc:	df000a04 	addi	fp,sp,40
  8109d0:	e13ffc15 	stw	r4,-16(fp)
  8109d4:	e1bffe15 	stw	r6,-8(fp)
  8109d8:	e17ffd0d 	sth	r5,-12(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8109dc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  8109e0:	e0bffe17 	ldw	r2,-8(fp)
  8109e4:	1005003a 	cmpeq	r2,r2,zero
  8109e8:	10008f1e 	bne	r2,zero,810c28 <OSSemPend+0x268>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  8109ec:	e0bffc17 	ldw	r2,-16(fp)
  8109f0:	1004c03a 	cmpne	r2,r2,zero
  8109f4:	1000041e 	bne	r2,zero,810a08 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
  8109f8:	e0fffe17 	ldw	r3,-8(fp)
  8109fc:	00800104 	movi	r2,4
  810a00:	18800005 	stb	r2,0(r3)
        return;
  810a04:	00008806 	br	810c28 <OSSemPend+0x268>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  810a08:	e0bffc17 	ldw	r2,-16(fp)
  810a0c:	10800003 	ldbu	r2,0(r2)
  810a10:	10803fcc 	andi	r2,r2,255
  810a14:	108000e0 	cmpeqi	r2,r2,3
  810a18:	1000041e 	bne	r2,zero,810a2c <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
  810a1c:	e0fffe17 	ldw	r3,-8(fp)
  810a20:	00800044 	movi	r2,1
  810a24:	18800005 	stb	r2,0(r3)
        return;
  810a28:	00007f06 	br	810c28 <OSSemPend+0x268>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
  810a2c:	008020b4 	movhi	r2,130
  810a30:	10aa4b04 	addi	r2,r2,-22228
  810a34:	10800003 	ldbu	r2,0(r2)
  810a38:	10803fcc 	andi	r2,r2,255
  810a3c:	1005003a 	cmpeq	r2,r2,zero
  810a40:	1000041e 	bne	r2,zero,810a54 <OSSemPend+0x94>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
  810a44:	e0fffe17 	ldw	r3,-8(fp)
  810a48:	00800084 	movi	r2,2
  810a4c:	18800005 	stb	r2,0(r3)
        return;
  810a50:	00007506 	br	810c28 <OSSemPend+0x268>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
  810a54:	008020b4 	movhi	r2,130
  810a58:	10aa3d04 	addi	r2,r2,-22284
  810a5c:	10800003 	ldbu	r2,0(r2)
  810a60:	10803fcc 	andi	r2,r2,255
  810a64:	1005003a 	cmpeq	r2,r2,zero
  810a68:	1000041e 	bne	r2,zero,810a7c <OSSemPend+0xbc>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
  810a6c:	e0fffe17 	ldw	r3,-8(fp)
  810a70:	00800344 	movi	r2,13
  810a74:	18800005 	stb	r2,0(r3)
        return;
  810a78:	00006b06 	br	810c28 <OSSemPend+0x268>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810a7c:	0005303a 	rdctl	r2,status
  810a80:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810a84:	e0fffa17 	ldw	r3,-24(fp)
  810a88:	00bfff84 	movi	r2,-2
  810a8c:	1884703a 	and	r2,r3,r2
  810a90:	1001703a 	wrctl	status,r2
  
  return context;
  810a94:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  810a98:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
  810a9c:	e0bffc17 	ldw	r2,-16(fp)
  810aa0:	1080020b 	ldhu	r2,8(r2)
  810aa4:	10bfffcc 	andi	r2,r2,65535
  810aa8:	1005003a 	cmpeq	r2,r2,zero
  810aac:	10000d1e 	bne	r2,zero,810ae4 <OSSemPend+0x124>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
  810ab0:	e0bffc17 	ldw	r2,-16(fp)
  810ab4:	1080020b 	ldhu	r2,8(r2)
  810ab8:	10bfffc4 	addi	r2,r2,-1
  810abc:	1007883a 	mov	r3,r2
  810ac0:	e0bffc17 	ldw	r2,-16(fp)
  810ac4:	10c0020d 	sth	r3,8(r2)
  810ac8:	e0bffb17 	ldw	r2,-20(fp)
  810acc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810ad0:	e0bff917 	ldw	r2,-28(fp)
  810ad4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  810ad8:	e0bffe17 	ldw	r2,-8(fp)
  810adc:	10000005 	stb	zero,0(r2)
        return;
  810ae0:	00005106 	br	810c28 <OSSemPend+0x268>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
  810ae4:	008020b4 	movhi	r2,130
  810ae8:	10aa4c04 	addi	r2,r2,-22224
  810aec:	10c00017 	ldw	r3,0(r2)
  810af0:	008020b4 	movhi	r2,130
  810af4:	10aa4c04 	addi	r2,r2,-22224
  810af8:	10800017 	ldw	r2,0(r2)
  810afc:	10800c03 	ldbu	r2,48(r2)
  810b00:	10800054 	ori	r2,r2,1
  810b04:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  810b08:	008020b4 	movhi	r2,130
  810b0c:	10aa4c04 	addi	r2,r2,-22224
  810b10:	10800017 	ldw	r2,0(r2)
  810b14:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
  810b18:	008020b4 	movhi	r2,130
  810b1c:	10aa4c04 	addi	r2,r2,-22224
  810b20:	10c00017 	ldw	r3,0(r2)
  810b24:	e0bffd0b 	ldhu	r2,-12(fp)
  810b28:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
  810b2c:	e13ffc17 	ldw	r4,-16(fp)
  810b30:	080bfb00 	call	80bfb0 <OS_EventTaskWait>
  810b34:	e0bffb17 	ldw	r2,-20(fp)
  810b38:	e0bff815 	stw	r2,-32(fp)
  810b3c:	e0bff817 	ldw	r2,-32(fp)
  810b40:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
  810b44:	080c85c0 	call	80c85c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810b48:	0005303a 	rdctl	r2,status
  810b4c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810b50:	e0fff717 	ldw	r3,-36(fp)
  810b54:	00bfff84 	movi	r2,-2
  810b58:	1884703a 	and	r2,r3,r2
  810b5c:	1001703a 	wrctl	status,r2
  
  return context;
  810b60:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  810b64:	e0bffb15 	stw	r2,-20(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  810b68:	008020b4 	movhi	r2,130
  810b6c:	10aa4c04 	addi	r2,r2,-22224
  810b70:	10800017 	ldw	r2,0(r2)
  810b74:	10800c43 	ldbu	r2,49(r2)
  810b78:	10803fcc 	andi	r2,r2,255
  810b7c:	e0bfff15 	stw	r2,-4(fp)
  810b80:	e0ffff17 	ldw	r3,-4(fp)
  810b84:	1805003a 	cmpeq	r2,r3,zero
  810b88:	1000041e 	bne	r2,zero,810b9c <OSSemPend+0x1dc>
  810b8c:	e0ffff17 	ldw	r3,-4(fp)
  810b90:	188000a0 	cmpeqi	r2,r3,2
  810b94:	1000041e 	bne	r2,zero,810ba8 <OSSemPend+0x1e8>
  810b98:	00000706 	br	810bb8 <OSSemPend+0x1f8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
  810b9c:	e0bffe17 	ldw	r2,-8(fp)
  810ba0:	10000005 	stb	zero,0(r2)
             break;
  810ba4:	00000c06 	br	810bd8 <OSSemPend+0x218>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  810ba8:	e0fffe17 	ldw	r3,-8(fp)
  810bac:	00800384 	movi	r2,14
  810bb0:	18800005 	stb	r2,0(r3)
             break;
  810bb4:	00000806 	br	810bd8 <OSSemPend+0x218>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
  810bb8:	008020b4 	movhi	r2,130
  810bbc:	10aa4c04 	addi	r2,r2,-22224
  810bc0:	11000017 	ldw	r4,0(r2)
  810bc4:	e17ffc17 	ldw	r5,-16(fp)
  810bc8:	080c2140 	call	80c214 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  810bcc:	e0fffe17 	ldw	r3,-8(fp)
  810bd0:	00800284 	movi	r2,10
  810bd4:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  810bd8:	008020b4 	movhi	r2,130
  810bdc:	10aa4c04 	addi	r2,r2,-22224
  810be0:	10800017 	ldw	r2,0(r2)
  810be4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  810be8:	008020b4 	movhi	r2,130
  810bec:	10aa4c04 	addi	r2,r2,-22224
  810bf0:	10800017 	ldw	r2,0(r2)
  810bf4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  810bf8:	008020b4 	movhi	r2,130
  810bfc:	10aa4c04 	addi	r2,r2,-22224
  810c00:	10800017 	ldw	r2,0(r2)
  810c04:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  810c08:	008020b4 	movhi	r2,130
  810c0c:	10aa4c04 	addi	r2,r2,-22224
  810c10:	10800017 	ldw	r2,0(r2)
  810c14:	10000815 	stw	zero,32(r2)
  810c18:	e0bffb17 	ldw	r2,-20(fp)
  810c1c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810c20:	e0bff617 	ldw	r2,-40(fp)
  810c24:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
  810c28:	e037883a 	mov	sp,fp
  810c2c:	dfc00117 	ldw	ra,4(sp)
  810c30:	df000017 	ldw	fp,0(sp)
  810c34:	dec00204 	addi	sp,sp,8
  810c38:	f800283a 	ret

00810c3c <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  810c3c:	defff504 	addi	sp,sp,-44
  810c40:	dfc00a15 	stw	ra,40(sp)
  810c44:	df000915 	stw	fp,36(sp)
  810c48:	df000904 	addi	fp,sp,36
  810c4c:	e13ffc15 	stw	r4,-16(fp)
  810c50:	e1bffe15 	stw	r6,-8(fp)
  810c54:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  810c58:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  810c5c:	e0bffe17 	ldw	r2,-8(fp)
  810c60:	1004c03a 	cmpne	r2,r2,zero
  810c64:	1000021e 	bne	r2,zero,810c70 <OSSemPendAbort+0x34>
        return (0);
  810c68:	e03fff15 	stw	zero,-4(fp)
  810c6c:	00004c06 	br	810da0 <OSSemPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  810c70:	e0bffc17 	ldw	r2,-16(fp)
  810c74:	1004c03a 	cmpne	r2,r2,zero
  810c78:	1000051e 	bne	r2,zero,810c90 <OSSemPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  810c7c:	e0fffe17 	ldw	r3,-8(fp)
  810c80:	00800104 	movi	r2,4
  810c84:	18800005 	stb	r2,0(r3)
        return (0);
  810c88:	e03fff15 	stw	zero,-4(fp)
  810c8c:	00004406 	br	810da0 <OSSemPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  810c90:	e0bffc17 	ldw	r2,-16(fp)
  810c94:	10800003 	ldbu	r2,0(r2)
  810c98:	10803fcc 	andi	r2,r2,255
  810c9c:	108000e0 	cmpeqi	r2,r2,3
  810ca0:	1000051e 	bne	r2,zero,810cb8 <OSSemPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  810ca4:	e0fffe17 	ldw	r3,-8(fp)
  810ca8:	00800044 	movi	r2,1
  810cac:	18800005 	stb	r2,0(r3)
        return (0);
  810cb0:	e03fff15 	stw	zero,-4(fp)
  810cb4:	00003a06 	br	810da0 <OSSemPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810cb8:	0005303a 	rdctl	r2,status
  810cbc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810cc0:	e0fff917 	ldw	r3,-28(fp)
  810cc4:	00bfff84 	movi	r2,-2
  810cc8:	1884703a 	and	r2,r3,r2
  810ccc:	1001703a 	wrctl	status,r2
  
  return context;
  810cd0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  810cd4:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
  810cd8:	e0bffc17 	ldw	r2,-16(fp)
  810cdc:	10800283 	ldbu	r2,10(r2)
  810ce0:	10803fcc 	andi	r2,r2,255
  810ce4:	1005003a 	cmpeq	r2,r2,zero
  810ce8:	1000261e 	bne	r2,zero,810d84 <OSSemPendAbort+0x148>
        nbr_tasks = 0;
  810cec:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
  810cf0:	e0bffd03 	ldbu	r2,-12(fp)
  810cf4:	10800060 	cmpeqi	r2,r2,1
  810cf8:	1000091e 	bne	r2,zero,810d20 <OSSemPendAbort+0xe4>
  810cfc:	00000e06 	br	810d38 <OSSemPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  810d00:	e13ffc17 	ldw	r4,-16(fp)
  810d04:	000b883a 	mov	r5,zero
  810d08:	01800044 	movi	r6,1
  810d0c:	01c00084 	movi	r7,2
  810d10:	080be1c0 	call	80be1c <OS_EventTaskRdy>
                     nbr_tasks++;
  810d14:	e0bffb03 	ldbu	r2,-20(fp)
  810d18:	10800044 	addi	r2,r2,1
  810d1c:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
  810d20:	e0bffc17 	ldw	r2,-16(fp)
  810d24:	10800283 	ldbu	r2,10(r2)
  810d28:	10803fcc 	andi	r2,r2,255
  810d2c:	1004c03a 	cmpne	r2,r2,zero
  810d30:	103ff31e 	bne	r2,zero,810d00 <OSSemPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  810d34:	00000806 	br	810d58 <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  810d38:	e13ffc17 	ldw	r4,-16(fp)
  810d3c:	000b883a 	mov	r5,zero
  810d40:	01800044 	movi	r6,1
  810d44:	01c00084 	movi	r7,2
  810d48:	080be1c0 	call	80be1c <OS_EventTaskRdy>
                 nbr_tasks++;
  810d4c:	e0bffb03 	ldbu	r2,-20(fp)
  810d50:	10800044 	addi	r2,r2,1
  810d54:	e0bffb05 	stb	r2,-20(fp)
  810d58:	e0bffa17 	ldw	r2,-24(fp)
  810d5c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810d60:	e0bff817 	ldw	r2,-32(fp)
  810d64:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  810d68:	080c85c0 	call	80c85c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  810d6c:	e0fffe17 	ldw	r3,-8(fp)
  810d70:	00800384 	movi	r2,14
  810d74:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
  810d78:	e0bffb03 	ldbu	r2,-20(fp)
  810d7c:	e0bfff15 	stw	r2,-4(fp)
  810d80:	00000706 	br	810da0 <OSSemPendAbort+0x164>
  810d84:	e0bffa17 	ldw	r2,-24(fp)
  810d88:	e0bff715 	stw	r2,-36(fp)
  810d8c:	e0bff717 	ldw	r2,-36(fp)
  810d90:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  810d94:	e0bffe17 	ldw	r2,-8(fp)
  810d98:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
  810d9c:	e03fff15 	stw	zero,-4(fp)
  810da0:	e0bfff17 	ldw	r2,-4(fp)
}
  810da4:	e037883a 	mov	sp,fp
  810da8:	dfc00117 	ldw	ra,4(sp)
  810dac:	df000017 	ldw	fp,0(sp)
  810db0:	dec00204 	addi	sp,sp,8
  810db4:	f800283a 	ret

00810db8 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
  810db8:	defff704 	addi	sp,sp,-36
  810dbc:	dfc00815 	stw	ra,32(sp)
  810dc0:	df000715 	stw	fp,28(sp)
  810dc4:	df000704 	addi	fp,sp,28
  810dc8:	e13ffe15 	stw	r4,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  810dcc:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  810dd0:	e0bffe17 	ldw	r2,-8(fp)
  810dd4:	1004c03a 	cmpne	r2,r2,zero
  810dd8:	1000031e 	bne	r2,zero,810de8 <OSSemPost+0x30>
        return (OS_ERR_PEVENT_NULL);
  810ddc:	00800104 	movi	r2,4
  810de0:	e0bfff15 	stw	r2,-4(fp)
  810de4:	00003806 	br	810ec8 <OSSemPost+0x110>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  810de8:	e0bffe17 	ldw	r2,-8(fp)
  810dec:	10800003 	ldbu	r2,0(r2)
  810df0:	10803fcc 	andi	r2,r2,255
  810df4:	108000e0 	cmpeqi	r2,r2,3
  810df8:	1000031e 	bne	r2,zero,810e08 <OSSemPost+0x50>
        return (OS_ERR_EVENT_TYPE);
  810dfc:	00800044 	movi	r2,1
  810e00:	e0bfff15 	stw	r2,-4(fp)
  810e04:	00003006 	br	810ec8 <OSSemPost+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810e08:	0005303a 	rdctl	r2,status
  810e0c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810e10:	e0fffc17 	ldw	r3,-16(fp)
  810e14:	00bfff84 	movi	r2,-2
  810e18:	1884703a 	and	r2,r3,r2
  810e1c:	1001703a 	wrctl	status,r2
  
  return context;
  810e20:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  810e24:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
  810e28:	e0bffe17 	ldw	r2,-8(fp)
  810e2c:	10800283 	ldbu	r2,10(r2)
  810e30:	10803fcc 	andi	r2,r2,255
  810e34:	1005003a 	cmpeq	r2,r2,zero
  810e38:	10000c1e 	bne	r2,zero,810e6c <OSSemPost+0xb4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  810e3c:	e13ffe17 	ldw	r4,-8(fp)
  810e40:	000b883a 	mov	r5,zero
  810e44:	01800044 	movi	r6,1
  810e48:	000f883a 	mov	r7,zero
  810e4c:	080be1c0 	call	80be1c <OS_EventTaskRdy>
  810e50:	e0bffd17 	ldw	r2,-12(fp)
  810e54:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810e58:	e0bffb17 	ldw	r2,-20(fp)
  810e5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  810e60:	080c85c0 	call	80c85c <OS_Sched>
        return (OS_ERR_NONE);
  810e64:	e03fff15 	stw	zero,-4(fp)
  810e68:	00001706 	br	810ec8 <OSSemPost+0x110>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
  810e6c:	e0bffe17 	ldw	r2,-8(fp)
  810e70:	1080020b 	ldhu	r2,8(r2)
  810e74:	10ffffcc 	andi	r3,r2,65535
  810e78:	00bfffd4 	movui	r2,65535
  810e7c:	18800c26 	beq	r3,r2,810eb0 <OSSemPost+0xf8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
  810e80:	e0bffe17 	ldw	r2,-8(fp)
  810e84:	1080020b 	ldhu	r2,8(r2)
  810e88:	10800044 	addi	r2,r2,1
  810e8c:	1007883a 	mov	r3,r2
  810e90:	e0bffe17 	ldw	r2,-8(fp)
  810e94:	10c0020d 	sth	r3,8(r2)
  810e98:	e0bffd17 	ldw	r2,-12(fp)
  810e9c:	e0bffa15 	stw	r2,-24(fp)
  810ea0:	e0bffa17 	ldw	r2,-24(fp)
  810ea4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  810ea8:	e03fff15 	stw	zero,-4(fp)
  810eac:	00000606 	br	810ec8 <OSSemPost+0x110>
  810eb0:	e0bffd17 	ldw	r2,-12(fp)
  810eb4:	e0bff915 	stw	r2,-28(fp)
  810eb8:	e0bff917 	ldw	r2,-28(fp)
  810ebc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
  810ec0:	00800c84 	movi	r2,50
  810ec4:	e0bfff15 	stw	r2,-4(fp)
  810ec8:	e0bfff17 	ldw	r2,-4(fp)
}
  810ecc:	e037883a 	mov	sp,fp
  810ed0:	dfc00117 	ldw	ra,4(sp)
  810ed4:	df000017 	ldw	fp,0(sp)
  810ed8:	dec00204 	addi	sp,sp,8
  810edc:	f800283a 	ret

00810ee0 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
  810ee0:	defff604 	addi	sp,sp,-40
  810ee4:	df000915 	stw	fp,36(sp)
  810ee8:	df000904 	addi	fp,sp,36
  810eec:	e13ffd15 	stw	r4,-12(fp)
  810ef0:	e17ffe15 	stw	r5,-8(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  810ef4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  810ef8:	e0bffd17 	ldw	r2,-12(fp)
  810efc:	1004c03a 	cmpne	r2,r2,zero
  810f00:	1000031e 	bne	r2,zero,810f10 <OSSemQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
  810f04:	00800104 	movi	r2,4
  810f08:	e0bfff15 	stw	r2,-4(fp)
  810f0c:	00003b06 	br	810ffc <OSSemQuery+0x11c>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
  810f10:	e0bffe17 	ldw	r2,-8(fp)
  810f14:	1004c03a 	cmpne	r2,r2,zero
  810f18:	1000031e 	bne	r2,zero,810f28 <OSSemQuery+0x48>
        return (OS_ERR_PDATA_NULL);
  810f1c:	00800244 	movi	r2,9
  810f20:	e0bfff15 	stw	r2,-4(fp)
  810f24:	00003506 	br	810ffc <OSSemQuery+0x11c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  810f28:	e0bffd17 	ldw	r2,-12(fp)
  810f2c:	10800003 	ldbu	r2,0(r2)
  810f30:	10803fcc 	andi	r2,r2,255
  810f34:	108000e0 	cmpeqi	r2,r2,3
  810f38:	1000031e 	bne	r2,zero,810f48 <OSSemQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
  810f3c:	00800044 	movi	r2,1
  810f40:	e0bfff15 	stw	r2,-4(fp)
  810f44:	00002d06 	br	810ffc <OSSemQuery+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810f48:	0005303a 	rdctl	r2,status
  810f4c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810f50:	e0fff817 	ldw	r3,-32(fp)
  810f54:	00bfff84 	movi	r2,-2
  810f58:	1884703a 	and	r2,r3,r2
  810f5c:	1001703a 	wrctl	status,r2
  
  return context;
  810f60:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  810f64:	e0bff915 	stw	r2,-28(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
  810f68:	e0bffd17 	ldw	r2,-12(fp)
  810f6c:	10c00283 	ldbu	r3,10(r2)
  810f70:	e0bffe17 	ldw	r2,-8(fp)
  810f74:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
  810f78:	e0bffd17 	ldw	r2,-12(fp)
  810f7c:	108002c4 	addi	r2,r2,11
  810f80:	e0bffc15 	stw	r2,-16(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
  810f84:	e0bffe17 	ldw	r2,-8(fp)
  810f88:	10800084 	addi	r2,r2,2
  810f8c:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  810f90:	e03ffa05 	stb	zero,-24(fp)
  810f94:	00000d06 	br	810fcc <OSSemQuery+0xec>
        *pdest++ = *psrc++;
  810f98:	e0bffc17 	ldw	r2,-16(fp)
  810f9c:	10c00003 	ldbu	r3,0(r2)
  810fa0:	e0bffb17 	ldw	r2,-20(fp)
  810fa4:	10c00005 	stb	r3,0(r2)
  810fa8:	e0bffb17 	ldw	r2,-20(fp)
  810fac:	10800044 	addi	r2,r2,1
  810fb0:	e0bffb15 	stw	r2,-20(fp)
  810fb4:	e0bffc17 	ldw	r2,-16(fp)
  810fb8:	10800044 	addi	r2,r2,1
  810fbc:	e0bffc15 	stw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  810fc0:	e0bffa03 	ldbu	r2,-24(fp)
  810fc4:	10800044 	addi	r2,r2,1
  810fc8:	e0bffa05 	stb	r2,-24(fp)
  810fcc:	e0bffa03 	ldbu	r2,-24(fp)
  810fd0:	108000f0 	cmpltui	r2,r2,3
  810fd4:	103ff01e 	bne	r2,zero,810f98 <OSSemQuery+0xb8>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
  810fd8:	e0bffd17 	ldw	r2,-12(fp)
  810fdc:	10c0020b 	ldhu	r3,8(r2)
  810fe0:	e0bffe17 	ldw	r2,-8(fp)
  810fe4:	10c0000d 	sth	r3,0(r2)
  810fe8:	e0bff917 	ldw	r2,-28(fp)
  810fec:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810ff0:	e0bff717 	ldw	r2,-36(fp)
  810ff4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  810ff8:	e03fff15 	stw	zero,-4(fp)
  810ffc:	e0bfff17 	ldw	r2,-4(fp)
}
  811000:	e037883a 	mov	sp,fp
  811004:	df000017 	ldw	fp,0(sp)
  811008:	dec00104 	addi	sp,sp,4
  81100c:	f800283a 	ret

00811010 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
  811010:	defff904 	addi	sp,sp,-28
  811014:	df000615 	stw	fp,24(sp)
  811018:	df000604 	addi	fp,sp,24
  81101c:	e13ffd15 	stw	r4,-12(fp)
  811020:	e1bfff15 	stw	r6,-4(fp)
  811024:	e17ffe0d 	sth	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  811028:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  81102c:	e0bfff17 	ldw	r2,-4(fp)
  811030:	1005003a 	cmpeq	r2,r2,zero
  811034:	1000331e 	bne	r2,zero,811104 <OSSemSet+0xf4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  811038:	e0bffd17 	ldw	r2,-12(fp)
  81103c:	1004c03a 	cmpne	r2,r2,zero
  811040:	1000041e 	bne	r2,zero,811054 <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
  811044:	e0ffff17 	ldw	r3,-4(fp)
  811048:	00800104 	movi	r2,4
  81104c:	18800005 	stb	r2,0(r3)
        return;
  811050:	00002c06 	br	811104 <OSSemSet+0xf4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  811054:	e0bffd17 	ldw	r2,-12(fp)
  811058:	10800003 	ldbu	r2,0(r2)
  81105c:	10803fcc 	andi	r2,r2,255
  811060:	108000e0 	cmpeqi	r2,r2,3
  811064:	1000041e 	bne	r2,zero,811078 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
  811068:	e0ffff17 	ldw	r3,-4(fp)
  81106c:	00800044 	movi	r2,1
  811070:	18800005 	stb	r2,0(r3)
        return;
  811074:	00002306 	br	811104 <OSSemSet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811078:	0005303a 	rdctl	r2,status
  81107c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811080:	e0fffb17 	ldw	r3,-20(fp)
  811084:	00bfff84 	movi	r2,-2
  811088:	1884703a 	and	r2,r3,r2
  81108c:	1001703a 	wrctl	status,r2
  
  return context;
  811090:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  811094:	e0bffc15 	stw	r2,-16(fp)
    *perr = OS_ERR_NONE;
  811098:	e0bfff17 	ldw	r2,-4(fp)
  81109c:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
  8110a0:	e0bffd17 	ldw	r2,-12(fp)
  8110a4:	1080020b 	ldhu	r2,8(r2)
  8110a8:	10bfffcc 	andi	r2,r2,65535
  8110ac:	1005003a 	cmpeq	r2,r2,zero
  8110b0:	1000041e 	bne	r2,zero,8110c4 <OSSemSet+0xb4>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
  8110b4:	e0fffd17 	ldw	r3,-12(fp)
  8110b8:	e0bffe0b 	ldhu	r2,-8(fp)
  8110bc:	1880020d 	sth	r2,8(r3)
  8110c0:	00000c06 	br	8110f4 <OSSemSet+0xe4>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
  8110c4:	e0bffd17 	ldw	r2,-12(fp)
  8110c8:	10800283 	ldbu	r2,10(r2)
  8110cc:	10803fcc 	andi	r2,r2,255
  8110d0:	1004c03a 	cmpne	r2,r2,zero
  8110d4:	1000041e 	bne	r2,zero,8110e8 <OSSemSet+0xd8>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
  8110d8:	e0fffd17 	ldw	r3,-12(fp)
  8110dc:	e0bffe0b 	ldhu	r2,-8(fp)
  8110e0:	1880020d 	sth	r2,8(r3)
  8110e4:	00000306 	br	8110f4 <OSSemSet+0xe4>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
  8110e8:	e0ffff17 	ldw	r3,-4(fp)
  8110ec:	00801244 	movi	r2,73
  8110f0:	18800005 	stb	r2,0(r3)
  8110f4:	e0bffc17 	ldw	r2,-16(fp)
  8110f8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8110fc:	e0bffa17 	ldw	r2,-24(fp)
  811100:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
  811104:	e037883a 	mov	sp,fp
  811108:	df000017 	ldw	fp,0(sp)
  81110c:	dec00104 	addi	sp,sp,4
  811110:	f800283a 	ret

00811114 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
  811114:	defff004 	addi	sp,sp,-64
  811118:	dfc00f15 	stw	ra,60(sp)
  81111c:	df000e15 	stw	fp,56(sp)
  811120:	df000e04 	addi	fp,sp,56
  811124:	e13ffd05 	stb	r4,-12(fp)
  811128:	e17ffe05 	stb	r5,-8(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
  81112c:	e03ff715 	stw	zero,-36(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
  811130:	e0bffd03 	ldbu	r2,-12(fp)
  811134:	10800530 	cmpltui	r2,r2,20
  811138:	1000061e 	bne	r2,zero,811154 <OSTaskChangePrio+0x40>
        if (oldprio != OS_PRIO_SELF) {
  81113c:	e0bffd03 	ldbu	r2,-12(fp)
  811140:	10803fe0 	cmpeqi	r2,r2,255
  811144:	1000031e 	bne	r2,zero,811154 <OSTaskChangePrio+0x40>
            return (OS_ERR_PRIO_INVALID);
  811148:	00800a84 	movi	r2,42
  81114c:	e0bfff15 	stw	r2,-4(fp)
  811150:	00014706 	br	811670 <OSTaskChangePrio+0x55c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
  811154:	e0bffe03 	ldbu	r2,-8(fp)
  811158:	10800530 	cmpltui	r2,r2,20
  81115c:	1000031e 	bne	r2,zero,81116c <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
  811160:	00800a84 	movi	r2,42
  811164:	e0bfff15 	stw	r2,-4(fp)
  811168:	00014106 	br	811670 <OSTaskChangePrio+0x55c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81116c:	0005303a 	rdctl	r2,status
  811170:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811174:	e0fff617 	ldw	r3,-40(fp)
  811178:	00bfff84 	movi	r2,-2
  81117c:	1884703a 	and	r2,r3,r2
  811180:	1001703a 	wrctl	status,r2
  
  return context;
  811184:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  811188:	e0bff715 	stw	r2,-36(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
  81118c:	e0bffe03 	ldbu	r2,-8(fp)
  811190:	00c020b4 	movhi	r3,130
  811194:	18c6d204 	addi	r3,r3,6984
  811198:	1085883a 	add	r2,r2,r2
  81119c:	1085883a 	add	r2,r2,r2
  8111a0:	10c5883a 	add	r2,r2,r3
  8111a4:	10800017 	ldw	r2,0(r2)
  8111a8:	1005003a 	cmpeq	r2,r2,zero
  8111ac:	1000071e 	bne	r2,zero,8111cc <OSTaskChangePrio+0xb8>
  8111b0:	e0bff717 	ldw	r2,-36(fp)
  8111b4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8111b8:	e0bff517 	ldw	r2,-44(fp)
  8111bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
  8111c0:	00800a04 	movi	r2,40
  8111c4:	e0bfff15 	stw	r2,-4(fp)
  8111c8:	00012906 	br	811670 <OSTaskChangePrio+0x55c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
  8111cc:	e0bffd03 	ldbu	r2,-12(fp)
  8111d0:	10803fd8 	cmpnei	r2,r2,255
  8111d4:	1000051e 	bne	r2,zero,8111ec <OSTaskChangePrio+0xd8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
  8111d8:	008020b4 	movhi	r2,130
  8111dc:	10aa4c04 	addi	r2,r2,-22224
  8111e0:	10800017 	ldw	r2,0(r2)
  8111e4:	10800c83 	ldbu	r2,50(r2)
  8111e8:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
  8111ec:	e0bffd03 	ldbu	r2,-12(fp)
  8111f0:	00c020b4 	movhi	r3,130
  8111f4:	18c6d204 	addi	r3,r3,6984
  8111f8:	1085883a 	add	r2,r2,r2
  8111fc:	1085883a 	add	r2,r2,r2
  811200:	10c5883a 	add	r2,r2,r3
  811204:	10800017 	ldw	r2,0(r2)
  811208:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
  81120c:	e0bffa17 	ldw	r2,-24(fp)
  811210:	1004c03a 	cmpne	r2,r2,zero
  811214:	1000071e 	bne	r2,zero,811234 <OSTaskChangePrio+0x120>
  811218:	e0bff717 	ldw	r2,-36(fp)
  81121c:	e0bff415 	stw	r2,-48(fp)
  811220:	e0bff417 	ldw	r2,-48(fp)
  811224:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
  811228:	00800a44 	movi	r2,41
  81122c:	e0bfff15 	stw	r2,-4(fp)
  811230:	00010f06 	br	811670 <OSTaskChangePrio+0x55c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
  811234:	e0bffa17 	ldw	r2,-24(fp)
  811238:	10800058 	cmpnei	r2,r2,1
  81123c:	1000071e 	bne	r2,zero,81125c <OSTaskChangePrio+0x148>
  811240:	e0bff717 	ldw	r2,-36(fp)
  811244:	e0bff315 	stw	r2,-52(fp)
  811248:	e0bff317 	ldw	r2,-52(fp)
  81124c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
  811250:	008010c4 	movi	r2,67
  811254:	e0bfff15 	stw	r2,-4(fp)
  811258:	00010506 	br	811670 <OSTaskChangePrio+0x55c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
  81125c:	e0bffe03 	ldbu	r2,-8(fp)
  811260:	1004d0fa 	srli	r2,r2,3
  811264:	e0bff985 	stb	r2,-26(fp)
    x_new                 = (INT8U)(newprio & 0x07);
  811268:	e0bffe03 	ldbu	r2,-8(fp)
  81126c:	108001cc 	andi	r2,r2,7
  811270:	e0bff945 	stb	r2,-27(fp)
    bity_new              = (INT8U)(1 << y_new);
  811274:	e0fff983 	ldbu	r3,-26(fp)
  811278:	00800044 	movi	r2,1
  81127c:	10c4983a 	sll	r2,r2,r3
  811280:	e0bff8c5 	stb	r2,-29(fp)
    bitx_new              = (INT8U)(1 << x_new);
  811284:	e0fff943 	ldbu	r3,-27(fp)
  811288:	00800044 	movi	r2,1
  81128c:	10c4983a 	sll	r2,r2,r3
  811290:	e0bff885 	stb	r2,-30(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
  811294:	e0bffd03 	ldbu	r2,-12(fp)
  811298:	00c020b4 	movhi	r3,130
  81129c:	18c6d204 	addi	r3,r3,6984
  8112a0:	1085883a 	add	r2,r2,r2
  8112a4:	1085883a 	add	r2,r2,r2
  8112a8:	10c5883a 	add	r2,r2,r3
  8112ac:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
  8112b0:	e0bffe03 	ldbu	r2,-8(fp)
  8112b4:	00c020b4 	movhi	r3,130
  8112b8:	18c6d204 	addi	r3,r3,6984
  8112bc:	1085883a 	add	r2,r2,r2
  8112c0:	1085883a 	add	r2,r2,r2
  8112c4:	10c7883a 	add	r3,r2,r3
  8112c8:	e0bffa17 	ldw	r2,-24(fp)
  8112cc:	18800015 	stw	r2,0(r3)
    y_old                 =  ptcb->OSTCBY;
  8112d0:	e0bffa17 	ldw	r2,-24(fp)
  8112d4:	10800d03 	ldbu	r2,52(r2)
  8112d8:	e0bff905 	stb	r2,-28(fp)
    bity_old              =  ptcb->OSTCBBitY;
  8112dc:	e0bffa17 	ldw	r2,-24(fp)
  8112e0:	10800d83 	ldbu	r2,54(r2)
  8112e4:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
  8112e8:	e0bffa17 	ldw	r2,-24(fp)
  8112ec:	10800d43 	ldbu	r2,53(r2)
  8112f0:	e0bff805 	stb	r2,-32(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
  8112f4:	e0fff903 	ldbu	r3,-28(fp)
  8112f8:	008020b4 	movhi	r2,130
  8112fc:	10aa4944 	addi	r2,r2,-22235
  811300:	10c5883a 	add	r2,r2,r3
  811304:	10c00003 	ldbu	r3,0(r2)
  811308:	e0bff803 	ldbu	r2,-32(fp)
  81130c:	1884703a 	and	r2,r3,r2
  811310:	10803fcc 	andi	r2,r2,255
  811314:	1005003a 	cmpeq	r2,r2,zero
  811318:	1000381e 	bne	r2,zero,8113fc <OSTaskChangePrio+0x2e8>
         OSRdyTbl[y_old] &= ~bitx_old;
  81131c:	e13ff903 	ldbu	r4,-28(fp)
  811320:	e0fff903 	ldbu	r3,-28(fp)
  811324:	008020b4 	movhi	r2,130
  811328:	10aa4944 	addi	r2,r2,-22235
  81132c:	10c5883a 	add	r2,r2,r3
  811330:	10800003 	ldbu	r2,0(r2)
  811334:	1007883a 	mov	r3,r2
  811338:	e0bff803 	ldbu	r2,-32(fp)
  81133c:	0084303a 	nor	r2,zero,r2
  811340:	1884703a 	and	r2,r3,r2
  811344:	1007883a 	mov	r3,r2
  811348:	008020b4 	movhi	r2,130
  81134c:	10aa4944 	addi	r2,r2,-22235
  811350:	1105883a 	add	r2,r2,r4
  811354:	10c00005 	stb	r3,0(r2)
         if (OSRdyTbl[y_old] == 0) {
  811358:	e0fff903 	ldbu	r3,-28(fp)
  81135c:	008020b4 	movhi	r2,130
  811360:	10aa4944 	addi	r2,r2,-22235
  811364:	10c5883a 	add	r2,r2,r3
  811368:	10800003 	ldbu	r2,0(r2)
  81136c:	10803fcc 	andi	r2,r2,255
  811370:	1004c03a 	cmpne	r2,r2,zero
  811374:	10000b1e 	bne	r2,zero,8113a4 <OSTaskChangePrio+0x290>
             OSRdyGrp &= ~bity_old;
  811378:	e0bff843 	ldbu	r2,-31(fp)
  81137c:	0084303a 	nor	r2,zero,r2
  811380:	1007883a 	mov	r3,r2
  811384:	008020b4 	movhi	r2,130
  811388:	10aa4904 	addi	r2,r2,-22236
  81138c:	10800003 	ldbu	r2,0(r2)
  811390:	1884703a 	and	r2,r3,r2
  811394:	1007883a 	mov	r3,r2
  811398:	008020b4 	movhi	r2,130
  81139c:	10aa4904 	addi	r2,r2,-22236
  8113a0:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
  8113a4:	008020b4 	movhi	r2,130
  8113a8:	10aa4904 	addi	r2,r2,-22236
  8113ac:	10c00003 	ldbu	r3,0(r2)
  8113b0:	e0bff8c3 	ldbu	r2,-29(fp)
  8113b4:	1884b03a 	or	r2,r3,r2
  8113b8:	1007883a 	mov	r3,r2
  8113bc:	008020b4 	movhi	r2,130
  8113c0:	10aa4904 	addi	r2,r2,-22236
  8113c4:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
  8113c8:	e13ff983 	ldbu	r4,-26(fp)
  8113cc:	e0fff983 	ldbu	r3,-26(fp)
  8113d0:	008020b4 	movhi	r2,130
  8113d4:	10aa4944 	addi	r2,r2,-22235
  8113d8:	10c5883a 	add	r2,r2,r3
  8113dc:	10c00003 	ldbu	r3,0(r2)
  8113e0:	e0bff883 	ldbu	r2,-30(fp)
  8113e4:	1884b03a 	or	r2,r3,r2
  8113e8:	1007883a 	mov	r3,r2
  8113ec:	008020b4 	movhi	r2,130
  8113f0:	10aa4944 	addi	r2,r2,-22235
  8113f4:	1105883a 	add	r2,r2,r4
  8113f8:	10c00005 	stb	r3,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
  8113fc:	e0bffa17 	ldw	r2,-24(fp)
  811400:	10800717 	ldw	r2,28(r2)
  811404:	e0bffc15 	stw	r2,-16(fp)
    if (pevent != (OS_EVENT *)0) {
  811408:	e0bffc17 	ldw	r2,-16(fp)
  81140c:	1005003a 	cmpeq	r2,r2,zero
  811410:	1000341e 	bne	r2,zero,8114e4 <OSTaskChangePrio+0x3d0>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
  811414:	e13ff903 	ldbu	r4,-28(fp)
  811418:	e0fff903 	ldbu	r3,-28(fp)
  81141c:	e0bffc17 	ldw	r2,-16(fp)
  811420:	1885883a 	add	r2,r3,r2
  811424:	10800204 	addi	r2,r2,8
  811428:	108000c3 	ldbu	r2,3(r2)
  81142c:	1007883a 	mov	r3,r2
  811430:	e0bff803 	ldbu	r2,-32(fp)
  811434:	0084303a 	nor	r2,zero,r2
  811438:	1884703a 	and	r2,r3,r2
  81143c:	1007883a 	mov	r3,r2
  811440:	e0bffc17 	ldw	r2,-16(fp)
  811444:	2085883a 	add	r2,r4,r2
  811448:	10800204 	addi	r2,r2,8
  81144c:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
  811450:	e0fff903 	ldbu	r3,-28(fp)
  811454:	e0bffc17 	ldw	r2,-16(fp)
  811458:	1885883a 	add	r2,r3,r2
  81145c:	10800204 	addi	r2,r2,8
  811460:	108000c3 	ldbu	r2,3(r2)
  811464:	10803fcc 	andi	r2,r2,255
  811468:	1004c03a 	cmpne	r2,r2,zero
  81146c:	1000091e 	bne	r2,zero,811494 <OSTaskChangePrio+0x380>
            pevent->OSEventGrp    &= ~bity_old;
  811470:	e0bffc17 	ldw	r2,-16(fp)
  811474:	10800283 	ldbu	r2,10(r2)
  811478:	1007883a 	mov	r3,r2
  81147c:	e0bff843 	ldbu	r2,-31(fp)
  811480:	0084303a 	nor	r2,zero,r2
  811484:	1884703a 	and	r2,r3,r2
  811488:	1007883a 	mov	r3,r2
  81148c:	e0bffc17 	ldw	r2,-16(fp)
  811490:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
  811494:	e0bffc17 	ldw	r2,-16(fp)
  811498:	10c00283 	ldbu	r3,10(r2)
  81149c:	e0bff8c3 	ldbu	r2,-29(fp)
  8114a0:	1884b03a 	or	r2,r3,r2
  8114a4:	1007883a 	mov	r3,r2
  8114a8:	e0bffc17 	ldw	r2,-16(fp)
  8114ac:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
  8114b0:	e13ff983 	ldbu	r4,-26(fp)
  8114b4:	e0fff983 	ldbu	r3,-26(fp)
  8114b8:	e0bffc17 	ldw	r2,-16(fp)
  8114bc:	1885883a 	add	r2,r3,r2
  8114c0:	10800204 	addi	r2,r2,8
  8114c4:	10c000c3 	ldbu	r3,3(r2)
  8114c8:	e0bff883 	ldbu	r2,-30(fp)
  8114cc:	1884b03a 	or	r2,r3,r2
  8114d0:	1007883a 	mov	r3,r2
  8114d4:	e0bffc17 	ldw	r2,-16(fp)
  8114d8:	2085883a 	add	r2,r4,r2
  8114dc:	10800204 	addi	r2,r2,8
  8114e0:	10c000c5 	stb	r3,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
  8114e4:	e0bffa17 	ldw	r2,-24(fp)
  8114e8:	10800817 	ldw	r2,32(r2)
  8114ec:	1005003a 	cmpeq	r2,r2,zero
  8114f0:	1000441e 	bne	r2,zero,811604 <OSTaskChangePrio+0x4f0>
        pevents =  ptcb->OSTCBEventMultiPtr;
  8114f4:	e0bffa17 	ldw	r2,-24(fp)
  8114f8:	10800817 	ldw	r2,32(r2)
  8114fc:	e0bffb15 	stw	r2,-20(fp)
        pevent  = *pevents;
  811500:	e0bffb17 	ldw	r2,-20(fp)
  811504:	10800017 	ldw	r2,0(r2)
  811508:	e0bffc15 	stw	r2,-16(fp)
        while (pevent != (OS_EVENT *)0) {
  81150c:	00003a06 	br	8115f8 <OSTaskChangePrio+0x4e4>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
  811510:	e13ff903 	ldbu	r4,-28(fp)
  811514:	e0fff903 	ldbu	r3,-28(fp)
  811518:	e0bffc17 	ldw	r2,-16(fp)
  81151c:	1885883a 	add	r2,r3,r2
  811520:	10800204 	addi	r2,r2,8
  811524:	108000c3 	ldbu	r2,3(r2)
  811528:	1007883a 	mov	r3,r2
  81152c:	e0bff803 	ldbu	r2,-32(fp)
  811530:	0084303a 	nor	r2,zero,r2
  811534:	1884703a 	and	r2,r3,r2
  811538:	1007883a 	mov	r3,r2
  81153c:	e0bffc17 	ldw	r2,-16(fp)
  811540:	2085883a 	add	r2,r4,r2
  811544:	10800204 	addi	r2,r2,8
  811548:	10c000c5 	stb	r3,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
  81154c:	e0fff903 	ldbu	r3,-28(fp)
  811550:	e0bffc17 	ldw	r2,-16(fp)
  811554:	1885883a 	add	r2,r3,r2
  811558:	10800204 	addi	r2,r2,8
  81155c:	108000c3 	ldbu	r2,3(r2)
  811560:	10803fcc 	andi	r2,r2,255
  811564:	1004c03a 	cmpne	r2,r2,zero
  811568:	1000091e 	bne	r2,zero,811590 <OSTaskChangePrio+0x47c>
                pevent->OSEventGrp    &= ~bity_old;
  81156c:	e0bffc17 	ldw	r2,-16(fp)
  811570:	10800283 	ldbu	r2,10(r2)
  811574:	1007883a 	mov	r3,r2
  811578:	e0bff843 	ldbu	r2,-31(fp)
  81157c:	0084303a 	nor	r2,zero,r2
  811580:	1884703a 	and	r2,r3,r2
  811584:	1007883a 	mov	r3,r2
  811588:	e0bffc17 	ldw	r2,-16(fp)
  81158c:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
  811590:	e0bffc17 	ldw	r2,-16(fp)
  811594:	10c00283 	ldbu	r3,10(r2)
  811598:	e0bff8c3 	ldbu	r2,-29(fp)
  81159c:	1884b03a 	or	r2,r3,r2
  8115a0:	1007883a 	mov	r3,r2
  8115a4:	e0bffc17 	ldw	r2,-16(fp)
  8115a8:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
  8115ac:	e13ff983 	ldbu	r4,-26(fp)
  8115b0:	e0fff983 	ldbu	r3,-26(fp)
  8115b4:	e0bffc17 	ldw	r2,-16(fp)
  8115b8:	1885883a 	add	r2,r3,r2
  8115bc:	10800204 	addi	r2,r2,8
  8115c0:	10c000c3 	ldbu	r3,3(r2)
  8115c4:	e0bff883 	ldbu	r2,-30(fp)
  8115c8:	1884b03a 	or	r2,r3,r2
  8115cc:	1007883a 	mov	r3,r2
  8115d0:	e0bffc17 	ldw	r2,-16(fp)
  8115d4:	2085883a 	add	r2,r4,r2
  8115d8:	10800204 	addi	r2,r2,8
  8115dc:	10c000c5 	stb	r3,3(r2)
            pevents++;
  8115e0:	e0bffb17 	ldw	r2,-20(fp)
  8115e4:	10800104 	addi	r2,r2,4
  8115e8:	e0bffb15 	stw	r2,-20(fp)
            pevent                     = *pevents;
  8115ec:	e0bffb17 	ldw	r2,-20(fp)
  8115f0:	10800017 	ldw	r2,0(r2)
  8115f4:	e0bffc15 	stw	r2,-16(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
  8115f8:	e0bffc17 	ldw	r2,-16(fp)
  8115fc:	1004c03a 	cmpne	r2,r2,zero
  811600:	103fc31e 	bne	r2,zero,811510 <OSTaskChangePrio+0x3fc>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
  811604:	e0fffa17 	ldw	r3,-24(fp)
  811608:	e0bffe03 	ldbu	r2,-8(fp)
  81160c:	18800c85 	stb	r2,50(r3)
    ptcb->OSTCBY    = y_new;
  811610:	e0fffa17 	ldw	r3,-24(fp)
  811614:	e0bff983 	ldbu	r2,-26(fp)
  811618:	18800d05 	stb	r2,52(r3)
    ptcb->OSTCBX    = x_new;
  81161c:	e0fffa17 	ldw	r3,-24(fp)
  811620:	e0bff943 	ldbu	r2,-27(fp)
  811624:	18800cc5 	stb	r2,51(r3)
    ptcb->OSTCBBitY = bity_new;
  811628:	e0fffa17 	ldw	r3,-24(fp)
  81162c:	e0bff8c3 	ldbu	r2,-29(fp)
  811630:	18800d85 	stb	r2,54(r3)
    ptcb->OSTCBBitX = bitx_new;
  811634:	e0fffa17 	ldw	r3,-24(fp)
  811638:	e0bff883 	ldbu	r2,-30(fp)
  81163c:	18800d45 	stb	r2,53(r3)
  811640:	e0bff717 	ldw	r2,-36(fp)
  811644:	e0bff215 	stw	r2,-56(fp)
  811648:	e0bff217 	ldw	r2,-56(fp)
  81164c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  811650:	008020b4 	movhi	r2,130
  811654:	10aa3d44 	addi	r2,r2,-22283
  811658:	10800003 	ldbu	r2,0(r2)
  81165c:	10803fcc 	andi	r2,r2,255
  811660:	10800058 	cmpnei	r2,r2,1
  811664:	1000011e 	bne	r2,zero,81166c <OSTaskChangePrio+0x558>
        OS_Sched();                                         /* Find new highest priority task          */
  811668:	080c85c0 	call	80c85c <OS_Sched>
    }
    return (OS_ERR_NONE);
  81166c:	e03fff15 	stw	zero,-4(fp)
  811670:	e0bfff17 	ldw	r2,-4(fp)
}
  811674:	e037883a 	mov	sp,fp
  811678:	dfc00117 	ldw	ra,4(sp)
  81167c:	df000017 	ldw	fp,0(sp)
  811680:	dec00204 	addi	sp,sp,8
  811684:	f800283a 	ret

00811688 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
  811688:	deffed04 	addi	sp,sp,-76
  81168c:	dfc01215 	stw	ra,72(sp)
  811690:	df001115 	stw	fp,68(sp)
  811694:	df001104 	addi	fp,sp,68
  811698:	e13ffb15 	stw	r4,-20(fp)
  81169c:	e17ffc15 	stw	r5,-16(fp)
  8116a0:	e1bffd15 	stw	r6,-12(fp)
  8116a4:	e1fffe05 	stb	r7,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  8116a8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  8116ac:	e0bffe03 	ldbu	r2,-8(fp)
  8116b0:	10800570 	cmpltui	r2,r2,21
  8116b4:	1000031e 	bne	r2,zero,8116c4 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
  8116b8:	00800a84 	movi	r2,42
  8116bc:	e0bfff15 	stw	r2,-4(fp)
  8116c0:	00006006 	br	811844 <OSTaskCreate+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8116c4:	0005303a 	rdctl	r2,status
  8116c8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8116cc:	e0fff717 	ldw	r3,-36(fp)
  8116d0:	00bfff84 	movi	r2,-2
  8116d4:	1884703a 	and	r2,r3,r2
  8116d8:	1001703a 	wrctl	status,r2
  
  return context;
  8116dc:	e0bff717 	ldw	r2,-36(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  8116e0:	e0bff815 	stw	r2,-32(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  8116e4:	008020b4 	movhi	r2,130
  8116e8:	10aa4b04 	addi	r2,r2,-22228
  8116ec:	10800003 	ldbu	r2,0(r2)
  8116f0:	10803fcc 	andi	r2,r2,255
  8116f4:	1005003a 	cmpeq	r2,r2,zero
  8116f8:	1000071e 	bne	r2,zero,811718 <OSTaskCreate+0x90>
  8116fc:	e0bff817 	ldw	r2,-32(fp)
  811700:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811704:	e0bff617 	ldw	r2,-40(fp)
  811708:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  81170c:	00800f04 	movi	r2,60
  811710:	e0bfff15 	stw	r2,-4(fp)
  811714:	00004b06 	br	811844 <OSTaskCreate+0x1bc>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  811718:	e0bffe03 	ldbu	r2,-8(fp)
  81171c:	00c020b4 	movhi	r3,130
  811720:	18c6d204 	addi	r3,r3,6984
  811724:	1085883a 	add	r2,r2,r2
  811728:	1085883a 	add	r2,r2,r2
  81172c:	10c5883a 	add	r2,r2,r3
  811730:	10800017 	ldw	r2,0(r2)
  811734:	1004c03a 	cmpne	r2,r2,zero
  811738:	10003c1e 	bne	r2,zero,81182c <OSTaskCreate+0x1a4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  81173c:	e0bffe03 	ldbu	r2,-8(fp)
  811740:	00c020b4 	movhi	r3,130
  811744:	18c6d204 	addi	r3,r3,6984
  811748:	1085883a 	add	r2,r2,r2
  81174c:	1085883a 	add	r2,r2,r2
  811750:	10c7883a 	add	r3,r2,r3
  811754:	00800044 	movi	r2,1
  811758:	18800015 	stw	r2,0(r3)
  81175c:	e0bff817 	ldw	r2,-32(fp)
  811760:	e0bff515 	stw	r2,-44(fp)
  811764:	e0bff517 	ldw	r2,-44(fp)
  811768:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
  81176c:	e13ffb17 	ldw	r4,-20(fp)
  811770:	e17ffc17 	ldw	r5,-16(fp)
  811774:	e1bffd17 	ldw	r6,-12(fp)
  811778:	000f883a 	mov	r7,zero
  81177c:	08161a00 	call	8161a0 <OSTaskStkInit>
  811780:	e0bffa15 	stw	r2,-24(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
  811784:	e13ffe03 	ldbu	r4,-8(fp)
  811788:	d8000015 	stw	zero,0(sp)
  81178c:	d8000115 	stw	zero,4(sp)
  811790:	d8000215 	stw	zero,8(sp)
  811794:	e17ffa17 	ldw	r5,-24(fp)
  811798:	000d883a 	mov	r6,zero
  81179c:	000f883a 	mov	r7,zero
  8117a0:	080cc640 	call	80cc64 <OS_TCBInit>
  8117a4:	e0bff905 	stb	r2,-28(fp)
        if (err == OS_ERR_NONE) {
  8117a8:	e0bff903 	ldbu	r2,-28(fp)
  8117ac:	1004c03a 	cmpne	r2,r2,zero
  8117b0:	1000081e 	bne	r2,zero,8117d4 <OSTaskCreate+0x14c>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
  8117b4:	008020b4 	movhi	r2,130
  8117b8:	10aa3d44 	addi	r2,r2,-22283
  8117bc:	10800003 	ldbu	r2,0(r2)
  8117c0:	10803fcc 	andi	r2,r2,255
  8117c4:	10800058 	cmpnei	r2,r2,1
  8117c8:	1000151e 	bne	r2,zero,811820 <OSTaskCreate+0x198>
                OS_Sched();
  8117cc:	080c85c0 	call	80c85c <OS_Sched>
  8117d0:	00001306 	br	811820 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8117d4:	0005303a 	rdctl	r2,status
  8117d8:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8117dc:	e0fff417 	ldw	r3,-48(fp)
  8117e0:	00bfff84 	movi	r2,-2
  8117e4:	1884703a 	and	r2,r3,r2
  8117e8:	1001703a 	wrctl	status,r2
  
  return context;
  8117ec:	e0bff417 	ldw	r2,-48(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  8117f0:	e0bff815 	stw	r2,-32(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
  8117f4:	e0bffe03 	ldbu	r2,-8(fp)
  8117f8:	00c020b4 	movhi	r3,130
  8117fc:	18c6d204 	addi	r3,r3,6984
  811800:	1085883a 	add	r2,r2,r2
  811804:	1085883a 	add	r2,r2,r2
  811808:	10c5883a 	add	r2,r2,r3
  81180c:	10000015 	stw	zero,0(r2)
  811810:	e0bff817 	ldw	r2,-32(fp)
  811814:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811818:	e0bff317 	ldw	r2,-52(fp)
  81181c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  811820:	e0bff903 	ldbu	r2,-28(fp)
  811824:	e0bfff15 	stw	r2,-4(fp)
  811828:	00000606 	br	811844 <OSTaskCreate+0x1bc>
  81182c:	e0bff817 	ldw	r2,-32(fp)
  811830:	e0bff215 	stw	r2,-56(fp)
  811834:	e0bff217 	ldw	r2,-56(fp)
  811838:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  81183c:	00800a04 	movi	r2,40
  811840:	e0bfff15 	stw	r2,-4(fp)
  811844:	e0bfff17 	ldw	r2,-4(fp)
}
  811848:	e037883a 	mov	sp,fp
  81184c:	dfc00117 	ldw	ra,4(sp)
  811850:	df000017 	ldw	fp,0(sp)
  811854:	dec00204 	addi	sp,sp,8
  811858:	f800283a 	ret

0081185c <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
  81185c:	deffeb04 	addi	sp,sp,-84
  811860:	dfc01415 	stw	ra,80(sp)
  811864:	df001315 	stw	fp,76(sp)
  811868:	df001304 	addi	fp,sp,76
  81186c:	e13ff915 	stw	r4,-28(fp)
  811870:	e17ffa15 	stw	r5,-24(fp)
  811874:	e1bffb15 	stw	r6,-20(fp)
  811878:	e0800217 	ldw	r2,8(fp)
  81187c:	e0c00617 	ldw	r3,24(fp)
  811880:	e1fffc05 	stb	r7,-16(fp)
  811884:	e0bffd0d 	sth	r2,-12(fp)
  811888:	e0fffe0d 	sth	r3,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  81188c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  811890:	e0bffc03 	ldbu	r2,-16(fp)
  811894:	10800570 	cmpltui	r2,r2,21
  811898:	1000031e 	bne	r2,zero,8118a8 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
  81189c:	00800a84 	movi	r2,42
  8118a0:	e0bfff15 	stw	r2,-4(fp)
  8118a4:	00006706 	br	811a44 <OSTaskCreateExt+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8118a8:	0005303a 	rdctl	r2,status
  8118ac:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8118b0:	e0fff517 	ldw	r3,-44(fp)
  8118b4:	00bfff84 	movi	r2,-2
  8118b8:	1884703a 	and	r2,r3,r2
  8118bc:	1001703a 	wrctl	status,r2
  
  return context;
  8118c0:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  8118c4:	e0bff615 	stw	r2,-40(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  8118c8:	008020b4 	movhi	r2,130
  8118cc:	10aa4b04 	addi	r2,r2,-22228
  8118d0:	10800003 	ldbu	r2,0(r2)
  8118d4:	10803fcc 	andi	r2,r2,255
  8118d8:	1005003a 	cmpeq	r2,r2,zero
  8118dc:	1000071e 	bne	r2,zero,8118fc <OSTaskCreateExt+0xa0>
  8118e0:	e0bff617 	ldw	r2,-40(fp)
  8118e4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8118e8:	e0bff417 	ldw	r2,-48(fp)
  8118ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  8118f0:	00800f04 	movi	r2,60
  8118f4:	e0bfff15 	stw	r2,-4(fp)
  8118f8:	00005206 	br	811a44 <OSTaskCreateExt+0x1e8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  8118fc:	e0bffc03 	ldbu	r2,-16(fp)
  811900:	00c020b4 	movhi	r3,130
  811904:	18c6d204 	addi	r3,r3,6984
  811908:	1085883a 	add	r2,r2,r2
  81190c:	1085883a 	add	r2,r2,r2
  811910:	10c5883a 	add	r2,r2,r3
  811914:	10800017 	ldw	r2,0(r2)
  811918:	1004c03a 	cmpne	r2,r2,zero
  81191c:	1000431e 	bne	r2,zero,811a2c <OSTaskCreateExt+0x1d0>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  811920:	e0bffc03 	ldbu	r2,-16(fp)
  811924:	00c020b4 	movhi	r3,130
  811928:	18c6d204 	addi	r3,r3,6984
  81192c:	1085883a 	add	r2,r2,r2
  811930:	1085883a 	add	r2,r2,r2
  811934:	10c7883a 	add	r3,r2,r3
  811938:	00800044 	movi	r2,1
  81193c:	18800015 	stw	r2,0(r3)
  811940:	e0bff617 	ldw	r2,-40(fp)
  811944:	e0bff315 	stw	r2,-52(fp)
  811948:	e0bff317 	ldw	r2,-52(fp)
  81194c:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
  811950:	e1bffe0b 	ldhu	r6,-8(fp)
  811954:	e1000317 	ldw	r4,12(fp)
  811958:	e1400417 	ldw	r5,16(fp)
  81195c:	0812ad80 	call	812ad8 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
  811960:	e1fffe0b 	ldhu	r7,-8(fp)
  811964:	e13ff917 	ldw	r4,-28(fp)
  811968:	e17ffa17 	ldw	r5,-24(fp)
  81196c:	e1bffb17 	ldw	r6,-20(fp)
  811970:	08161a00 	call	8161a0 <OSTaskStkInit>
  811974:	e0bff815 	stw	r2,-32(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
  811978:	e13ffc03 	ldbu	r4,-16(fp)
  81197c:	e1fffd0b 	ldhu	r7,-12(fp)
  811980:	e0fffe0b 	ldhu	r3,-8(fp)
  811984:	e0800417 	ldw	r2,16(fp)
  811988:	d8800015 	stw	r2,0(sp)
  81198c:	e0800517 	ldw	r2,20(fp)
  811990:	d8800115 	stw	r2,4(sp)
  811994:	d8c00215 	stw	r3,8(sp)
  811998:	e17ff817 	ldw	r5,-32(fp)
  81199c:	e1800317 	ldw	r6,12(fp)
  8119a0:	080cc640 	call	80cc64 <OS_TCBInit>
  8119a4:	e0bff705 	stb	r2,-36(fp)
        if (err == OS_ERR_NONE) {
  8119a8:	e0bff703 	ldbu	r2,-36(fp)
  8119ac:	1004c03a 	cmpne	r2,r2,zero
  8119b0:	1000081e 	bne	r2,zero,8119d4 <OSTaskCreateExt+0x178>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
  8119b4:	008020b4 	movhi	r2,130
  8119b8:	10aa3d44 	addi	r2,r2,-22283
  8119bc:	10800003 	ldbu	r2,0(r2)
  8119c0:	10803fcc 	andi	r2,r2,255
  8119c4:	10800058 	cmpnei	r2,r2,1
  8119c8:	1000151e 	bne	r2,zero,811a20 <OSTaskCreateExt+0x1c4>
                OS_Sched();
  8119cc:	080c85c0 	call	80c85c <OS_Sched>
  8119d0:	00001306 	br	811a20 <OSTaskCreateExt+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8119d4:	0005303a 	rdctl	r2,status
  8119d8:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8119dc:	e0fff217 	ldw	r3,-56(fp)
  8119e0:	00bfff84 	movi	r2,-2
  8119e4:	1884703a 	and	r2,r3,r2
  8119e8:	1001703a 	wrctl	status,r2
  
  return context;
  8119ec:	e0bff217 	ldw	r2,-56(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  8119f0:	e0bff615 	stw	r2,-40(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
  8119f4:	e0bffc03 	ldbu	r2,-16(fp)
  8119f8:	00c020b4 	movhi	r3,130
  8119fc:	18c6d204 	addi	r3,r3,6984
  811a00:	1085883a 	add	r2,r2,r2
  811a04:	1085883a 	add	r2,r2,r2
  811a08:	10c5883a 	add	r2,r2,r3
  811a0c:	10000015 	stw	zero,0(r2)
  811a10:	e0bff617 	ldw	r2,-40(fp)
  811a14:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811a18:	e0bff117 	ldw	r2,-60(fp)
  811a1c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  811a20:	e0bff703 	ldbu	r2,-36(fp)
  811a24:	e0bfff15 	stw	r2,-4(fp)
  811a28:	00000606 	br	811a44 <OSTaskCreateExt+0x1e8>
  811a2c:	e0bff617 	ldw	r2,-40(fp)
  811a30:	e0bff015 	stw	r2,-64(fp)
  811a34:	e0bff017 	ldw	r2,-64(fp)
  811a38:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  811a3c:	00800a04 	movi	r2,40
  811a40:	e0bfff15 	stw	r2,-4(fp)
  811a44:	e0bfff17 	ldw	r2,-4(fp)
}
  811a48:	e037883a 	mov	sp,fp
  811a4c:	dfc00117 	ldw	ra,4(sp)
  811a50:	df000017 	ldw	fp,0(sp)
  811a54:	dec00204 	addi	sp,sp,8
  811a58:	f800283a 	ret

00811a5c <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
  811a5c:	defff304 	addi	sp,sp,-52
  811a60:	dfc00c15 	stw	ra,48(sp)
  811a64:	df000b15 	stw	fp,44(sp)
  811a68:	df000b04 	addi	fp,sp,44
  811a6c:	e13ffe05 	stb	r4,-8(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
  811a70:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
  811a74:	008020b4 	movhi	r2,130
  811a78:	10aa4b04 	addi	r2,r2,-22228
  811a7c:	10800003 	ldbu	r2,0(r2)
  811a80:	10803fcc 	andi	r2,r2,255
  811a84:	1005003a 	cmpeq	r2,r2,zero
  811a88:	1000031e 	bne	r2,zero,811a98 <OSTaskDel+0x3c>
        return (OS_ERR_TASK_DEL_ISR);
  811a8c:	00801004 	movi	r2,64
  811a90:	e0bfff15 	stw	r2,-4(fp)
  811a94:	0000ee06 	br	811e50 <OSTaskDel+0x3f4>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
  811a98:	e0bffe03 	ldbu	r2,-8(fp)
  811a9c:	10800518 	cmpnei	r2,r2,20
  811aa0:	1000031e 	bne	r2,zero,811ab0 <OSTaskDel+0x54>
        return (OS_ERR_TASK_DEL_IDLE);
  811aa4:	00800f84 	movi	r2,62
  811aa8:	e0bfff15 	stw	r2,-4(fp)
  811aac:	0000e806 	br	811e50 <OSTaskDel+0x3f4>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
  811ab0:	e0bffe03 	ldbu	r2,-8(fp)
  811ab4:	10800530 	cmpltui	r2,r2,20
  811ab8:	1000061e 	bne	r2,zero,811ad4 <OSTaskDel+0x78>
        if (prio != OS_PRIO_SELF) {
  811abc:	e0bffe03 	ldbu	r2,-8(fp)
  811ac0:	10803fe0 	cmpeqi	r2,r2,255
  811ac4:	1000031e 	bne	r2,zero,811ad4 <OSTaskDel+0x78>
            return (OS_ERR_PRIO_INVALID);
  811ac8:	00800a84 	movi	r2,42
  811acc:	e0bfff15 	stw	r2,-4(fp)
  811ad0:	0000df06 	br	811e50 <OSTaskDel+0x3f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811ad4:	0005303a 	rdctl	r2,status
  811ad8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811adc:	e0fffa17 	ldw	r3,-24(fp)
  811ae0:	00bfff84 	movi	r2,-2
  811ae4:	1884703a 	and	r2,r3,r2
  811ae8:	1001703a 	wrctl	status,r2
  
  return context;
  811aec:	e0bffa17 	ldw	r2,-24(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
  811af0:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
  811af4:	e0bffe03 	ldbu	r2,-8(fp)
  811af8:	10803fd8 	cmpnei	r2,r2,255
  811afc:	1000051e 	bne	r2,zero,811b14 <OSTaskDel+0xb8>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
  811b00:	008020b4 	movhi	r2,130
  811b04:	10aa4c04 	addi	r2,r2,-22224
  811b08:	10800017 	ldw	r2,0(r2)
  811b0c:	10800c83 	ldbu	r2,50(r2)
  811b10:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  811b14:	e0bffe03 	ldbu	r2,-8(fp)
  811b18:	00c020b4 	movhi	r3,130
  811b1c:	18c6d204 	addi	r3,r3,6984
  811b20:	1085883a 	add	r2,r2,r2
  811b24:	1085883a 	add	r2,r2,r2
  811b28:	10c5883a 	add	r2,r2,r3
  811b2c:	10800017 	ldw	r2,0(r2)
  811b30:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
  811b34:	e0bffc17 	ldw	r2,-16(fp)
  811b38:	1004c03a 	cmpne	r2,r2,zero
  811b3c:	1000071e 	bne	r2,zero,811b5c <OSTaskDel+0x100>
  811b40:	e0bffb17 	ldw	r2,-20(fp)
  811b44:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811b48:	e0bff917 	ldw	r2,-28(fp)
  811b4c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  811b50:	008010c4 	movi	r2,67
  811b54:	e0bfff15 	stw	r2,-4(fp)
  811b58:	0000bd06 	br	811e50 <OSTaskDel+0x3f4>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
  811b5c:	e0bffc17 	ldw	r2,-16(fp)
  811b60:	10800058 	cmpnei	r2,r2,1
  811b64:	1000071e 	bne	r2,zero,811b84 <OSTaskDel+0x128>
  811b68:	e0bffb17 	ldw	r2,-20(fp)
  811b6c:	e0bff815 	stw	r2,-32(fp)
  811b70:	e0bff817 	ldw	r2,-32(fp)
  811b74:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  811b78:	00800f44 	movi	r2,61
  811b7c:	e0bfff15 	stw	r2,-4(fp)
  811b80:	0000b306 	br	811e50 <OSTaskDel+0x3f4>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
  811b84:	e0bffc17 	ldw	r2,-16(fp)
  811b88:	10800d03 	ldbu	r2,52(r2)
  811b8c:	11003fcc 	andi	r4,r2,255
  811b90:	e0bffc17 	ldw	r2,-16(fp)
  811b94:	10800d03 	ldbu	r2,52(r2)
  811b98:	10c03fcc 	andi	r3,r2,255
  811b9c:	008020b4 	movhi	r2,130
  811ba0:	10aa4944 	addi	r2,r2,-22235
  811ba4:	10c5883a 	add	r2,r2,r3
  811ba8:	10800003 	ldbu	r2,0(r2)
  811bac:	1007883a 	mov	r3,r2
  811bb0:	e0bffc17 	ldw	r2,-16(fp)
  811bb4:	10800d43 	ldbu	r2,53(r2)
  811bb8:	0084303a 	nor	r2,zero,r2
  811bbc:	1884703a 	and	r2,r3,r2
  811bc0:	1007883a 	mov	r3,r2
  811bc4:	008020b4 	movhi	r2,130
  811bc8:	10aa4944 	addi	r2,r2,-22235
  811bcc:	1105883a 	add	r2,r2,r4
  811bd0:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
  811bd4:	e0bffc17 	ldw	r2,-16(fp)
  811bd8:	10800d03 	ldbu	r2,52(r2)
  811bdc:	10c03fcc 	andi	r3,r2,255
  811be0:	008020b4 	movhi	r2,130
  811be4:	10aa4944 	addi	r2,r2,-22235
  811be8:	10c5883a 	add	r2,r2,r3
  811bec:	10800003 	ldbu	r2,0(r2)
  811bf0:	10803fcc 	andi	r2,r2,255
  811bf4:	1004c03a 	cmpne	r2,r2,zero
  811bf8:	10000c1e 	bne	r2,zero,811c2c <OSTaskDel+0x1d0>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
  811bfc:	e0bffc17 	ldw	r2,-16(fp)
  811c00:	10800d83 	ldbu	r2,54(r2)
  811c04:	0084303a 	nor	r2,zero,r2
  811c08:	1007883a 	mov	r3,r2
  811c0c:	008020b4 	movhi	r2,130
  811c10:	10aa4904 	addi	r2,r2,-22236
  811c14:	10800003 	ldbu	r2,0(r2)
  811c18:	1884703a 	and	r2,r3,r2
  811c1c:	1007883a 	mov	r3,r2
  811c20:	008020b4 	movhi	r2,130
  811c24:	10aa4904 	addi	r2,r2,-22236
  811c28:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
  811c2c:	e0bffc17 	ldw	r2,-16(fp)
  811c30:	10800717 	ldw	r2,28(r2)
  811c34:	1005003a 	cmpeq	r2,r2,zero
  811c38:	1000041e 	bne	r2,zero,811c4c <OSTaskDel+0x1f0>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
  811c3c:	e0bffc17 	ldw	r2,-16(fp)
  811c40:	11400717 	ldw	r5,28(r2)
  811c44:	e13ffc17 	ldw	r4,-16(fp)
  811c48:	080c2140 	call	80c214 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
  811c4c:	e0bffc17 	ldw	r2,-16(fp)
  811c50:	10800817 	ldw	r2,32(r2)
  811c54:	1005003a 	cmpeq	r2,r2,zero
  811c58:	1000041e 	bne	r2,zero,811c6c <OSTaskDel+0x210>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  811c5c:	e0bffc17 	ldw	r2,-16(fp)
  811c60:	11400817 	ldw	r5,32(r2)
  811c64:	e13ffc17 	ldw	r4,-16(fp)
  811c68:	080c2cc0 	call	80c2cc <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
  811c6c:	e0bffc17 	ldw	r2,-16(fp)
  811c70:	10800a17 	ldw	r2,40(r2)
  811c74:	e0bffd15 	stw	r2,-12(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
  811c78:	e0bffd17 	ldw	r2,-12(fp)
  811c7c:	1005003a 	cmpeq	r2,r2,zero
  811c80:	1000021e 	bne	r2,zero,811c8c <OSTaskDel+0x230>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
  811c84:	e13ffd17 	ldw	r4,-12(fp)
  811c88:	080e9600 	call	80e960 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
  811c8c:	e0bffc17 	ldw	r2,-16(fp)
  811c90:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
  811c94:	e0bffc17 	ldw	r2,-16(fp)
  811c98:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  811c9c:	e0bffc17 	ldw	r2,-16(fp)
  811ca0:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
  811ca4:	008020b4 	movhi	r2,130
  811ca8:	10aa3d04 	addi	r2,r2,-22284
  811cac:	10800003 	ldbu	r2,0(r2)
  811cb0:	10803fcc 	andi	r2,r2,255
  811cb4:	10803fe0 	cmpeqi	r2,r2,255
  811cb8:	1000081e 	bne	r2,zero,811cdc <OSTaskDel+0x280>
        OSLockNesting++;
  811cbc:	008020b4 	movhi	r2,130
  811cc0:	10aa3d04 	addi	r2,r2,-22284
  811cc4:	10800003 	ldbu	r2,0(r2)
  811cc8:	10800044 	addi	r2,r2,1
  811ccc:	1007883a 	mov	r3,r2
  811cd0:	008020b4 	movhi	r2,130
  811cd4:	10aa3d04 	addi	r2,r2,-22284
  811cd8:	10c00005 	stb	r3,0(r2)
  811cdc:	e0bffb17 	ldw	r2,-20(fp)
  811ce0:	e0bff715 	stw	r2,-36(fp)
  811ce4:	e0bff717 	ldw	r2,-36(fp)
  811ce8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
  811cec:	080be000 	call	80be00 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811cf0:	0005303a 	rdctl	r2,status
  811cf4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811cf8:	e0fff617 	ldw	r3,-40(fp)
  811cfc:	00bfff84 	movi	r2,-2
  811d00:	1884703a 	and	r2,r3,r2
  811d04:	1001703a 	wrctl	status,r2
  
  return context;
  811d08:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
  811d0c:	e0bffb15 	stw	r2,-20(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
  811d10:	008020b4 	movhi	r2,130
  811d14:	10aa3d04 	addi	r2,r2,-22284
  811d18:	10800003 	ldbu	r2,0(r2)
  811d1c:	10803fcc 	andi	r2,r2,255
  811d20:	1005003a 	cmpeq	r2,r2,zero
  811d24:	1000081e 	bne	r2,zero,811d48 <OSTaskDel+0x2ec>
        OSLockNesting--;
  811d28:	008020b4 	movhi	r2,130
  811d2c:	10aa3d04 	addi	r2,r2,-22284
  811d30:	10800003 	ldbu	r2,0(r2)
  811d34:	10bfffc4 	addi	r2,r2,-1
  811d38:	1007883a 	mov	r3,r2
  811d3c:	008020b4 	movhi	r2,130
  811d40:	10aa3d04 	addi	r2,r2,-22284
  811d44:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
  811d48:	e13ffc17 	ldw	r4,-16(fp)
  811d4c:	08164d00 	call	8164d0 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
  811d50:	008020b4 	movhi	r2,130
  811d54:	10aa4544 	addi	r2,r2,-22251
  811d58:	10800003 	ldbu	r2,0(r2)
  811d5c:	10bfffc4 	addi	r2,r2,-1
  811d60:	1007883a 	mov	r3,r2
  811d64:	008020b4 	movhi	r2,130
  811d68:	10aa4544 	addi	r2,r2,-22251
  811d6c:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
  811d70:	e0bffe03 	ldbu	r2,-8(fp)
  811d74:	00c020b4 	movhi	r3,130
  811d78:	18c6d204 	addi	r3,r3,6984
  811d7c:	1085883a 	add	r2,r2,r2
  811d80:	1085883a 	add	r2,r2,r2
  811d84:	10c5883a 	add	r2,r2,r3
  811d88:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
  811d8c:	e0bffc17 	ldw	r2,-16(fp)
  811d90:	10800617 	ldw	r2,24(r2)
  811d94:	1004c03a 	cmpne	r2,r2,zero
  811d98:	1000091e 	bne	r2,zero,811dc0 <OSTaskDel+0x364>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
  811d9c:	e0bffc17 	ldw	r2,-16(fp)
  811da0:	10800517 	ldw	r2,20(r2)
  811da4:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
  811da8:	e0bffc17 	ldw	r2,-16(fp)
  811dac:	10c00517 	ldw	r3,20(r2)
  811db0:	008020b4 	movhi	r2,130
  811db4:	10aa4004 	addi	r2,r2,-22272
  811db8:	10c00015 	stw	r3,0(r2)
  811dbc:	00000a06 	br	811de8 <OSTaskDel+0x38c>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
  811dc0:	e0bffc17 	ldw	r2,-16(fp)
  811dc4:	10c00617 	ldw	r3,24(r2)
  811dc8:	e0bffc17 	ldw	r2,-16(fp)
  811dcc:	10800517 	ldw	r2,20(r2)
  811dd0:	18800515 	stw	r2,20(r3)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
  811dd4:	e0bffc17 	ldw	r2,-16(fp)
  811dd8:	10c00517 	ldw	r3,20(r2)
  811ddc:	e0bffc17 	ldw	r2,-16(fp)
  811de0:	10800617 	ldw	r2,24(r2)
  811de4:	18800615 	stw	r2,24(r3)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
  811de8:	008020b4 	movhi	r2,130
  811dec:	10aa4404 	addi	r2,r2,-22256
  811df0:	10c00017 	ldw	r3,0(r2)
  811df4:	e0bffc17 	ldw	r2,-16(fp)
  811df8:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
  811dfc:	00c020b4 	movhi	r3,130
  811e00:	18ea4404 	addi	r3,r3,-22256
  811e04:	e0bffc17 	ldw	r2,-16(fp)
  811e08:	18800015 	stw	r2,0(r3)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
  811e0c:	e0fffc17 	ldw	r3,-16(fp)
  811e10:	00800fc4 	movi	r2,63
  811e14:	18801305 	stb	r2,76(r3)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  811e18:	e0bffc17 	ldw	r2,-16(fp)
  811e1c:	10001345 	stb	zero,77(r2)
  811e20:	e0bffb17 	ldw	r2,-20(fp)
  811e24:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811e28:	e0bff517 	ldw	r2,-44(fp)
  811e2c:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  811e30:	008020b4 	movhi	r2,130
  811e34:	10aa3d44 	addi	r2,r2,-22283
  811e38:	10800003 	ldbu	r2,0(r2)
  811e3c:	10803fcc 	andi	r2,r2,255
  811e40:	10800058 	cmpnei	r2,r2,1
  811e44:	1000011e 	bne	r2,zero,811e4c <OSTaskDel+0x3f0>
        OS_Sched();                                     /* Find new highest priority task              */
  811e48:	080c85c0 	call	80c85c <OS_Sched>
    }
    return (OS_ERR_NONE);
  811e4c:	e03fff15 	stw	zero,-4(fp)
  811e50:	e0bfff17 	ldw	r2,-4(fp)
}
  811e54:	e037883a 	mov	sp,fp
  811e58:	dfc00117 	ldw	ra,4(sp)
  811e5c:	df000017 	ldw	fp,0(sp)
  811e60:	dec00204 	addi	sp,sp,8
  811e64:	f800283a 	ret

00811e68 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
  811e68:	defff404 	addi	sp,sp,-48
  811e6c:	df000b15 	stw	fp,44(sp)
  811e70:	df000b04 	addi	fp,sp,44
  811e74:	e13ffe05 	stb	r4,-8(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  811e78:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
  811e7c:	e0bffe03 	ldbu	r2,-8(fp)
  811e80:	10800518 	cmpnei	r2,r2,20
  811e84:	1000031e 	bne	r2,zero,811e94 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
  811e88:	00800f84 	movi	r2,62
  811e8c:	e0bfff15 	stw	r2,-4(fp)
  811e90:	00004c06 	br	811fc4 <OSTaskDelReq+0x15c>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  811e94:	e0bffe03 	ldbu	r2,-8(fp)
  811e98:	10800530 	cmpltui	r2,r2,20
  811e9c:	1000061e 	bne	r2,zero,811eb8 <OSTaskDelReq+0x50>
        if (prio != OS_PRIO_SELF) {
  811ea0:	e0bffe03 	ldbu	r2,-8(fp)
  811ea4:	10803fe0 	cmpeqi	r2,r2,255
  811ea8:	1000031e 	bne	r2,zero,811eb8 <OSTaskDelReq+0x50>
            return (OS_ERR_PRIO_INVALID);
  811eac:	00800a84 	movi	r2,42
  811eb0:	e0bfff15 	stw	r2,-4(fp)
  811eb4:	00004306 	br	811fc4 <OSTaskDelReq+0x15c>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
  811eb8:	e0bffe03 	ldbu	r2,-8(fp)
  811ebc:	10803fd8 	cmpnei	r2,r2,255
  811ec0:	1000141e 	bne	r2,zero,811f14 <OSTaskDelReq+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811ec4:	0005303a 	rdctl	r2,status
  811ec8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811ecc:	e0fffa17 	ldw	r3,-24(fp)
  811ed0:	00bfff84 	movi	r2,-2
  811ed4:	1884703a 	and	r2,r3,r2
  811ed8:	1001703a 	wrctl	status,r2
  
  return context;
  811edc:	e0bffa17 	ldw	r2,-24(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
  811ee0:	e0bffb15 	stw	r2,-20(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
  811ee4:	008020b4 	movhi	r2,130
  811ee8:	10aa4c04 	addi	r2,r2,-22224
  811eec:	10800017 	ldw	r2,0(r2)
  811ef0:	10800dc3 	ldbu	r2,55(r2)
  811ef4:	e0bffd05 	stb	r2,-12(fp)
  811ef8:	e0bffb17 	ldw	r2,-20(fp)
  811efc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811f00:	e0bff917 	ldw	r2,-28(fp)
  811f04:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
  811f08:	e0bffd03 	ldbu	r2,-12(fp)
  811f0c:	e0bfff15 	stw	r2,-4(fp)
  811f10:	00002c06 	br	811fc4 <OSTaskDelReq+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811f14:	0005303a 	rdctl	r2,status
  811f18:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811f1c:	e0fff817 	ldw	r3,-32(fp)
  811f20:	00bfff84 	movi	r2,-2
  811f24:	1884703a 	and	r2,r3,r2
  811f28:	1001703a 	wrctl	status,r2
  
  return context;
  811f2c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  811f30:	e0bffb15 	stw	r2,-20(fp)
    ptcb = OSTCBPrioTbl[prio];
  811f34:	e0bffe03 	ldbu	r2,-8(fp)
  811f38:	00c020b4 	movhi	r3,130
  811f3c:	18c6d204 	addi	r3,r3,6984
  811f40:	1085883a 	add	r2,r2,r2
  811f44:	1085883a 	add	r2,r2,r2
  811f48:	10c5883a 	add	r2,r2,r3
  811f4c:	10800017 	ldw	r2,0(r2)
  811f50:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
  811f54:	e0bffc17 	ldw	r2,-16(fp)
  811f58:	1004c03a 	cmpne	r2,r2,zero
  811f5c:	1000071e 	bne	r2,zero,811f7c <OSTaskDelReq+0x114>
  811f60:	e0bffb17 	ldw	r2,-20(fp)
  811f64:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811f68:	e0bff717 	ldw	r2,-36(fp)
  811f6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
  811f70:	008010c4 	movi	r2,67
  811f74:	e0bfff15 	stw	r2,-4(fp)
  811f78:	00001206 	br	811fc4 <OSTaskDelReq+0x15c>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
  811f7c:	e0bffc17 	ldw	r2,-16(fp)
  811f80:	10800058 	cmpnei	r2,r2,1
  811f84:	1000071e 	bne	r2,zero,811fa4 <OSTaskDelReq+0x13c>
  811f88:	e0bffb17 	ldw	r2,-20(fp)
  811f8c:	e0bff615 	stw	r2,-40(fp)
  811f90:	e0bff617 	ldw	r2,-40(fp)
  811f94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  811f98:	00800f44 	movi	r2,61
  811f9c:	e0bfff15 	stw	r2,-4(fp)
  811fa0:	00000806 	br	811fc4 <OSTaskDelReq+0x15c>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
  811fa4:	e0fffc17 	ldw	r3,-16(fp)
  811fa8:	00800fc4 	movi	r2,63
  811fac:	18800dc5 	stb	r2,55(r3)
  811fb0:	e0bffb17 	ldw	r2,-20(fp)
  811fb4:	e0bff515 	stw	r2,-44(fp)
  811fb8:	e0bff517 	ldw	r2,-44(fp)
  811fbc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  811fc0:	e03fff15 	stw	zero,-4(fp)
  811fc4:	e0bfff17 	ldw	r2,-4(fp)
}
  811fc8:	e037883a 	mov	sp,fp
  811fcc:	df000017 	ldw	fp,0(sp)
  811fd0:	dec00104 	addi	sp,sp,4
  811fd4:	f800283a 	ret

00811fd8 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
  811fd8:	defff304 	addi	sp,sp,-52
  811fdc:	dfc00c15 	stw	ra,48(sp)
  811fe0:	df000b15 	stw	fp,44(sp)
  811fe4:	df000b04 	addi	fp,sp,44
  811fe8:	e17ffd15 	stw	r5,-12(fp)
  811fec:	e1bffe15 	stw	r6,-8(fp)
  811ff0:	e13ffc05 	stb	r4,-16(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
  811ff4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
  811ff8:	e0bffe17 	ldw	r2,-8(fp)
  811ffc:	1004c03a 	cmpne	r2,r2,zero
  812000:	1000021e 	bne	r2,zero,81200c <OSTaskNameGet+0x34>
        return (0);
  812004:	e03fff15 	stw	zero,-4(fp)
  812008:	00005b06 	br	812178 <OSTaskNameGet+0x1a0>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
  81200c:	e0bffc03 	ldbu	r2,-16(fp)
  812010:	10800570 	cmpltui	r2,r2,21
  812014:	1000081e 	bne	r2,zero,812038 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
  812018:	e0bffc03 	ldbu	r2,-16(fp)
  81201c:	10803fe0 	cmpeqi	r2,r2,255
  812020:	1000051e 	bne	r2,zero,812038 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
  812024:	e0fffe17 	ldw	r3,-8(fp)
  812028:	00800a84 	movi	r2,42
  81202c:	18800005 	stb	r2,0(r3)
            return (0);
  812030:	e03fff15 	stw	zero,-4(fp)
  812034:	00005006 	br	812178 <OSTaskNameGet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
  812038:	e0bffd17 	ldw	r2,-12(fp)
  81203c:	1004c03a 	cmpne	r2,r2,zero
  812040:	1000051e 	bne	r2,zero,812058 <OSTaskNameGet+0x80>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
  812044:	e0fffe17 	ldw	r3,-8(fp)
  812048:	00800304 	movi	r2,12
  81204c:	18800005 	stb	r2,0(r3)
        return (0);
  812050:	e03fff15 	stw	zero,-4(fp)
  812054:	00004806 	br	812178 <OSTaskNameGet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
  812058:	008020b4 	movhi	r2,130
  81205c:	10aa4b04 	addi	r2,r2,-22228
  812060:	10800003 	ldbu	r2,0(r2)
  812064:	10803fcc 	andi	r2,r2,255
  812068:	1005003a 	cmpeq	r2,r2,zero
  81206c:	1000051e 	bne	r2,zero,812084 <OSTaskNameGet+0xac>
        *perr = OS_ERR_NAME_GET_ISR;
  812070:	e0fffe17 	ldw	r3,-8(fp)
  812074:	00800444 	movi	r2,17
  812078:	18800005 	stb	r2,0(r3)
        return (0);
  81207c:	e03fff15 	stw	zero,-4(fp)
  812080:	00003d06 	br	812178 <OSTaskNameGet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812084:	0005303a 	rdctl	r2,status
  812088:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81208c:	e0fff817 	ldw	r3,-32(fp)
  812090:	00bfff84 	movi	r2,-2
  812094:	1884703a 	and	r2,r3,r2
  812098:	1001703a 	wrctl	status,r2
  
  return context;
  81209c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  8120a0:	e0bff915 	stw	r2,-28(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
  8120a4:	e0bffc03 	ldbu	r2,-16(fp)
  8120a8:	10803fd8 	cmpnei	r2,r2,255
  8120ac:	1000051e 	bne	r2,zero,8120c4 <OSTaskNameGet+0xec>
        prio = OSTCBCur->OSTCBPrio;
  8120b0:	008020b4 	movhi	r2,130
  8120b4:	10aa4c04 	addi	r2,r2,-22224
  8120b8:	10800017 	ldw	r2,0(r2)
  8120bc:	10800c83 	ldbu	r2,50(r2)
  8120c0:	e0bffc05 	stb	r2,-16(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  8120c4:	e0bffc03 	ldbu	r2,-16(fp)
  8120c8:	00c020b4 	movhi	r3,130
  8120cc:	18c6d204 	addi	r3,r3,6984
  8120d0:	1085883a 	add	r2,r2,r2
  8120d4:	1085883a 	add	r2,r2,r2
  8120d8:	10c5883a 	add	r2,r2,r3
  8120dc:	10800017 	ldw	r2,0(r2)
  8120e0:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
  8120e4:	e0bffb17 	ldw	r2,-20(fp)
  8120e8:	1004c03a 	cmpne	r2,r2,zero
  8120ec:	1000091e 	bne	r2,zero,812114 <OSTaskNameGet+0x13c>
  8120f0:	e0bff917 	ldw	r2,-28(fp)
  8120f4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8120f8:	e0bff717 	ldw	r2,-36(fp)
  8120fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
  812100:	e0fffe17 	ldw	r3,-8(fp)
  812104:	008010c4 	movi	r2,67
  812108:	18800005 	stb	r2,0(r3)
        return (0);
  81210c:	e03fff15 	stw	zero,-4(fp)
  812110:	00001906 	br	812178 <OSTaskNameGet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
  812114:	e0bffb17 	ldw	r2,-20(fp)
  812118:	10800058 	cmpnei	r2,r2,1
  81211c:	1000091e 	bne	r2,zero,812144 <OSTaskNameGet+0x16c>
  812120:	e0bff917 	ldw	r2,-28(fp)
  812124:	e0bff615 	stw	r2,-40(fp)
  812128:	e0bff617 	ldw	r2,-40(fp)
  81212c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
  812130:	e0fffe17 	ldw	r3,-8(fp)
  812134:	008010c4 	movi	r2,67
  812138:	18800005 	stb	r2,0(r3)
        return (0);
  81213c:	e03fff15 	stw	zero,-4(fp)
  812140:	00000d06 	br	812178 <OSTaskNameGet+0x1a0>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
  812144:	e0bffb17 	ldw	r2,-20(fp)
  812148:	11401304 	addi	r5,r2,76
  81214c:	e13ffd17 	ldw	r4,-12(fp)
  812150:	080c9a00 	call	80c9a0 <OS_StrCopy>
  812154:	e0bffa05 	stb	r2,-24(fp)
  812158:	e0bff917 	ldw	r2,-28(fp)
  81215c:	e0bff515 	stw	r2,-44(fp)
  812160:	e0bff517 	ldw	r2,-44(fp)
  812164:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  812168:	e0bffe17 	ldw	r2,-8(fp)
  81216c:	10000005 	stb	zero,0(r2)
    return (len);
  812170:	e0bffa03 	ldbu	r2,-24(fp)
  812174:	e0bfff15 	stw	r2,-4(fp)
  812178:	e0bfff17 	ldw	r2,-4(fp)
}
  81217c:	e037883a 	mov	sp,fp
  812180:	dfc00117 	ldw	ra,4(sp)
  812184:	df000017 	ldw	fp,0(sp)
  812188:	dec00204 	addi	sp,sp,8
  81218c:	f800283a 	ret

00812190 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
  812190:	defff304 	addi	sp,sp,-52
  812194:	dfc00c15 	stw	ra,48(sp)
  812198:	df000b15 	stw	fp,44(sp)
  81219c:	df000b04 	addi	fp,sp,44
  8121a0:	e17ffe15 	stw	r5,-8(fp)
  8121a4:	e1bfff15 	stw	r6,-4(fp)
  8121a8:	e13ffd05 	stb	r4,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  8121ac:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  8121b0:	e0bfff17 	ldw	r2,-4(fp)
  8121b4:	1005003a 	cmpeq	r2,r2,zero
  8121b8:	1000611e 	bne	r2,zero,812340 <OSTaskNameSet+0x1b0>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
  8121bc:	e0bffd03 	ldbu	r2,-12(fp)
  8121c0:	10800570 	cmpltui	r2,r2,21
  8121c4:	1000071e 	bne	r2,zero,8121e4 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
  8121c8:	e0bffd03 	ldbu	r2,-12(fp)
  8121cc:	10803fe0 	cmpeqi	r2,r2,255
  8121d0:	1000041e 	bne	r2,zero,8121e4 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
  8121d4:	e0ffff17 	ldw	r3,-4(fp)
  8121d8:	00800a84 	movi	r2,42
  8121dc:	18800005 	stb	r2,0(r3)
            return;
  8121e0:	00005706 	br	812340 <OSTaskNameSet+0x1b0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
  8121e4:	e0bffe17 	ldw	r2,-8(fp)
  8121e8:	1004c03a 	cmpne	r2,r2,zero
  8121ec:	1000041e 	bne	r2,zero,812200 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
  8121f0:	e0ffff17 	ldw	r3,-4(fp)
  8121f4:	00800304 	movi	r2,12
  8121f8:	18800005 	stb	r2,0(r3)
        return;
  8121fc:	00005006 	br	812340 <OSTaskNameSet+0x1b0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
  812200:	008020b4 	movhi	r2,130
  812204:	10aa4b04 	addi	r2,r2,-22228
  812208:	10800003 	ldbu	r2,0(r2)
  81220c:	10803fcc 	andi	r2,r2,255
  812210:	1005003a 	cmpeq	r2,r2,zero
  812214:	1000041e 	bne	r2,zero,812228 <OSTaskNameSet+0x98>
        *perr = OS_ERR_NAME_SET_ISR;
  812218:	e0ffff17 	ldw	r3,-4(fp)
  81221c:	00800484 	movi	r2,18
  812220:	18800005 	stb	r2,0(r3)
        return;
  812224:	00004606 	br	812340 <OSTaskNameSet+0x1b0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812228:	0005303a 	rdctl	r2,status
  81222c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812230:	e0fff917 	ldw	r3,-28(fp)
  812234:	00bfff84 	movi	r2,-2
  812238:	1884703a 	and	r2,r3,r2
  81223c:	1001703a 	wrctl	status,r2
  
  return context;
  812240:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  812244:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
  812248:	e0bffd03 	ldbu	r2,-12(fp)
  81224c:	10803fd8 	cmpnei	r2,r2,255
  812250:	1000051e 	bne	r2,zero,812268 <OSTaskNameSet+0xd8>
        prio = OSTCBCur->OSTCBPrio;
  812254:	008020b4 	movhi	r2,130
  812258:	10aa4c04 	addi	r2,r2,-22224
  81225c:	10800017 	ldw	r2,0(r2)
  812260:	10800c83 	ldbu	r2,50(r2)
  812264:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  812268:	e0bffd03 	ldbu	r2,-12(fp)
  81226c:	00c020b4 	movhi	r3,130
  812270:	18c6d204 	addi	r3,r3,6984
  812274:	1085883a 	add	r2,r2,r2
  812278:	1085883a 	add	r2,r2,r2
  81227c:	10c5883a 	add	r2,r2,r3
  812280:	10800017 	ldw	r2,0(r2)
  812284:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
  812288:	e0bffb17 	ldw	r2,-20(fp)
  81228c:	1004c03a 	cmpne	r2,r2,zero
  812290:	1000081e 	bne	r2,zero,8122b4 <OSTaskNameSet+0x124>
  812294:	e0bffa17 	ldw	r2,-24(fp)
  812298:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81229c:	e0bff817 	ldw	r2,-32(fp)
  8122a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
  8122a4:	e0ffff17 	ldw	r3,-4(fp)
  8122a8:	008010c4 	movi	r2,67
  8122ac:	18800005 	stb	r2,0(r3)
        return;
  8122b0:	00002306 	br	812340 <OSTaskNameSet+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
  8122b4:	e0bffb17 	ldw	r2,-20(fp)
  8122b8:	10800058 	cmpnei	r2,r2,1
  8122bc:	1000081e 	bne	r2,zero,8122e0 <OSTaskNameSet+0x150>
  8122c0:	e0bffa17 	ldw	r2,-24(fp)
  8122c4:	e0bff715 	stw	r2,-36(fp)
  8122c8:	e0bff717 	ldw	r2,-36(fp)
  8122cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
  8122d0:	e0ffff17 	ldw	r3,-4(fp)
  8122d4:	008010c4 	movi	r2,67
  8122d8:	18800005 	stb	r2,0(r3)
        return;
  8122dc:	00001806 	br	812340 <OSTaskNameSet+0x1b0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
  8122e0:	e13ffe17 	ldw	r4,-8(fp)
  8122e4:	080ca200 	call	80ca20 <OS_StrLen>
  8122e8:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
  8122ec:	e0bffc03 	ldbu	r2,-16(fp)
  8122f0:	10800830 	cmpltui	r2,r2,32
  8122f4:	1000081e 	bne	r2,zero,812318 <OSTaskNameSet+0x188>
  8122f8:	e0bffa17 	ldw	r2,-24(fp)
  8122fc:	e0bff615 	stw	r2,-40(fp)
  812300:	e0bff617 	ldw	r2,-40(fp)
  812304:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
  812308:	e0ffff17 	ldw	r3,-4(fp)
  81230c:	00801044 	movi	r2,65
  812310:	18800005 	stb	r2,0(r3)
        return;
  812314:	00000a06 	br	812340 <OSTaskNameSet+0x1b0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
  812318:	e0bffb17 	ldw	r2,-20(fp)
  81231c:	11001304 	addi	r4,r2,76
  812320:	e17ffe17 	ldw	r5,-8(fp)
  812324:	080c9a00 	call	80c9a0 <OS_StrCopy>
  812328:	e0bffa17 	ldw	r2,-24(fp)
  81232c:	e0bff515 	stw	r2,-44(fp)
  812330:	e0bff517 	ldw	r2,-44(fp)
  812334:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  812338:	e0bfff17 	ldw	r2,-4(fp)
  81233c:	10000005 	stb	zero,0(r2)
}
  812340:	e037883a 	mov	sp,fp
  812344:	dfc00117 	ldw	ra,4(sp)
  812348:	df000017 	ldw	fp,0(sp)
  81234c:	dec00204 	addi	sp,sp,8
  812350:	f800283a 	ret

00812354 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
  812354:	defff304 	addi	sp,sp,-52
  812358:	dfc00c15 	stw	ra,48(sp)
  81235c:	df000b15 	stw	fp,44(sp)
  812360:	df000b04 	addi	fp,sp,44
  812364:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  812368:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
  81236c:	e0bffe03 	ldbu	r2,-8(fp)
  812370:	10800530 	cmpltui	r2,r2,20
  812374:	1000031e 	bne	r2,zero,812384 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  812378:	00800a84 	movi	r2,42
  81237c:	e0bfff15 	stw	r2,-4(fp)
  812380:	00007406 	br	812554 <OSTaskResume+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812384:	0005303a 	rdctl	r2,status
  812388:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81238c:	e0fffb17 	ldw	r3,-20(fp)
  812390:	00bfff84 	movi	r2,-2
  812394:	1884703a 	and	r2,r3,r2
  812398:	1001703a 	wrctl	status,r2
  
  return context;
  81239c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  8123a0:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];
  8123a4:	e0bffe03 	ldbu	r2,-8(fp)
  8123a8:	00c020b4 	movhi	r3,130
  8123ac:	18c6d204 	addi	r3,r3,6984
  8123b0:	1085883a 	add	r2,r2,r2
  8123b4:	1085883a 	add	r2,r2,r2
  8123b8:	10c5883a 	add	r2,r2,r3
  8123bc:	10800017 	ldw	r2,0(r2)
  8123c0:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
  8123c4:	e0bffd17 	ldw	r2,-12(fp)
  8123c8:	1004c03a 	cmpne	r2,r2,zero
  8123cc:	1000071e 	bne	r2,zero,8123ec <OSTaskResume+0x98>
  8123d0:	e0bffc17 	ldw	r2,-16(fp)
  8123d4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8123d8:	e0bffa17 	ldw	r2,-24(fp)
  8123dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
  8123e0:	00801184 	movi	r2,70
  8123e4:	e0bfff15 	stw	r2,-4(fp)
  8123e8:	00005a06 	br	812554 <OSTaskResume+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
  8123ec:	e0bffd17 	ldw	r2,-12(fp)
  8123f0:	10800058 	cmpnei	r2,r2,1
  8123f4:	1000071e 	bne	r2,zero,812414 <OSTaskResume+0xc0>
  8123f8:	e0bffc17 	ldw	r2,-16(fp)
  8123fc:	e0bff915 	stw	r2,-28(fp)
  812400:	e0bff917 	ldw	r2,-28(fp)
  812404:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  812408:	008010c4 	movi	r2,67
  81240c:	e0bfff15 	stw	r2,-4(fp)
  812410:	00005006 	br	812554 <OSTaskResume+0x200>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
  812414:	e0bffd17 	ldw	r2,-12(fp)
  812418:	10800c03 	ldbu	r2,48(r2)
  81241c:	10803fcc 	andi	r2,r2,255
  812420:	1080020c 	andi	r2,r2,8
  812424:	1005003a 	cmpeq	r2,r2,zero
  812428:	1000441e 	bne	r2,zero,81253c <OSTaskResume+0x1e8>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
  81242c:	e0bffd17 	ldw	r2,-12(fp)
  812430:	10c00c03 	ldbu	r3,48(r2)
  812434:	00bffdc4 	movi	r2,-9
  812438:	1884703a 	and	r2,r3,r2
  81243c:	1007883a 	mov	r3,r2
  812440:	e0bffd17 	ldw	r2,-12(fp)
  812444:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
  812448:	e0bffd17 	ldw	r2,-12(fp)
  81244c:	10800c03 	ldbu	r2,48(r2)
  812450:	10803fcc 	andi	r2,r2,255
  812454:	1004c03a 	cmpne	r2,r2,zero
  812458:	1000321e 	bne	r2,zero,812524 <OSTaskResume+0x1d0>
            if (ptcb->OSTCBDly == 0) {
  81245c:	e0bffd17 	ldw	r2,-12(fp)
  812460:	10800b8b 	ldhu	r2,46(r2)
  812464:	10bfffcc 	andi	r2,r2,65535
  812468:	1004c03a 	cmpne	r2,r2,zero
  81246c:	1000281e 	bne	r2,zero,812510 <OSTaskResume+0x1bc>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
  812470:	e0bffd17 	ldw	r2,-12(fp)
  812474:	10c00d83 	ldbu	r3,54(r2)
  812478:	008020b4 	movhi	r2,130
  81247c:	10aa4904 	addi	r2,r2,-22236
  812480:	10800003 	ldbu	r2,0(r2)
  812484:	1884b03a 	or	r2,r3,r2
  812488:	1007883a 	mov	r3,r2
  81248c:	008020b4 	movhi	r2,130
  812490:	10aa4904 	addi	r2,r2,-22236
  812494:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  812498:	e0bffd17 	ldw	r2,-12(fp)
  81249c:	10800d03 	ldbu	r2,52(r2)
  8124a0:	11003fcc 	andi	r4,r2,255
  8124a4:	e0bffd17 	ldw	r2,-12(fp)
  8124a8:	10800d03 	ldbu	r2,52(r2)
  8124ac:	10c03fcc 	andi	r3,r2,255
  8124b0:	008020b4 	movhi	r2,130
  8124b4:	10aa4944 	addi	r2,r2,-22235
  8124b8:	10c5883a 	add	r2,r2,r3
  8124bc:	10c00003 	ldbu	r3,0(r2)
  8124c0:	e0bffd17 	ldw	r2,-12(fp)
  8124c4:	10800d43 	ldbu	r2,53(r2)
  8124c8:	1884b03a 	or	r2,r3,r2
  8124cc:	1007883a 	mov	r3,r2
  8124d0:	008020b4 	movhi	r2,130
  8124d4:	10aa4944 	addi	r2,r2,-22235
  8124d8:	1105883a 	add	r2,r2,r4
  8124dc:	10c00005 	stb	r3,0(r2)
  8124e0:	e0bffc17 	ldw	r2,-16(fp)
  8124e4:	e0bff815 	stw	r2,-32(fp)
  8124e8:	e0bff817 	ldw	r2,-32(fp)
  8124ec:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
  8124f0:	008020b4 	movhi	r2,130
  8124f4:	10aa3d44 	addi	r2,r2,-22283
  8124f8:	10800003 	ldbu	r2,0(r2)
  8124fc:	10803fcc 	andi	r2,r2,255
  812500:	10800058 	cmpnei	r2,r2,1
  812504:	10000b1e 	bne	r2,zero,812534 <OSTaskResume+0x1e0>
                    OS_Sched();                               /* Find new highest priority task        */
  812508:	080c85c0 	call	80c85c <OS_Sched>
  81250c:	00000906 	br	812534 <OSTaskResume+0x1e0>
  812510:	e0bffc17 	ldw	r2,-16(fp)
  812514:	e0bff715 	stw	r2,-36(fp)
  812518:	e0bff717 	ldw	r2,-36(fp)
  81251c:	1001703a 	wrctl	status,r2
  812520:	00000406 	br	812534 <OSTaskResume+0x1e0>
  812524:	e0bffc17 	ldw	r2,-16(fp)
  812528:	e0bff615 	stw	r2,-40(fp)
  81252c:	e0bff617 	ldw	r2,-40(fp)
  812530:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
  812534:	e03fff15 	stw	zero,-4(fp)
  812538:	00000606 	br	812554 <OSTaskResume+0x200>
  81253c:	e0bffc17 	ldw	r2,-16(fp)
  812540:	e0bff515 	stw	r2,-44(fp)
  812544:	e0bff517 	ldw	r2,-44(fp)
  812548:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
  81254c:	00801104 	movi	r2,68
  812550:	e0bfff15 	stw	r2,-4(fp)
  812554:	e0bfff17 	ldw	r2,-4(fp)
}
  812558:	e037883a 	mov	sp,fp
  81255c:	dfc00117 	ldw	ra,4(sp)
  812560:	df000017 	ldw	fp,0(sp)
  812564:	dec00204 	addi	sp,sp,8
  812568:	f800283a 	ret

0081256c <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
  81256c:	defff204 	addi	sp,sp,-56
  812570:	df000d15 	stw	fp,52(sp)
  812574:	df000d04 	addi	fp,sp,52
  812578:	e17ffe15 	stw	r5,-8(fp)
  81257c:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  812580:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
  812584:	e0bffd03 	ldbu	r2,-12(fp)
  812588:	10800570 	cmpltui	r2,r2,21
  81258c:	1000061e 	bne	r2,zero,8125a8 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
  812590:	e0bffd03 	ldbu	r2,-12(fp)
  812594:	10803fe0 	cmpeqi	r2,r2,255
  812598:	1000031e 	bne	r2,zero,8125a8 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
  81259c:	00800a84 	movi	r2,42
  8125a0:	e0bfff15 	stw	r2,-4(fp)
  8125a4:	00006b06 	br	812754 <OSTaskStkChk+0x1e8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
  8125a8:	e0bffe17 	ldw	r2,-8(fp)
  8125ac:	1004c03a 	cmpne	r2,r2,zero
  8125b0:	1000031e 	bne	r2,zero,8125c0 <OSTaskStkChk+0x54>
        return (OS_ERR_PDATA_NULL);
  8125b4:	00800244 	movi	r2,9
  8125b8:	e0bfff15 	stw	r2,-4(fp)
  8125bc:	00006506 	br	812754 <OSTaskStkChk+0x1e8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
  8125c0:	e0bffe17 	ldw	r2,-8(fp)
  8125c4:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
  8125c8:	e0bffe17 	ldw	r2,-8(fp)
  8125cc:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8125d0:	0005303a 	rdctl	r2,status
  8125d4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8125d8:	e0fff717 	ldw	r3,-36(fp)
  8125dc:	00bfff84 	movi	r2,-2
  8125e0:	1884703a 	and	r2,r3,r2
  8125e4:	1001703a 	wrctl	status,r2
  
  return context;
  8125e8:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  8125ec:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
  8125f0:	e0bffd03 	ldbu	r2,-12(fp)
  8125f4:	10803fd8 	cmpnei	r2,r2,255
  8125f8:	1000051e 	bne	r2,zero,812610 <OSTaskStkChk+0xa4>
        prio = OSTCBCur->OSTCBPrio;
  8125fc:	008020b4 	movhi	r2,130
  812600:	10aa4c04 	addi	r2,r2,-22224
  812604:	10800017 	ldw	r2,0(r2)
  812608:	10800c83 	ldbu	r2,50(r2)
  81260c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  812610:	e0bffd03 	ldbu	r2,-12(fp)
  812614:	00c020b4 	movhi	r3,130
  812618:	18c6d204 	addi	r3,r3,6984
  81261c:	1085883a 	add	r2,r2,r2
  812620:	1085883a 	add	r2,r2,r2
  812624:	10c5883a 	add	r2,r2,r3
  812628:	10800017 	ldw	r2,0(r2)
  81262c:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
  812630:	e0bffc17 	ldw	r2,-16(fp)
  812634:	1004c03a 	cmpne	r2,r2,zero
  812638:	1000071e 	bne	r2,zero,812658 <OSTaskStkChk+0xec>
  81263c:	e0bff817 	ldw	r2,-32(fp)
  812640:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812644:	e0bff617 	ldw	r2,-40(fp)
  812648:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  81264c:	008010c4 	movi	r2,67
  812650:	e0bfff15 	stw	r2,-4(fp)
  812654:	00003f06 	br	812754 <OSTaskStkChk+0x1e8>
    }
    if (ptcb == OS_TCB_RESERVED) {
  812658:	e0bffc17 	ldw	r2,-16(fp)
  81265c:	10800058 	cmpnei	r2,r2,1
  812660:	1000071e 	bne	r2,zero,812680 <OSTaskStkChk+0x114>
  812664:	e0bff817 	ldw	r2,-32(fp)
  812668:	e0bff515 	stw	r2,-44(fp)
  81266c:	e0bff517 	ldw	r2,-44(fp)
  812670:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  812674:	008010c4 	movi	r2,67
  812678:	e0bfff15 	stw	r2,-4(fp)
  81267c:	00003506 	br	812754 <OSTaskStkChk+0x1e8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
  812680:	e0bffc17 	ldw	r2,-16(fp)
  812684:	1080040b 	ldhu	r2,16(r2)
  812688:	10bfffcc 	andi	r2,r2,65535
  81268c:	1080004c 	andi	r2,r2,1
  812690:	1004c03a 	cmpne	r2,r2,zero
  812694:	1000071e 	bne	r2,zero,8126b4 <OSTaskStkChk+0x148>
  812698:	e0bff817 	ldw	r2,-32(fp)
  81269c:	e0bff415 	stw	r2,-48(fp)
  8126a0:	e0bff417 	ldw	r2,-48(fp)
  8126a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
  8126a8:	00801144 	movi	r2,69
  8126ac:	e0bfff15 	stw	r2,-4(fp)
  8126b0:	00002806 	br	812754 <OSTaskStkChk+0x1e8>
    }
    nfree = 0;
  8126b4:	e03ffa15 	stw	zero,-24(fp)
    size  = ptcb->OSTCBStkSize;
  8126b8:	e0bffc17 	ldw	r2,-16(fp)
  8126bc:	10800317 	ldw	r2,12(r2)
  8126c0:	e0bff915 	stw	r2,-28(fp)
    pchk  = ptcb->OSTCBStkBottom;
  8126c4:	e0bffc17 	ldw	r2,-16(fp)
  8126c8:	10800217 	ldw	r2,8(r2)
  8126cc:	e0bffb15 	stw	r2,-20(fp)
  8126d0:	e0bff817 	ldw	r2,-32(fp)
  8126d4:	e0bff315 	stw	r2,-52(fp)
  8126d8:	e0bff317 	ldw	r2,-52(fp)
  8126dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  8126e0:	00000306 	br	8126f0 <OSTaskStkChk+0x184>
        nfree++;
  8126e4:	e0bffa17 	ldw	r2,-24(fp)
  8126e8:	10800044 	addi	r2,r2,1
  8126ec:	e0bffa15 	stw	r2,-24(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  8126f0:	e0bffb17 	ldw	r2,-20(fp)
  8126f4:	10800017 	ldw	r2,0(r2)
  8126f8:	1005003a 	cmpeq	r2,r2,zero
  8126fc:	1007883a 	mov	r3,r2
  812700:	e0bffb17 	ldw	r2,-20(fp)
  812704:	10800104 	addi	r2,r2,4
  812708:	e0bffb15 	stw	r2,-20(fp)
  81270c:	18803fcc 	andi	r2,r3,255
  812710:	1004c03a 	cmpne	r2,r2,zero
  812714:	103ff31e 	bne	r2,zero,8126e4 <OSTaskStkChk+0x178>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
  812718:	e0bffa17 	ldw	r2,-24(fp)
  81271c:	1085883a 	add	r2,r2,r2
  812720:	1085883a 	add	r2,r2,r2
  812724:	1007883a 	mov	r3,r2
  812728:	e0bffe17 	ldw	r2,-8(fp)
  81272c:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
  812730:	e0fff917 	ldw	r3,-28(fp)
  812734:	e0bffa17 	ldw	r2,-24(fp)
  812738:	1885c83a 	sub	r2,r3,r2
  81273c:	1085883a 	add	r2,r2,r2
  812740:	1085883a 	add	r2,r2,r2
  812744:	1007883a 	mov	r3,r2
  812748:	e0bffe17 	ldw	r2,-8(fp)
  81274c:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
  812750:	e03fff15 	stw	zero,-4(fp)
  812754:	e0bfff17 	ldw	r2,-4(fp)
}
  812758:	e037883a 	mov	sp,fp
  81275c:	df000017 	ldw	fp,0(sp)
  812760:	dec00104 	addi	sp,sp,4
  812764:	f800283a 	ret

00812768 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
  812768:	defff404 	addi	sp,sp,-48
  81276c:	dfc00b15 	stw	ra,44(sp)
  812770:	df000a15 	stw	fp,40(sp)
  812774:	df000a04 	addi	fp,sp,40
  812778:	e13ffe05 	stb	r4,-8(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81277c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
  812780:	e0bffe03 	ldbu	r2,-8(fp)
  812784:	10800518 	cmpnei	r2,r2,20
  812788:	1000031e 	bne	r2,zero,812798 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
  81278c:	008011c4 	movi	r2,71
  812790:	e0bfff15 	stw	r2,-4(fp)
  812794:	00007906 	br	81297c <OSTaskSuspend+0x214>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  812798:	e0bffe03 	ldbu	r2,-8(fp)
  81279c:	10800530 	cmpltui	r2,r2,20
  8127a0:	1000061e 	bne	r2,zero,8127bc <OSTaskSuspend+0x54>
        if (prio != OS_PRIO_SELF) {
  8127a4:	e0bffe03 	ldbu	r2,-8(fp)
  8127a8:	10803fe0 	cmpeqi	r2,r2,255
  8127ac:	1000031e 	bne	r2,zero,8127bc <OSTaskSuspend+0x54>
            return (OS_ERR_PRIO_INVALID);
  8127b0:	00800a84 	movi	r2,42
  8127b4:	e0bfff15 	stw	r2,-4(fp)
  8127b8:	00007006 	br	81297c <OSTaskSuspend+0x214>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8127bc:	0005303a 	rdctl	r2,status
  8127c0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8127c4:	e0fff917 	ldw	r3,-28(fp)
  8127c8:	00bfff84 	movi	r2,-2
  8127cc:	1884703a 	and	r2,r3,r2
  8127d0:	1001703a 	wrctl	status,r2
  
  return context;
  8127d4:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
  8127d8:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
  8127dc:	e0bffe03 	ldbu	r2,-8(fp)
  8127e0:	10803fd8 	cmpnei	r2,r2,255
  8127e4:	1000081e 	bne	r2,zero,812808 <OSTaskSuspend+0xa0>
        prio = OSTCBCur->OSTCBPrio;
  8127e8:	008020b4 	movhi	r2,130
  8127ec:	10aa4c04 	addi	r2,r2,-22224
  8127f0:	10800017 	ldw	r2,0(r2)
  8127f4:	10800c83 	ldbu	r2,50(r2)
  8127f8:	e0bffe05 	stb	r2,-8(fp)
        self = OS_TRUE;
  8127fc:	00800044 	movi	r2,1
  812800:	e0bffd05 	stb	r2,-12(fp)
  812804:	00000b06 	br	812834 <OSTaskSuspend+0xcc>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
  812808:	008020b4 	movhi	r2,130
  81280c:	10aa4c04 	addi	r2,r2,-22224
  812810:	10800017 	ldw	r2,0(r2)
  812814:	10800c83 	ldbu	r2,50(r2)
  812818:	10c03fcc 	andi	r3,r2,255
  81281c:	e0bffe03 	ldbu	r2,-8(fp)
  812820:	1880031e 	bne	r3,r2,812830 <OSTaskSuspend+0xc8>
        self = OS_TRUE;
  812824:	00800044 	movi	r2,1
  812828:	e0bffd05 	stb	r2,-12(fp)
  81282c:	00000106 	br	812834 <OSTaskSuspend+0xcc>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
  812830:	e03ffd05 	stb	zero,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  812834:	e0bffe03 	ldbu	r2,-8(fp)
  812838:	00c020b4 	movhi	r3,130
  81283c:	18c6d204 	addi	r3,r3,6984
  812840:	1085883a 	add	r2,r2,r2
  812844:	1085883a 	add	r2,r2,r2
  812848:	10c5883a 	add	r2,r2,r3
  81284c:	10800017 	ldw	r2,0(r2)
  812850:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
  812854:	e0bffc17 	ldw	r2,-16(fp)
  812858:	1004c03a 	cmpne	r2,r2,zero
  81285c:	1000071e 	bne	r2,zero,81287c <OSTaskSuspend+0x114>
  812860:	e0bffa17 	ldw	r2,-24(fp)
  812864:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812868:	e0bff817 	ldw	r2,-32(fp)
  81286c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
  812870:	00801204 	movi	r2,72
  812874:	e0bfff15 	stw	r2,-4(fp)
  812878:	00004006 	br	81297c <OSTaskSuspend+0x214>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
  81287c:	e0bffc17 	ldw	r2,-16(fp)
  812880:	10800058 	cmpnei	r2,r2,1
  812884:	1000071e 	bne	r2,zero,8128a4 <OSTaskSuspend+0x13c>
  812888:	e0bffa17 	ldw	r2,-24(fp)
  81288c:	e0bff715 	stw	r2,-36(fp)
  812890:	e0bff717 	ldw	r2,-36(fp)
  812894:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  812898:	008010c4 	movi	r2,67
  81289c:	e0bfff15 	stw	r2,-4(fp)
  8128a0:	00003606 	br	81297c <OSTaskSuspend+0x214>
    }
    y            = ptcb->OSTCBY;
  8128a4:	e0bffc17 	ldw	r2,-16(fp)
  8128a8:	10800d03 	ldbu	r2,52(r2)
  8128ac:	e0bffb05 	stb	r2,-20(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
  8128b0:	e13ffb03 	ldbu	r4,-20(fp)
  8128b4:	e0fffb03 	ldbu	r3,-20(fp)
  8128b8:	008020b4 	movhi	r2,130
  8128bc:	10aa4944 	addi	r2,r2,-22235
  8128c0:	10c5883a 	add	r2,r2,r3
  8128c4:	10800003 	ldbu	r2,0(r2)
  8128c8:	1007883a 	mov	r3,r2
  8128cc:	e0bffc17 	ldw	r2,-16(fp)
  8128d0:	10800d43 	ldbu	r2,53(r2)
  8128d4:	0084303a 	nor	r2,zero,r2
  8128d8:	1884703a 	and	r2,r3,r2
  8128dc:	1007883a 	mov	r3,r2
  8128e0:	008020b4 	movhi	r2,130
  8128e4:	10aa4944 	addi	r2,r2,-22235
  8128e8:	1105883a 	add	r2,r2,r4
  8128ec:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  8128f0:	e0fffb03 	ldbu	r3,-20(fp)
  8128f4:	008020b4 	movhi	r2,130
  8128f8:	10aa4944 	addi	r2,r2,-22235
  8128fc:	10c5883a 	add	r2,r2,r3
  812900:	10800003 	ldbu	r2,0(r2)
  812904:	10803fcc 	andi	r2,r2,255
  812908:	1004c03a 	cmpne	r2,r2,zero
  81290c:	10000c1e 	bne	r2,zero,812940 <OSTaskSuspend+0x1d8>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
  812910:	e0bffc17 	ldw	r2,-16(fp)
  812914:	10800d83 	ldbu	r2,54(r2)
  812918:	0084303a 	nor	r2,zero,r2
  81291c:	1007883a 	mov	r3,r2
  812920:	008020b4 	movhi	r2,130
  812924:	10aa4904 	addi	r2,r2,-22236
  812928:	10800003 	ldbu	r2,0(r2)
  81292c:	1884703a 	and	r2,r3,r2
  812930:	1007883a 	mov	r3,r2
  812934:	008020b4 	movhi	r2,130
  812938:	10aa4904 	addi	r2,r2,-22236
  81293c:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
  812940:	e0bffc17 	ldw	r2,-16(fp)
  812944:	10800c03 	ldbu	r2,48(r2)
  812948:	10800214 	ori	r2,r2,8
  81294c:	1007883a 	mov	r3,r2
  812950:	e0bffc17 	ldw	r2,-16(fp)
  812954:	10c00c05 	stb	r3,48(r2)
  812958:	e0bffa17 	ldw	r2,-24(fp)
  81295c:	e0bff615 	stw	r2,-40(fp)
  812960:	e0bff617 	ldw	r2,-40(fp)
  812964:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
  812968:	e0bffd03 	ldbu	r2,-12(fp)
  81296c:	10800058 	cmpnei	r2,r2,1
  812970:	1000011e 	bne	r2,zero,812978 <OSTaskSuspend+0x210>
        OS_Sched();                                             /* Find new highest priority task      */
  812974:	080c85c0 	call	80c85c <OS_Sched>
    }
    return (OS_ERR_NONE);
  812978:	e03fff15 	stw	zero,-4(fp)
  81297c:	e0bfff17 	ldw	r2,-4(fp)
}
  812980:	e037883a 	mov	sp,fp
  812984:	dfc00117 	ldw	ra,4(sp)
  812988:	df000017 	ldw	fp,0(sp)
  81298c:	dec00204 	addi	sp,sp,8
  812990:	f800283a 	ret

00812994 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
  812994:	defff504 	addi	sp,sp,-44
  812998:	dfc00a15 	stw	ra,40(sp)
  81299c:	df000915 	stw	fp,36(sp)
  8129a0:	df000904 	addi	fp,sp,36
  8129a4:	e17ffe15 	stw	r5,-8(fp)
  8129a8:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8129ac:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
  8129b0:	e0bffd03 	ldbu	r2,-12(fp)
  8129b4:	10800570 	cmpltui	r2,r2,21
  8129b8:	1000061e 	bne	r2,zero,8129d4 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
  8129bc:	e0bffd03 	ldbu	r2,-12(fp)
  8129c0:	10803fe0 	cmpeqi	r2,r2,255
  8129c4:	1000031e 	bne	r2,zero,8129d4 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
  8129c8:	00800a84 	movi	r2,42
  8129cc:	e0bfff15 	stw	r2,-4(fp)
  8129d0:	00003b06 	br	812ac0 <OSTaskQuery+0x12c>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
  8129d4:	e0bffe17 	ldw	r2,-8(fp)
  8129d8:	1004c03a 	cmpne	r2,r2,zero
  8129dc:	1000031e 	bne	r2,zero,8129ec <OSTaskQuery+0x58>
        return (OS_ERR_PDATA_NULL);
  8129e0:	00800244 	movi	r2,9
  8129e4:	e0bfff15 	stw	r2,-4(fp)
  8129e8:	00003506 	br	812ac0 <OSTaskQuery+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8129ec:	0005303a 	rdctl	r2,status
  8129f0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8129f4:	e0fffa17 	ldw	r3,-24(fp)
  8129f8:	00bfff84 	movi	r2,-2
  8129fc:	1884703a 	and	r2,r3,r2
  812a00:	1001703a 	wrctl	status,r2
  
  return context;
  812a04:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  812a08:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
  812a0c:	e0bffd03 	ldbu	r2,-12(fp)
  812a10:	10803fd8 	cmpnei	r2,r2,255
  812a14:	1000051e 	bne	r2,zero,812a2c <OSTaskQuery+0x98>
        prio = OSTCBCur->OSTCBPrio;
  812a18:	008020b4 	movhi	r2,130
  812a1c:	10aa4c04 	addi	r2,r2,-22224
  812a20:	10800017 	ldw	r2,0(r2)
  812a24:	10800c83 	ldbu	r2,50(r2)
  812a28:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  812a2c:	e0bffd03 	ldbu	r2,-12(fp)
  812a30:	00c020b4 	movhi	r3,130
  812a34:	18c6d204 	addi	r3,r3,6984
  812a38:	1085883a 	add	r2,r2,r2
  812a3c:	1085883a 	add	r2,r2,r2
  812a40:	10c5883a 	add	r2,r2,r3
  812a44:	10800017 	ldw	r2,0(r2)
  812a48:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
  812a4c:	e0bffc17 	ldw	r2,-16(fp)
  812a50:	1004c03a 	cmpne	r2,r2,zero
  812a54:	1000071e 	bne	r2,zero,812a74 <OSTaskQuery+0xe0>
  812a58:	e0bffb17 	ldw	r2,-20(fp)
  812a5c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812a60:	e0bff917 	ldw	r2,-28(fp)
  812a64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
  812a68:	00800a44 	movi	r2,41
  812a6c:	e0bfff15 	stw	r2,-4(fp)
  812a70:	00001306 	br	812ac0 <OSTaskQuery+0x12c>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
  812a74:	e0bffc17 	ldw	r2,-16(fp)
  812a78:	10800058 	cmpnei	r2,r2,1
  812a7c:	1000071e 	bne	r2,zero,812a9c <OSTaskQuery+0x108>
  812a80:	e0bffb17 	ldw	r2,-20(fp)
  812a84:	e0bff815 	stw	r2,-32(fp)
  812a88:	e0bff817 	ldw	r2,-32(fp)
  812a8c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  812a90:	008010c4 	movi	r2,67
  812a94:	e0bfff15 	stw	r2,-4(fp)
  812a98:	00000906 	br	812ac0 <OSTaskQuery+0x12c>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
  812a9c:	e13ffe17 	ldw	r4,-8(fp)
  812aa0:	e17ffc17 	ldw	r5,-16(fp)
  812aa4:	01801b04 	movi	r6,108
  812aa8:	080c7f00 	call	80c7f0 <OS_MemCopy>
  812aac:	e0bffb17 	ldw	r2,-20(fp)
  812ab0:	e0bff715 	stw	r2,-36(fp)
  812ab4:	e0bff717 	ldw	r2,-36(fp)
  812ab8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  812abc:	e03fff15 	stw	zero,-4(fp)
  812ac0:	e0bfff17 	ldw	r2,-4(fp)
}
  812ac4:	e037883a 	mov	sp,fp
  812ac8:	dfc00117 	ldw	ra,4(sp)
  812acc:	df000017 	ldw	fp,0(sp)
  812ad0:	dec00204 	addi	sp,sp,8
  812ad4:	f800283a 	ret

00812ad8 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
  812ad8:	defffc04 	addi	sp,sp,-16
  812adc:	df000315 	stw	fp,12(sp)
  812ae0:	df000304 	addi	fp,sp,12
  812ae4:	e13ffd15 	stw	r4,-12(fp)
  812ae8:	e17ffe15 	stw	r5,-8(fp)
  812aec:	e1bfff0d 	sth	r6,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
  812af0:	e0bfff0b 	ldhu	r2,-4(fp)
  812af4:	1080004c 	andi	r2,r2,1
  812af8:	10803fcc 	andi	r2,r2,255
  812afc:	1005003a 	cmpeq	r2,r2,zero
  812b00:	1000101e 	bne	r2,zero,812b44 <OS_TaskStkClr+0x6c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
  812b04:	e0bfff0b 	ldhu	r2,-4(fp)
  812b08:	1080008c 	andi	r2,r2,2
  812b0c:	1005003a 	cmpeq	r2,r2,zero
  812b10:	10000c1e 	bne	r2,zero,812b44 <OS_TaskStkClr+0x6c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  812b14:	00000806 	br	812b38 <OS_TaskStkClr+0x60>
                size--;
  812b18:	e0bffe17 	ldw	r2,-8(fp)
  812b1c:	10bfffc4 	addi	r2,r2,-1
  812b20:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
  812b24:	e0bffd17 	ldw	r2,-12(fp)
  812b28:	10000015 	stw	zero,0(r2)
  812b2c:	e0bffd17 	ldw	r2,-12(fp)
  812b30:	10800104 	addi	r2,r2,4
  812b34:	e0bffd15 	stw	r2,-12(fp)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  812b38:	e0bffe17 	ldw	r2,-8(fp)
  812b3c:	1004c03a 	cmpne	r2,r2,zero
  812b40:	103ff51e 	bne	r2,zero,812b18 <OS_TaskStkClr+0x40>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
  812b44:	e037883a 	mov	sp,fp
  812b48:	df000017 	ldw	fp,0(sp)
  812b4c:	dec00104 	addi	sp,sp,4
  812b50:	f800283a 	ret

00812b54 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
  812b54:	defff904 	addi	sp,sp,-28
  812b58:	dfc00615 	stw	ra,24(sp)
  812b5c:	df000515 	stw	fp,20(sp)
  812b60:	df000504 	addi	fp,sp,20
  812b64:	e13fff0d 	sth	r4,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  812b68:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  812b6c:	008020b4 	movhi	r2,130
  812b70:	10aa4b04 	addi	r2,r2,-22228
  812b74:	10800003 	ldbu	r2,0(r2)
  812b78:	10803fcc 	andi	r2,r2,255
  812b7c:	1004c03a 	cmpne	r2,r2,zero
  812b80:	1000421e 	bne	r2,zero,812c8c <OSTimeDly+0x138>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
  812b84:	e0bfff0b 	ldhu	r2,-4(fp)
  812b88:	1005003a 	cmpeq	r2,r2,zero
  812b8c:	10003f1e 	bne	r2,zero,812c8c <OSTimeDly+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812b90:	0005303a 	rdctl	r2,status
  812b94:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812b98:	e0fffc17 	ldw	r3,-16(fp)
  812b9c:	00bfff84 	movi	r2,-2
  812ba0:	1884703a 	and	r2,r3,r2
  812ba4:	1001703a 	wrctl	status,r2
  
  return context;
  812ba8:	e0bffc17 	ldw	r2,-16(fp)
        OS_ENTER_CRITICAL();
  812bac:	e0bffd15 	stw	r2,-12(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
  812bb0:	008020b4 	movhi	r2,130
  812bb4:	10aa4c04 	addi	r2,r2,-22224
  812bb8:	10800017 	ldw	r2,0(r2)
  812bbc:	10800d03 	ldbu	r2,52(r2)
  812bc0:	e0bffe05 	stb	r2,-8(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  812bc4:	e13ffe03 	ldbu	r4,-8(fp)
  812bc8:	e0fffe03 	ldbu	r3,-8(fp)
  812bcc:	008020b4 	movhi	r2,130
  812bd0:	10aa4944 	addi	r2,r2,-22235
  812bd4:	10c5883a 	add	r2,r2,r3
  812bd8:	10800003 	ldbu	r2,0(r2)
  812bdc:	1007883a 	mov	r3,r2
  812be0:	008020b4 	movhi	r2,130
  812be4:	10aa4c04 	addi	r2,r2,-22224
  812be8:	10800017 	ldw	r2,0(r2)
  812bec:	10800d43 	ldbu	r2,53(r2)
  812bf0:	0084303a 	nor	r2,zero,r2
  812bf4:	1884703a 	and	r2,r3,r2
  812bf8:	1007883a 	mov	r3,r2
  812bfc:	008020b4 	movhi	r2,130
  812c00:	10aa4944 	addi	r2,r2,-22235
  812c04:	1105883a 	add	r2,r2,r4
  812c08:	10c00005 	stb	r3,0(r2)
        if (OSRdyTbl[y] == 0) {
  812c0c:	e0fffe03 	ldbu	r3,-8(fp)
  812c10:	008020b4 	movhi	r2,130
  812c14:	10aa4944 	addi	r2,r2,-22235
  812c18:	10c5883a 	add	r2,r2,r3
  812c1c:	10800003 	ldbu	r2,0(r2)
  812c20:	10803fcc 	andi	r2,r2,255
  812c24:	1004c03a 	cmpne	r2,r2,zero
  812c28:	10000e1e 	bne	r2,zero,812c64 <OSTimeDly+0x110>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  812c2c:	008020b4 	movhi	r2,130
  812c30:	10aa4c04 	addi	r2,r2,-22224
  812c34:	10800017 	ldw	r2,0(r2)
  812c38:	10800d83 	ldbu	r2,54(r2)
  812c3c:	0084303a 	nor	r2,zero,r2
  812c40:	1007883a 	mov	r3,r2
  812c44:	008020b4 	movhi	r2,130
  812c48:	10aa4904 	addi	r2,r2,-22236
  812c4c:	10800003 	ldbu	r2,0(r2)
  812c50:	1884703a 	and	r2,r3,r2
  812c54:	1007883a 	mov	r3,r2
  812c58:	008020b4 	movhi	r2,130
  812c5c:	10aa4904 	addi	r2,r2,-22236
  812c60:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
  812c64:	008020b4 	movhi	r2,130
  812c68:	10aa4c04 	addi	r2,r2,-22224
  812c6c:	10c00017 	ldw	r3,0(r2)
  812c70:	e0bfff0b 	ldhu	r2,-4(fp)
  812c74:	18800b8d 	sth	r2,46(r3)
  812c78:	e0bffd17 	ldw	r2,-12(fp)
  812c7c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812c80:	e0bffb17 	ldw	r2,-20(fp)
  812c84:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
  812c88:	080c85c0 	call	80c85c <OS_Sched>
    }
}
  812c8c:	e037883a 	mov	sp,fp
  812c90:	dfc00117 	ldw	ra,4(sp)
  812c94:	df000017 	ldw	fp,0(sp)
  812c98:	dec00204 	addi	sp,sp,8
  812c9c:	f800283a 	ret

00812ca0 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
  812ca0:	defff604 	addi	sp,sp,-40
  812ca4:	dfc00915 	stw	ra,36(sp)
  812ca8:	df000815 	stw	fp,32(sp)
  812cac:	dc000715 	stw	r16,28(sp)
  812cb0:	df000704 	addi	fp,sp,28
  812cb4:	e13ffb05 	stb	r4,-20(fp)
  812cb8:	e17ffc05 	stb	r5,-16(fp)
  812cbc:	e1bffd05 	stb	r6,-12(fp)
  812cc0:	e1fffe0d 	sth	r7,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  812cc4:	008020b4 	movhi	r2,130
  812cc8:	10aa4b04 	addi	r2,r2,-22228
  812ccc:	10800003 	ldbu	r2,0(r2)
  812cd0:	10803fcc 	andi	r2,r2,255
  812cd4:	1005003a 	cmpeq	r2,r2,zero
  812cd8:	1000031e 	bne	r2,zero,812ce8 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
  812cdc:	00801544 	movi	r2,85
  812ce0:	e0bfff15 	stw	r2,-4(fp)
  812ce4:	00004b06 	br	812e14 <OSTimeDlyHMSM+0x174>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
  812ce8:	e0bffb03 	ldbu	r2,-20(fp)
  812cec:	1004c03a 	cmpne	r2,r2,zero
  812cf0:	10000c1e 	bne	r2,zero,812d24 <OSTimeDlyHMSM+0x84>
        if (minutes == 0) {
  812cf4:	e0bffc03 	ldbu	r2,-16(fp)
  812cf8:	1004c03a 	cmpne	r2,r2,zero
  812cfc:	1000091e 	bne	r2,zero,812d24 <OSTimeDlyHMSM+0x84>
            if (seconds == 0) {
  812d00:	e0bffd03 	ldbu	r2,-12(fp)
  812d04:	1004c03a 	cmpne	r2,r2,zero
  812d08:	1000061e 	bne	r2,zero,812d24 <OSTimeDlyHMSM+0x84>
                if (ms == 0) {
  812d0c:	e0bffe0b 	ldhu	r2,-8(fp)
  812d10:	1004c03a 	cmpne	r2,r2,zero
  812d14:	1000031e 	bne	r2,zero,812d24 <OSTimeDlyHMSM+0x84>
                    return (OS_ERR_TIME_ZERO_DLY);
  812d18:	00801504 	movi	r2,84
  812d1c:	e0bfff15 	stw	r2,-4(fp)
  812d20:	00003c06 	br	812e14 <OSTimeDlyHMSM+0x174>
                }
            }
        }
    }
    if (minutes > 59) {
  812d24:	e0bffc03 	ldbu	r2,-16(fp)
  812d28:	10800f30 	cmpltui	r2,r2,60
  812d2c:	1000031e 	bne	r2,zero,812d3c <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
  812d30:	00801444 	movi	r2,81
  812d34:	e0bfff15 	stw	r2,-4(fp)
  812d38:	00003606 	br	812e14 <OSTimeDlyHMSM+0x174>
    }
    if (seconds > 59) {
  812d3c:	e0bffd03 	ldbu	r2,-12(fp)
  812d40:	10800f30 	cmpltui	r2,r2,60
  812d44:	1000031e 	bne	r2,zero,812d54 <OSTimeDlyHMSM+0xb4>
        return (OS_ERR_TIME_INVALID_SECONDS);
  812d48:	00801484 	movi	r2,82
  812d4c:	e0bfff15 	stw	r2,-4(fp)
  812d50:	00003006 	br	812e14 <OSTimeDlyHMSM+0x174>
    }
    if (ms > 999) {
  812d54:	e0bffe0b 	ldhu	r2,-8(fp)
  812d58:	1080fa30 	cmpltui	r2,r2,1000
  812d5c:	1000031e 	bne	r2,zero,812d6c <OSTimeDlyHMSM+0xcc>
        return (OS_ERR_TIME_INVALID_MS);
  812d60:	008014c4 	movi	r2,83
  812d64:	e0bfff15 	stw	r2,-4(fp)
  812d68:	00002a06 	br	812e14 <OSTimeDlyHMSM+0x174>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
  812d6c:	e13ffb03 	ldbu	r4,-20(fp)
  812d70:	01438404 	movi	r5,3600
  812d74:	08099200 	call	809920 <__mulsi3>
  812d78:	1021883a 	mov	r16,r2
  812d7c:	e13ffc03 	ldbu	r4,-16(fp)
  812d80:	01400f04 	movi	r5,60
  812d84:	08099200 	call	809920 <__mulsi3>
  812d88:	8087883a 	add	r3,r16,r2
  812d8c:	e0bffd03 	ldbu	r2,-12(fp)
  812d90:	1889883a 	add	r4,r3,r2
  812d94:	0140fa04 	movi	r5,1000
  812d98:	08099200 	call	809920 <__mulsi3>
  812d9c:	1021883a 	mov	r16,r2
  812da0:	e13ffe0b 	ldhu	r4,-8(fp)
  812da4:	0140fa04 	movi	r5,1000
  812da8:	08099200 	call	809920 <__mulsi3>
  812dac:	1009883a 	mov	r4,r2
  812db0:	0140fa04 	movi	r5,1000
  812db4:	08099100 	call	809910 <__udivsi3>
  812db8:	8085883a 	add	r2,r16,r2
  812dbc:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
  812dc0:	e0bffa17 	ldw	r2,-24(fp)
  812dc4:	1004d43a 	srli	r2,r2,16
  812dc8:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
  812dcc:	e0bffa17 	ldw	r2,-24(fp)
  812dd0:	10bfffcc 	andi	r2,r2,65535
  812dd4:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
  812dd8:	e0bffa17 	ldw	r2,-24(fp)
  812ddc:	113fffcc 	andi	r4,r2,65535
  812de0:	0812b540 	call	812b54 <OSTimeDly>
    while (loops > 0) {
  812de4:	00000706 	br	812e04 <OSTimeDlyHMSM+0x164>
        OSTimeDly((INT16U)32768u);
  812de8:	01200014 	movui	r4,32768
  812dec:	0812b540 	call	812b54 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
  812df0:	01200014 	movui	r4,32768
  812df4:	0812b540 	call	812b54 <OSTimeDly>
        loops--;
  812df8:	e0bff90b 	ldhu	r2,-28(fp)
  812dfc:	10bfffc4 	addi	r2,r2,-1
  812e00:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
  812e04:	e0bff90b 	ldhu	r2,-28(fp)
  812e08:	1004c03a 	cmpne	r2,r2,zero
  812e0c:	103ff61e 	bne	r2,zero,812de8 <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
  812e10:	e03fff15 	stw	zero,-4(fp)
  812e14:	e0bfff17 	ldw	r2,-4(fp)
}
  812e18:	e037883a 	mov	sp,fp
  812e1c:	dfc00217 	ldw	ra,8(sp)
  812e20:	df000117 	ldw	fp,4(sp)
  812e24:	dc000017 	ldw	r16,0(sp)
  812e28:	dec00304 	addi	sp,sp,12
  812e2c:	f800283a 	ret

00812e30 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
  812e30:	defff404 	addi	sp,sp,-48
  812e34:	dfc00b15 	stw	ra,44(sp)
  812e38:	df000a15 	stw	fp,40(sp)
  812e3c:	df000a04 	addi	fp,sp,40
  812e40:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  812e44:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
  812e48:	e0bffe03 	ldbu	r2,-8(fp)
  812e4c:	10800530 	cmpltui	r2,r2,20
  812e50:	1000031e 	bne	r2,zero,812e60 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  812e54:	00800a84 	movi	r2,42
  812e58:	e0bfff15 	stw	r2,-4(fp)
  812e5c:	00007206 	br	813028 <OSTimeDlyResume+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812e60:	0005303a 	rdctl	r2,status
  812e64:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812e68:	e0fffb17 	ldw	r3,-20(fp)
  812e6c:	00bfff84 	movi	r2,-2
  812e70:	1884703a 	and	r2,r3,r2
  812e74:	1001703a 	wrctl	status,r2
  
  return context;
  812e78:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  812e7c:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
  812e80:	e0bffe03 	ldbu	r2,-8(fp)
  812e84:	00c020b4 	movhi	r3,130
  812e88:	18c6d204 	addi	r3,r3,6984
  812e8c:	1085883a 	add	r2,r2,r2
  812e90:	1085883a 	add	r2,r2,r2
  812e94:	10c5883a 	add	r2,r2,r3
  812e98:	10800017 	ldw	r2,0(r2)
  812e9c:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {
  812ea0:	e0bffd17 	ldw	r2,-12(fp)
  812ea4:	1004c03a 	cmpne	r2,r2,zero
  812ea8:	1000071e 	bne	r2,zero,812ec8 <OSTimeDlyResume+0x98>
  812eac:	e0bffc17 	ldw	r2,-16(fp)
  812eb0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812eb4:	e0bffa17 	ldw	r2,-24(fp)
  812eb8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  812ebc:	008010c4 	movi	r2,67
  812ec0:	e0bfff15 	stw	r2,-4(fp)
  812ec4:	00005806 	br	813028 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb == OS_TCB_RESERVED) {
  812ec8:	e0bffd17 	ldw	r2,-12(fp)
  812ecc:	10800058 	cmpnei	r2,r2,1
  812ed0:	1000071e 	bne	r2,zero,812ef0 <OSTimeDlyResume+0xc0>
  812ed4:	e0bffc17 	ldw	r2,-16(fp)
  812ed8:	e0bff915 	stw	r2,-28(fp)
  812edc:	e0bff917 	ldw	r2,-28(fp)
  812ee0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  812ee4:	008010c4 	movi	r2,67
  812ee8:	e0bfff15 	stw	r2,-4(fp)
  812eec:	00004e06 	br	813028 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
  812ef0:	e0bffd17 	ldw	r2,-12(fp)
  812ef4:	10800b8b 	ldhu	r2,46(r2)
  812ef8:	10bfffcc 	andi	r2,r2,65535
  812efc:	1004c03a 	cmpne	r2,r2,zero
  812f00:	1000071e 	bne	r2,zero,812f20 <OSTimeDlyResume+0xf0>
  812f04:	e0bffc17 	ldw	r2,-16(fp)
  812f08:	e0bff815 	stw	r2,-32(fp)
  812f0c:	e0bff817 	ldw	r2,-32(fp)
  812f10:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
  812f14:	00801404 	movi	r2,80
  812f18:	e0bfff15 	stw	r2,-4(fp)
  812f1c:	00004206 	br	813028 <OSTimeDlyResume+0x1f8>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
  812f20:	e0bffd17 	ldw	r2,-12(fp)
  812f24:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  812f28:	e0bffd17 	ldw	r2,-12(fp)
  812f2c:	10800c03 	ldbu	r2,48(r2)
  812f30:	10803fcc 	andi	r2,r2,255
  812f34:	10800dcc 	andi	r2,r2,55
  812f38:	1005003a 	cmpeq	r2,r2,zero
  812f3c:	10000b1e 	bne	r2,zero,812f6c <OSTimeDlyResume+0x13c>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
  812f40:	e0bffd17 	ldw	r2,-12(fp)
  812f44:	10c00c03 	ldbu	r3,48(r2)
  812f48:	00bff204 	movi	r2,-56
  812f4c:	1884703a 	and	r2,r3,r2
  812f50:	1007883a 	mov	r3,r2
  812f54:	e0bffd17 	ldw	r2,-12(fp)
  812f58:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
  812f5c:	e0fffd17 	ldw	r3,-12(fp)
  812f60:	00800044 	movi	r2,1
  812f64:	18800c45 	stb	r2,49(r3)
  812f68:	00000206 	br	812f74 <OSTimeDlyResume+0x144>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
  812f6c:	e0bffd17 	ldw	r2,-12(fp)
  812f70:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
  812f74:	e0bffd17 	ldw	r2,-12(fp)
  812f78:	10800c03 	ldbu	r2,48(r2)
  812f7c:	10803fcc 	andi	r2,r2,255
  812f80:	1080020c 	andi	r2,r2,8
  812f84:	1004c03a 	cmpne	r2,r2,zero
  812f88:	1000221e 	bne	r2,zero,813014 <OSTimeDlyResume+0x1e4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
  812f8c:	e0bffd17 	ldw	r2,-12(fp)
  812f90:	10c00d83 	ldbu	r3,54(r2)
  812f94:	008020b4 	movhi	r2,130
  812f98:	10aa4904 	addi	r2,r2,-22236
  812f9c:	10800003 	ldbu	r2,0(r2)
  812fa0:	1884b03a 	or	r2,r3,r2
  812fa4:	1007883a 	mov	r3,r2
  812fa8:	008020b4 	movhi	r2,130
  812fac:	10aa4904 	addi	r2,r2,-22236
  812fb0:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  812fb4:	e0bffd17 	ldw	r2,-12(fp)
  812fb8:	10800d03 	ldbu	r2,52(r2)
  812fbc:	11003fcc 	andi	r4,r2,255
  812fc0:	e0bffd17 	ldw	r2,-12(fp)
  812fc4:	10800d03 	ldbu	r2,52(r2)
  812fc8:	10c03fcc 	andi	r3,r2,255
  812fcc:	008020b4 	movhi	r2,130
  812fd0:	10aa4944 	addi	r2,r2,-22235
  812fd4:	10c5883a 	add	r2,r2,r3
  812fd8:	10c00003 	ldbu	r3,0(r2)
  812fdc:	e0bffd17 	ldw	r2,-12(fp)
  812fe0:	10800d43 	ldbu	r2,53(r2)
  812fe4:	1884b03a 	or	r2,r3,r2
  812fe8:	1007883a 	mov	r3,r2
  812fec:	008020b4 	movhi	r2,130
  812ff0:	10aa4944 	addi	r2,r2,-22235
  812ff4:	1105883a 	add	r2,r2,r4
  812ff8:	10c00005 	stb	r3,0(r2)
  812ffc:	e0bffc17 	ldw	r2,-16(fp)
  813000:	e0bff715 	stw	r2,-36(fp)
  813004:	e0bff717 	ldw	r2,-36(fp)
  813008:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
  81300c:	080c85c0 	call	80c85c <OS_Sched>
  813010:	00000406 	br	813024 <OSTimeDlyResume+0x1f4>
  813014:	e0bffc17 	ldw	r2,-16(fp)
  813018:	e0bff615 	stw	r2,-40(fp)
  81301c:	e0bff617 	ldw	r2,-40(fp)
  813020:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
  813024:	e03fff15 	stw	zero,-4(fp)
  813028:	e0bfff17 	ldw	r2,-4(fp)
}
  81302c:	e037883a 	mov	sp,fp
  813030:	dfc00117 	ldw	ra,4(sp)
  813034:	df000017 	ldw	fp,0(sp)
  813038:	dec00204 	addi	sp,sp,8
  81303c:	f800283a 	ret

00813040 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
  813040:	defffb04 	addi	sp,sp,-20
  813044:	df000415 	stw	fp,16(sp)
  813048:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81304c:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813050:	0005303a 	rdctl	r2,status
  813054:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813058:	e0fffd17 	ldw	r3,-12(fp)
  81305c:	00bfff84 	movi	r2,-2
  813060:	1884703a 	and	r2,r3,r2
  813064:	1001703a 	wrctl	status,r2
  
  return context;
  813068:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  81306c:	e0bffe15 	stw	r2,-8(fp)
    ticks = OSTime;
  813070:	008020b4 	movhi	r2,130
  813074:	10aa4d04 	addi	r2,r2,-22220
  813078:	10800017 	ldw	r2,0(r2)
  81307c:	e0bfff15 	stw	r2,-4(fp)
  813080:	e0bffe17 	ldw	r2,-8(fp)
  813084:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813088:	e0bffc17 	ldw	r2,-16(fp)
  81308c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
  813090:	e0bfff17 	ldw	r2,-4(fp)
}
  813094:	e037883a 	mov	sp,fp
  813098:	df000017 	ldw	fp,0(sp)
  81309c:	dec00104 	addi	sp,sp,4
  8130a0:	f800283a 	ret

008130a4 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
  8130a4:	defffb04 	addi	sp,sp,-20
  8130a8:	df000415 	stw	fp,16(sp)
  8130ac:	df000404 	addi	fp,sp,16
  8130b0:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8130b4:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8130b8:	0005303a 	rdctl	r2,status
  8130bc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8130c0:	e0fffd17 	ldw	r3,-12(fp)
  8130c4:	00bfff84 	movi	r2,-2
  8130c8:	1884703a 	and	r2,r3,r2
  8130cc:	1001703a 	wrctl	status,r2
  
  return context;
  8130d0:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  8130d4:	e0bffe15 	stw	r2,-8(fp)
    OSTime = ticks;
  8130d8:	00c020b4 	movhi	r3,130
  8130dc:	18ea4d04 	addi	r3,r3,-22220
  8130e0:	e0bfff17 	ldw	r2,-4(fp)
  8130e4:	18800015 	stw	r2,0(r3)
  8130e8:	e0bffe17 	ldw	r2,-8(fp)
  8130ec:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8130f0:	e0bffc17 	ldw	r2,-16(fp)
  8130f4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  8130f8:	e037883a 	mov	sp,fp
  8130fc:	df000017 	ldw	fp,0(sp)
  813100:	dec00104 	addi	sp,sp,4
  813104:	f800283a 	ret

00813108 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  813108:	defffd04 	addi	sp,sp,-12
  81310c:	dfc00215 	stw	ra,8(sp)
  813110:	df000115 	stw	fp,4(sp)
  813114:	df000104 	addi	fp,sp,4
  813118:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
  81311c:	08160b00 	call	8160b0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  813120:	00800044 	movi	r2,1
  813124:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  813128:	e037883a 	mov	sp,fp
  81312c:	dfc00117 	ldw	ra,4(sp)
  813130:	df000017 	ldw	fp,0(sp)
  813134:	dec00204 	addi	sp,sp,8
  813138:	f800283a 	ret

0081313c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  81313c:	defffe04 	addi	sp,sp,-8
  813140:	dfc00115 	stw	ra,4(sp)
  813144:	df000015 	stw	fp,0(sp)
  813148:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  81314c:	01004474 	movhi	r4,273
  813150:	21240004 	addi	r4,r4,-28672
  813154:	000b883a 	mov	r5,zero
  813158:	000d883a 	mov	r6,zero
  81315c:	01c0fa04 	movi	r7,1000
  813160:	0813fcc0 	call	813fcc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  813164:	01002074 	movhi	r4,129
  813168:	211eee04 	addi	r4,r4,31672
  81316c:	000b883a 	mov	r5,zero
  813170:	01800044 	movi	r6,1
  813174:	08133480 	call	813348 <altera_avalon_jtag_uart_init>
  813178:	01002074 	movhi	r4,129
  81317c:	211ee404 	addi	r4,r4,31632
  813180:	08131c80 	call	8131c8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_AND_VIDEO_CONFIG_0, audio_and_video_config_0);
  813184:	010020b4 	movhi	r4,130
  813188:	2122ff04 	addi	r4,r4,-29700
  81318c:	08131c80 	call	8131c8 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_0, audio_0);
  813190:	010020b4 	movhi	r4,130
  813194:	21230b04 	addi	r4,r4,-29652
  813198:	08131c80 	call	8131c8 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
  81319c:	010020b4 	movhi	r4,130
  8131a0:	21231704 	addi	r4,r4,-29604
  8131a4:	08150980 	call	815098 <alt_up_character_lcd_init>
  8131a8:	010020b4 	movhi	r4,130
  8131ac:	21231704 	addi	r4,r4,-29604
  8131b0:	08131c80 	call	8131c8 <alt_dev_reg>
}
  8131b4:	e037883a 	mov	sp,fp
  8131b8:	dfc00117 	ldw	ra,4(sp)
  8131bc:	df000017 	ldw	fp,0(sp)
  8131c0:	dec00204 	addi	sp,sp,8
  8131c4:	f800283a 	ret

008131c8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  8131c8:	defffd04 	addi	sp,sp,-12
  8131cc:	dfc00215 	stw	ra,8(sp)
  8131d0:	df000115 	stw	fp,4(sp)
  8131d4:	df000104 	addi	fp,sp,4
  8131d8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  8131dc:	e13fff17 	ldw	r4,-4(fp)
  8131e0:	014020b4 	movhi	r5,130
  8131e4:	29632a04 	addi	r5,r5,-29528
  8131e8:	08156880 	call	815688 <alt_dev_llist_insert>
}
  8131ec:	e037883a 	mov	sp,fp
  8131f0:	dfc00117 	ldw	ra,4(sp)
  8131f4:	df000017 	ldw	fp,0(sp)
  8131f8:	dec00204 	addi	sp,sp,8
  8131fc:	f800283a 	ret

00813200 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  813200:	defffa04 	addi	sp,sp,-24
  813204:	dfc00515 	stw	ra,20(sp)
  813208:	df000415 	stw	fp,16(sp)
  81320c:	df000404 	addi	fp,sp,16
  813210:	e13ffd15 	stw	r4,-12(fp)
  813214:	e17ffe15 	stw	r5,-8(fp)
  813218:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  81321c:	e0bffd17 	ldw	r2,-12(fp)
  813220:	10800017 	ldw	r2,0(r2)
  813224:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  813228:	e0bffc17 	ldw	r2,-16(fp)
  81322c:	11000a04 	addi	r4,r2,40
  813230:	e0bffd17 	ldw	r2,-12(fp)
  813234:	11c00217 	ldw	r7,8(r2)
  813238:	e17ffe17 	ldw	r5,-8(fp)
  81323c:	e1bfff17 	ldw	r6,-4(fp)
  813240:	08139bc0 	call	8139bc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  813244:	e037883a 	mov	sp,fp
  813248:	dfc00117 	ldw	ra,4(sp)
  81324c:	df000017 	ldw	fp,0(sp)
  813250:	dec00204 	addi	sp,sp,8
  813254:	f800283a 	ret

00813258 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  813258:	defffa04 	addi	sp,sp,-24
  81325c:	dfc00515 	stw	ra,20(sp)
  813260:	df000415 	stw	fp,16(sp)
  813264:	df000404 	addi	fp,sp,16
  813268:	e13ffd15 	stw	r4,-12(fp)
  81326c:	e17ffe15 	stw	r5,-8(fp)
  813270:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  813274:	e0bffd17 	ldw	r2,-12(fp)
  813278:	10800017 	ldw	r2,0(r2)
  81327c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  813280:	e0bffc17 	ldw	r2,-16(fp)
  813284:	11000a04 	addi	r4,r2,40
  813288:	e0bffd17 	ldw	r2,-12(fp)
  81328c:	11c00217 	ldw	r7,8(r2)
  813290:	e17ffe17 	ldw	r5,-8(fp)
  813294:	e1bfff17 	ldw	r6,-4(fp)
  813298:	0813c7c0 	call	813c7c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  81329c:	e037883a 	mov	sp,fp
  8132a0:	dfc00117 	ldw	ra,4(sp)
  8132a4:	df000017 	ldw	fp,0(sp)
  8132a8:	dec00204 	addi	sp,sp,8
  8132ac:	f800283a 	ret

008132b0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  8132b0:	defffc04 	addi	sp,sp,-16
  8132b4:	dfc00315 	stw	ra,12(sp)
  8132b8:	df000215 	stw	fp,8(sp)
  8132bc:	df000204 	addi	fp,sp,8
  8132c0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8132c4:	e0bfff17 	ldw	r2,-4(fp)
  8132c8:	10800017 	ldw	r2,0(r2)
  8132cc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  8132d0:	e0bffe17 	ldw	r2,-8(fp)
  8132d4:	11000a04 	addi	r4,r2,40
  8132d8:	e0bfff17 	ldw	r2,-4(fp)
  8132dc:	11400217 	ldw	r5,8(r2)
  8132e0:	08138540 	call	813854 <altera_avalon_jtag_uart_close>
}
  8132e4:	e037883a 	mov	sp,fp
  8132e8:	dfc00117 	ldw	ra,4(sp)
  8132ec:	df000017 	ldw	fp,0(sp)
  8132f0:	dec00204 	addi	sp,sp,8
  8132f4:	f800283a 	ret

008132f8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  8132f8:	defffa04 	addi	sp,sp,-24
  8132fc:	dfc00515 	stw	ra,20(sp)
  813300:	df000415 	stw	fp,16(sp)
  813304:	df000404 	addi	fp,sp,16
  813308:	e13ffd15 	stw	r4,-12(fp)
  81330c:	e17ffe15 	stw	r5,-8(fp)
  813310:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  813314:	e0bffd17 	ldw	r2,-12(fp)
  813318:	10800017 	ldw	r2,0(r2)
  81331c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  813320:	e0bffc17 	ldw	r2,-16(fp)
  813324:	11000a04 	addi	r4,r2,40
  813328:	e17ffe17 	ldw	r5,-8(fp)
  81332c:	e1bfff17 	ldw	r6,-4(fp)
  813330:	08138c80 	call	8138c8 <altera_avalon_jtag_uart_ioctl>
}
  813334:	e037883a 	mov	sp,fp
  813338:	dfc00117 	ldw	ra,4(sp)
  81333c:	df000017 	ldw	fp,0(sp)
  813340:	dec00204 	addi	sp,sp,8
  813344:	f800283a 	ret

00813348 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  813348:	defff504 	addi	sp,sp,-44
  81334c:	dfc00a15 	stw	ra,40(sp)
  813350:	df000915 	stw	fp,36(sp)
  813354:	df000904 	addi	fp,sp,36
  813358:	e13ffd15 	stw	r4,-12(fp)
  81335c:	e17ffe15 	stw	r5,-8(fp)
  813360:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  813364:	e0bffd17 	ldw	r2,-12(fp)
  813368:	10800c04 	addi	r2,r2,48
  81336c:	e0bffb15 	stw	r2,-20(fp)
  813370:	e03ffc0d 	sth	zero,-16(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
  813374:	e13ffc0b 	ldhu	r4,-16(fp)
  813378:	e17ffc84 	addi	r5,fp,-14
  81337c:	080d4040 	call	80d404 <OSFlagCreate>
  813380:	1007883a 	mov	r3,r2
  813384:	e0bffb17 	ldw	r2,-20(fp)
  813388:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
  81338c:	e0bffd17 	ldw	r2,-12(fp)
  813390:	10800a04 	addi	r2,r2,40
  813394:	e0bff915 	stw	r2,-28(fp)
  813398:	00800044 	movi	r2,1
  81339c:	e0bffa0d 	sth	r2,-24(fp)
  8133a0:	e13ffa0b 	ldhu	r4,-24(fp)
  8133a4:	081060c0 	call	81060c <OSSemCreate>
  8133a8:	1007883a 	mov	r3,r2
  8133ac:	e0bff917 	ldw	r2,-28(fp)
  8133b0:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
  8133b4:	e0bffd17 	ldw	r2,-12(fp)
  8133b8:	10800b04 	addi	r2,r2,44
  8133bc:	e0bff715 	stw	r2,-36(fp)
  8133c0:	00800044 	movi	r2,1
  8133c4:	e0bff80d 	sth	r2,-32(fp)
  8133c8:	e13ff80b 	ldhu	r4,-32(fp)
  8133cc:	081060c0 	call	81060c <OSSemCreate>
  8133d0:	1007883a 	mov	r3,r2
  8133d4:	e0bff717 	ldw	r2,-36(fp)
  8133d8:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8133dc:	e0fffd17 	ldw	r3,-12(fp)
  8133e0:	00800044 	movi	r2,1
  8133e4:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  8133e8:	e0bffd17 	ldw	r2,-12(fp)
  8133ec:	10800017 	ldw	r2,0(r2)
  8133f0:	11000104 	addi	r4,r2,4
  8133f4:	e0bffd17 	ldw	r2,-12(fp)
  8133f8:	10800817 	ldw	r2,32(r2)
  8133fc:	1007883a 	mov	r3,r2
  813400:	2005883a 	mov	r2,r4
  813404:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
  813408:	e13fff17 	ldw	r4,-4(fp)
  81340c:	e17ffd17 	ldw	r5,-12(fp)
  813410:	01802074 	movhi	r6,129
  813414:	318d1e04 	addi	r6,r6,13432
  813418:	0815a640 	call	815a64 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  81341c:	e0bffd17 	ldw	r2,-12(fp)
  813420:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  813424:	e0bffd17 	ldw	r2,-12(fp)
  813428:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  81342c:	008020b4 	movhi	r2,130
  813430:	10aa5204 	addi	r2,r2,-22200
  813434:	10800017 	ldw	r2,0(r2)
  813438:	100b883a 	mov	r5,r2
  81343c:	01802074 	movhi	r6,129
  813440:	318dd004 	addi	r6,r6,14144
  813444:	e1fffd17 	ldw	r7,-12(fp)
  813448:	08155180 	call	815518 <alt_alarm_start>
  81344c:	1004403a 	cmpge	r2,r2,zero
  813450:	1000041e 	bne	r2,zero,813464 <altera_avalon_jtag_uart_init+0x11c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  813454:	e0fffd17 	ldw	r3,-12(fp)
  813458:	00a00034 	movhi	r2,32768
  81345c:	10bfffc4 	addi	r2,r2,-1
  813460:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  813464:	e037883a 	mov	sp,fp
  813468:	dfc00117 	ldw	ra,4(sp)
  81346c:	df000017 	ldw	fp,0(sp)
  813470:	dec00204 	addi	sp,sp,8
  813474:	f800283a 	ret

00813478 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  813478:	defff104 	addi	sp,sp,-60
  81347c:	dfc00e15 	stw	ra,56(sp)
  813480:	df000d15 	stw	fp,52(sp)
  813484:	df000d04 	addi	fp,sp,52
  813488:	e13ffe15 	stw	r4,-8(fp)
  81348c:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  813490:	e0bffe17 	ldw	r2,-8(fp)
  813494:	e0bffc15 	stw	r2,-16(fp)
  unsigned int base = sp->base;
  813498:	e0bffc17 	ldw	r2,-16(fp)
  81349c:	10800017 	ldw	r2,0(r2)
  8134a0:	e0bffb15 	stw	r2,-20(fp)
  8134a4:	00000006 	br	8134a8 <altera_avalon_jtag_uart_irq+0x30>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8134a8:	e0bffb17 	ldw	r2,-20(fp)
  8134ac:	10800104 	addi	r2,r2,4
  8134b0:	10800037 	ldwio	r2,0(r2)
  8134b4:	e0bffa15 	stw	r2,-24(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  8134b8:	e0bffa17 	ldw	r2,-24(fp)
  8134bc:	1080c00c 	andi	r2,r2,768
  8134c0:	1005003a 	cmpeq	r2,r2,zero
  8134c4:	1000991e 	bne	r2,zero,81372c <altera_avalon_jtag_uart_irq+0x2b4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  8134c8:	e0bffa17 	ldw	r2,-24(fp)
  8134cc:	1080400c 	andi	r2,r2,256
  8134d0:	1005003a 	cmpeq	r2,r2,zero
  8134d4:	1000481e 	bne	r2,zero,8135f8 <altera_avalon_jtag_uart_irq+0x180>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  8134d8:	00800074 	movhi	r2,1
  8134dc:	e0bff915 	stw	r2,-28(fp)
  8134e0:	00000006 	br	8134e4 <altera_avalon_jtag_uart_irq+0x6c>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8134e4:	e0bffc17 	ldw	r2,-16(fp)
  8134e8:	10800d17 	ldw	r2,52(r2)
  8134ec:	10800044 	addi	r2,r2,1
  8134f0:	1081ffcc 	andi	r2,r2,2047
  8134f4:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
  8134f8:	e0bffc17 	ldw	r2,-16(fp)
  8134fc:	10c00e17 	ldw	r3,56(r2)
  813500:	e0bff817 	ldw	r2,-32(fp)
  813504:	18802826 	beq	r3,r2,8135a8 <altera_avalon_jtag_uart_irq+0x130>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  813508:	e0bffb17 	ldw	r2,-20(fp)
  81350c:	10800037 	ldwio	r2,0(r2)
  813510:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  813514:	e0bff917 	ldw	r2,-28(fp)
  813518:	10a0000c 	andi	r2,r2,32768
  81351c:	1005003a 	cmpeq	r2,r2,zero
  813520:	1000211e 	bne	r2,zero,8135a8 <altera_avalon_jtag_uart_irq+0x130>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  813524:	e0bffc17 	ldw	r2,-16(fp)
  813528:	10c00d17 	ldw	r3,52(r2)
  81352c:	e0bff917 	ldw	r2,-28(fp)
  813530:	1009883a 	mov	r4,r2
  813534:	e0bffc17 	ldw	r2,-16(fp)
  813538:	1885883a 	add	r2,r3,r2
  81353c:	10801104 	addi	r2,r2,68
  813540:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  813544:	e0bffc17 	ldw	r2,-16(fp)
  813548:	10800d17 	ldw	r2,52(r2)
  81354c:	10800044 	addi	r2,r2,1
  813550:	10c1ffcc 	andi	r3,r2,2047
  813554:	e0bffc17 	ldw	r2,-16(fp)
  813558:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
  81355c:	e0bffc17 	ldw	r2,-16(fp)
  813560:	10800c17 	ldw	r2,48(r2)
  813564:	e0bff515 	stw	r2,-44(fp)
  813568:	00800044 	movi	r2,1
  81356c:	e0bff60d 	sth	r2,-40(fp)
  813570:	00800044 	movi	r2,1
  813574:	e0bff685 	stb	r2,-38(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  813578:	008020b4 	movhi	r2,130
  81357c:	10aa3d44 	addi	r2,r2,-22283
  813580:	10800003 	ldbu	r2,0(r2)
  813584:	10803fcc 	andi	r2,r2,255
  813588:	1005003a 	cmpeq	r2,r2,zero
  81358c:	103fd51e 	bne	r2,zero,8134e4 <altera_avalon_jtag_uart_irq+0x6c>
  {
    OSFlagPost (group, flags, opt, &err);
  813590:	e17ff60b 	ldhu	r5,-40(fp)
  813594:	e1bff683 	ldbu	r6,-38(fp)
  813598:	e1fffd04 	addi	r7,fp,-12
  81359c:	e13ff517 	ldw	r4,-44(fp)
  8135a0:	080e12c0 	call	80e12c <OSFlagPost>
    return err;
  8135a4:	003fcf06 	br	8134e4 <altera_avalon_jtag_uart_irq+0x6c>
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  8135a8:	e0bff917 	ldw	r2,-28(fp)
  8135ac:	10bfffec 	andhi	r2,r2,65535
  8135b0:	1005003a 	cmpeq	r2,r2,zero
  8135b4:	1000101e 	bne	r2,zero,8135f8 <altera_avalon_jtag_uart_irq+0x180>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8135b8:	e0bffc17 	ldw	r2,-16(fp)
  8135bc:	10c00817 	ldw	r3,32(r2)
  8135c0:	00bfff84 	movi	r2,-2
  8135c4:	1886703a 	and	r3,r3,r2
  8135c8:	e0bffc17 	ldw	r2,-16(fp)
  8135cc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  8135d0:	e0bffb17 	ldw	r2,-20(fp)
  8135d4:	11000104 	addi	r4,r2,4
  8135d8:	e0bffc17 	ldw	r2,-16(fp)
  8135dc:	10800817 	ldw	r2,32(r2)
  8135e0:	1007883a 	mov	r3,r2
  8135e4:	2005883a 	mov	r2,r4
  8135e8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8135ec:	e0bffb17 	ldw	r2,-20(fp)
  8135f0:	10800104 	addi	r2,r2,4
  8135f4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  8135f8:	e0bffa17 	ldw	r2,-24(fp)
  8135fc:	1080800c 	andi	r2,r2,512
  813600:	1005003a 	cmpeq	r2,r2,zero
  813604:	103fa81e 	bne	r2,zero,8134a8 <altera_avalon_jtag_uart_irq+0x30>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  813608:	e0bffa17 	ldw	r2,-24(fp)
  81360c:	10bfffec 	andhi	r2,r2,65535
  813610:	1004d43a 	srli	r2,r2,16
  813614:	e0bff715 	stw	r2,-36(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  813618:	00002706 	br	8136b8 <altera_avalon_jtag_uart_irq+0x240>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  81361c:	e13ffb17 	ldw	r4,-20(fp)
  813620:	e0bffc17 	ldw	r2,-16(fp)
  813624:	10c01017 	ldw	r3,64(r2)
  813628:	e0bffc17 	ldw	r2,-16(fp)
  81362c:	1885883a 	add	r2,r3,r2
  813630:	10821104 	addi	r2,r2,2116
  813634:	10800003 	ldbu	r2,0(r2)
  813638:	10c03fcc 	andi	r3,r2,255
  81363c:	18c0201c 	xori	r3,r3,128
  813640:	18ffe004 	addi	r3,r3,-128
  813644:	2005883a 	mov	r2,r4
  813648:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  81364c:	e0bffc17 	ldw	r2,-16(fp)
  813650:	10801017 	ldw	r2,64(r2)
  813654:	10800044 	addi	r2,r2,1
  813658:	10c1ffcc 	andi	r3,r2,2047
  81365c:	e0bffc17 	ldw	r2,-16(fp)
  813660:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
  813664:	e0bffc17 	ldw	r2,-16(fp)
  813668:	10800c17 	ldw	r2,48(r2)
  81366c:	e0bff315 	stw	r2,-52(fp)
  813670:	00800084 	movi	r2,2
  813674:	e0bff40d 	sth	r2,-48(fp)
  813678:	00800044 	movi	r2,1
  81367c:	e0bff485 	stb	r2,-46(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  813680:	008020b4 	movhi	r2,130
  813684:	10aa3d44 	addi	r2,r2,-22283
  813688:	10800003 	ldbu	r2,0(r2)
  81368c:	10803fcc 	andi	r2,r2,255
  813690:	1005003a 	cmpeq	r2,r2,zero
  813694:	1000051e 	bne	r2,zero,8136ac <altera_avalon_jtag_uart_irq+0x234>
  {
    OSFlagPost (group, flags, opt, &err);
  813698:	e17ff40b 	ldhu	r5,-48(fp)
  81369c:	e1bff483 	ldbu	r6,-46(fp)
  8136a0:	e1fffd44 	addi	r7,fp,-11
  8136a4:	e13ff317 	ldw	r4,-52(fp)
  8136a8:	080e12c0 	call	80e12c <OSFlagPost>

        space--;
  8136ac:	e0bff717 	ldw	r2,-36(fp)
  8136b0:	10bfffc4 	addi	r2,r2,-1
  8136b4:	e0bff715 	stw	r2,-36(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  8136b8:	e0bff717 	ldw	r2,-36(fp)
  8136bc:	1005003a 	cmpeq	r2,r2,zero
  8136c0:	1000051e 	bne	r2,zero,8136d8 <altera_avalon_jtag_uart_irq+0x260>
  8136c4:	e0bffc17 	ldw	r2,-16(fp)
  8136c8:	10c01017 	ldw	r3,64(r2)
  8136cc:	e0bffc17 	ldw	r2,-16(fp)
  8136d0:	10800f17 	ldw	r2,60(r2)
  8136d4:	18bfd11e 	bne	r3,r2,81361c <altera_avalon_jtag_uart_irq+0x1a4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  8136d8:	e0bff717 	ldw	r2,-36(fp)
  8136dc:	1005003a 	cmpeq	r2,r2,zero
  8136e0:	103f711e 	bne	r2,zero,8134a8 <altera_avalon_jtag_uart_irq+0x30>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  8136e4:	e0bffc17 	ldw	r2,-16(fp)
  8136e8:	10c00817 	ldw	r3,32(r2)
  8136ec:	00bfff44 	movi	r2,-3
  8136f0:	1886703a 	and	r3,r3,r2
  8136f4:	e0bffc17 	ldw	r2,-16(fp)
  8136f8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8136fc:	e0bffc17 	ldw	r2,-16(fp)
  813700:	10800017 	ldw	r2,0(r2)
  813704:	11000104 	addi	r4,r2,4
  813708:	e0bffc17 	ldw	r2,-16(fp)
  81370c:	10800817 	ldw	r2,32(r2)
  813710:	1007883a 	mov	r3,r2
  813714:	2005883a 	mov	r2,r4
  813718:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  81371c:	e0bffb17 	ldw	r2,-20(fp)
  813720:	10800104 	addi	r2,r2,4
  813724:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  813728:	003f5f06 	br	8134a8 <altera_avalon_jtag_uart_irq+0x30>
}
  81372c:	e037883a 	mov	sp,fp
  813730:	dfc00117 	ldw	ra,4(sp)
  813734:	df000017 	ldw	fp,0(sp)
  813738:	dec00204 	addi	sp,sp,8
  81373c:	f800283a 	ret

00813740 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  813740:	defff804 	addi	sp,sp,-32
  813744:	dfc00715 	stw	ra,28(sp)
  813748:	df000615 	stw	fp,24(sp)
  81374c:	df000604 	addi	fp,sp,24
  813750:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  813754:	e0bfff17 	ldw	r2,-4(fp)
  813758:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  81375c:	e0bffd17 	ldw	r2,-12(fp)
  813760:	10800017 	ldw	r2,0(r2)
  813764:	10800104 	addi	r2,r2,4
  813768:	10800037 	ldwio	r2,0(r2)
  81376c:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  813770:	e0bffc17 	ldw	r2,-16(fp)
  813774:	1081000c 	andi	r2,r2,1024
  813778:	1005003a 	cmpeq	r2,r2,zero
  81377c:	10000c1e 	bne	r2,zero,8137b0 <altera_avalon_jtag_uart_timeout+0x70>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  813780:	e0bffd17 	ldw	r2,-12(fp)
  813784:	10800017 	ldw	r2,0(r2)
  813788:	11000104 	addi	r4,r2,4
  81378c:	e0bffd17 	ldw	r2,-12(fp)
  813790:	10800817 	ldw	r2,32(r2)
  813794:	10810014 	ori	r2,r2,1024
  813798:	1007883a 	mov	r3,r2
  81379c:	2005883a 	mov	r2,r4
  8137a0:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  8137a4:	e0bffd17 	ldw	r2,-12(fp)
  8137a8:	10000915 	stw	zero,36(r2)
  8137ac:	00002106 	br	813834 <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  8137b0:	e0bffd17 	ldw	r2,-12(fp)
  8137b4:	10c00917 	ldw	r3,36(r2)
  8137b8:	00a00034 	movhi	r2,32768
  8137bc:	10bfff04 	addi	r2,r2,-4
  8137c0:	10c01c36 	bltu	r2,r3,813834 <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
  8137c4:	e0bffd17 	ldw	r2,-12(fp)
  8137c8:	10800917 	ldw	r2,36(r2)
  8137cc:	10c00044 	addi	r3,r2,1
  8137d0:	e0bffd17 	ldw	r2,-12(fp)
  8137d4:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
  8137d8:	e0bffd17 	ldw	r2,-12(fp)
  8137dc:	10c00917 	ldw	r3,36(r2)
  8137e0:	e0bffd17 	ldw	r2,-12(fp)
  8137e4:	10800117 	ldw	r2,4(r2)
  8137e8:	18801236 	bltu	r3,r2,813834 <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
  8137ec:	e0bffd17 	ldw	r2,-12(fp)
  8137f0:	10800c17 	ldw	r2,48(r2)
  8137f4:	e0bffa15 	stw	r2,-24(fp)
  8137f8:	00800104 	movi	r2,4
  8137fc:	e0bffb0d 	sth	r2,-20(fp)
  813800:	00800044 	movi	r2,1
  813804:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  813808:	008020b4 	movhi	r2,130
  81380c:	10aa3d44 	addi	r2,r2,-22283
  813810:	10800003 	ldbu	r2,0(r2)
  813814:	10803fcc 	andi	r2,r2,255
  813818:	1005003a 	cmpeq	r2,r2,zero
  81381c:	1000051e 	bne	r2,zero,813834 <altera_avalon_jtag_uart_timeout+0xf4>
  {
    OSFlagPost (group, flags, opt, &err);
  813820:	e17ffb0b 	ldhu	r5,-20(fp)
  813824:	e1bffb83 	ldbu	r6,-18(fp)
  813828:	e1fffe04 	addi	r7,fp,-8
  81382c:	e13ffa17 	ldw	r4,-24(fp)
  813830:	080e12c0 	call	80e12c <OSFlagPost>
  813834:	008020b4 	movhi	r2,130
  813838:	10aa5204 	addi	r2,r2,-22200
  81383c:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
  813840:	e037883a 	mov	sp,fp
  813844:	dfc00117 	ldw	ra,4(sp)
  813848:	df000017 	ldw	fp,0(sp)
  81384c:	dec00204 	addi	sp,sp,8
  813850:	f800283a 	ret

00813854 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  813854:	defffc04 	addi	sp,sp,-16
  813858:	df000315 	stw	fp,12(sp)
  81385c:	df000304 	addi	fp,sp,12
  813860:	e13ffd15 	stw	r4,-12(fp)
  813864:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  813868:	00000706 	br	813888 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  81386c:	e0bffe17 	ldw	r2,-8(fp)
  813870:	1090000c 	andi	r2,r2,16384
  813874:	1005003a 	cmpeq	r2,r2,zero
  813878:	1000031e 	bne	r2,zero,813888 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  81387c:	00bffd44 	movi	r2,-11
  813880:	e0bfff15 	stw	r2,-4(fp)
  813884:	00000b06 	br	8138b4 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  813888:	e0bffd17 	ldw	r2,-12(fp)
  81388c:	10c01017 	ldw	r3,64(r2)
  813890:	e0bffd17 	ldw	r2,-12(fp)
  813894:	10800f17 	ldw	r2,60(r2)
  813898:	18800526 	beq	r3,r2,8138b0 <altera_avalon_jtag_uart_close+0x5c>
  81389c:	e0bffd17 	ldw	r2,-12(fp)
  8138a0:	10c00917 	ldw	r3,36(r2)
  8138a4:	e0bffd17 	ldw	r2,-12(fp)
  8138a8:	10800117 	ldw	r2,4(r2)
  8138ac:	18bfef36 	bltu	r3,r2,81386c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  8138b0:	e03fff15 	stw	zero,-4(fp)
  8138b4:	e0bfff17 	ldw	r2,-4(fp)
}
  8138b8:	e037883a 	mov	sp,fp
  8138bc:	df000017 	ldw	fp,0(sp)
  8138c0:	dec00104 	addi	sp,sp,4
  8138c4:	f800283a 	ret

008138c8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  8138c8:	defff804 	addi	sp,sp,-32
  8138cc:	df000715 	stw	fp,28(sp)
  8138d0:	df000704 	addi	fp,sp,28
  8138d4:	e13ffb15 	stw	r4,-20(fp)
  8138d8:	e17ffc15 	stw	r5,-16(fp)
  8138dc:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  8138e0:	00bff9c4 	movi	r2,-25
  8138e4:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  8138e8:	e0bffc17 	ldw	r2,-16(fp)
  8138ec:	e0bfff15 	stw	r2,-4(fp)
  8138f0:	e0ffff17 	ldw	r3,-4(fp)
  8138f4:	189a8060 	cmpeqi	r2,r3,27137
  8138f8:	1000041e 	bne	r2,zero,81390c <altera_avalon_jtag_uart_ioctl+0x44>
  8138fc:	e0ffff17 	ldw	r3,-4(fp)
  813900:	189a80a0 	cmpeqi	r2,r3,27138
  813904:	10001b1e 	bne	r2,zero,813974 <altera_avalon_jtag_uart_ioctl+0xac>
  813908:	00002706 	br	8139a8 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  81390c:	e0bffb17 	ldw	r2,-20(fp)
  813910:	10c00117 	ldw	r3,4(r2)
  813914:	00a00034 	movhi	r2,32768
  813918:	10bfffc4 	addi	r2,r2,-1
  81391c:	18802226 	beq	r3,r2,8139a8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  813920:	e0bffd17 	ldw	r2,-12(fp)
  813924:	10800017 	ldw	r2,0(r2)
  813928:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  81392c:	e0bff917 	ldw	r2,-28(fp)
  813930:	10800090 	cmplti	r2,r2,2
  813934:	1000071e 	bne	r2,zero,813954 <altera_avalon_jtag_uart_ioctl+0x8c>
  813938:	e0fff917 	ldw	r3,-28(fp)
  81393c:	00a00034 	movhi	r2,32768
  813940:	10bfffc4 	addi	r2,r2,-1
  813944:	18800326 	beq	r3,r2,813954 <altera_avalon_jtag_uart_ioctl+0x8c>
  813948:	e0bff917 	ldw	r2,-28(fp)
  81394c:	e0bffe15 	stw	r2,-8(fp)
  813950:	00000306 	br	813960 <altera_avalon_jtag_uart_ioctl+0x98>
  813954:	00e00034 	movhi	r3,32768
  813958:	18ffff84 	addi	r3,r3,-2
  81395c:	e0fffe15 	stw	r3,-8(fp)
  813960:	e0bffb17 	ldw	r2,-20(fp)
  813964:	e0fffe17 	ldw	r3,-8(fp)
  813968:	10c00115 	stw	r3,4(r2)
      rc = 0;
  81396c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  813970:	00000d06 	br	8139a8 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  813974:	e0bffb17 	ldw	r2,-20(fp)
  813978:	10c00117 	ldw	r3,4(r2)
  81397c:	00a00034 	movhi	r2,32768
  813980:	10bfffc4 	addi	r2,r2,-1
  813984:	18800826 	beq	r3,r2,8139a8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  813988:	e13ffd17 	ldw	r4,-12(fp)
  81398c:	e0bffb17 	ldw	r2,-20(fp)
  813990:	10c00917 	ldw	r3,36(r2)
  813994:	e0bffb17 	ldw	r2,-20(fp)
  813998:	10800117 	ldw	r2,4(r2)
  81399c:	1885803a 	cmpltu	r2,r3,r2
  8139a0:	20800015 	stw	r2,0(r4)
      rc = 0;
  8139a4:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  8139a8:	e0bffa17 	ldw	r2,-24(fp)
}
  8139ac:	e037883a 	mov	sp,fp
  8139b0:	df000017 	ldw	fp,0(sp)
  8139b4:	dec00104 	addi	sp,sp,4
  8139b8:	f800283a 	ret

008139bc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  8139bc:	deffeb04 	addi	sp,sp,-84
  8139c0:	dfc01415 	stw	ra,80(sp)
  8139c4:	df001315 	stw	fp,76(sp)
  8139c8:	df001304 	addi	fp,sp,76
  8139cc:	e13ffb15 	stw	r4,-20(fp)
  8139d0:	e17ffc15 	stw	r5,-16(fp)
  8139d4:	e1bffd15 	stw	r6,-12(fp)
  8139d8:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  8139dc:	e0bffc17 	ldw	r2,-16(fp)
  8139e0:	e0bff915 	stw	r2,-28(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
  8139e4:	e0bffb17 	ldw	r2,-20(fp)
  8139e8:	10800a17 	ldw	r2,40(r2)
  8139ec:	e0bff315 	stw	r2,-52(fp)
  8139f0:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
  8139f4:	e17ff40b 	ldhu	r5,-48(fp)
  8139f8:	e1bffa44 	addi	r6,fp,-23
  8139fc:	e13ff317 	ldw	r4,-52(fp)
  813a00:	08109c00 	call	8109c0 <OSSemPend>

  while (space > 0)
  813a04:	00006406 	br	813b98 <altera_avalon_jtag_uart_read+0x1dc>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  813a08:	e0bffb17 	ldw	r2,-20(fp)
  813a0c:	10800d17 	ldw	r2,52(r2)
  813a10:	e0bff615 	stw	r2,-40(fp)
      out = sp->rx_out;
  813a14:	e0bffb17 	ldw	r2,-20(fp)
  813a18:	10800e17 	ldw	r2,56(r2)
  813a1c:	e0bff515 	stw	r2,-44(fp)

      if (in >= out)
  813a20:	e0fff617 	ldw	r3,-40(fp)
  813a24:	e0bff517 	ldw	r2,-44(fp)
  813a28:	18800536 	bltu	r3,r2,813a40 <altera_avalon_jtag_uart_read+0x84>
        n = in - out;
  813a2c:	e0bff617 	ldw	r2,-40(fp)
  813a30:	e0fff517 	ldw	r3,-44(fp)
  813a34:	10c5c83a 	sub	r2,r2,r3
  813a38:	e0bff715 	stw	r2,-36(fp)
  813a3c:	00000406 	br	813a50 <altera_avalon_jtag_uart_read+0x94>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  813a40:	00820004 	movi	r2,2048
  813a44:	e0fff517 	ldw	r3,-44(fp)
  813a48:	10c5c83a 	sub	r2,r2,r3
  813a4c:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
  813a50:	e0bff717 	ldw	r2,-36(fp)
  813a54:	1005003a 	cmpeq	r2,r2,zero
  813a58:	10001f1e 	bne	r2,zero,813ad8 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
  813a5c:	e0fffd17 	ldw	r3,-12(fp)
  813a60:	e0bff717 	ldw	r2,-36(fp)
  813a64:	1880022e 	bgeu	r3,r2,813a70 <altera_avalon_jtag_uart_read+0xb4>
        n = space;
  813a68:	e0bffd17 	ldw	r2,-12(fp)
  813a6c:	e0bff715 	stw	r2,-36(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  813a70:	e0bffb17 	ldw	r2,-20(fp)
  813a74:	10c01104 	addi	r3,r2,68
  813a78:	e0bff517 	ldw	r2,-44(fp)
  813a7c:	1887883a 	add	r3,r3,r2
  813a80:	e0bff917 	ldw	r2,-28(fp)
  813a84:	1009883a 	mov	r4,r2
  813a88:	180b883a 	mov	r5,r3
  813a8c:	e1bff717 	ldw	r6,-36(fp)
  813a90:	08059b40 	call	8059b4 <memcpy>
      ptr   += n;
  813a94:	e0fff717 	ldw	r3,-36(fp)
  813a98:	e0bff917 	ldw	r2,-28(fp)
  813a9c:	10c5883a 	add	r2,r2,r3
  813aa0:	e0bff915 	stw	r2,-28(fp)
      space -= n;
  813aa4:	e0fffd17 	ldw	r3,-12(fp)
  813aa8:	e0bff717 	ldw	r2,-36(fp)
  813aac:	1885c83a 	sub	r2,r3,r2
  813ab0:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  813ab4:	e0fff517 	ldw	r3,-44(fp)
  813ab8:	e0bff717 	ldw	r2,-36(fp)
  813abc:	1885883a 	add	r2,r3,r2
  813ac0:	10c1ffcc 	andi	r3,r2,2047
  813ac4:	e0bffb17 	ldw	r2,-20(fp)
  813ac8:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
  813acc:	e0bffd17 	ldw	r2,-12(fp)
  813ad0:	10800048 	cmpgei	r2,r2,1
  813ad4:	103fcc1e 	bne	r2,zero,813a08 <altera_avalon_jtag_uart_read+0x4c>

    /* If we read any data then return it */
    if (ptr != buffer)
  813ad8:	e0fff917 	ldw	r3,-28(fp)
  813adc:	e0bffc17 	ldw	r2,-16(fp)
  813ae0:	1880301e 	bne	r3,r2,813ba4 <altera_avalon_jtag_uart_read+0x1e8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  813ae4:	e0bffe17 	ldw	r2,-8(fp)
  813ae8:	1090000c 	andi	r2,r2,16384
  813aec:	1004c03a 	cmpne	r2,r2,zero
  813af0:	10002c1e 	bne	r2,zero,813ba4 <altera_avalon_jtag_uart_read+0x1e8>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
  813af4:	008020b4 	movhi	r2,130
  813af8:	10aa3d44 	addi	r2,r2,-22283
  813afc:	10800003 	ldbu	r2,0(r2)
  813b00:	10803fcc 	andi	r2,r2,255
  813b04:	10800058 	cmpnei	r2,r2,1
  813b08:	1000161e 	bne	r2,zero,813b64 <altera_avalon_jtag_uart_read+0x1a8>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
  813b0c:	e0bffb17 	ldw	r2,-20(fp)
  813b10:	10800c17 	ldw	r2,48(r2)
  813b14:	e0bff015 	stw	r2,-64(fp)
  813b18:	00800144 	movi	r2,5
  813b1c:	e0bff10d 	sth	r2,-60(fp)
  813b20:	00bfe0c4 	movi	r2,-125
  813b24:	e0bff185 	stb	r2,-58(fp)
  813b28:	e03ff20d 	sth	zero,-56(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  813b2c:	008020b4 	movhi	r2,130
  813b30:	10aa3d44 	addi	r2,r2,-22283
  813b34:	10800003 	ldbu	r2,0(r2)
  813b38:	10803fcc 	andi	r2,r2,255
  813b3c:	1005003a 	cmpeq	r2,r2,zero
  813b40:	1000111e 	bne	r2,zero,813b88 <altera_avalon_jtag_uart_read+0x1cc>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  813b44:	e17ff10b 	ldhu	r5,-60(fp)
  813b48:	e1bff183 	ldbu	r6,-58(fp)
  813b4c:	e1fff20b 	ldhu	r7,-56(fp)
  813b50:	e0bffa04 	addi	r2,fp,-24
  813b54:	d8800015 	stw	r2,0(sp)
  813b58:	e13ff017 	ldw	r4,-64(fp)
  813b5c:	080da800 	call	80da80 <OSFlagPend>
    return err;
  813b60:	00000906 	br	813b88 <altera_avalon_jtag_uart_read+0x1cc>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  813b64:	e0bffb17 	ldw	r2,-20(fp)
  813b68:	10c00d17 	ldw	r3,52(r2)
  813b6c:	e0bff617 	ldw	r2,-40(fp)
  813b70:	1880051e 	bne	r3,r2,813b88 <altera_avalon_jtag_uart_read+0x1cc>
  813b74:	e0bffb17 	ldw	r2,-20(fp)
  813b78:	10c00917 	ldw	r3,36(r2)
  813b7c:	e0bffb17 	ldw	r2,-20(fp)
  813b80:	10800117 	ldw	r2,4(r2)
  813b84:	18bff736 	bltu	r3,r2,813b64 <altera_avalon_jtag_uart_read+0x1a8>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  813b88:	e0bffb17 	ldw	r2,-20(fp)
  813b8c:	10c00d17 	ldw	r3,52(r2)
  813b90:	e0bff617 	ldw	r2,-40(fp)
  813b94:	18800326 	beq	r3,r2,813ba4 <altera_avalon_jtag_uart_read+0x1e8>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  813b98:	e0bffd17 	ldw	r2,-12(fp)
  813b9c:	10800048 	cmpgei	r2,r2,1
  813ba0:	103f991e 	bne	r2,zero,813a08 <altera_avalon_jtag_uart_read+0x4c>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
  813ba4:	e0bffb17 	ldw	r2,-20(fp)
  813ba8:	11000a17 	ldw	r4,40(r2)
  813bac:	0810db80 	call	810db8 <OSSemPost>

  if (ptr != buffer)
  813bb0:	e0fff917 	ldw	r3,-28(fp)
  813bb4:	e0bffc17 	ldw	r2,-16(fp)
  813bb8:	18801926 	beq	r3,r2,813c20 <altera_avalon_jtag_uart_read+0x264>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813bbc:	0005303a 	rdctl	r2,status
  813bc0:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813bc4:	e0ffef17 	ldw	r3,-68(fp)
  813bc8:	00bfff84 	movi	r2,-2
  813bcc:	1884703a 	and	r2,r3,r2
  813bd0:	1001703a 	wrctl	status,r2
  
  return context;
  813bd4:	e0bfef17 	ldw	r2,-68(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  813bd8:	e0bff815 	stw	r2,-32(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  813bdc:	e0bffb17 	ldw	r2,-20(fp)
  813be0:	10800817 	ldw	r2,32(r2)
  813be4:	10c00054 	ori	r3,r2,1
  813be8:	e0bffb17 	ldw	r2,-20(fp)
  813bec:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  813bf0:	e0bffb17 	ldw	r2,-20(fp)
  813bf4:	10800017 	ldw	r2,0(r2)
  813bf8:	11000104 	addi	r4,r2,4
  813bfc:	e0bffb17 	ldw	r2,-20(fp)
  813c00:	10800817 	ldw	r2,32(r2)
  813c04:	1007883a 	mov	r3,r2
  813c08:	2005883a 	mov	r2,r4
  813c0c:	10c00035 	stwio	r3,0(r2)
  813c10:	e0bff817 	ldw	r2,-32(fp)
  813c14:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813c18:	e0bfee17 	ldw	r2,-72(fp)
  813c1c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  813c20:	e0fff917 	ldw	r3,-28(fp)
  813c24:	e0bffc17 	ldw	r2,-16(fp)
  813c28:	18800526 	beq	r3,r2,813c40 <altera_avalon_jtag_uart_read+0x284>
    return ptr - buffer;
  813c2c:	e0fff917 	ldw	r3,-28(fp)
  813c30:	e0bffc17 	ldw	r2,-16(fp)
  813c34:	1887c83a 	sub	r3,r3,r2
  813c38:	e0ffff15 	stw	r3,-4(fp)
  813c3c:	00000906 	br	813c64 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
  813c40:	e0bffe17 	ldw	r2,-8(fp)
  813c44:	1090000c 	andi	r2,r2,16384
  813c48:	1005003a 	cmpeq	r2,r2,zero
  813c4c:	1000031e 	bne	r2,zero,813c5c <altera_avalon_jtag_uart_read+0x2a0>
    return -EWOULDBLOCK;
  813c50:	00bffd44 	movi	r2,-11
  813c54:	e0bfff15 	stw	r2,-4(fp)
  813c58:	00000206 	br	813c64 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
  813c5c:	00bffec4 	movi	r2,-5
  813c60:	e0bfff15 	stw	r2,-4(fp)
  813c64:	e0bfff17 	ldw	r2,-4(fp)
}
  813c68:	e037883a 	mov	sp,fp
  813c6c:	dfc00117 	ldw	ra,4(sp)
  813c70:	df000017 	ldw	fp,0(sp)
  813c74:	dec00204 	addi	sp,sp,8
  813c78:	f800283a 	ret

00813c7c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  813c7c:	deffeb04 	addi	sp,sp,-84
  813c80:	dfc01415 	stw	ra,80(sp)
  813c84:	df001315 	stw	fp,76(sp)
  813c88:	df001304 	addi	fp,sp,76
  813c8c:	e13ffb15 	stw	r4,-20(fp)
  813c90:	e17ffc15 	stw	r5,-16(fp)
  813c94:	e1bffd15 	stw	r6,-12(fp)
  813c98:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  813c9c:	e03ff815 	stw	zero,-32(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  813ca0:	e0bffc17 	ldw	r2,-16(fp)
  813ca4:	e0bff515 	stw	r2,-44(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
  813ca8:	e0bffb17 	ldw	r2,-20(fp)
  813cac:	10800b17 	ldw	r2,44(r2)
  813cb0:	e0bff315 	stw	r2,-52(fp)
  813cb4:	e03ff40d 	sth	zero,-48(fp)
  813cb8:	e17ff40b 	ldhu	r5,-48(fp)
  813cbc:	e1bffa04 	addi	r6,fp,-24
  813cc0:	e13ff317 	ldw	r4,-52(fp)
  813cc4:	08109c00 	call	8109c0 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  813cc8:	00003a06 	br	813db4 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  813ccc:	e0bffb17 	ldw	r2,-20(fp)
  813cd0:	10800f17 	ldw	r2,60(r2)
  813cd4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  813cd8:	e0bffb17 	ldw	r2,-20(fp)
  813cdc:	10801017 	ldw	r2,64(r2)
  813ce0:	e0bff815 	stw	r2,-32(fp)

      if (in < out)
  813ce4:	e0fff917 	ldw	r3,-28(fp)
  813ce8:	e0bff817 	ldw	r2,-32(fp)
  813cec:	1880062e 	bgeu	r3,r2,813d08 <altera_avalon_jtag_uart_write+0x8c>
        n = out - 1 - in;
  813cf0:	e0fff817 	ldw	r3,-32(fp)
  813cf4:	e0bff917 	ldw	r2,-28(fp)
  813cf8:	1885c83a 	sub	r2,r3,r2
  813cfc:	10bfffc4 	addi	r2,r2,-1
  813d00:	e0bff715 	stw	r2,-36(fp)
  813d04:	00000c06 	br	813d38 <altera_avalon_jtag_uart_write+0xbc>
      else if (out > 0)
  813d08:	e0bff817 	ldw	r2,-32(fp)
  813d0c:	1005003a 	cmpeq	r2,r2,zero
  813d10:	1000051e 	bne	r2,zero,813d28 <altera_avalon_jtag_uart_write+0xac>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  813d14:	00820004 	movi	r2,2048
  813d18:	e0fff917 	ldw	r3,-28(fp)
  813d1c:	10c5c83a 	sub	r2,r2,r3
  813d20:	e0bff715 	stw	r2,-36(fp)
  813d24:	00000406 	br	813d38 <altera_avalon_jtag_uart_write+0xbc>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  813d28:	0081ffc4 	movi	r2,2047
  813d2c:	e0fff917 	ldw	r3,-28(fp)
  813d30:	10c5c83a 	sub	r2,r2,r3
  813d34:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
  813d38:	e0bff717 	ldw	r2,-36(fp)
  813d3c:	1005003a 	cmpeq	r2,r2,zero
  813d40:	10001f1e 	bne	r2,zero,813dc0 <altera_avalon_jtag_uart_write+0x144>
        break;

      if (n > count)
  813d44:	e0fffd17 	ldw	r3,-12(fp)
  813d48:	e0bff717 	ldw	r2,-36(fp)
  813d4c:	1880022e 	bgeu	r3,r2,813d58 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
  813d50:	e0bffd17 	ldw	r2,-12(fp)
  813d54:	e0bff715 	stw	r2,-36(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  813d58:	e0bffb17 	ldw	r2,-20(fp)
  813d5c:	10c21104 	addi	r3,r2,2116
  813d60:	e0bff917 	ldw	r2,-28(fp)
  813d64:	1885883a 	add	r2,r3,r2
  813d68:	e0fffc17 	ldw	r3,-16(fp)
  813d6c:	1009883a 	mov	r4,r2
  813d70:	180b883a 	mov	r5,r3
  813d74:	e1bff717 	ldw	r6,-36(fp)
  813d78:	08059b40 	call	8059b4 <memcpy>
      ptr   += n;
  813d7c:	e0fff717 	ldw	r3,-36(fp)
  813d80:	e0bffc17 	ldw	r2,-16(fp)
  813d84:	10c5883a 	add	r2,r2,r3
  813d88:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  813d8c:	e0fffd17 	ldw	r3,-12(fp)
  813d90:	e0bff717 	ldw	r2,-36(fp)
  813d94:	1885c83a 	sub	r2,r3,r2
  813d98:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  813d9c:	e0fff917 	ldw	r3,-28(fp)
  813da0:	e0bff717 	ldw	r2,-36(fp)
  813da4:	1885883a 	add	r2,r3,r2
  813da8:	10c1ffcc 	andi	r3,r2,2047
  813dac:	e0bffb17 	ldw	r2,-20(fp)
  813db0:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  813db4:	e0bffd17 	ldw	r2,-12(fp)
  813db8:	10800048 	cmpgei	r2,r2,1
  813dbc:	103fc31e 	bne	r2,zero,813ccc <altera_avalon_jtag_uart_write+0x50>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813dc0:	0005303a 	rdctl	r2,status
  813dc4:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813dc8:	e0fff217 	ldw	r3,-56(fp)
  813dcc:	00bfff84 	movi	r2,-2
  813dd0:	1884703a 	and	r2,r3,r2
  813dd4:	1001703a 	wrctl	status,r2
  
  return context;
  813dd8:	e0bff217 	ldw	r2,-56(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  813ddc:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  813de0:	e0bffb17 	ldw	r2,-20(fp)
  813de4:	10800817 	ldw	r2,32(r2)
  813de8:	10c00094 	ori	r3,r2,2
  813dec:	e0bffb17 	ldw	r2,-20(fp)
  813df0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  813df4:	e0bffb17 	ldw	r2,-20(fp)
  813df8:	10800017 	ldw	r2,0(r2)
  813dfc:	11000104 	addi	r4,r2,4
  813e00:	e0bffb17 	ldw	r2,-20(fp)
  813e04:	10800817 	ldw	r2,32(r2)
  813e08:	1007883a 	mov	r3,r2
  813e0c:	2005883a 	mov	r2,r4
  813e10:	10c00035 	stwio	r3,0(r2)
  813e14:	e0bff617 	ldw	r2,-40(fp)
  813e18:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813e1c:	e0bff117 	ldw	r2,-60(fp)
  813e20:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  813e24:	e0bffd17 	ldw	r2,-12(fp)
  813e28:	10800050 	cmplti	r2,r2,1
  813e2c:	10002d1e 	bne	r2,zero,813ee4 <altera_avalon_jtag_uart_write+0x268>
    {
      if (flags & O_NONBLOCK)
  813e30:	e0bffe17 	ldw	r2,-8(fp)
  813e34:	1090000c 	andi	r2,r2,16384
  813e38:	1004c03a 	cmpne	r2,r2,zero
  813e3c:	10002c1e 	bne	r2,zero,813ef0 <altera_avalon_jtag_uart_write+0x274>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
  813e40:	008020b4 	movhi	r2,130
  813e44:	10aa3d44 	addi	r2,r2,-22283
  813e48:	10800003 	ldbu	r2,0(r2)
  813e4c:	10803fcc 	andi	r2,r2,255
  813e50:	10800058 	cmpnei	r2,r2,1
  813e54:	1000161e 	bne	r2,zero,813eb0 <altera_avalon_jtag_uart_write+0x234>
         * When running in a multi-threaded mode, we pend on the write event
         * flag set or the timeout flag in the isr. This avoids wasting CPU
         * cycles waiting in this thread, when we could be doing something
         * more profitable elsewhere.
         */
        ALT_FLAG_PEND (sp->events,
  813e58:	e0bffb17 	ldw	r2,-20(fp)
  813e5c:	10800c17 	ldw	r2,48(r2)
  813e60:	e0bfee15 	stw	r2,-72(fp)
  813e64:	00800184 	movi	r2,6
  813e68:	e0bfef0d 	sth	r2,-68(fp)
  813e6c:	00bfe0c4 	movi	r2,-125
  813e70:	e0bfef85 	stb	r2,-66(fp)
  813e74:	e03ff00d 	sth	zero,-64(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  813e78:	008020b4 	movhi	r2,130
  813e7c:	10aa3d44 	addi	r2,r2,-22283
  813e80:	10800003 	ldbu	r2,0(r2)
  813e84:	10803fcc 	andi	r2,r2,255
  813e88:	1005003a 	cmpeq	r2,r2,zero
  813e8c:	1000111e 	bne	r2,zero,813ed4 <altera_avalon_jtag_uart_write+0x258>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  813e90:	e17fef0b 	ldhu	r5,-68(fp)
  813e94:	e1bfef83 	ldbu	r6,-66(fp)
  813e98:	e1fff00b 	ldhu	r7,-64(fp)
  813e9c:	e0bffa44 	addi	r2,fp,-23
  813ea0:	d8800015 	stw	r2,0(sp)
  813ea4:	e13fee17 	ldw	r4,-72(fp)
  813ea8:	080da800 	call	80da80 <OSFlagPend>
    return err;
  813eac:	00000906 	br	813ed4 <altera_avalon_jtag_uart_write+0x258>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  813eb0:	e0bffb17 	ldw	r2,-20(fp)
  813eb4:	10c01017 	ldw	r3,64(r2)
  813eb8:	e0bff817 	ldw	r2,-32(fp)
  813ebc:	1880051e 	bne	r3,r2,813ed4 <altera_avalon_jtag_uart_write+0x258>
  813ec0:	e0bffb17 	ldw	r2,-20(fp)
  813ec4:	10c00917 	ldw	r3,36(r2)
  813ec8:	e0bffb17 	ldw	r2,-20(fp)
  813ecc:	10800117 	ldw	r2,4(r2)
  813ed0:	18bff736 	bltu	r3,r2,813eb0 <altera_avalon_jtag_uart_write+0x234>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  813ed4:	e0bffb17 	ldw	r2,-20(fp)
  813ed8:	10c01017 	ldw	r3,64(r2)
  813edc:	e0bff817 	ldw	r2,-32(fp)
  813ee0:	18800326 	beq	r3,r2,813ef0 <altera_avalon_jtag_uart_write+0x274>
        break;
    }
  }
  while (count > 0);
  813ee4:	e0bffd17 	ldw	r2,-12(fp)
  813ee8:	10800048 	cmpgei	r2,r2,1
  813eec:	103fb11e 	bne	r2,zero,813db4 <altera_avalon_jtag_uart_write+0x138>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
  813ef0:	e0bffb17 	ldw	r2,-20(fp)
  813ef4:	11000b17 	ldw	r4,44(r2)
  813ef8:	0810db80 	call	810db8 <OSSemPost>

  if (ptr != start)
  813efc:	e0fffc17 	ldw	r3,-16(fp)
  813f00:	e0bff517 	ldw	r2,-44(fp)
  813f04:	18800526 	beq	r3,r2,813f1c <altera_avalon_jtag_uart_write+0x2a0>
    return ptr - start;
  813f08:	e0fffc17 	ldw	r3,-16(fp)
  813f0c:	e0bff517 	ldw	r2,-44(fp)
  813f10:	1887c83a 	sub	r3,r3,r2
  813f14:	e0ffff15 	stw	r3,-4(fp)
  813f18:	00000906 	br	813f40 <altera_avalon_jtag_uart_write+0x2c4>
  else if (flags & O_NONBLOCK)
  813f1c:	e0bffe17 	ldw	r2,-8(fp)
  813f20:	1090000c 	andi	r2,r2,16384
  813f24:	1005003a 	cmpeq	r2,r2,zero
  813f28:	1000031e 	bne	r2,zero,813f38 <altera_avalon_jtag_uart_write+0x2bc>
    return -EWOULDBLOCK;
  813f2c:	00bffd44 	movi	r2,-11
  813f30:	e0bfff15 	stw	r2,-4(fp)
  813f34:	00000206 	br	813f40 <altera_avalon_jtag_uart_write+0x2c4>
  else
    return -EIO; /* Host not connected */
  813f38:	00bffec4 	movi	r2,-5
  813f3c:	e0bfff15 	stw	r2,-4(fp)
  813f40:	e0bfff17 	ldw	r2,-4(fp)
}
  813f44:	e037883a 	mov	sp,fp
  813f48:	dfc00117 	ldw	ra,4(sp)
  813f4c:	df000017 	ldw	fp,0(sp)
  813f50:	dec00204 	addi	sp,sp,8
  813f54:	f800283a 	ret

00813f58 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  813f58:	defff904 	addi	sp,sp,-28
  813f5c:	dfc00615 	stw	ra,24(sp)
  813f60:	df000515 	stw	fp,20(sp)
  813f64:	df000504 	addi	fp,sp,20
  813f68:	e13ffe15 	stw	r4,-8(fp)
  813f6c:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  813f70:	e0bffe17 	ldw	r2,-8(fp)
  813f74:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  813f78:	e0bffe17 	ldw	r2,-8(fp)
  813f7c:	10800104 	addi	r2,r2,4
  813f80:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813f84:	0005303a 	rdctl	r2,status
  813f88:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813f8c:	e0fffc17 	ldw	r3,-16(fp)
  813f90:	00bfff84 	movi	r2,-2
  813f94:	1884703a 	and	r2,r3,r2
  813f98:	1001703a 	wrctl	status,r2
  
  return context;
  813f9c:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  813fa0:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
  813fa4:	0815fa00 	call	815fa0 <alt_tick>
  813fa8:	e0bffd17 	ldw	r2,-12(fp)
  813fac:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813fb0:	e0bffb17 	ldw	r2,-20(fp)
  813fb4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  813fb8:	e037883a 	mov	sp,fp
  813fbc:	dfc00117 	ldw	ra,4(sp)
  813fc0:	df000017 	ldw	fp,0(sp)
  813fc4:	dec00204 	addi	sp,sp,8
  813fc8:	f800283a 	ret

00813fcc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  813fcc:	defff904 	addi	sp,sp,-28
  813fd0:	dfc00615 	stw	ra,24(sp)
  813fd4:	df000515 	stw	fp,20(sp)
  813fd8:	df000504 	addi	fp,sp,20
  813fdc:	e13ffc15 	stw	r4,-16(fp)
  813fe0:	e17ffd15 	stw	r5,-12(fp)
  813fe4:	e1bffe15 	stw	r6,-8(fp)
  813fe8:	e1ffff15 	stw	r7,-4(fp)
  813fec:	e0bfff17 	ldw	r2,-4(fp)
  813ff0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  813ff4:	008020b4 	movhi	r2,130
  813ff8:	10aa5204 	addi	r2,r2,-22200
  813ffc:	10800017 	ldw	r2,0(r2)
  814000:	1004c03a 	cmpne	r2,r2,zero
  814004:	1000041e 	bne	r2,zero,814018 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  814008:	00c020b4 	movhi	r3,130
  81400c:	18ea5204 	addi	r3,r3,-22200
  814010:	e0bffb17 	ldw	r2,-20(fp)
  814014:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  814018:	e0bffc17 	ldw	r2,-16(fp)
  81401c:	10800104 	addi	r2,r2,4
  814020:	1007883a 	mov	r3,r2
  814024:	008001c4 	movi	r2,7
  814028:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
  81402c:	e13ffe17 	ldw	r4,-8(fp)
  814030:	e17ffc17 	ldw	r5,-16(fp)
  814034:	01802074 	movhi	r6,129
  814038:	318fd604 	addi	r6,r6,16216
  81403c:	0815a640 	call	815a64 <alt_irq_register>
#endif  
}
  814040:	e037883a 	mov	sp,fp
  814044:	dfc00117 	ldw	ra,4(sp)
  814048:	df000017 	ldw	fp,0(sp)
  81404c:	dec00204 	addi	sp,sp,8
  814050:	f800283a 	ret

00814054 <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
  814054:	defffc04 	addi	sp,sp,-16
  814058:	dfc00315 	stw	ra,12(sp)
  81405c:	df000215 	stw	fp,8(sp)
  814060:	df000204 	addi	fp,sp,8
  814064:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
  814068:	e13fff17 	ldw	r4,-4(fp)
  81406c:	014020b4 	movhi	r5,130
  814070:	29632a04 	addi	r5,r5,-29528
  814074:	08158640 	call	815864 <alt_find_dev>
  814078:	e0bffe15 	stw	r2,-8(fp)
  return dev;
  81407c:	e0bffe17 	ldw	r2,-8(fp)
}
  814080:	e037883a 	mov	sp,fp
  814084:	dfc00117 	ldw	ra,4(sp)
  814088:	df000017 	ldw	fp,0(sp)
  81408c:	dec00204 	addi	sp,sp,8
  814090:	f800283a 	ret

00814094 <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
  814094:	defffd04 	addi	sp,sp,-12
  814098:	df000215 	stw	fp,8(sp)
  81409c:	df000204 	addi	fp,sp,8
  8140a0:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  8140a4:	e0bfff17 	ldw	r2,-4(fp)
  8140a8:	10800a17 	ldw	r2,40(r2)
  8140ac:	10800037 	ldwio	r2,0(r2)
  8140b0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
  8140b4:	e0bffe17 	ldw	r2,-8(fp)
  8140b8:	10800054 	ori	r2,r2,1
  8140bc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  8140c0:	e0bfff17 	ldw	r2,-4(fp)
  8140c4:	10800a17 	ldw	r2,40(r2)
  8140c8:	e0fffe17 	ldw	r3,-8(fp)
  8140cc:	10c00035 	stwio	r3,0(r2)
}
  8140d0:	e037883a 	mov	sp,fp
  8140d4:	df000017 	ldw	fp,0(sp)
  8140d8:	dec00104 	addi	sp,sp,4
  8140dc:	f800283a 	ret

008140e0 <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
  8140e0:	defffd04 	addi	sp,sp,-12
  8140e4:	df000215 	stw	fp,8(sp)
  8140e8:	df000204 	addi	fp,sp,8
  8140ec:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  8140f0:	e0bfff17 	ldw	r2,-4(fp)
  8140f4:	10800a17 	ldw	r2,40(r2)
  8140f8:	10800037 	ldwio	r2,0(r2)
  8140fc:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
  814100:	e0fffe17 	ldw	r3,-8(fp)
  814104:	00bfff84 	movi	r2,-2
  814108:	1884703a 	and	r2,r3,r2
  81410c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  814110:	e0bfff17 	ldw	r2,-4(fp)
  814114:	10800a17 	ldw	r2,40(r2)
  814118:	e0fffe17 	ldw	r3,-8(fp)
  81411c:	10c00035 	stwio	r3,0(r2)
}
  814120:	e037883a 	mov	sp,fp
  814124:	df000017 	ldw	fp,0(sp)
  814128:	dec00104 	addi	sp,sp,4
  81412c:	f800283a 	ret

00814130 <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
  814130:	defffd04 	addi	sp,sp,-12
  814134:	df000215 	stw	fp,8(sp)
  814138:	df000204 	addi	fp,sp,8
  81413c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  814140:	e0bfff17 	ldw	r2,-4(fp)
  814144:	10800a17 	ldw	r2,40(r2)
  814148:	10800037 	ldwio	r2,0(r2)
  81414c:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
  814150:	e0bffe17 	ldw	r2,-8(fp)
  814154:	10800094 	ori	r2,r2,2
  814158:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  81415c:	e0bfff17 	ldw	r2,-4(fp)
  814160:	10800a17 	ldw	r2,40(r2)
  814164:	e0fffe17 	ldw	r3,-8(fp)
  814168:	10c00035 	stwio	r3,0(r2)
}
  81416c:	e037883a 	mov	sp,fp
  814170:	df000017 	ldw	fp,0(sp)
  814174:	dec00104 	addi	sp,sp,4
  814178:	f800283a 	ret

0081417c <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
  81417c:	defffd04 	addi	sp,sp,-12
  814180:	df000215 	stw	fp,8(sp)
  814184:	df000204 	addi	fp,sp,8
  814188:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  81418c:	e0bfff17 	ldw	r2,-4(fp)
  814190:	10800a17 	ldw	r2,40(r2)
  814194:	10800037 	ldwio	r2,0(r2)
  814198:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
  81419c:	e0fffe17 	ldw	r3,-8(fp)
  8141a0:	00bfff44 	movi	r2,-3
  8141a4:	1884703a 	and	r2,r3,r2
  8141a8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  8141ac:	e0bfff17 	ldw	r2,-4(fp)
  8141b0:	10800a17 	ldw	r2,40(r2)
  8141b4:	e0fffe17 	ldw	r3,-8(fp)
  8141b8:	10c00035 	stwio	r3,0(r2)
}
  8141bc:	e037883a 	mov	sp,fp
  8141c0:	df000017 	ldw	fp,0(sp)
  8141c4:	dec00104 	addi	sp,sp,4
  8141c8:	f800283a 	ret

008141cc <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
  8141cc:	defffd04 	addi	sp,sp,-12
  8141d0:	df000215 	stw	fp,8(sp)
  8141d4:	df000204 	addi	fp,sp,8
  8141d8:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  8141dc:	e0bfff17 	ldw	r2,-4(fp)
  8141e0:	10800a17 	ldw	r2,40(r2)
  8141e4:	10800037 	ldwio	r2,0(r2)
  8141e8:	e0bffe15 	stw	r2,-8(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
  8141ec:	e0bffe17 	ldw	r2,-8(fp)
  8141f0:	1080400c 	andi	r2,r2,256
  8141f4:	1004c03a 	cmpne	r2,r2,zero
}
  8141f8:	e037883a 	mov	sp,fp
  8141fc:	df000017 	ldw	fp,0(sp)
  814200:	dec00104 	addi	sp,sp,4
  814204:	f800283a 	ret

00814208 <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
  814208:	defffd04 	addi	sp,sp,-12
  81420c:	df000215 	stw	fp,8(sp)
  814210:	df000204 	addi	fp,sp,8
  814214:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  814218:	e0bfff17 	ldw	r2,-4(fp)
  81421c:	10800a17 	ldw	r2,40(r2)
  814220:	10800037 	ldwio	r2,0(r2)
  814224:	e0bffe15 	stw	r2,-8(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
  814228:	e0bffe17 	ldw	r2,-8(fp)
  81422c:	1080800c 	andi	r2,r2,512
  814230:	1004c03a 	cmpne	r2,r2,zero
}
  814234:	e037883a 	mov	sp,fp
  814238:	df000017 	ldw	fp,0(sp)
  81423c:	dec00104 	addi	sp,sp,4
  814240:	f800283a 	ret

00814244 <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
  814244:	defffd04 	addi	sp,sp,-12
  814248:	df000215 	stw	fp,8(sp)
  81424c:	df000204 	addi	fp,sp,8
  814250:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  814254:	e0bfff17 	ldw	r2,-4(fp)
  814258:	10800a17 	ldw	r2,40(r2)
  81425c:	10800037 	ldwio	r2,0(r2)
  814260:	e0bffe15 	stw	r2,-8(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
  814264:	e0bffe17 	ldw	r2,-8(fp)
  814268:	10800114 	ori	r2,r2,4
  81426c:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
  814270:	e0bffe17 	ldw	r2,-8(fp)
  814274:	10800214 	ori	r2,r2,8
  814278:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  81427c:	e0bfff17 	ldw	r2,-4(fp)
  814280:	10800a17 	ldw	r2,40(r2)
  814284:	e0fffe17 	ldw	r3,-8(fp)
  814288:	10c00035 	stwio	r3,0(r2)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
  81428c:	e0fffe17 	ldw	r3,-8(fp)
  814290:	00bffec4 	movi	r2,-5
  814294:	1884703a 	and	r2,r3,r2
  814298:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
  81429c:	e0fffe17 	ldw	r3,-8(fp)
  8142a0:	00bffdc4 	movi	r2,-9
  8142a4:	1884703a 	and	r2,r3,r2
  8142a8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  8142ac:	e0bfff17 	ldw	r2,-4(fp)
  8142b0:	10800a17 	ldw	r2,40(r2)
  8142b4:	e0fffe17 	ldw	r3,-8(fp)
  8142b8:	10c00035 	stwio	r3,0(r2)
}
  8142bc:	e037883a 	mov	sp,fp
  8142c0:	df000017 	ldw	fp,0(sp)
  8142c4:	dec00104 	addi	sp,sp,4
  8142c8:	f800283a 	ret

008142cc <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
  8142cc:	defffb04 	addi	sp,sp,-20
  8142d0:	df000415 	stw	fp,16(sp)
  8142d4:	df000404 	addi	fp,sp,16
  8142d8:	e13ffd15 	stw	r4,-12(fp)
  8142dc:	e17ffe15 	stw	r5,-8(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  8142e0:	e0bffd17 	ldw	r2,-12(fp)
  8142e4:	10800a17 	ldw	r2,40(r2)
  8142e8:	10800104 	addi	r2,r2,4
  8142ec:	10800037 	ldwio	r2,0(r2)
  8142f0:	e0bffc15 	stw	r2,-16(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  8142f4:	e0bffe17 	ldw	r2,-8(fp)
  8142f8:	1004c03a 	cmpne	r2,r2,zero
  8142fc:	1000051e 	bne	r2,zero,814314 <alt_up_audio_read_fifo_avail+0x48>
  814300:	e0bffc17 	ldw	r2,-16(fp)
  814304:	10bfc00c 	andi	r2,r2,65280
  814308:	1004d23a 	srli	r2,r2,8
  81430c:	e0bfff15 	stw	r2,-4(fp)
  814310:	00000306 	br	814320 <alt_up_audio_read_fifo_avail+0x54>
  814314:	e0bffc17 	ldw	r2,-16(fp)
  814318:	10803fcc 	andi	r2,r2,255
  81431c:	e0bfff15 	stw	r2,-4(fp)
  814320:	e0bfff17 	ldw	r2,-4(fp)
  814324:	e0bffc15 	stw	r2,-16(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
  814328:	e0bffc17 	ldw	r2,-16(fp)
}
  81432c:	e037883a 	mov	sp,fp
  814330:	df000017 	ldw	fp,0(sp)
  814334:	dec00104 	addi	sp,sp,4
  814338:	f800283a 	ret

0081433c <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  81433c:	defff904 	addi	sp,sp,-28
  814340:	dfc00615 	stw	ra,24(sp)
  814344:	df000515 	stw	fp,20(sp)
  814348:	df000504 	addi	fp,sp,20
  81434c:	e13ffc15 	stw	r4,-16(fp)
  814350:	e17ffd15 	stw	r5,-12(fp)
  814354:	e1bffe15 	stw	r6,-8(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
  814358:	e13ffc17 	ldw	r4,-16(fp)
  81435c:	01400044 	movi	r5,1
  814360:	08142cc0 	call	8142cc <alt_up_audio_read_fifo_avail>
  814364:	e0bffb15 	stw	r2,-20(fp)
	if (data_words <= BUF_THRESHOLD)
  814368:	e0bffb17 	ldw	r2,-20(fp)
  81436c:	10801868 	cmpgeui	r2,r2,97
  814370:	1000021e 	bne	r2,zero,81437c <alt_up_audio_record_r+0x40>
		return 0;
  814374:	e03fff15 	stw	zero,-4(fp)
  814378:	00000606 	br	814394 <alt_up_audio_record_r+0x58>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
  81437c:	e13ffc17 	ldw	r4,-16(fp)
  814380:	e17ffd17 	ldw	r5,-12(fp)
  814384:	e1bffe17 	ldw	r6,-8(fp)
  814388:	01c00044 	movi	r7,1
  81438c:	08145700 	call	814570 <alt_up_audio_read_fifo>
  814390:	e0bfff15 	stw	r2,-4(fp)
  814394:	e0bfff17 	ldw	r2,-4(fp)
}
  814398:	e037883a 	mov	sp,fp
  81439c:	dfc00117 	ldw	ra,4(sp)
  8143a0:	df000017 	ldw	fp,0(sp)
  8143a4:	dec00204 	addi	sp,sp,8
  8143a8:	f800283a 	ret

008143ac <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  8143ac:	defff904 	addi	sp,sp,-28
  8143b0:	dfc00615 	stw	ra,24(sp)
  8143b4:	df000515 	stw	fp,20(sp)
  8143b8:	df000504 	addi	fp,sp,20
  8143bc:	e13ffc15 	stw	r4,-16(fp)
  8143c0:	e17ffd15 	stw	r5,-12(fp)
  8143c4:	e1bffe15 	stw	r6,-8(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
  8143c8:	e13ffc17 	ldw	r4,-16(fp)
  8143cc:	000b883a 	mov	r5,zero
  8143d0:	08142cc0 	call	8142cc <alt_up_audio_read_fifo_avail>
  8143d4:	e0bffb15 	stw	r2,-20(fp)
	if (data_words <= BUF_THRESHOLD)
  8143d8:	e0bffb17 	ldw	r2,-20(fp)
  8143dc:	10801868 	cmpgeui	r2,r2,97
  8143e0:	1000021e 	bne	r2,zero,8143ec <alt_up_audio_record_l+0x40>
		return 0;
  8143e4:	e03fff15 	stw	zero,-4(fp)
  8143e8:	00000606 	br	814404 <alt_up_audio_record_l+0x58>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
  8143ec:	e13ffc17 	ldw	r4,-16(fp)
  8143f0:	e17ffd17 	ldw	r5,-12(fp)
  8143f4:	e1bffe17 	ldw	r6,-8(fp)
  8143f8:	000f883a 	mov	r7,zero
  8143fc:	08145700 	call	814570 <alt_up_audio_read_fifo>
  814400:	e0bfff15 	stw	r2,-4(fp)
  814404:	e0bfff17 	ldw	r2,-4(fp)
}
  814408:	e037883a 	mov	sp,fp
  81440c:	dfc00117 	ldw	ra,4(sp)
  814410:	df000017 	ldw	fp,0(sp)
  814414:	dec00204 	addi	sp,sp,8
  814418:	f800283a 	ret

0081441c <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
  81441c:	defffb04 	addi	sp,sp,-20
  814420:	df000415 	stw	fp,16(sp)
  814424:	df000404 	addi	fp,sp,16
  814428:	e13ffd15 	stw	r4,-12(fp)
  81442c:	e17ffe15 	stw	r5,-8(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  814430:	e0bffd17 	ldw	r2,-12(fp)
  814434:	10800a17 	ldw	r2,40(r2)
  814438:	10800104 	addi	r2,r2,4
  81443c:	10800037 	ldwio	r2,0(r2)
  814440:	e0bffc15 	stw	r2,-16(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  814444:	e0bffe17 	ldw	r2,-8(fp)
  814448:	1004c03a 	cmpne	r2,r2,zero
  81444c:	1000051e 	bne	r2,zero,814464 <alt_up_audio_write_fifo_space+0x48>
  814450:	e0bffc17 	ldw	r2,-16(fp)
  814454:	10bfc02c 	andhi	r2,r2,65280
  814458:	1004d63a 	srli	r2,r2,24
  81445c:	e0bfff15 	stw	r2,-4(fp)
  814460:	00000406 	br	814474 <alt_up_audio_write_fifo_space+0x58>
  814464:	e0bffc17 	ldw	r2,-16(fp)
  814468:	10803fec 	andhi	r2,r2,255
  81446c:	1004d43a 	srli	r2,r2,16
  814470:	e0bfff15 	stw	r2,-4(fp)
  814474:	e0bfff17 	ldw	r2,-4(fp)
  814478:	e0bffc15 	stw	r2,-16(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
  81447c:	e0bffc17 	ldw	r2,-16(fp)
}
  814480:	e037883a 	mov	sp,fp
  814484:	df000017 	ldw	fp,0(sp)
  814488:	dec00104 	addi	sp,sp,4
  81448c:	f800283a 	ret

00814490 <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  814490:	defff904 	addi	sp,sp,-28
  814494:	dfc00615 	stw	ra,24(sp)
  814498:	df000515 	stw	fp,20(sp)
  81449c:	df000504 	addi	fp,sp,20
  8144a0:	e13ffc15 	stw	r4,-16(fp)
  8144a4:	e17ffd15 	stw	r5,-12(fp)
  8144a8:	e1bffe15 	stw	r6,-8(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
  8144ac:	e13ffc17 	ldw	r4,-16(fp)
  8144b0:	01400044 	movi	r5,1
  8144b4:	081441c0 	call	81441c <alt_up_audio_write_fifo_space>
  8144b8:	e0bffb15 	stw	r2,-20(fp)
	if (space <= BUF_THRESHOLD)
  8144bc:	e0bffb17 	ldw	r2,-20(fp)
  8144c0:	10801868 	cmpgeui	r2,r2,97
  8144c4:	1000021e 	bne	r2,zero,8144d0 <alt_up_audio_play_r+0x40>
		return 0;
  8144c8:	e03fff15 	stw	zero,-4(fp)
  8144cc:	00000606 	br	8144e8 <alt_up_audio_play_r+0x58>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
  8144d0:	e13ffc17 	ldw	r4,-16(fp)
  8144d4:	e17ffd17 	ldw	r5,-12(fp)
  8144d8:	e1bffe17 	ldw	r6,-8(fp)
  8144dc:	01c00044 	movi	r7,1
  8144e0:	08146740 	call	814674 <alt_up_audio_write_fifo>
  8144e4:	e0bfff15 	stw	r2,-4(fp)
  8144e8:	e0bfff17 	ldw	r2,-4(fp)
}
  8144ec:	e037883a 	mov	sp,fp
  8144f0:	dfc00117 	ldw	ra,4(sp)
  8144f4:	df000017 	ldw	fp,0(sp)
  8144f8:	dec00204 	addi	sp,sp,8
  8144fc:	f800283a 	ret

00814500 <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  814500:	defff904 	addi	sp,sp,-28
  814504:	dfc00615 	stw	ra,24(sp)
  814508:	df000515 	stw	fp,20(sp)
  81450c:	df000504 	addi	fp,sp,20
  814510:	e13ffc15 	stw	r4,-16(fp)
  814514:	e17ffd15 	stw	r5,-12(fp)
  814518:	e1bffe15 	stw	r6,-8(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
  81451c:	e13ffc17 	ldw	r4,-16(fp)
  814520:	000b883a 	mov	r5,zero
  814524:	081441c0 	call	81441c <alt_up_audio_write_fifo_space>
  814528:	e0bffb15 	stw	r2,-20(fp)
	if (space <= BUF_THRESHOLD)
  81452c:	e0bffb17 	ldw	r2,-20(fp)
  814530:	10801868 	cmpgeui	r2,r2,97
  814534:	1000021e 	bne	r2,zero,814540 <alt_up_audio_play_l+0x40>
		return 0;
  814538:	e03fff15 	stw	zero,-4(fp)
  81453c:	00000606 	br	814558 <alt_up_audio_play_l+0x58>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
  814540:	e13ffc17 	ldw	r4,-16(fp)
  814544:	e17ffd17 	ldw	r5,-12(fp)
  814548:	e1bffe17 	ldw	r6,-8(fp)
  81454c:	000f883a 	mov	r7,zero
  814550:	08146740 	call	814674 <alt_up_audio_write_fifo>
  814554:	e0bfff15 	stw	r2,-4(fp)
  814558:	e0bfff17 	ldw	r2,-4(fp)
}
  81455c:	e037883a 	mov	sp,fp
  814560:	dfc00117 	ldw	ra,4(sp)
  814564:	df000017 	ldw	fp,0(sp)
  814568:	dec00204 	addi	sp,sp,8
  81456c:	f800283a 	ret

00814570 <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
  814570:	defff604 	addi	sp,sp,-40
  814574:	df000915 	stw	fp,36(sp)
  814578:	df000904 	addi	fp,sp,36
  81457c:	e13ff915 	stw	r4,-28(fp)
  814580:	e17ffa15 	stw	r5,-24(fp)
  814584:	e1bffb15 	stw	r6,-20(fp)
  814588:	e1fffc15 	stw	r7,-16(fp)
	unsigned int fifospace;
	int count = 0;
  81458c:	e03ff715 	stw	zero,-36(fp)
	while ( count < len ) 
  814590:	00003006 	br	814654 <alt_up_audio_read_fifo+0xe4>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  814594:	e0bff917 	ldw	r2,-28(fp)
  814598:	10800a17 	ldw	r2,40(r2)
  81459c:	10800104 	addi	r2,r2,4
  8145a0:	10800037 	ldwio	r2,0(r2)
  8145a4:	e0bff815 	stw	r2,-32(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  8145a8:	e0bffc17 	ldw	r2,-16(fp)
  8145ac:	1004c03a 	cmpne	r2,r2,zero
  8145b0:	1000051e 	bne	r2,zero,8145c8 <alt_up_audio_read_fifo+0x58>
  8145b4:	e0bff817 	ldw	r2,-32(fp)
  8145b8:	10bfc00c 	andi	r2,r2,65280
  8145bc:	1004d23a 	srli	r2,r2,8
  8145c0:	e0bfff15 	stw	r2,-4(fp)
  8145c4:	00000306 	br	8145d4 <alt_up_audio_read_fifo+0x64>
  8145c8:	e0bff817 	ldw	r2,-32(fp)
  8145cc:	10803fcc 	andi	r2,r2,255
  8145d0:	e0bfff15 	stw	r2,-4(fp)
  8145d4:	e0bfff17 	ldw	r2,-4(fp)
  8145d8:	e0bff815 	stw	r2,-32(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
  8145dc:	e0bff817 	ldw	r2,-32(fp)
  8145e0:	1005003a 	cmpeq	r2,r2,zero
  8145e4:	10001e1e 	bne	r2,zero,814660 <alt_up_audio_read_fifo+0xf0>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
  8145e8:	e0bff717 	ldw	r2,-36(fp)
  8145ec:	1085883a 	add	r2,r2,r2
  8145f0:	1085883a 	add	r2,r2,r2
  8145f4:	1007883a 	mov	r3,r2
  8145f8:	e0bffa17 	ldw	r2,-24(fp)
  8145fc:	1887883a 	add	r3,r3,r2
  814600:	e0fffe15 	stw	r3,-8(fp)
  814604:	e0bffc17 	ldw	r2,-16(fp)
  814608:	1004c03a 	cmpne	r2,r2,zero
  81460c:	1000061e 	bne	r2,zero,814628 <alt_up_audio_read_fifo+0xb8>
  814610:	e0bff917 	ldw	r2,-28(fp)
  814614:	10800a17 	ldw	r2,40(r2)
  814618:	10800204 	addi	r2,r2,8
  81461c:	10800037 	ldwio	r2,0(r2)
  814620:	e0bffd15 	stw	r2,-12(fp)
  814624:	00000506 	br	81463c <alt_up_audio_read_fifo+0xcc>
  814628:	e0bff917 	ldw	r2,-28(fp)
  81462c:	10800a17 	ldw	r2,40(r2)
  814630:	10800304 	addi	r2,r2,12
  814634:	10800037 	ldwio	r2,0(r2)
  814638:	e0bffd15 	stw	r2,-12(fp)
  81463c:	e0fffd17 	ldw	r3,-12(fp)
  814640:	e0bffe17 	ldw	r2,-8(fp)
  814644:	10c00015 	stw	r3,0(r2)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
  814648:	e0bff717 	ldw	r2,-36(fp)
  81464c:	10800044 	addi	r2,r2,1
  814650:	e0bff715 	stw	r2,-36(fp)

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  814654:	e0fff717 	ldw	r3,-36(fp)
  814658:	e0bffb17 	ldw	r2,-20(fp)
  81465c:	18bfcd16 	blt	r3,r2,814594 <alt_up_audio_read_fifo+0x24>
		{
			// no more data to read
			break;
		}
	}
	return count;
  814660:	e0bff717 	ldw	r2,-36(fp)
}
  814664:	e037883a 	mov	sp,fp
  814668:	df000017 	ldw	fp,0(sp)
  81466c:	dec00104 	addi	sp,sp,4
  814670:	f800283a 	ret

00814674 <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
  814674:	defff804 	addi	sp,sp,-32
  814678:	df000715 	stw	fp,28(sp)
  81467c:	df000704 	addi	fp,sp,28
  814680:	e13ffb15 	stw	r4,-20(fp)
  814684:	e17ffc15 	stw	r5,-16(fp)
  814688:	e1bffd15 	stw	r6,-12(fp)
  81468c:	e1fffe15 	stw	r7,-8(fp)
	unsigned int fifospace;
	int count = 0;
  814690:	e03ff915 	stw	zero,-28(fp)
	while ( count < len ) 
  814694:	00003a06 	br	814780 <alt_up_audio_write_fifo+0x10c>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  814698:	e0bffb17 	ldw	r2,-20(fp)
  81469c:	10800a17 	ldw	r2,40(r2)
  8146a0:	10800104 	addi	r2,r2,4
  8146a4:	10800037 	ldwio	r2,0(r2)
  8146a8:	e0bffa15 	stw	r2,-24(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  8146ac:	e0bffe17 	ldw	r2,-8(fp)
  8146b0:	1004c03a 	cmpne	r2,r2,zero
  8146b4:	1000051e 	bne	r2,zero,8146cc <alt_up_audio_write_fifo+0x58>
  8146b8:	e0bffa17 	ldw	r2,-24(fp)
  8146bc:	10bfc02c 	andhi	r2,r2,65280
  8146c0:	1004d63a 	srli	r2,r2,24
  8146c4:	e0bfff15 	stw	r2,-4(fp)
  8146c8:	00000406 	br	8146dc <alt_up_audio_write_fifo+0x68>
  8146cc:	e0bffa17 	ldw	r2,-24(fp)
  8146d0:	10803fec 	andhi	r2,r2,255
  8146d4:	1004d43a 	srli	r2,r2,16
  8146d8:	e0bfff15 	stw	r2,-4(fp)
  8146dc:	e0bfff17 	ldw	r2,-4(fp)
  8146e0:	e0bffa15 	stw	r2,-24(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
  8146e4:	e0bffa17 	ldw	r2,-24(fp)
  8146e8:	1005003a 	cmpeq	r2,r2,zero
  8146ec:	1000271e 	bne	r2,zero,81478c <alt_up_audio_write_fifo+0x118>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
  8146f0:	e0bffe17 	ldw	r2,-8(fp)
  8146f4:	1004c03a 	cmpne	r2,r2,zero
  8146f8:	1000111e 	bne	r2,zero,814740 <alt_up_audio_write_fifo+0xcc>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
  8146fc:	e0bffb17 	ldw	r2,-20(fp)
  814700:	10800a17 	ldw	r2,40(r2)
  814704:	11000204 	addi	r4,r2,8
  814708:	e0bff917 	ldw	r2,-28(fp)
  81470c:	1085883a 	add	r2,r2,r2
  814710:	1085883a 	add	r2,r2,r2
  814714:	1007883a 	mov	r3,r2
  814718:	e0bffc17 	ldw	r2,-16(fp)
  81471c:	1885883a 	add	r2,r3,r2
  814720:	10800017 	ldw	r2,0(r2)
  814724:	1007883a 	mov	r3,r2
  814728:	e0bff917 	ldw	r2,-28(fp)
  81472c:	10800044 	addi	r2,r2,1
  814730:	e0bff915 	stw	r2,-28(fp)
  814734:	2005883a 	mov	r2,r4
  814738:	10c00035 	stwio	r3,0(r2)
  81473c:	00001006 	br	814780 <alt_up_audio_write_fifo+0x10c>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
  814740:	e0bffb17 	ldw	r2,-20(fp)
  814744:	10800a17 	ldw	r2,40(r2)
  814748:	11000304 	addi	r4,r2,12
  81474c:	e0bff917 	ldw	r2,-28(fp)
  814750:	1085883a 	add	r2,r2,r2
  814754:	1085883a 	add	r2,r2,r2
  814758:	1007883a 	mov	r3,r2
  81475c:	e0bffc17 	ldw	r2,-16(fp)
  814760:	1885883a 	add	r2,r3,r2
  814764:	10800017 	ldw	r2,0(r2)
  814768:	1007883a 	mov	r3,r2
  81476c:	e0bff917 	ldw	r2,-28(fp)
  814770:	10800044 	addi	r2,r2,1
  814774:	e0bff915 	stw	r2,-28(fp)
  814778:	2005883a 	mov	r2,r4
  81477c:	10c00035 	stwio	r3,0(r2)

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  814780:	e0fff917 	ldw	r3,-28(fp)
  814784:	e0bffd17 	ldw	r2,-12(fp)
  814788:	18bfc316 	blt	r3,r2,814698 <alt_up_audio_write_fifo+0x24>
		{
			// no more space to write
			break;
		}
	}
	return count;
  81478c:	e0bff917 	ldw	r2,-28(fp)
}
  814790:	e037883a 	mov	sp,fp
  814794:	df000017 	ldw	fp,0(sp)
  814798:	dec00104 	addi	sp,sp,4
  81479c:	f800283a 	ret

008147a0 <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
  8147a0:	defffc04 	addi	sp,sp,-16
  8147a4:	df000315 	stw	fp,12(sp)
  8147a8:	df000304 	addi	fp,sp,12
  8147ac:	e13ffd15 	stw	r4,-12(fp)
  8147b0:	e17ffe15 	stw	r5,-8(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
  8147b4:	e0bffe17 	ldw	r2,-8(fp)
  8147b8:	1004c03a 	cmpne	r2,r2,zero
  8147bc:	1000061e 	bne	r2,zero,8147d8 <alt_up_audio_read_fifo_head+0x38>
  8147c0:	e0bffd17 	ldw	r2,-12(fp)
  8147c4:	10800a17 	ldw	r2,40(r2)
  8147c8:	10800204 	addi	r2,r2,8
  8147cc:	10800037 	ldwio	r2,0(r2)
  8147d0:	e0bfff15 	stw	r2,-4(fp)
  8147d4:	00000506 	br	8147ec <alt_up_audio_read_fifo_head+0x4c>
  8147d8:	e0bffd17 	ldw	r2,-12(fp)
  8147dc:	10800a17 	ldw	r2,40(r2)
  8147e0:	10800304 	addi	r2,r2,12
  8147e4:	10800037 	ldwio	r2,0(r2)
  8147e8:	e0bfff15 	stw	r2,-4(fp)
  8147ec:	e0bfff17 	ldw	r2,-4(fp)
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
}
  8147f0:	e037883a 	mov	sp,fp
  8147f4:	df000017 	ldw	fp,0(sp)
  8147f8:	dec00104 	addi	sp,sp,4
  8147fc:	f800283a 	ret

00814800 <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
  814800:	defffc04 	addi	sp,sp,-16
  814804:	df000315 	stw	fp,12(sp)
  814808:	df000304 	addi	fp,sp,12
  81480c:	e13ffd15 	stw	r4,-12(fp)
  814810:	e17ffe15 	stw	r5,-8(fp)
  814814:	e1bfff15 	stw	r6,-4(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
  814818:	e0bfff17 	ldw	r2,-4(fp)
  81481c:	1004c03a 	cmpne	r2,r2,zero
  814820:	1000061e 	bne	r2,zero,81483c <alt_up_audio_write_fifo_head+0x3c>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
  814824:	e0bffd17 	ldw	r2,-12(fp)
  814828:	10800a17 	ldw	r2,40(r2)
  81482c:	10800204 	addi	r2,r2,8
  814830:	e0fffe17 	ldw	r3,-8(fp)
  814834:	10c00035 	stwio	r3,0(r2)
  814838:	00000506 	br	814850 <alt_up_audio_write_fifo_head+0x50>
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
  81483c:	e0bffd17 	ldw	r2,-12(fp)
  814840:	10800a17 	ldw	r2,40(r2)
  814844:	10800304 	addi	r2,r2,12
  814848:	e0fffe17 	ldw	r3,-8(fp)
  81484c:	10c00035 	stwio	r3,0(r2)
}
  814850:	e037883a 	mov	sp,fp
  814854:	df000017 	ldw	fp,0(sp)
  814858:	dec00104 	addi	sp,sp,4
  81485c:	f800283a 	ret

00814860 <alt_up_av_config_open_dev>:

#include "altera_up_avalon_audio_and_video_config.h"
#include "altera_up_avalon_audio_and_video_config_regs.h"

alt_up_av_config_dev* alt_up_av_config_open_dev(const char* name)
{
  814860:	defffc04 	addi	sp,sp,-16
  814864:	dfc00315 	stw	ra,12(sp)
  814868:	df000215 	stw	fp,8(sp)
  81486c:	df000204 	addi	fp,sp,8
  814870:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_av_config_dev *dev = (alt_up_av_config_dev*)alt_find_dev(name, &alt_dev_list);
  814874:	e13fff17 	ldw	r4,-4(fp)
  814878:	014020b4 	movhi	r5,130
  81487c:	29632a04 	addi	r5,r5,-29528
  814880:	08158640 	call	815864 <alt_find_dev>
  814884:	e0bffe15 	stw	r2,-8(fp)
  dev->type = (IORD_ALT_UP_AV_CONFIG_STATUS(dev->base) & ALT_UP_AV_CONFIG_STATUS_CFG_MSK) >> ALT_UP_AV_CONFIG_STATUS_CFG_OFST;
  814888:	e0bffe17 	ldw	r2,-8(fp)
  81488c:	10800a17 	ldw	r2,40(r2)
  814890:	10800104 	addi	r2,r2,4
  814894:	10800037 	ldwio	r2,0(r2)
  814898:	10803fec 	andhi	r2,r2,255
  81489c:	1005d43a 	srai	r2,r2,16
  8148a0:	1007883a 	mov	r3,r2
  8148a4:	e0bffe17 	ldw	r2,-8(fp)
  8148a8:	10c00b15 	stw	r3,44(r2)

  return dev;
  8148ac:	e0bffe17 	ldw	r2,-8(fp)
}
  8148b0:	e037883a 	mov	sp,fp
  8148b4:	dfc00117 	ldw	ra,4(sp)
  8148b8:	df000017 	ldw	fp,0(sp)
  8148bc:	dec00204 	addi	sp,sp,8
  8148c0:	f800283a 	ret

008148c4 <alt_up_av_config_write_data>:
 * @param data --  the data to be sent
 *
 * @return 0 for success
 **/
int alt_up_av_config_write_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  8148c4:	defffc04 	addi	sp,sp,-16
  8148c8:	df000315 	stw	fp,12(sp)
  8148cc:	df000304 	addi	fp,sp,12
  8148d0:	e13ffd15 	stw	r4,-12(fp)
  8148d4:	e17ffe15 	stw	r5,-8(fp)
  8148d8:	e1bfff15 	stw	r6,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
  8148dc:	e0bffd17 	ldw	r2,-12(fp)
  8148e0:	10800a17 	ldw	r2,40(r2)
  8148e4:	11000204 	addi	r4,r2,8
  8148e8:	e0bffe17 	ldw	r2,-8(fp)
  8148ec:	10c03fcc 	andi	r3,r2,255
  8148f0:	2005883a 	mov	r2,r4
  8148f4:	10c00035 	stwio	r3,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_AV_CONFIG_DATA(av_config->base, data & ALT_UP_AV_CONFIG_DATA_VALID_MSK); 
  8148f8:	e0bffd17 	ldw	r2,-12(fp)
  8148fc:	10800a17 	ldw	r2,40(r2)
  814900:	11000304 	addi	r4,r2,12
  814904:	e0bfff17 	ldw	r2,-4(fp)
  814908:	10ffffcc 	andi	r3,r2,65535
  81490c:	2005883a 	mov	r2,r4
  814910:	10c00035 	stwio	r3,0(r2)

	return 0;
  814914:	0005883a 	mov	r2,zero
}
  814918:	e037883a 	mov	sp,fp
  81491c:	df000017 	ldw	fp,0(sp)
  814920:	dec00104 	addi	sp,sp,4
  814924:	f800283a 	ret

00814928 <alt_up_av_config_read_data>:
 * @param data -- a pointer to the location where the read data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_av_config_read_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 * data)
{
  814928:	defffa04 	addi	sp,sp,-24
  81492c:	dfc00515 	stw	ra,20(sp)
  814930:	df000415 	stw	fp,16(sp)
  814934:	df000404 	addi	fp,sp,16
  814938:	e13ffc15 	stw	r4,-16(fp)
  81493c:	e17ffd15 	stw	r5,-12(fp)
  814940:	e1bffe15 	stw	r6,-8(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
  814944:	e0bffc17 	ldw	r2,-16(fp)
  814948:	10800a17 	ldw	r2,40(r2)
  81494c:	11000204 	addi	r4,r2,8
  814950:	e0bffd17 	ldw	r2,-12(fp)
  814954:	10c03fcc 	andi	r3,r2,255
  814958:	2005883a 	mov	r2,r4
  81495c:	10c00035 	stwio	r3,0(r2)

	// write data to the device Data register
	*(data) = IORD_ALT_UP_AV_CONFIG_DATA(av_config->base); 
  814960:	e0bffc17 	ldw	r2,-16(fp)
  814964:	10800a17 	ldw	r2,40(r2)
  814968:	10800304 	addi	r2,r2,12
  81496c:	10800037 	ldwio	r2,0(r2)
  814970:	1007883a 	mov	r3,r2
  814974:	e0bffe17 	ldw	r2,-8(fp)
  814978:	10c00015 	stw	r3,0(r2)

	// check acknowledge is 0
	if (alt_up_av_config_read_acknowledge(av_config))
  81497c:	e13ffc17 	ldw	r4,-16(fp)
  814980:	0814a540 	call	814a54 <alt_up_av_config_read_acknowledge>
  814984:	1005003a 	cmpeq	r2,r2,zero
  814988:	1000031e 	bne	r2,zero,814998 <alt_up_av_config_read_data+0x70>
		return -1;
  81498c:	00bfffc4 	movi	r2,-1
  814990:	e0bfff15 	stw	r2,-4(fp)
  814994:	00000106 	br	81499c <alt_up_av_config_read_data+0x74>

	return 0;
  814998:	e03fff15 	stw	zero,-4(fp)
  81499c:	e0bfff17 	ldw	r2,-4(fp)
}
  8149a0:	e037883a 	mov	sp,fp
  8149a4:	dfc00117 	ldw	ra,4(sp)
  8149a8:	df000017 	ldw	fp,0(sp)
  8149ac:	dec00204 	addi	sp,sp,8
  8149b0:	f800283a 	ret

008149b4 <alt_up_av_config_reset>:

int alt_up_av_config_reset(alt_up_av_config_dev *av_config)
{
  8149b4:	defffe04 	addi	sp,sp,-8
  8149b8:	df000115 	stw	fp,4(sp)
  8149bc:	df000104 	addi	fp,sp,4
  8149c0:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RESET(av_config->base);
  8149c4:	e0bfff17 	ldw	r2,-4(fp)
  8149c8:	10800a17 	ldw	r2,40(r2)
  8149cc:	1007883a 	mov	r3,r2
  8149d0:	00800044 	movi	r2,1
  8149d4:	18800025 	stbio	r2,0(r3)
	return 0;
  8149d8:	0005883a 	mov	r2,zero
}
  8149dc:	e037883a 	mov	sp,fp
  8149e0:	df000017 	ldw	fp,0(sp)
  8149e4:	dec00104 	addi	sp,sp,4
  8149e8:	f800283a 	ret

008149ec <alt_up_av_config_enable_interrupt>:

int alt_up_av_config_enable_interrupt(alt_up_av_config_dev *av_config)
{
  8149ec:	defffe04 	addi	sp,sp,-8
  8149f0:	df000115 	stw	fp,4(sp)
  8149f4:	df000104 	addi	fp,sp,4
  8149f8:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_ENABLE(av_config->base);
  8149fc:	e0bfff17 	ldw	r2,-4(fp)
  814a00:	10800a17 	ldw	r2,40(r2)
  814a04:	1007883a 	mov	r3,r2
  814a08:	00800084 	movi	r2,2
  814a0c:	18800025 	stbio	r2,0(r3)
	return 0;
  814a10:	0005883a 	mov	r2,zero
}
  814a14:	e037883a 	mov	sp,fp
  814a18:	df000017 	ldw	fp,0(sp)
  814a1c:	dec00104 	addi	sp,sp,4
  814a20:	f800283a 	ret

00814a24 <alt_up_av_config_disable_interrupt>:

int alt_up_av_config_disable_interrupt(alt_up_av_config_dev *av_config)
{
  814a24:	defffe04 	addi	sp,sp,-8
  814a28:	df000115 	stw	fp,4(sp)
  814a2c:	df000104 	addi	fp,sp,4
  814a30:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_DISABLE(av_config->base);
  814a34:	e0bfff17 	ldw	r2,-4(fp)
  814a38:	10800a17 	ldw	r2,40(r2)
  814a3c:	10000025 	stbio	zero,0(r2)
	return 0;
  814a40:	0005883a 	mov	r2,zero
}
  814a44:	e037883a 	mov	sp,fp
  814a48:	df000017 	ldw	fp,0(sp)
  814a4c:	dec00104 	addi	sp,sp,4
  814a50:	f800283a 	ret

00814a54 <alt_up_av_config_read_acknowledge>:

int alt_up_av_config_read_acknowledge(alt_up_av_config_dev *av_config)
{
  814a54:	defffd04 	addi	sp,sp,-12
  814a58:	df000215 	stw	fp,8(sp)
  814a5c:	df000204 	addi	fp,sp,8
  814a60:	e13ffe15 	stw	r4,-8(fp)
	if ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST)
  814a64:	e0bffe17 	ldw	r2,-8(fp)
  814a68:	10800a17 	ldw	r2,40(r2)
  814a6c:	10800104 	addi	r2,r2,4
  814a70:	10800037 	ldwio	r2,0(r2)
  814a74:	1080008c 	andi	r2,r2,2
  814a78:	1005d07a 	srai	r2,r2,1
  814a7c:	1005003a 	cmpeq	r2,r2,zero
  814a80:	1000071e 	bne	r2,zero,814aa0 <alt_up_av_config_read_acknowledge+0x4c>
		return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_ACK_MSK) >> ALT_UP_AV_CONFIG_STATUS_ACK_OFST);
  814a84:	e0bffe17 	ldw	r2,-8(fp)
  814a88:	10800a17 	ldw	r2,40(r2)
  814a8c:	10800104 	addi	r2,r2,4
  814a90:	10800037 	ldwio	r2,0(r2)
  814a94:	1080004c 	andi	r2,r2,1
  814a98:	e0bfff15 	stw	r2,-4(fp)
  814a9c:	00000206 	br	814aa8 <alt_up_av_config_read_acknowledge+0x54>
	return -1;
  814aa0:	00bfffc4 	movi	r2,-1
  814aa4:	e0bfff15 	stw	r2,-4(fp)
  814aa8:	e0bfff17 	ldw	r2,-4(fp)
}
  814aac:	e037883a 	mov	sp,fp
  814ab0:	df000017 	ldw	fp,0(sp)
  814ab4:	dec00104 	addi	sp,sp,4
  814ab8:	f800283a 	ret

00814abc <alt_up_av_config_read_ready>:

int alt_up_av_config_read_ready(alt_up_av_config_dev *av_config)
{
  814abc:	defffe04 	addi	sp,sp,-8
  814ac0:	df000115 	stw	fp,4(sp)
  814ac4:	df000104 	addi	fp,sp,4
  814ac8:	e13fff15 	stw	r4,-4(fp)
	return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST);
  814acc:	e0bfff17 	ldw	r2,-4(fp)
  814ad0:	10800a17 	ldw	r2,40(r2)
  814ad4:	10800104 	addi	r2,r2,4
  814ad8:	10800037 	ldwio	r2,0(r2)
  814adc:	1080008c 	andi	r2,r2,2
  814ae0:	1005d07a 	srai	r2,r2,1
}
  814ae4:	e037883a 	mov	sp,fp
  814ae8:	df000017 	ldw	fp,0(sp)
  814aec:	dec00104 	addi	sp,sp,4
  814af0:	f800283a 	ret

00814af4 <alt_up_av_config_write_audio_cfg_register>:

int alt_up_av_config_write_audio_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  814af4:	defff904 	addi	sp,sp,-28
  814af8:	dfc00615 	stw	ra,24(sp)
  814afc:	df000515 	stw	fp,20(sp)
  814b00:	df000504 	addi	fp,sp,20
  814b04:	e13ffc15 	stw	r4,-16(fp)
  814b08:	e17ffd15 	stw	r5,-12(fp)
  814b0c:	e1bffe15 	stw	r6,-8(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_AUDIO_ONLY_CONFIG && av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
  814b10:	e0bffc17 	ldw	r2,-16(fp)
  814b14:	10800b17 	ldw	r2,44(r2)
  814b18:	10800060 	cmpeqi	r2,r2,1
  814b1c:	10000f1e 	bne	r2,zero,814b5c <alt_up_av_config_write_audio_cfg_register+0x68>
  814b20:	e0bffc17 	ldw	r2,-16(fp)
  814b24:	10800b17 	ldw	r2,44(r2)
  814b28:	108000a0 	cmpeqi	r2,r2,2
  814b2c:	10000b1e 	bne	r2,zero,814b5c <alt_up_av_config_write_audio_cfg_register+0x68>
  814b30:	e0bffc17 	ldw	r2,-16(fp)
  814b34:	10800b17 	ldw	r2,44(r2)
  814b38:	108000e0 	cmpeqi	r2,r2,3
  814b3c:	1000071e 	bne	r2,zero,814b5c <alt_up_av_config_write_audio_cfg_register+0x68>
  814b40:	e0bffc17 	ldw	r2,-16(fp)
  814b44:	10800b17 	ldw	r2,44(r2)
  814b48:	10800120 	cmpeqi	r2,r2,4
  814b4c:	1000031e 	bne	r2,zero,814b5c <alt_up_av_config_write_audio_cfg_register+0x68>
		return -EINVAL;
  814b50:	00bffa84 	movi	r2,-22
  814b54:	e0bfff15 	stw	r2,-4(fp)
  814b58:	00000b06 	br	814b88 <alt_up_av_config_write_audio_cfg_register+0x94>

	// set the audio device to be configured in the Control register
	SELECTED_ON_BOARD_DEVICE device = AUDIO_DEVICE;
  814b5c:	e03ffb15 	stw	zero,-20(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, device);
  814b60:	e0bffc17 	ldw	r2,-16(fp)
  814b64:	10800a17 	ldw	r2,40(r2)
  814b68:	10800084 	addi	r2,r2,2
  814b6c:	e0fffb17 	ldw	r3,-20(fp)
  814b70:	10c00025 	stbio	r3,0(r2)

	return alt_up_av_config_write_data(av_config, addr, data);
  814b74:	e13ffc17 	ldw	r4,-16(fp)
  814b78:	e17ffd17 	ldw	r5,-12(fp)
  814b7c:	e1bffe17 	ldw	r6,-8(fp)
  814b80:	08148c40 	call	8148c4 <alt_up_av_config_write_data>
  814b84:	e0bfff15 	stw	r2,-4(fp)
  814b88:	e0bfff17 	ldw	r2,-4(fp)
}
  814b8c:	e037883a 	mov	sp,fp
  814b90:	dfc00117 	ldw	ra,4(sp)
  814b94:	df000017 	ldw	fp,0(sp)
  814b98:	dec00204 	addi	sp,sp,8
  814b9c:	f800283a 	ret

00814ba0 <alt_up_av_config_read_video_cfg_register>:

int alt_up_av_config_read_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data, SELECTED_ON_BOARD_DEVICE video_port)
{
  814ba0:	defff904 	addi	sp,sp,-28
  814ba4:	dfc00615 	stw	ra,24(sp)
  814ba8:	df000515 	stw	fp,20(sp)
  814bac:	df000504 	addi	fp,sp,20
  814bb0:	e13ffb15 	stw	r4,-20(fp)
  814bb4:	e17ffc15 	stw	r5,-16(fp)
  814bb8:	e1bffd15 	stw	r6,-12(fp)
  814bbc:	e1fffe15 	stw	r7,-8(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
  814bc0:	e0bffb17 	ldw	r2,-20(fp)
  814bc4:	10800b17 	ldw	r2,44(r2)
  814bc8:	108000a0 	cmpeqi	r2,r2,2
  814bcc:	10000b1e 	bne	r2,zero,814bfc <alt_up_av_config_read_video_cfg_register+0x5c>
  814bd0:	e0bffb17 	ldw	r2,-20(fp)
  814bd4:	10800b17 	ldw	r2,44(r2)
  814bd8:	108000e0 	cmpeqi	r2,r2,3
  814bdc:	1000071e 	bne	r2,zero,814bfc <alt_up_av_config_read_video_cfg_register+0x5c>
  814be0:	e0bffb17 	ldw	r2,-20(fp)
  814be4:	10800b17 	ldw	r2,44(r2)
  814be8:	10800120 	cmpeqi	r2,r2,4
  814bec:	1000031e 	bne	r2,zero,814bfc <alt_up_av_config_read_video_cfg_register+0x5c>
		return -EINVAL;
  814bf0:	00bffa84 	movi	r2,-22
  814bf4:	e0bfff15 	stw	r2,-4(fp)
  814bf8:	00002106 	br	814c80 <alt_up_av_config_read_video_cfg_register+0xe0>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
  814bfc:	e0bffb17 	ldw	r2,-20(fp)
  814c00:	10800b17 	ldw	r2,44(r2)
  814c04:	108000a0 	cmpeqi	r2,r2,2
  814c08:	1000041e 	bne	r2,zero,814c1c <alt_up_av_config_read_video_cfg_register+0x7c>
  814c0c:	e0bffb17 	ldw	r2,-20(fp)
  814c10:	10800b17 	ldw	r2,44(r2)
  814c14:	10800118 	cmpnei	r2,r2,4
  814c18:	1000061e 	bne	r2,zero,814c34 <alt_up_av_config_read_video_cfg_register+0x94>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
  814c1c:	e0bffe17 	ldw	r2,-8(fp)
  814c20:	10800060 	cmpeqi	r2,r2,1
  814c24:	10000c1e 	bne	r2,zero,814c58 <alt_up_av_config_read_video_cfg_register+0xb8>
			return -EINVAL;
  814c28:	00bffa84 	movi	r2,-22
  814c2c:	e0bfff15 	stw	r2,-4(fp)
  814c30:	00001306 	br	814c80 <alt_up_av_config_read_video_cfg_register+0xe0>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
  814c34:	e0bffe17 	ldw	r2,-8(fp)
  814c38:	10800060 	cmpeqi	r2,r2,1
  814c3c:	1000061e 	bne	r2,zero,814c58 <alt_up_av_config_read_video_cfg_register+0xb8>
  814c40:	e0bffe17 	ldw	r2,-8(fp)
  814c44:	108000a0 	cmpeqi	r2,r2,2
  814c48:	1000031e 	bne	r2,zero,814c58 <alt_up_av_config_read_video_cfg_register+0xb8>
			return -EINVAL;
  814c4c:	00bffa84 	movi	r2,-22
  814c50:	e0bfff15 	stw	r2,-4(fp)
  814c54:	00000a06 	br	814c80 <alt_up_av_config_read_video_cfg_register+0xe0>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
  814c58:	e0bffb17 	ldw	r2,-20(fp)
  814c5c:	10800a17 	ldw	r2,40(r2)
  814c60:	10800084 	addi	r2,r2,2
  814c64:	e0fffe17 	ldw	r3,-8(fp)
  814c68:	10c00025 	stbio	r3,0(r2)

	return alt_up_av_config_read_data(av_config, addr, data);
  814c6c:	e13ffb17 	ldw	r4,-20(fp)
  814c70:	e17ffc17 	ldw	r5,-16(fp)
  814c74:	e1bffd17 	ldw	r6,-12(fp)
  814c78:	08149280 	call	814928 <alt_up_av_config_read_data>
  814c7c:	e0bfff15 	stw	r2,-4(fp)
  814c80:	e0bfff17 	ldw	r2,-4(fp)
}
  814c84:	e037883a 	mov	sp,fp
  814c88:	dfc00117 	ldw	ra,4(sp)
  814c8c:	df000017 	ldw	fp,0(sp)
  814c90:	dec00204 	addi	sp,sp,8
  814c94:	f800283a 	ret

00814c98 <alt_up_av_config_write_video_cfg_register>:

int alt_up_av_config_write_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data, SELECTED_ON_BOARD_DEVICE video_port)
{
  814c98:	defff904 	addi	sp,sp,-28
  814c9c:	dfc00615 	stw	ra,24(sp)
  814ca0:	df000515 	stw	fp,20(sp)
  814ca4:	df000504 	addi	fp,sp,20
  814ca8:	e13ffb15 	stw	r4,-20(fp)
  814cac:	e17ffc15 	stw	r5,-16(fp)
  814cb0:	e1bffd15 	stw	r6,-12(fp)
  814cb4:	e1fffe15 	stw	r7,-8(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
  814cb8:	e0bffb17 	ldw	r2,-20(fp)
  814cbc:	10800b17 	ldw	r2,44(r2)
  814cc0:	108000a0 	cmpeqi	r2,r2,2
  814cc4:	10000b1e 	bne	r2,zero,814cf4 <alt_up_av_config_write_video_cfg_register+0x5c>
  814cc8:	e0bffb17 	ldw	r2,-20(fp)
  814ccc:	10800b17 	ldw	r2,44(r2)
  814cd0:	108000e0 	cmpeqi	r2,r2,3
  814cd4:	1000071e 	bne	r2,zero,814cf4 <alt_up_av_config_write_video_cfg_register+0x5c>
  814cd8:	e0bffb17 	ldw	r2,-20(fp)
  814cdc:	10800b17 	ldw	r2,44(r2)
  814ce0:	10800120 	cmpeqi	r2,r2,4
  814ce4:	1000031e 	bne	r2,zero,814cf4 <alt_up_av_config_write_video_cfg_register+0x5c>
		return -EINVAL;
  814ce8:	00bffa84 	movi	r2,-22
  814cec:	e0bfff15 	stw	r2,-4(fp)
  814cf0:	00002106 	br	814d78 <alt_up_av_config_write_video_cfg_register+0xe0>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
  814cf4:	e0bffb17 	ldw	r2,-20(fp)
  814cf8:	10800b17 	ldw	r2,44(r2)
  814cfc:	108000a0 	cmpeqi	r2,r2,2
  814d00:	1000041e 	bne	r2,zero,814d14 <alt_up_av_config_write_video_cfg_register+0x7c>
  814d04:	e0bffb17 	ldw	r2,-20(fp)
  814d08:	10800b17 	ldw	r2,44(r2)
  814d0c:	10800118 	cmpnei	r2,r2,4
  814d10:	1000061e 	bne	r2,zero,814d2c <alt_up_av_config_write_video_cfg_register+0x94>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
  814d14:	e0bffe17 	ldw	r2,-8(fp)
  814d18:	10800060 	cmpeqi	r2,r2,1
  814d1c:	10000c1e 	bne	r2,zero,814d50 <alt_up_av_config_write_video_cfg_register+0xb8>
			return -EINVAL;
  814d20:	00bffa84 	movi	r2,-22
  814d24:	e0bfff15 	stw	r2,-4(fp)
  814d28:	00001306 	br	814d78 <alt_up_av_config_write_video_cfg_register+0xe0>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
  814d2c:	e0bffe17 	ldw	r2,-8(fp)
  814d30:	10800060 	cmpeqi	r2,r2,1
  814d34:	1000061e 	bne	r2,zero,814d50 <alt_up_av_config_write_video_cfg_register+0xb8>
  814d38:	e0bffe17 	ldw	r2,-8(fp)
  814d3c:	108000a0 	cmpeqi	r2,r2,2
  814d40:	1000031e 	bne	r2,zero,814d50 <alt_up_av_config_write_video_cfg_register+0xb8>
			return -EINVAL;
  814d44:	00bffa84 	movi	r2,-22
  814d48:	e0bfff15 	stw	r2,-4(fp)
  814d4c:	00000a06 	br	814d78 <alt_up_av_config_write_video_cfg_register+0xe0>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
  814d50:	e0bffb17 	ldw	r2,-20(fp)
  814d54:	10800a17 	ldw	r2,40(r2)
  814d58:	10800084 	addi	r2,r2,2
  814d5c:	e0fffe17 	ldw	r3,-8(fp)
  814d60:	10c00025 	stbio	r3,0(r2)

	return alt_up_av_config_write_data(av_config, addr, data);
  814d64:	e13ffb17 	ldw	r4,-20(fp)
  814d68:	e17ffc17 	ldw	r5,-16(fp)
  814d6c:	e1bffd17 	ldw	r6,-12(fp)
  814d70:	08148c40 	call	8148c4 <alt_up_av_config_write_data>
  814d74:	e0bfff15 	stw	r2,-4(fp)
  814d78:	e0bfff17 	ldw	r2,-4(fp)
}
  814d7c:	e037883a 	mov	sp,fp
  814d80:	dfc00117 	ldw	ra,4(sp)
  814d84:	df000017 	ldw	fp,0(sp)
  814d88:	dec00204 	addi	sp,sp,8
  814d8c:	f800283a 	ret

00814d90 <alt_up_av_config_read_DC2_cfg_register>:

int alt_up_av_config_read_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
  814d90:	defffa04 	addi	sp,sp,-24
  814d94:	dfc00515 	stw	ra,20(sp)
  814d98:	df000415 	stw	fp,16(sp)
  814d9c:	df000404 	addi	fp,sp,16
  814da0:	e13ffc15 	stw	r4,-16(fp)
  814da4:	e17ffd15 	stw	r5,-12(fp)
  814da8:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
  814dac:	e0bffc17 	ldw	r2,-16(fp)
  814db0:	10800b17 	ldw	r2,44(r2)
  814db4:	10800220 	cmpeqi	r2,r2,8
  814db8:	1000031e 	bne	r2,zero,814dc8 <alt_up_av_config_read_DC2_cfg_register+0x38>
		return -EINVAL;
  814dbc:	00bffa84 	movi	r2,-22
  814dc0:	e0bfff15 	stw	r2,-4(fp)
  814dc4:	00000506 	br	814ddc <alt_up_av_config_read_DC2_cfg_register+0x4c>

	return alt_up_av_config_read_data(av_config, addr, data);
  814dc8:	e13ffc17 	ldw	r4,-16(fp)
  814dcc:	e17ffd17 	ldw	r5,-12(fp)
  814dd0:	e1bffe17 	ldw	r6,-8(fp)
  814dd4:	08149280 	call	814928 <alt_up_av_config_read_data>
  814dd8:	e0bfff15 	stw	r2,-4(fp)
  814ddc:	e0bfff17 	ldw	r2,-4(fp)
}
  814de0:	e037883a 	mov	sp,fp
  814de4:	dfc00117 	ldw	ra,4(sp)
  814de8:	df000017 	ldw	fp,0(sp)
  814dec:	dec00204 	addi	sp,sp,8
  814df0:	f800283a 	ret

00814df4 <alt_up_av_config_write_DC2_cfg_register>:

int alt_up_av_config_write_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  814df4:	defffa04 	addi	sp,sp,-24
  814df8:	dfc00515 	stw	ra,20(sp)
  814dfc:	df000415 	stw	fp,16(sp)
  814e00:	df000404 	addi	fp,sp,16
  814e04:	e13ffc15 	stw	r4,-16(fp)
  814e08:	e17ffd15 	stw	r5,-12(fp)
  814e0c:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
  814e10:	e0bffc17 	ldw	r2,-16(fp)
  814e14:	10800b17 	ldw	r2,44(r2)
  814e18:	10800220 	cmpeqi	r2,r2,8
  814e1c:	1000031e 	bne	r2,zero,814e2c <alt_up_av_config_write_DC2_cfg_register+0x38>
		return -EINVAL;
  814e20:	00bffa84 	movi	r2,-22
  814e24:	e0bfff15 	stw	r2,-4(fp)
  814e28:	00000506 	br	814e40 <alt_up_av_config_write_DC2_cfg_register+0x4c>

	return alt_up_av_config_write_data(av_config, addr, data);
  814e2c:	e13ffc17 	ldw	r4,-16(fp)
  814e30:	e17ffd17 	ldw	r5,-12(fp)
  814e34:	e1bffe17 	ldw	r6,-8(fp)
  814e38:	08148c40 	call	8148c4 <alt_up_av_config_write_data>
  814e3c:	e0bfff15 	stw	r2,-4(fp)
  814e40:	e0bfff17 	ldw	r2,-4(fp)
}
  814e44:	e037883a 	mov	sp,fp
  814e48:	dfc00117 	ldw	ra,4(sp)
  814e4c:	df000017 	ldw	fp,0(sp)
  814e50:	dec00204 	addi	sp,sp,8
  814e54:	f800283a 	ret

00814e58 <alt_up_av_config_read_D5M_cfg_register>:

int alt_up_av_config_read_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
  814e58:	defffa04 	addi	sp,sp,-24
  814e5c:	dfc00515 	stw	ra,20(sp)
  814e60:	df000415 	stw	fp,16(sp)
  814e64:	df000404 	addi	fp,sp,16
  814e68:	e13ffc15 	stw	r4,-16(fp)
  814e6c:	e17ffd15 	stw	r5,-12(fp)
  814e70:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
  814e74:	e0bffc17 	ldw	r2,-16(fp)
  814e78:	10800b17 	ldw	r2,44(r2)
  814e7c:	10800260 	cmpeqi	r2,r2,9
  814e80:	1000031e 	bne	r2,zero,814e90 <alt_up_av_config_read_D5M_cfg_register+0x38>
		return -EINVAL;
  814e84:	00bffa84 	movi	r2,-22
  814e88:	e0bfff15 	stw	r2,-4(fp)
  814e8c:	00000506 	br	814ea4 <alt_up_av_config_read_D5M_cfg_register+0x4c>
	
	return alt_up_av_config_read_data(av_config, addr, data);
  814e90:	e13ffc17 	ldw	r4,-16(fp)
  814e94:	e17ffd17 	ldw	r5,-12(fp)
  814e98:	e1bffe17 	ldw	r6,-8(fp)
  814e9c:	08149280 	call	814928 <alt_up_av_config_read_data>
  814ea0:	e0bfff15 	stw	r2,-4(fp)
  814ea4:	e0bfff17 	ldw	r2,-4(fp)
}
  814ea8:	e037883a 	mov	sp,fp
  814eac:	dfc00117 	ldw	ra,4(sp)
  814eb0:	df000017 	ldw	fp,0(sp)
  814eb4:	dec00204 	addi	sp,sp,8
  814eb8:	f800283a 	ret

00814ebc <alt_up_av_config_write_D5M_cfg_register>:

int alt_up_av_config_write_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  814ebc:	defffa04 	addi	sp,sp,-24
  814ec0:	dfc00515 	stw	ra,20(sp)
  814ec4:	df000415 	stw	fp,16(sp)
  814ec8:	df000404 	addi	fp,sp,16
  814ecc:	e13ffc15 	stw	r4,-16(fp)
  814ed0:	e17ffd15 	stw	r5,-12(fp)
  814ed4:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
  814ed8:	e0bffc17 	ldw	r2,-16(fp)
  814edc:	10800b17 	ldw	r2,44(r2)
  814ee0:	10800260 	cmpeqi	r2,r2,9
  814ee4:	1000031e 	bne	r2,zero,814ef4 <alt_up_av_config_write_D5M_cfg_register+0x38>
		return -EINVAL;
  814ee8:	00bffa84 	movi	r2,-22
  814eec:	e0bfff15 	stw	r2,-4(fp)
  814ef0:	00000506 	br	814f08 <alt_up_av_config_write_D5M_cfg_register+0x4c>
	
	return alt_up_av_config_write_data(av_config, addr, data);
  814ef4:	e13ffc17 	ldw	r4,-16(fp)
  814ef8:	e17ffd17 	ldw	r5,-12(fp)
  814efc:	e1bffe17 	ldw	r6,-8(fp)
  814f00:	08148c40 	call	8148c4 <alt_up_av_config_write_data>
  814f04:	e0bfff15 	stw	r2,-4(fp)
  814f08:	e0bfff17 	ldw	r2,-4(fp)
}
  814f0c:	e037883a 	mov	sp,fp
  814f10:	dfc00117 	ldw	ra,4(sp)
  814f14:	df000017 	ldw	fp,0(sp)
  814f18:	dec00204 	addi	sp,sp,8
  814f1c:	f800283a 	ret

00814f20 <alt_up_av_config_read_LTM_cfg_register>:

int alt_up_av_config_read_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
  814f20:	defffa04 	addi	sp,sp,-24
  814f24:	dfc00515 	stw	ra,20(sp)
  814f28:	df000415 	stw	fp,16(sp)
  814f2c:	df000404 	addi	fp,sp,16
  814f30:	e13ffc15 	stw	r4,-16(fp)
  814f34:	e17ffd15 	stw	r5,-12(fp)
  814f38:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
  814f3c:	e0bffc17 	ldw	r2,-16(fp)
  814f40:	10800b17 	ldw	r2,44(r2)
  814f44:	108002a0 	cmpeqi	r2,r2,10
  814f48:	1000031e 	bne	r2,zero,814f58 <alt_up_av_config_read_LTM_cfg_register+0x38>
		return -EINVAL;
  814f4c:	00bffa84 	movi	r2,-22
  814f50:	e0bfff15 	stw	r2,-4(fp)
  814f54:	00000506 	br	814f6c <alt_up_av_config_read_LTM_cfg_register+0x4c>

	return alt_up_av_config_read_data(av_config, addr, data);
  814f58:	e13ffc17 	ldw	r4,-16(fp)
  814f5c:	e17ffd17 	ldw	r5,-12(fp)
  814f60:	e1bffe17 	ldw	r6,-8(fp)
  814f64:	08149280 	call	814928 <alt_up_av_config_read_data>
  814f68:	e0bfff15 	stw	r2,-4(fp)
  814f6c:	e0bfff17 	ldw	r2,-4(fp)
}
  814f70:	e037883a 	mov	sp,fp
  814f74:	dfc00117 	ldw	ra,4(sp)
  814f78:	df000017 	ldw	fp,0(sp)
  814f7c:	dec00204 	addi	sp,sp,8
  814f80:	f800283a 	ret

00814f84 <alt_up_av_config_write_LTM_cfg_register>:

int alt_up_av_config_write_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  814f84:	defffa04 	addi	sp,sp,-24
  814f88:	dfc00515 	stw	ra,20(sp)
  814f8c:	df000415 	stw	fp,16(sp)
  814f90:	df000404 	addi	fp,sp,16
  814f94:	e13ffc15 	stw	r4,-16(fp)
  814f98:	e17ffd15 	stw	r5,-12(fp)
  814f9c:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
  814fa0:	e0bffc17 	ldw	r2,-16(fp)
  814fa4:	10800b17 	ldw	r2,44(r2)
  814fa8:	108002a0 	cmpeqi	r2,r2,10
  814fac:	1000031e 	bne	r2,zero,814fbc <alt_up_av_config_write_LTM_cfg_register+0x38>
		return -EINVAL;
  814fb0:	00bffa84 	movi	r2,-22
  814fb4:	e0bfff15 	stw	r2,-4(fp)
  814fb8:	00000506 	br	814fd0 <alt_up_av_config_write_LTM_cfg_register+0x4c>

	return alt_up_av_config_write_data(av_config, addr, data);
  814fbc:	e13ffc17 	ldw	r4,-16(fp)
  814fc0:	e17ffd17 	ldw	r5,-12(fp)
  814fc4:	e1bffe17 	ldw	r6,-8(fp)
  814fc8:	08148c40 	call	8148c4 <alt_up_av_config_write_data>
  814fcc:	e0bfff15 	stw	r2,-4(fp)
  814fd0:	e0bfff17 	ldw	r2,-4(fp)
}
  814fd4:	e037883a 	mov	sp,fp
  814fd8:	dfc00117 	ldw	ra,4(sp)
  814fdc:	df000017 	ldw	fp,0(sp)
  814fe0:	dec00204 	addi	sp,sp,8
  814fe4:	f800283a 	ret

00814fe8 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
  814fe8:	defffc04 	addi	sp,sp,-16
  814fec:	df000315 	stw	fp,12(sp)
  814ff0:	df000304 	addi	fp,sp,12
  814ff4:	e13ffe15 	stw	r4,-8(fp)
  814ff8:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
  814ffc:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
  815000:	e0bfff17 	ldw	r2,-4(fp)
  815004:	1004c03a 	cmpne	r2,r2,zero
  815008:	1000061e 	bne	r2,zero,815024 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
  81500c:	e0bffe17 	ldw	r2,-8(fp)
  815010:	1007883a 	mov	r3,r2
  815014:	e0bffd03 	ldbu	r2,-12(fp)
  815018:	10c4b03a 	or	r2,r2,r3
  81501c:	e0bffd05 	stb	r2,-12(fp)
  815020:	00000806 	br	815044 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
  815024:	e0bffe17 	ldw	r2,-8(fp)
  815028:	1007883a 	mov	r3,r2
  81502c:	e0bffd03 	ldbu	r2,-12(fp)
  815030:	10c4b03a 	or	r2,r2,r3
  815034:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
  815038:	e0bffd03 	ldbu	r2,-12(fp)
  81503c:	10801014 	ori	r2,r2,64
  815040:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
  815044:	e0fffd03 	ldbu	r3,-12(fp)
  815048:	00bfe004 	movi	r2,-128
  81504c:	1884b03a 	or	r2,r3,r2
  815050:	10803fcc 	andi	r2,r2,255
}
  815054:	e037883a 	mov	sp,fp
  815058:	df000017 	ldw	fp,0(sp)
  81505c:	dec00104 	addi	sp,sp,4
  815060:	f800283a 	ret

00815064 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
  815064:	defffd04 	addi	sp,sp,-12
  815068:	df000215 	stw	fp,8(sp)
  81506c:	df000204 	addi	fp,sp,8
  815070:	e13ffe15 	stw	r4,-8(fp)
  815074:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
  815078:	e0bffe17 	ldw	r2,-8(fp)
  81507c:	10800a17 	ldw	r2,40(r2)
  815080:	e0ffff03 	ldbu	r3,-4(fp)
  815084:	10c00025 	stbio	r3,0(r2)
}
  815088:	e037883a 	mov	sp,fp
  81508c:	df000017 	ldw	fp,0(sp)
  815090:	dec00104 	addi	sp,sp,4
  815094:	f800283a 	ret

00815098 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
  815098:	defffe04 	addi	sp,sp,-8
  81509c:	df000115 	stw	fp,4(sp)
  8150a0:	df000104 	addi	fp,sp,4
  8150a4:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
  8150a8:	e0bfff17 	ldw	r2,-4(fp)
  8150ac:	10800a17 	ldw	r2,40(r2)
  8150b0:	1007883a 	mov	r3,r2
  8150b4:	00800044 	movi	r2,1
  8150b8:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
  8150bc:	e037883a 	mov	sp,fp
  8150c0:	df000017 	ldw	fp,0(sp)
  8150c4:	dec00104 	addi	sp,sp,4
  8150c8:	f800283a 	ret

008150cc <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
  8150cc:	defffc04 	addi	sp,sp,-16
  8150d0:	dfc00315 	stw	ra,12(sp)
  8150d4:	df000215 	stw	fp,8(sp)
  8150d8:	df000204 	addi	fp,sp,8
  8150dc:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
  8150e0:	e13fff17 	ldw	r4,-4(fp)
  8150e4:	014020b4 	movhi	r5,130
  8150e8:	29632a04 	addi	r5,r5,-29528
  8150ec:	08158640 	call	815864 <alt_find_dev>
  8150f0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  8150f4:	e0bffe17 	ldw	r2,-8(fp)
}
  8150f8:	e037883a 	mov	sp,fp
  8150fc:	dfc00117 	ldw	ra,4(sp)
  815100:	df000017 	ldw	fp,0(sp)
  815104:	dec00204 	addi	sp,sp,8
  815108:	f800283a 	ret

0081510c <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
  81510c:	defffb04 	addi	sp,sp,-20
  815110:	df000415 	stw	fp,16(sp)
  815114:	df000404 	addi	fp,sp,16
  815118:	e13ffd15 	stw	r4,-12(fp)
  81511c:	e17ffe15 	stw	r5,-8(fp)
  815120:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
  815124:	e03ffc15 	stw	zero,-16(fp)
  815128:	00000f06 	br	815168 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
  81512c:	e0bffd17 	ldw	r2,-12(fp)
  815130:	10800a17 	ldw	r2,40(r2)
  815134:	11000044 	addi	r4,r2,1
  815138:	e0fffc17 	ldw	r3,-16(fp)
  81513c:	e0bffe17 	ldw	r2,-8(fp)
  815140:	1885883a 	add	r2,r3,r2
  815144:	10800003 	ldbu	r2,0(r2)
  815148:	10c03fcc 	andi	r3,r2,255
  81514c:	18c0201c 	xori	r3,r3,128
  815150:	18ffe004 	addi	r3,r3,-128
  815154:	2005883a 	mov	r2,r4
  815158:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
  81515c:	e0bffc17 	ldw	r2,-16(fp)
  815160:	10800044 	addi	r2,r2,1
  815164:	e0bffc15 	stw	r2,-16(fp)
  815168:	e0fffc17 	ldw	r3,-16(fp)
  81516c:	e0bfff17 	ldw	r2,-4(fp)
  815170:	18bfee36 	bltu	r3,r2,81512c <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
  815174:	e037883a 	mov	sp,fp
  815178:	df000017 	ldw	fp,0(sp)
  81517c:	dec00104 	addi	sp,sp,4
  815180:	f800283a 	ret

00815184 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
  815184:	defffd04 	addi	sp,sp,-12
  815188:	df000215 	stw	fp,8(sp)
  81518c:	df000204 	addi	fp,sp,8
  815190:	e13ffe15 	stw	r4,-8(fp)
  815194:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
  815198:	00000d06 	br	8151d0 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
  81519c:	e0bffe17 	ldw	r2,-8(fp)
  8151a0:	10800a17 	ldw	r2,40(r2)
  8151a4:	11000044 	addi	r4,r2,1
  8151a8:	e0bfff17 	ldw	r2,-4(fp)
  8151ac:	10800003 	ldbu	r2,0(r2)
  8151b0:	10c03fcc 	andi	r3,r2,255
  8151b4:	18c0201c 	xori	r3,r3,128
  8151b8:	18ffe004 	addi	r3,r3,-128
  8151bc:	2005883a 	mov	r2,r4
  8151c0:	10c00025 	stbio	r3,0(r2)
		++ptr;
  8151c4:	e0bfff17 	ldw	r2,-4(fp)
  8151c8:	10800044 	addi	r2,r2,1
  8151cc:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
  8151d0:	e0bfff17 	ldw	r2,-4(fp)
  8151d4:	10800003 	ldbu	r2,0(r2)
  8151d8:	10803fcc 	andi	r2,r2,255
  8151dc:	1080201c 	xori	r2,r2,128
  8151e0:	10bfe004 	addi	r2,r2,-128
  8151e4:	1004c03a 	cmpne	r2,r2,zero
  8151e8:	103fec1e 	bne	r2,zero,81519c <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
  8151ec:	e037883a 	mov	sp,fp
  8151f0:	df000017 	ldw	fp,0(sp)
  8151f4:	dec00104 	addi	sp,sp,4
  8151f8:	f800283a 	ret

008151fc <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
  8151fc:	defffb04 	addi	sp,sp,-20
  815200:	dfc00415 	stw	ra,16(sp)
  815204:	df000315 	stw	fp,12(sp)
  815208:	df000304 	addi	fp,sp,12
  81520c:	e13ffd15 	stw	r4,-12(fp)
  815210:	e17ffe15 	stw	r5,-8(fp)
  815214:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
  815218:	e0bffd17 	ldw	r2,-12(fp)
  81521c:	10800017 	ldw	r2,0(r2)
  815220:	1009883a 	mov	r4,r2
  815224:	e1bfff17 	ldw	r6,-4(fp)
  815228:	e17ffe17 	ldw	r5,-8(fp)
  81522c:	081510c0 	call	81510c <alt_up_character_lcd_write>
	return 0;
  815230:	0005883a 	mov	r2,zero
}
  815234:	e037883a 	mov	sp,fp
  815238:	dfc00117 	ldw	ra,4(sp)
  81523c:	df000017 	ldw	fp,0(sp)
  815240:	dec00204 	addi	sp,sp,8
  815244:	f800283a 	ret

00815248 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
  815248:	defff904 	addi	sp,sp,-28
  81524c:	dfc00615 	stw	ra,24(sp)
  815250:	df000515 	stw	fp,20(sp)
  815254:	df000504 	addi	fp,sp,20
  815258:	e13ffc15 	stw	r4,-16(fp)
  81525c:	e17ffd15 	stw	r5,-12(fp)
  815260:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
  815264:	e0bffd17 	ldw	r2,-12(fp)
  815268:	10800a28 	cmpgeui	r2,r2,40
  81526c:	1000031e 	bne	r2,zero,81527c <alt_up_character_lcd_set_cursor_pos+0x34>
  815270:	e0bffe17 	ldw	r2,-8(fp)
  815274:	108000b0 	cmpltui	r2,r2,2
  815278:	1000031e 	bne	r2,zero,815288 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
  81527c:	00bfffc4 	movi	r2,-1
  815280:	e0bfff15 	stw	r2,-4(fp)
  815284:	00000806 	br	8152a8 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  815288:	e13ffd17 	ldw	r4,-12(fp)
  81528c:	e17ffe17 	ldw	r5,-8(fp)
  815290:	0814fe80 	call	814fe8 <get_DDRAM_addr>
  815294:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
  815298:	e17ffb03 	ldbu	r5,-20(fp)
  81529c:	e13ffc17 	ldw	r4,-16(fp)
  8152a0:	08150640 	call	815064 <alt_up_character_lcd_send_cmd>
	return 0;
  8152a4:	e03fff15 	stw	zero,-4(fp)
  8152a8:	e0bfff17 	ldw	r2,-4(fp)
}
  8152ac:	e037883a 	mov	sp,fp
  8152b0:	dfc00117 	ldw	ra,4(sp)
  8152b4:	df000017 	ldw	fp,0(sp)
  8152b8:	dec00204 	addi	sp,sp,8
  8152bc:	f800283a 	ret

008152c0 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  8152c0:	defff904 	addi	sp,sp,-28
  8152c4:	dfc00615 	stw	ra,24(sp)
  8152c8:	df000515 	stw	fp,20(sp)
  8152cc:	df000504 	addi	fp,sp,20
  8152d0:	e13ffc15 	stw	r4,-16(fp)
  8152d4:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  8152d8:	e0bffd17 	ldw	r2,-12(fp)
  8152dc:	1005003a 	cmpeq	r2,r2,zero
  8152e0:	10001e1e 	bne	r2,zero,81535c <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
  8152e4:	e0bffd17 	ldw	r2,-12(fp)
  8152e8:	10800050 	cmplti	r2,r2,1
  8152ec:	1000031e 	bne	r2,zero,8152fc <alt_up_character_lcd_shift_cursor+0x3c>
  8152f0:	00800504 	movi	r2,20
  8152f4:	e0bfff05 	stb	r2,-4(fp)
  8152f8:	00000206 	br	815304 <alt_up_character_lcd_shift_cursor+0x44>
  8152fc:	00c00404 	movi	r3,16
  815300:	e0ffff05 	stb	r3,-4(fp)
  815304:	e0bfff03 	ldbu	r2,-4(fp)
  815308:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  81530c:	e0fffd17 	ldw	r3,-12(fp)
  815310:	e0fffe15 	stw	r3,-8(fp)
  815314:	e0fffe17 	ldw	r3,-8(fp)
  815318:	1804403a 	cmpge	r2,r3,zero
  81531c:	1000031e 	bne	r2,zero,81532c <alt_up_character_lcd_shift_cursor+0x6c>
  815320:	e0bffe17 	ldw	r2,-8(fp)
  815324:	0085c83a 	sub	r2,zero,r2
  815328:	e0bffe15 	stw	r2,-8(fp)
  81532c:	e0fffe17 	ldw	r3,-8(fp)
  815330:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  815334:	00000306 	br	815344 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  815338:	e17ffb43 	ldbu	r5,-19(fp)
  81533c:	e13ffc17 	ldw	r4,-16(fp)
  815340:	08150640 	call	815064 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  815344:	e0bffb03 	ldbu	r2,-20(fp)
  815348:	10bfffc4 	addi	r2,r2,-1
  81534c:	e0bffb05 	stb	r2,-20(fp)
  815350:	e0bffb03 	ldbu	r2,-20(fp)
  815354:	10803fd8 	cmpnei	r2,r2,255
  815358:	103ff71e 	bne	r2,zero,815338 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  81535c:	e037883a 	mov	sp,fp
  815360:	dfc00117 	ldw	ra,4(sp)
  815364:	df000017 	ldw	fp,0(sp)
  815368:	dec00204 	addi	sp,sp,8
  81536c:	f800283a 	ret

00815370 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  815370:	defff904 	addi	sp,sp,-28
  815374:	dfc00615 	stw	ra,24(sp)
  815378:	df000515 	stw	fp,20(sp)
  81537c:	df000504 	addi	fp,sp,20
  815380:	e13ffc15 	stw	r4,-16(fp)
  815384:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  815388:	e0bffd17 	ldw	r2,-12(fp)
  81538c:	1005003a 	cmpeq	r2,r2,zero
  815390:	10001e1e 	bne	r2,zero,81540c <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
  815394:	e0bffd17 	ldw	r2,-12(fp)
  815398:	10800050 	cmplti	r2,r2,1
  81539c:	1000031e 	bne	r2,zero,8153ac <alt_up_character_lcd_shift_display+0x3c>
  8153a0:	00800704 	movi	r2,28
  8153a4:	e0bfff05 	stb	r2,-4(fp)
  8153a8:	00000206 	br	8153b4 <alt_up_character_lcd_shift_display+0x44>
  8153ac:	00c00604 	movi	r3,24
  8153b0:	e0ffff05 	stb	r3,-4(fp)
  8153b4:	e0bfff03 	ldbu	r2,-4(fp)
  8153b8:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  8153bc:	e0fffd17 	ldw	r3,-12(fp)
  8153c0:	e0fffe15 	stw	r3,-8(fp)
  8153c4:	e0fffe17 	ldw	r3,-8(fp)
  8153c8:	1804403a 	cmpge	r2,r3,zero
  8153cc:	1000031e 	bne	r2,zero,8153dc <alt_up_character_lcd_shift_display+0x6c>
  8153d0:	e0bffe17 	ldw	r2,-8(fp)
  8153d4:	0085c83a 	sub	r2,zero,r2
  8153d8:	e0bffe15 	stw	r2,-8(fp)
  8153dc:	e0fffe17 	ldw	r3,-8(fp)
  8153e0:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  8153e4:	00000306 	br	8153f4 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  8153e8:	e17ffb43 	ldbu	r5,-19(fp)
  8153ec:	e13ffc17 	ldw	r4,-16(fp)
  8153f0:	08150640 	call	815064 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  8153f4:	e0bffb03 	ldbu	r2,-20(fp)
  8153f8:	10bfffc4 	addi	r2,r2,-1
  8153fc:	e0bffb05 	stb	r2,-20(fp)
  815400:	e0bffb03 	ldbu	r2,-20(fp)
  815404:	10803fd8 	cmpnei	r2,r2,255
  815408:	103ff71e 	bne	r2,zero,8153e8 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  81540c:	e037883a 	mov	sp,fp
  815410:	dfc00117 	ldw	ra,4(sp)
  815414:	df000017 	ldw	fp,0(sp)
  815418:	dec00204 	addi	sp,sp,8
  81541c:	f800283a 	ret

00815420 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
  815420:	defff904 	addi	sp,sp,-28
  815424:	dfc00615 	stw	ra,24(sp)
  815428:	df000515 	stw	fp,20(sp)
  81542c:	df000504 	addi	fp,sp,20
  815430:	e13ffc15 	stw	r4,-16(fp)
  815434:	e17ffd15 	stw	r5,-12(fp)
  815438:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
  81543c:	e0bffd17 	ldw	r2,-12(fp)
  815440:	10800a28 	cmpgeui	r2,r2,40
  815444:	1000031e 	bne	r2,zero,815454 <alt_up_character_lcd_erase_pos+0x34>
  815448:	e0bffe17 	ldw	r2,-8(fp)
  81544c:	108000b0 	cmpltui	r2,r2,2
  815450:	1000031e 	bne	r2,zero,815460 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
  815454:	00bfffc4 	movi	r2,-1
  815458:	e0bfff15 	stw	r2,-4(fp)
  81545c:	00000e06 	br	815498 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  815460:	e13ffd17 	ldw	r4,-12(fp)
  815464:	e17ffe17 	ldw	r5,-8(fp)
  815468:	0814fe80 	call	814fe8 <get_DDRAM_addr>
  81546c:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
  815470:	e17ffb03 	ldbu	r5,-20(fp)
  815474:	e13ffc17 	ldw	r4,-16(fp)
  815478:	08150640 	call	815064 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
  81547c:	e0bffc17 	ldw	r2,-16(fp)
  815480:	10800a17 	ldw	r2,40(r2)
  815484:	10800044 	addi	r2,r2,1
  815488:	1007883a 	mov	r3,r2
  81548c:	00800084 	movi	r2,2
  815490:	18800025 	stbio	r2,0(r3)
	return 0;
  815494:	e03fff15 	stw	zero,-4(fp)
  815498:	e0bfff17 	ldw	r2,-4(fp)
}
  81549c:	e037883a 	mov	sp,fp
  8154a0:	dfc00117 	ldw	ra,4(sp)
  8154a4:	df000017 	ldw	fp,0(sp)
  8154a8:	dec00204 	addi	sp,sp,8
  8154ac:	f800283a 	ret

008154b0 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
  8154b0:	defffd04 	addi	sp,sp,-12
  8154b4:	dfc00215 	stw	ra,8(sp)
  8154b8:	df000115 	stw	fp,4(sp)
  8154bc:	df000104 	addi	fp,sp,4
  8154c0:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
  8154c4:	e13fff17 	ldw	r4,-4(fp)
  8154c8:	01400304 	movi	r5,12
  8154cc:	08150640 	call	815064 <alt_up_character_lcd_send_cmd>
}
  8154d0:	e037883a 	mov	sp,fp
  8154d4:	dfc00117 	ldw	ra,4(sp)
  8154d8:	df000017 	ldw	fp,0(sp)
  8154dc:	dec00204 	addi	sp,sp,8
  8154e0:	f800283a 	ret

008154e4 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
  8154e4:	defffd04 	addi	sp,sp,-12
  8154e8:	dfc00215 	stw	ra,8(sp)
  8154ec:	df000115 	stw	fp,4(sp)
  8154f0:	df000104 	addi	fp,sp,4
  8154f4:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
  8154f8:	e13fff17 	ldw	r4,-4(fp)
  8154fc:	014003c4 	movi	r5,15
  815500:	08150640 	call	815064 <alt_up_character_lcd_send_cmd>
}
  815504:	e037883a 	mov	sp,fp
  815508:	dfc00117 	ldw	ra,4(sp)
  81550c:	df000017 	ldw	fp,0(sp)
  815510:	dec00204 	addi	sp,sp,8
  815514:	f800283a 	ret

00815518 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  815518:	defff404 	addi	sp,sp,-48
  81551c:	df000b15 	stw	fp,44(sp)
  815520:	df000b04 	addi	fp,sp,44
  815524:	e13ffb15 	stw	r4,-20(fp)
  815528:	e17ffc15 	stw	r5,-16(fp)
  81552c:	e1bffd15 	stw	r6,-12(fp)
  815530:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  815534:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  815538:	008020b4 	movhi	r2,130
  81553c:	10aa5204 	addi	r2,r2,-22200
  815540:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  815544:	1005003a 	cmpeq	r2,r2,zero
  815548:	1000411e 	bne	r2,zero,815650 <alt_alarm_start+0x138>
  {
    if (alarm)
  81554c:	e0bffb17 	ldw	r2,-20(fp)
  815550:	1005003a 	cmpeq	r2,r2,zero
  815554:	10003b1e 	bne	r2,zero,815644 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  815558:	e0fffb17 	ldw	r3,-20(fp)
  81555c:	e0bffd17 	ldw	r2,-12(fp)
  815560:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  815564:	e0fffb17 	ldw	r3,-20(fp)
  815568:	e0bffe17 	ldw	r2,-8(fp)
  81556c:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815570:	0005303a 	rdctl	r2,status
  815574:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815578:	e0fff817 	ldw	r3,-32(fp)
  81557c:	00bfff84 	movi	r2,-2
  815580:	1884703a 	and	r2,r3,r2
  815584:	1001703a 	wrctl	status,r2
  
  return context;
  815588:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  81558c:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  815590:	008020b4 	movhi	r2,130
  815594:	10aa5304 	addi	r2,r2,-22196
  815598:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  81559c:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  8155a0:	e0fffc17 	ldw	r3,-16(fp)
  8155a4:	e0bff917 	ldw	r2,-28(fp)
  8155a8:	1885883a 	add	r2,r3,r2
  8155ac:	10c00044 	addi	r3,r2,1
  8155b0:	e0bffb17 	ldw	r2,-20(fp)
  8155b4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  8155b8:	e0bffb17 	ldw	r2,-20(fp)
  8155bc:	10c00217 	ldw	r3,8(r2)
  8155c0:	e0bff917 	ldw	r2,-28(fp)
  8155c4:	1880042e 	bgeu	r3,r2,8155d8 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  8155c8:	e0fffb17 	ldw	r3,-20(fp)
  8155cc:	00800044 	movi	r2,1
  8155d0:	18800405 	stb	r2,16(r3)
  8155d4:	00000206 	br	8155e0 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  8155d8:	e0bffb17 	ldw	r2,-20(fp)
  8155dc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  8155e0:	e0fffb17 	ldw	r3,-20(fp)
  8155e4:	008020b4 	movhi	r2,130
  8155e8:	10a34f04 	addi	r2,r2,-29380
  8155ec:	e0bff615 	stw	r2,-40(fp)
  8155f0:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  8155f4:	e0fff717 	ldw	r3,-36(fp)
  8155f8:	e0bff617 	ldw	r2,-40(fp)
  8155fc:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  815600:	e0bff617 	ldw	r2,-40(fp)
  815604:	10c00017 	ldw	r3,0(r2)
  815608:	e0bff717 	ldw	r2,-36(fp)
  81560c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  815610:	e0bff617 	ldw	r2,-40(fp)
  815614:	10c00017 	ldw	r3,0(r2)
  815618:	e0bff717 	ldw	r2,-36(fp)
  81561c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  815620:	e0fff617 	ldw	r3,-40(fp)
  815624:	e0bff717 	ldw	r2,-36(fp)
  815628:	18800015 	stw	r2,0(r3)
  81562c:	e0bffa17 	ldw	r2,-24(fp)
  815630:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815634:	e0bff517 	ldw	r2,-44(fp)
  815638:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  81563c:	e03fff15 	stw	zero,-4(fp)
  815640:	00000506 	br	815658 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  815644:	00bffa84 	movi	r2,-22
  815648:	e0bfff15 	stw	r2,-4(fp)
  81564c:	00000206 	br	815658 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  815650:	00bfde84 	movi	r2,-134
  815654:	e0bfff15 	stw	r2,-4(fp)
  815658:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  81565c:	e037883a 	mov	sp,fp
  815660:	df000017 	ldw	fp,0(sp)
  815664:	dec00104 	addi	sp,sp,4
  815668:	f800283a 	ret

0081566c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  81566c:	deffff04 	addi	sp,sp,-4
  815670:	df000015 	stw	fp,0(sp)
  815674:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  815678:	e037883a 	mov	sp,fp
  81567c:	df000017 	ldw	fp,0(sp)
  815680:	dec00104 	addi	sp,sp,4
  815684:	f800283a 	ret

00815688 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  815688:	defff904 	addi	sp,sp,-28
  81568c:	dfc00615 	stw	ra,24(sp)
  815690:	df000515 	stw	fp,20(sp)
  815694:	df000504 	addi	fp,sp,20
  815698:	e13ffd15 	stw	r4,-12(fp)
  81569c:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  8156a0:	e0bffd17 	ldw	r2,-12(fp)
  8156a4:	1005003a 	cmpeq	r2,r2,zero
  8156a8:	1000041e 	bne	r2,zero,8156bc <alt_dev_llist_insert+0x34>
  8156ac:	e0bffd17 	ldw	r2,-12(fp)
  8156b0:	10800217 	ldw	r2,8(r2)
  8156b4:	1004c03a 	cmpne	r2,r2,zero
  8156b8:	1000071e 	bne	r2,zero,8156d8 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  8156bc:	081573c0 	call	81573c <alt_get_errno>
  8156c0:	1007883a 	mov	r3,r2
  8156c4:	00800584 	movi	r2,22
  8156c8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  8156cc:	00bffa84 	movi	r2,-22
  8156d0:	e0bfff15 	stw	r2,-4(fp)
  8156d4:	00001306 	br	815724 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  8156d8:	e0fffd17 	ldw	r3,-12(fp)
  8156dc:	e0bffe17 	ldw	r2,-8(fp)
  8156e0:	e0bffb15 	stw	r2,-20(fp)
  8156e4:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  8156e8:	e0fffc17 	ldw	r3,-16(fp)
  8156ec:	e0bffb17 	ldw	r2,-20(fp)
  8156f0:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  8156f4:	e0bffb17 	ldw	r2,-20(fp)
  8156f8:	10c00017 	ldw	r3,0(r2)
  8156fc:	e0bffc17 	ldw	r2,-16(fp)
  815700:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  815704:	e0bffb17 	ldw	r2,-20(fp)
  815708:	10c00017 	ldw	r3,0(r2)
  81570c:	e0bffc17 	ldw	r2,-16(fp)
  815710:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  815714:	e0fffb17 	ldw	r3,-20(fp)
  815718:	e0bffc17 	ldw	r2,-16(fp)
  81571c:	18800015 	stw	r2,0(r3)

  return 0;  
  815720:	e03fff15 	stw	zero,-4(fp)
  815724:	e0bfff17 	ldw	r2,-4(fp)
}
  815728:	e037883a 	mov	sp,fp
  81572c:	dfc00117 	ldw	ra,4(sp)
  815730:	df000017 	ldw	fp,0(sp)
  815734:	dec00204 	addi	sp,sp,8
  815738:	f800283a 	ret

0081573c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81573c:	defffd04 	addi	sp,sp,-12
  815740:	dfc00215 	stw	ra,8(sp)
  815744:	df000115 	stw	fp,4(sp)
  815748:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  81574c:	008020b4 	movhi	r2,130
  815750:	10a32d04 	addi	r2,r2,-29516
  815754:	10800017 	ldw	r2,0(r2)
  815758:	1005003a 	cmpeq	r2,r2,zero
  81575c:	1000061e 	bne	r2,zero,815778 <alt_get_errno+0x3c>
  815760:	008020b4 	movhi	r2,130
  815764:	10a32d04 	addi	r2,r2,-29516
  815768:	10800017 	ldw	r2,0(r2)
  81576c:	103ee83a 	callr	r2
  815770:	e0bfff15 	stw	r2,-4(fp)
  815774:	00000306 	br	815784 <alt_get_errno+0x48>
  815778:	008020b4 	movhi	r2,130
  81577c:	10aa3404 	addi	r2,r2,-22320
  815780:	e0bfff15 	stw	r2,-4(fp)
  815784:	e0bfff17 	ldw	r2,-4(fp)
}
  815788:	e037883a 	mov	sp,fp
  81578c:	dfc00117 	ldw	ra,4(sp)
  815790:	df000017 	ldw	fp,0(sp)
  815794:	dec00204 	addi	sp,sp,8
  815798:	f800283a 	ret

0081579c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  81579c:	defffd04 	addi	sp,sp,-12
  8157a0:	dfc00215 	stw	ra,8(sp)
  8157a4:	df000115 	stw	fp,4(sp)
  8157a8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  8157ac:	00bfff04 	movi	r2,-4
  8157b0:	00c02074 	movhi	r3,129
  8157b4:	18dafd04 	addi	r3,r3,27636
  8157b8:	1885883a 	add	r2,r3,r2
  8157bc:	e0bfff15 	stw	r2,-4(fp)
  8157c0:	00000606 	br	8157dc <_do_ctors+0x40>
        (*ctor) (); 
  8157c4:	e0bfff17 	ldw	r2,-4(fp)
  8157c8:	10800017 	ldw	r2,0(r2)
  8157cc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  8157d0:	e0bfff17 	ldw	r2,-4(fp)
  8157d4:	10bfff04 	addi	r2,r2,-4
  8157d8:	e0bfff15 	stw	r2,-4(fp)
  8157dc:	e0ffff17 	ldw	r3,-4(fp)
  8157e0:	00802074 	movhi	r2,129
  8157e4:	109afc04 	addi	r2,r2,27632
  8157e8:	18bff62e 	bgeu	r3,r2,8157c4 <_do_ctors+0x28>
        (*ctor) (); 
}
  8157ec:	e037883a 	mov	sp,fp
  8157f0:	dfc00117 	ldw	ra,4(sp)
  8157f4:	df000017 	ldw	fp,0(sp)
  8157f8:	dec00204 	addi	sp,sp,8
  8157fc:	f800283a 	ret

00815800 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  815800:	defffd04 	addi	sp,sp,-12
  815804:	dfc00215 	stw	ra,8(sp)
  815808:	df000115 	stw	fp,4(sp)
  81580c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  815810:	00bfff04 	movi	r2,-4
  815814:	00c02074 	movhi	r3,129
  815818:	18dafd04 	addi	r3,r3,27636
  81581c:	1885883a 	add	r2,r3,r2
  815820:	e0bfff15 	stw	r2,-4(fp)
  815824:	00000606 	br	815840 <_do_dtors+0x40>
        (*dtor) (); 
  815828:	e0bfff17 	ldw	r2,-4(fp)
  81582c:	10800017 	ldw	r2,0(r2)
  815830:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  815834:	e0bfff17 	ldw	r2,-4(fp)
  815838:	10bfff04 	addi	r2,r2,-4
  81583c:	e0bfff15 	stw	r2,-4(fp)
  815840:	e0ffff17 	ldw	r3,-4(fp)
  815844:	00802074 	movhi	r2,129
  815848:	109afd04 	addi	r2,r2,27636
  81584c:	18bff62e 	bgeu	r3,r2,815828 <_do_dtors+0x28>
        (*dtor) (); 
}
  815850:	e037883a 	mov	sp,fp
  815854:	dfc00117 	ldw	ra,4(sp)
  815858:	df000017 	ldw	fp,0(sp)
  81585c:	dec00204 	addi	sp,sp,8
  815860:	f800283a 	ret

00815864 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  815864:	defff904 	addi	sp,sp,-28
  815868:	dfc00615 	stw	ra,24(sp)
  81586c:	df000515 	stw	fp,20(sp)
  815870:	df000504 	addi	fp,sp,20
  815874:	e13ffd15 	stw	r4,-12(fp)
  815878:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  81587c:	e0bffe17 	ldw	r2,-8(fp)
  815880:	10800017 	ldw	r2,0(r2)
  815884:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  815888:	e13ffd17 	ldw	r4,-12(fp)
  81588c:	08006d00 	call	8006d0 <strlen>
  815890:	10800044 	addi	r2,r2,1
  815894:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  815898:	00000d06 	br	8158d0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  81589c:	e0bffc17 	ldw	r2,-16(fp)
  8158a0:	11000217 	ldw	r4,8(r2)
  8158a4:	e1bffb17 	ldw	r6,-20(fp)
  8158a8:	e17ffd17 	ldw	r5,-12(fp)
  8158ac:	08168280 	call	816828 <memcmp>
  8158b0:	1004c03a 	cmpne	r2,r2,zero
  8158b4:	1000031e 	bne	r2,zero,8158c4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  8158b8:	e0bffc17 	ldw	r2,-16(fp)
  8158bc:	e0bfff15 	stw	r2,-4(fp)
  8158c0:	00000706 	br	8158e0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  8158c4:	e0bffc17 	ldw	r2,-16(fp)
  8158c8:	10800017 	ldw	r2,0(r2)
  8158cc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8158d0:	e0fffe17 	ldw	r3,-8(fp)
  8158d4:	e0bffc17 	ldw	r2,-16(fp)
  8158d8:	10fff01e 	bne	r2,r3,81589c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  8158dc:	e03fff15 	stw	zero,-4(fp)
  8158e0:	e0bfff17 	ldw	r2,-4(fp)
}
  8158e4:	e037883a 	mov	sp,fp
  8158e8:	dfc00117 	ldw	ra,4(sp)
  8158ec:	df000017 	ldw	fp,0(sp)
  8158f0:	dec00204 	addi	sp,sp,8
  8158f4:	f800283a 	ret

008158f8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  8158f8:	deffff04 	addi	sp,sp,-4
  8158fc:	df000015 	stw	fp,0(sp)
  815900:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
  815904:	e037883a 	mov	sp,fp
  815908:	df000017 	ldw	fp,0(sp)
  81590c:	dec00104 	addi	sp,sp,4
  815910:	f800283a 	ret

00815914 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  815914:	defff804 	addi	sp,sp,-32
  815918:	dfc00715 	stw	ra,28(sp)
  81591c:	df000615 	stw	fp,24(sp)
  815920:	dc000515 	stw	r16,20(sp)
  815924:	df000504 	addi	fp,sp,20
  815928:	e13ffc15 	stw	r4,-16(fp)
  81592c:	e17ffd15 	stw	r5,-12(fp)
  815930:	e1bffe15 	stw	r6,-8(fp)
  815934:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  815938:	e13ffd17 	ldw	r4,-12(fp)
  81593c:	e17ffe17 	ldw	r5,-8(fp)
  815940:	e1bfff17 	ldw	r6,-4(fp)
  815944:	0815d1c0 	call	815d1c <open>
  815948:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  81594c:	e0bffb17 	ldw	r2,-20(fp)
  815950:	1004803a 	cmplt	r2,r2,zero
  815954:	10001f1e 	bne	r2,zero,8159d4 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
  815958:	e13ffb17 	ldw	r4,-20(fp)
  81595c:	04002074 	movhi	r16,129
  815960:	841e8404 	addi	r16,r16,31248
  815964:	01400304 	movi	r5,12
  815968:	08099200 	call	809920 <__mulsi3>
  81596c:	1405883a 	add	r2,r2,r16
  815970:	10c00017 	ldw	r3,0(r2)
  815974:	e0bffc17 	ldw	r2,-16(fp)
  815978:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  81597c:	e13ffb17 	ldw	r4,-20(fp)
  815980:	04002074 	movhi	r16,129
  815984:	841e8404 	addi	r16,r16,31248
  815988:	01400304 	movi	r5,12
  81598c:	08099200 	call	809920 <__mulsi3>
  815990:	1405883a 	add	r2,r2,r16
  815994:	10800104 	addi	r2,r2,4
  815998:	10c00017 	ldw	r3,0(r2)
  81599c:	e0bffc17 	ldw	r2,-16(fp)
  8159a0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  8159a4:	e13ffb17 	ldw	r4,-20(fp)
  8159a8:	04002074 	movhi	r16,129
  8159ac:	841e8404 	addi	r16,r16,31248
  8159b0:	01400304 	movi	r5,12
  8159b4:	08099200 	call	809920 <__mulsi3>
  8159b8:	1405883a 	add	r2,r2,r16
  8159bc:	10800204 	addi	r2,r2,8
  8159c0:	10c00017 	ldw	r3,0(r2)
  8159c4:	e0bffc17 	ldw	r2,-16(fp)
  8159c8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  8159cc:	e13ffb17 	ldw	r4,-20(fp)
  8159d0:	080a8840 	call	80a884 <alt_release_fd>
  }
} 
  8159d4:	e037883a 	mov	sp,fp
  8159d8:	dfc00217 	ldw	ra,8(sp)
  8159dc:	df000117 	ldw	fp,4(sp)
  8159e0:	dc000017 	ldw	r16,0(sp)
  8159e4:	dec00304 	addi	sp,sp,12
  8159e8:	f800283a 	ret

008159ec <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  8159ec:	defffb04 	addi	sp,sp,-20
  8159f0:	dfc00415 	stw	ra,16(sp)
  8159f4:	df000315 	stw	fp,12(sp)
  8159f8:	df000304 	addi	fp,sp,12
  8159fc:	e13ffd15 	stw	r4,-12(fp)
  815a00:	e17ffe15 	stw	r5,-8(fp)
  815a04:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  815a08:	01002074 	movhi	r4,129
  815a0c:	211e8704 	addi	r4,r4,31260
  815a10:	e17ffd17 	ldw	r5,-12(fp)
  815a14:	01800044 	movi	r6,1
  815a18:	01c07fc4 	movi	r7,511
  815a1c:	08159140 	call	815914 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  815a20:	01002074 	movhi	r4,129
  815a24:	211e8404 	addi	r4,r4,31248
  815a28:	e17ffe17 	ldw	r5,-8(fp)
  815a2c:	000d883a 	mov	r6,zero
  815a30:	01c07fc4 	movi	r7,511
  815a34:	08159140 	call	815914 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  815a38:	01002074 	movhi	r4,129
  815a3c:	211e8a04 	addi	r4,r4,31272
  815a40:	e17fff17 	ldw	r5,-4(fp)
  815a44:	01800044 	movi	r6,1
  815a48:	01c07fc4 	movi	r7,511
  815a4c:	08159140 	call	815914 <alt_open_fd>
}  
  815a50:	e037883a 	mov	sp,fp
  815a54:	dfc00117 	ldw	ra,4(sp)
  815a58:	df000017 	ldw	fp,0(sp)
  815a5c:	dec00204 	addi	sp,sp,8
  815a60:	f800283a 	ret

00815a64 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  815a64:	deffef04 	addi	sp,sp,-68
  815a68:	df001015 	stw	fp,64(sp)
  815a6c:	df001004 	addi	fp,sp,64
  815a70:	e13ffc15 	stw	r4,-16(fp)
  815a74:	e17ffd15 	stw	r5,-12(fp)
  815a78:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
  815a7c:	00bffa84 	movi	r2,-22
  815a80:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  815a84:	e0bffc17 	ldw	r2,-16(fp)
  815a88:	10800828 	cmpgeui	r2,r2,32
  815a8c:	1000601e 	bne	r2,zero,815c10 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815a90:	0005303a 	rdctl	r2,status
  815a94:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815a98:	e0fff917 	ldw	r3,-28(fp)
  815a9c:	00bfff84 	movi	r2,-2
  815aa0:	1884703a 	and	r2,r3,r2
  815aa4:	1001703a 	wrctl	status,r2
  
  return context;
  815aa8:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  815aac:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
  815ab0:	e0bffc17 	ldw	r2,-16(fp)
  815ab4:	00c020b4 	movhi	r3,130
  815ab8:	18c6e704 	addi	r3,r3,7068
  815abc:	100490fa 	slli	r2,r2,3
  815ac0:	10c7883a 	add	r3,r2,r3
  815ac4:	e0bffe17 	ldw	r2,-8(fp)
  815ac8:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
  815acc:	e0bffc17 	ldw	r2,-16(fp)
  815ad0:	00c020b4 	movhi	r3,130
  815ad4:	18c6e704 	addi	r3,r3,7068
  815ad8:	100490fa 	slli	r2,r2,3
  815adc:	10c5883a 	add	r2,r2,r3
  815ae0:	10c00104 	addi	r3,r2,4
  815ae4:	e0bffd17 	ldw	r2,-12(fp)
  815ae8:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  815aec:	e0bffe17 	ldw	r2,-8(fp)
  815af0:	1005003a 	cmpeq	r2,r2,zero
  815af4:	1000201e 	bne	r2,zero,815b78 <alt_irq_register+0x114>
  815af8:	e0bffc17 	ldw	r2,-16(fp)
  815afc:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815b00:	0005303a 	rdctl	r2,status
  815b04:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815b08:	e0fff617 	ldw	r3,-40(fp)
  815b0c:	00bfff84 	movi	r2,-2
  815b10:	1884703a 	and	r2,r3,r2
  815b14:	1001703a 	wrctl	status,r2
  
  return context;
  815b18:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  815b1c:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  815b20:	e0fff717 	ldw	r3,-36(fp)
  815b24:	00800044 	movi	r2,1
  815b28:	10c4983a 	sll	r2,r2,r3
  815b2c:	1007883a 	mov	r3,r2
  815b30:	008020b4 	movhi	r2,130
  815b34:	10aa5104 	addi	r2,r2,-22204
  815b38:	10800017 	ldw	r2,0(r2)
  815b3c:	1886b03a 	or	r3,r3,r2
  815b40:	008020b4 	movhi	r2,130
  815b44:	10aa5104 	addi	r2,r2,-22204
  815b48:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  815b4c:	008020b4 	movhi	r2,130
  815b50:	10aa5104 	addi	r2,r2,-22204
  815b54:	10800017 	ldw	r2,0(r2)
  815b58:	100170fa 	wrctl	ienable,r2
  815b5c:	e0bff817 	ldw	r2,-32(fp)
  815b60:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815b64:	e0bff517 	ldw	r2,-44(fp)
  815b68:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  815b6c:	0005883a 	mov	r2,zero
  815b70:	e0bfff15 	stw	r2,-4(fp)
  815b74:	00002006 	br	815bf8 <alt_irq_register+0x194>
  815b78:	e0bffc17 	ldw	r2,-16(fp)
  815b7c:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815b80:	0005303a 	rdctl	r2,status
  815b84:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815b88:	e0fff217 	ldw	r3,-56(fp)
  815b8c:	00bfff84 	movi	r2,-2
  815b90:	1884703a 	and	r2,r3,r2
  815b94:	1001703a 	wrctl	status,r2
  
  return context;
  815b98:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  815b9c:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
  815ba0:	e0fff317 	ldw	r3,-52(fp)
  815ba4:	00800044 	movi	r2,1
  815ba8:	10c4983a 	sll	r2,r2,r3
  815bac:	0084303a 	nor	r2,zero,r2
  815bb0:	1007883a 	mov	r3,r2
  815bb4:	008020b4 	movhi	r2,130
  815bb8:	10aa5104 	addi	r2,r2,-22204
  815bbc:	10800017 	ldw	r2,0(r2)
  815bc0:	1886703a 	and	r3,r3,r2
  815bc4:	008020b4 	movhi	r2,130
  815bc8:	10aa5104 	addi	r2,r2,-22204
  815bcc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  815bd0:	008020b4 	movhi	r2,130
  815bd4:	10aa5104 	addi	r2,r2,-22204
  815bd8:	10800017 	ldw	r2,0(r2)
  815bdc:	100170fa 	wrctl	ienable,r2
  815be0:	e0bff417 	ldw	r2,-48(fp)
  815be4:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815be8:	e0bff117 	ldw	r2,-60(fp)
  815bec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  815bf0:	0005883a 	mov	r2,zero
  815bf4:	e0bfff15 	stw	r2,-4(fp)
  815bf8:	e0bfff17 	ldw	r2,-4(fp)
  815bfc:	e0bffb15 	stw	r2,-20(fp)
  815c00:	e0bffa17 	ldw	r2,-24(fp)
  815c04:	e0bff015 	stw	r2,-64(fp)
  815c08:	e0bff017 	ldw	r2,-64(fp)
  815c0c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  815c10:	e0bffb17 	ldw	r2,-20(fp)
}
  815c14:	e037883a 	mov	sp,fp
  815c18:	df000017 	ldw	fp,0(sp)
  815c1c:	dec00104 	addi	sp,sp,4
  815c20:	f800283a 	ret

00815c24 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  815c24:	defffa04 	addi	sp,sp,-24
  815c28:	dfc00515 	stw	ra,20(sp)
  815c2c:	df000415 	stw	fp,16(sp)
  815c30:	dc000315 	stw	r16,12(sp)
  815c34:	df000304 	addi	fp,sp,12
  815c38:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  815c3c:	e0bffe17 	ldw	r2,-8(fp)
  815c40:	10800217 	ldw	r2,8(r2)
  815c44:	10d00034 	orhi	r3,r2,16384
  815c48:	e0bffe17 	ldw	r2,-8(fp)
  815c4c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  815c50:	e03ffd15 	stw	zero,-12(fp)
  815c54:	00002306 	br	815ce4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  815c58:	e13ffd17 	ldw	r4,-12(fp)
  815c5c:	04002074 	movhi	r16,129
  815c60:	841e8404 	addi	r16,r16,31248
  815c64:	01400304 	movi	r5,12
  815c68:	08099200 	call	809920 <__mulsi3>
  815c6c:	1405883a 	add	r2,r2,r16
  815c70:	10c00017 	ldw	r3,0(r2)
  815c74:	e0bffe17 	ldw	r2,-8(fp)
  815c78:	10800017 	ldw	r2,0(r2)
  815c7c:	1880161e 	bne	r3,r2,815cd8 <alt_file_locked+0xb4>
  815c80:	e13ffd17 	ldw	r4,-12(fp)
  815c84:	04002074 	movhi	r16,129
  815c88:	841e8404 	addi	r16,r16,31248
  815c8c:	01400304 	movi	r5,12
  815c90:	08099200 	call	809920 <__mulsi3>
  815c94:	1405883a 	add	r2,r2,r16
  815c98:	10800204 	addi	r2,r2,8
  815c9c:	10800017 	ldw	r2,0(r2)
  815ca0:	1004403a 	cmpge	r2,r2,zero
  815ca4:	10000c1e 	bne	r2,zero,815cd8 <alt_file_locked+0xb4>
  815ca8:	e13ffd17 	ldw	r4,-12(fp)
  815cac:	01400304 	movi	r5,12
  815cb0:	08099200 	call	809920 <__mulsi3>
  815cb4:	1007883a 	mov	r3,r2
  815cb8:	00802074 	movhi	r2,129
  815cbc:	109e8404 	addi	r2,r2,31248
  815cc0:	1887883a 	add	r3,r3,r2
  815cc4:	e0bffe17 	ldw	r2,-8(fp)
  815cc8:	18800326 	beq	r3,r2,815cd8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  815ccc:	00bffcc4 	movi	r2,-13
  815cd0:	e0bfff15 	stw	r2,-4(fp)
  815cd4:	00000a06 	br	815d00 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  815cd8:	e0bffd17 	ldw	r2,-12(fp)
  815cdc:	10800044 	addi	r2,r2,1
  815ce0:	e0bffd15 	stw	r2,-12(fp)
  815ce4:	008020b4 	movhi	r2,130
  815ce8:	10a32c04 	addi	r2,r2,-29520
  815cec:	10800017 	ldw	r2,0(r2)
  815cf0:	1007883a 	mov	r3,r2
  815cf4:	e0bffd17 	ldw	r2,-12(fp)
  815cf8:	18bfd72e 	bgeu	r3,r2,815c58 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  815cfc:	e03fff15 	stw	zero,-4(fp)
  815d00:	e0bfff17 	ldw	r2,-4(fp)
}
  815d04:	e037883a 	mov	sp,fp
  815d08:	dfc00217 	ldw	ra,8(sp)
  815d0c:	df000117 	ldw	fp,4(sp)
  815d10:	dc000017 	ldw	r16,0(sp)
  815d14:	dec00304 	addi	sp,sp,12
  815d18:	f800283a 	ret

00815d1c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  815d1c:	defff404 	addi	sp,sp,-48
  815d20:	dfc00b15 	stw	ra,44(sp)
  815d24:	df000a15 	stw	fp,40(sp)
  815d28:	df000a04 	addi	fp,sp,40
  815d2c:	e13ffb15 	stw	r4,-20(fp)
  815d30:	e17ffc15 	stw	r5,-16(fp)
  815d34:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  815d38:	00bfffc4 	movi	r2,-1
  815d3c:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  815d40:	00bffb44 	movi	r2,-19
  815d44:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  815d48:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  815d4c:	e13ffb17 	ldw	r4,-20(fp)
  815d50:	014020b4 	movhi	r5,130
  815d54:	29632a04 	addi	r5,r5,-29528
  815d58:	08158640 	call	815864 <alt_find_dev>
  815d5c:	e0bffa15 	stw	r2,-24(fp)
  815d60:	e0bffa17 	ldw	r2,-24(fp)
  815d64:	1004c03a 	cmpne	r2,r2,zero
  815d68:	1000051e 	bne	r2,zero,815d80 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  815d6c:	e13ffb17 	ldw	r4,-20(fp)
  815d70:	08165b80 	call	8165b8 <alt_find_file>
  815d74:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  815d78:	00800044 	movi	r2,1
  815d7c:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  815d80:	e0bffa17 	ldw	r2,-24(fp)
  815d84:	1005003a 	cmpeq	r2,r2,zero
  815d88:	1000311e 	bne	r2,zero,815e50 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
  815d8c:	e13ffa17 	ldw	r4,-24(fp)
  815d90:	08166d80 	call	8166d8 <alt_get_fd>
  815d94:	e0bff815 	stw	r2,-32(fp)
  815d98:	e0bff817 	ldw	r2,-32(fp)
  815d9c:	1004403a 	cmpge	r2,r2,zero
  815da0:	1000031e 	bne	r2,zero,815db0 <open+0x94>
    {
      status = index;
  815da4:	e0bff817 	ldw	r2,-32(fp)
  815da8:	e0bff715 	stw	r2,-36(fp)
  815dac:	00002a06 	br	815e58 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
  815db0:	e13ff817 	ldw	r4,-32(fp)
  815db4:	01400304 	movi	r5,12
  815db8:	08099200 	call	809920 <__mulsi3>
  815dbc:	1007883a 	mov	r3,r2
  815dc0:	00802074 	movhi	r2,129
  815dc4:	109e8404 	addi	r2,r2,31248
  815dc8:	1885883a 	add	r2,r3,r2
  815dcc:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  815dd0:	e0fffc17 	ldw	r3,-16(fp)
  815dd4:	00900034 	movhi	r2,16384
  815dd8:	10bfffc4 	addi	r2,r2,-1
  815ddc:	1886703a 	and	r3,r3,r2
  815de0:	e0bff917 	ldw	r2,-28(fp)
  815de4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  815de8:	e0bff617 	ldw	r2,-40(fp)
  815dec:	1004c03a 	cmpne	r2,r2,zero
  815df0:	1000061e 	bne	r2,zero,815e0c <open+0xf0>
  815df4:	e13ff917 	ldw	r4,-28(fp)
  815df8:	0815c240 	call	815c24 <alt_file_locked>
  815dfc:	e0bff715 	stw	r2,-36(fp)
  815e00:	e0bff717 	ldw	r2,-36(fp)
  815e04:	1004803a 	cmplt	r2,r2,zero
  815e08:	1000131e 	bne	r2,zero,815e58 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  815e0c:	e0bffa17 	ldw	r2,-24(fp)
  815e10:	10800317 	ldw	r2,12(r2)
  815e14:	1005003a 	cmpeq	r2,r2,zero
  815e18:	1000091e 	bne	r2,zero,815e40 <open+0x124>
  815e1c:	e0bffa17 	ldw	r2,-24(fp)
  815e20:	10800317 	ldw	r2,12(r2)
  815e24:	e13ff917 	ldw	r4,-28(fp)
  815e28:	e17ffb17 	ldw	r5,-20(fp)
  815e2c:	e1bffc17 	ldw	r6,-16(fp)
  815e30:	e1fffd17 	ldw	r7,-12(fp)
  815e34:	103ee83a 	callr	r2
  815e38:	e0bfff15 	stw	r2,-4(fp)
  815e3c:	00000106 	br	815e44 <open+0x128>
  815e40:	e03fff15 	stw	zero,-4(fp)
  815e44:	e0bfff17 	ldw	r2,-4(fp)
  815e48:	e0bff715 	stw	r2,-36(fp)
  815e4c:	00000206 	br	815e58 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
  815e50:	00bffb44 	movi	r2,-19
  815e54:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  815e58:	e0bff717 	ldw	r2,-36(fp)
  815e5c:	1004403a 	cmpge	r2,r2,zero
  815e60:	1000091e 	bne	r2,zero,815e88 <open+0x16c>
  {
    alt_release_fd (index);  
  815e64:	e13ff817 	ldw	r4,-32(fp)
  815e68:	080a8840 	call	80a884 <alt_release_fd>
    ALT_ERRNO = -status;
  815e6c:	0815ea80 	call	815ea8 <alt_get_errno>
  815e70:	e0fff717 	ldw	r3,-36(fp)
  815e74:	00c7c83a 	sub	r3,zero,r3
  815e78:	10c00015 	stw	r3,0(r2)
    return -1;
  815e7c:	00bfffc4 	movi	r2,-1
  815e80:	e0bffe15 	stw	r2,-8(fp)
  815e84:	00000206 	br	815e90 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
  815e88:	e0bff817 	ldw	r2,-32(fp)
  815e8c:	e0bffe15 	stw	r2,-8(fp)
  815e90:	e0bffe17 	ldw	r2,-8(fp)
}
  815e94:	e037883a 	mov	sp,fp
  815e98:	dfc00117 	ldw	ra,4(sp)
  815e9c:	df000017 	ldw	fp,0(sp)
  815ea0:	dec00204 	addi	sp,sp,8
  815ea4:	f800283a 	ret

00815ea8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  815ea8:	defffd04 	addi	sp,sp,-12
  815eac:	dfc00215 	stw	ra,8(sp)
  815eb0:	df000115 	stw	fp,4(sp)
  815eb4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  815eb8:	008020b4 	movhi	r2,130
  815ebc:	10a32d04 	addi	r2,r2,-29516
  815ec0:	10800017 	ldw	r2,0(r2)
  815ec4:	1005003a 	cmpeq	r2,r2,zero
  815ec8:	1000061e 	bne	r2,zero,815ee4 <alt_get_errno+0x3c>
  815ecc:	008020b4 	movhi	r2,130
  815ed0:	10a32d04 	addi	r2,r2,-29516
  815ed4:	10800017 	ldw	r2,0(r2)
  815ed8:	103ee83a 	callr	r2
  815edc:	e0bfff15 	stw	r2,-4(fp)
  815ee0:	00000306 	br	815ef0 <alt_get_errno+0x48>
  815ee4:	008020b4 	movhi	r2,130
  815ee8:	10aa3404 	addi	r2,r2,-22320
  815eec:	e0bfff15 	stw	r2,-4(fp)
  815ef0:	e0bfff17 	ldw	r2,-4(fp)
}
  815ef4:	e037883a 	mov	sp,fp
  815ef8:	dfc00117 	ldw	ra,4(sp)
  815efc:	df000017 	ldw	fp,0(sp)
  815f00:	dec00204 	addi	sp,sp,8
  815f04:	f800283a 	ret

00815f08 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  815f08:	defffa04 	addi	sp,sp,-24
  815f0c:	df000515 	stw	fp,20(sp)
  815f10:	df000504 	addi	fp,sp,20
  815f14:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815f18:	0005303a 	rdctl	r2,status
  815f1c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815f20:	e0fffd17 	ldw	r3,-12(fp)
  815f24:	00bfff84 	movi	r2,-2
  815f28:	1884703a 	and	r2,r3,r2
  815f2c:	1001703a 	wrctl	status,r2
  
  return context;
  815f30:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  815f34:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  815f38:	e0bfff17 	ldw	r2,-4(fp)
  815f3c:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  815f40:	e0bffc17 	ldw	r2,-16(fp)
  815f44:	10c00017 	ldw	r3,0(r2)
  815f48:	e0bffc17 	ldw	r2,-16(fp)
  815f4c:	10800117 	ldw	r2,4(r2)
  815f50:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  815f54:	e0bffc17 	ldw	r2,-16(fp)
  815f58:	10c00117 	ldw	r3,4(r2)
  815f5c:	e0bffc17 	ldw	r2,-16(fp)
  815f60:	10800017 	ldw	r2,0(r2)
  815f64:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  815f68:	e0fffc17 	ldw	r3,-16(fp)
  815f6c:	e0bffc17 	ldw	r2,-16(fp)
  815f70:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  815f74:	e0fffc17 	ldw	r3,-16(fp)
  815f78:	e0bffc17 	ldw	r2,-16(fp)
  815f7c:	18800015 	stw	r2,0(r3)
  815f80:	e0bffe17 	ldw	r2,-8(fp)
  815f84:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815f88:	e0bffb17 	ldw	r2,-20(fp)
  815f8c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  815f90:	e037883a 	mov	sp,fp
  815f94:	df000017 	ldw	fp,0(sp)
  815f98:	dec00104 	addi	sp,sp,4
  815f9c:	f800283a 	ret

00815fa0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  815fa0:	defffb04 	addi	sp,sp,-20
  815fa4:	dfc00415 	stw	ra,16(sp)
  815fa8:	df000315 	stw	fp,12(sp)
  815fac:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  815fb0:	d0a02d17 	ldw	r2,-32588(gp)
  815fb4:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  815fb8:	d0a73117 	ldw	r2,-25404(gp)
  815fbc:	10800044 	addi	r2,r2,1
  815fc0:	d0a73115 	stw	r2,-25404(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  815fc4:	00003106 	br	81608c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  815fc8:	e0bffe17 	ldw	r2,-8(fp)
  815fcc:	10800017 	ldw	r2,0(r2)
  815fd0:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  815fd4:	e0bffe17 	ldw	r2,-8(fp)
  815fd8:	10800403 	ldbu	r2,16(r2)
  815fdc:	10803fcc 	andi	r2,r2,255
  815fe0:	1005003a 	cmpeq	r2,r2,zero
  815fe4:	1000051e 	bne	r2,zero,815ffc <alt_tick+0x5c>
  815fe8:	d0a73117 	ldw	r2,-25404(gp)
  815fec:	1004c03a 	cmpne	r2,r2,zero
  815ff0:	1000021e 	bne	r2,zero,815ffc <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  815ff4:	e0bffe17 	ldw	r2,-8(fp)
  815ff8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  815ffc:	e0bffe17 	ldw	r2,-8(fp)
  816000:	10c00217 	ldw	r3,8(r2)
  816004:	d0a73117 	ldw	r2,-25404(gp)
  816008:	10c01e36 	bltu	r2,r3,816084 <alt_tick+0xe4>
  81600c:	e0bffe17 	ldw	r2,-8(fp)
  816010:	10800403 	ldbu	r2,16(r2)
  816014:	10803fcc 	andi	r2,r2,255
  816018:	1004c03a 	cmpne	r2,r2,zero
  81601c:	1000191e 	bne	r2,zero,816084 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  816020:	e0bffe17 	ldw	r2,-8(fp)
  816024:	10c00317 	ldw	r3,12(r2)
  816028:	e0bffe17 	ldw	r2,-8(fp)
  81602c:	11000517 	ldw	r4,20(r2)
  816030:	183ee83a 	callr	r3
  816034:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  816038:	e0bffd17 	ldw	r2,-12(fp)
  81603c:	1004c03a 	cmpne	r2,r2,zero
  816040:	1000031e 	bne	r2,zero,816050 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  816044:	e13ffe17 	ldw	r4,-8(fp)
  816048:	0815f080 	call	815f08 <alt_alarm_stop>
  81604c:	00000d06 	br	816084 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  816050:	e0bffe17 	ldw	r2,-8(fp)
  816054:	10c00217 	ldw	r3,8(r2)
  816058:	e0bffd17 	ldw	r2,-12(fp)
  81605c:	1887883a 	add	r3,r3,r2
  816060:	e0bffe17 	ldw	r2,-8(fp)
  816064:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  816068:	e0bffe17 	ldw	r2,-8(fp)
  81606c:	10c00217 	ldw	r3,8(r2)
  816070:	d0a73117 	ldw	r2,-25404(gp)
  816074:	1880032e 	bgeu	r3,r2,816084 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  816078:	e0fffe17 	ldw	r3,-8(fp)
  81607c:	00800044 	movi	r2,1
  816080:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  816084:	e0bfff17 	ldw	r2,-4(fp)
  816088:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  81608c:	d0e02d04 	addi	r3,gp,-32588
  816090:	e0bffe17 	ldw	r2,-8(fp)
  816094:	10ffcc1e 	bne	r2,r3,815fc8 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  816098:	080bba00 	call	80bba0 <OSTimeTick>
}
  81609c:	e037883a 	mov	sp,fp
  8160a0:	dfc00117 	ldw	ra,4(sp)
  8160a4:	df000017 	ldw	fp,0(sp)
  8160a8:	dec00204 	addi	sp,sp,8
  8160ac:	f800283a 	ret

008160b0 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  8160b0:	deffff04 	addi	sp,sp,-4
  8160b4:	df000015 	stw	fp,0(sp)
  8160b8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  8160bc:	000170fa 	wrctl	ienable,zero
}
  8160c0:	e037883a 	mov	sp,fp
  8160c4:	df000017 	ldw	fp,0(sp)
  8160c8:	dec00104 	addi	sp,sp,4
  8160cc:	f800283a 	ret

008160d0 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
  8160d0:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
  8160d4:	d0e00017 	ldw	r3,-32768(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
  8160d8:	d1272a17 	ldw	r4,-25432(gp)

      stw ra,  0(sp)
  8160dc:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
  8160e0:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
  8160e4:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
  8160e8:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
  8160ec:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
  8160f0:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
  8160f4:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
  8160f8:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
  8160fc:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
  816100:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
  816104:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
  816108:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  81610c:	08164f00 	call	8164f0 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
  816110:	d1272517 	ldw	r4,-25452(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
  816114:	d1671d07 	ldb	r5,-25484(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
  816118:	d1272a15 	stw	r4,-25432(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
  81611c:	d1671d45 	stb	r5,-25483(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
  816120:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
  816124:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
  816128:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
  81612c:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
  816130:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
  816134:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
  816138:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
  81613c:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
  816140:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
  816144:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
  816148:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
  81614c:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
  816150:	d0e00015 	stw	r3,-32768(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
  816154:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
  816158:	f800283a 	ret

0081615c <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
  81615c:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
  816160:	047fff84 	movi	r17,-2
      and   r18, r18, r17
  816164:	9464703a 	and	r18,r18,r17
      wrctl status, r18
  816168:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  81616c:	08164f00 	call	8164f0 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
  816170:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
  816174:	d4a71b45 	stb	r18,-25491(gp)

      /*
       * start execution of the new task.
       */

      br 9b
  816178:	003fe506 	br	816110 <OSCtxSw+0x40>

0081617c <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
  81617c:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
  816180:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
  816184:	10800054 	ori	r2,r2,1
      wrctl status, r2
  816188:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
  81618c:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
  816190:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
  816194:	dec00204 	addi	sp,sp,8

      callr r2
  816198:	103ee83a 	callr	r2

      nop
  81619c:	0001883a 	nop

008161a0 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
  8161a0:	defff704 	addi	sp,sp,-36
  8161a4:	dfc00815 	stw	ra,32(sp)
  8161a8:	df000715 	stw	fp,28(sp)
  8161ac:	df000704 	addi	fp,sp,28
  8161b0:	e13ffc15 	stw	r4,-16(fp)
  8161b4:	e17ffd15 	stw	r5,-12(fp)
  8161b8:	e1bffe15 	stw	r6,-8(fp)
  8161bc:	e1ffff0d 	sth	r7,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
  8161c0:	e0bffe17 	ldw	r2,-8(fp)
  8161c4:	1007883a 	mov	r3,r2
  8161c8:	00bfff04 	movi	r2,-4
  8161cc:	1884703a 	and	r2,r3,r2
  8161d0:	10bf0004 	addi	r2,r2,-1024
  8161d4:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
  8161d8:	e0bff917 	ldw	r2,-28(fp)
  8161dc:	10000015 	stw	zero,0(r2)
  8161e0:	e0bff917 	ldw	r2,-28(fp)
  8161e4:	10c0bb04 	addi	r3,r2,748
  8161e8:	e0bff917 	ldw	r2,-28(fp)
  8161ec:	10c00115 	stw	r3,4(r2)
  8161f0:	e0bff917 	ldw	r2,-28(fp)
  8161f4:	1080bb04 	addi	r2,r2,748
  8161f8:	10c01704 	addi	r3,r2,92
  8161fc:	e0bff917 	ldw	r2,-28(fp)
  816200:	10c00215 	stw	r3,8(r2)
  816204:	e0bff917 	ldw	r2,-28(fp)
  816208:	1080bb04 	addi	r2,r2,748
  81620c:	10c02e04 	addi	r3,r2,184
  816210:	e0bff917 	ldw	r2,-28(fp)
  816214:	10c00315 	stw	r3,12(r2)
  816218:	e0bff917 	ldw	r2,-28(fp)
  81621c:	10000415 	stw	zero,16(r2)
  816220:	e0bff917 	ldw	r2,-28(fp)
  816224:	10800504 	addi	r2,r2,20
  816228:	1009883a 	mov	r4,r2
  81622c:	01800644 	movi	r6,25
  816230:	000b883a 	mov	r5,zero
  816234:	0805b340 	call	805b34 <memset>
  816238:	e0bff917 	ldw	r2,-28(fp)
  81623c:	10000c15 	stw	zero,48(r2)
  816240:	e0fff917 	ldw	r3,-28(fp)
  816244:	00802074 	movhi	r2,129
  816248:	109c7404 	addi	r2,r2,29136
  81624c:	18800d15 	stw	r2,52(r3)
  816250:	e0bff917 	ldw	r2,-28(fp)
  816254:	10000e15 	stw	zero,56(r2)
  816258:	e0bff917 	ldw	r2,-28(fp)
  81625c:	10000f15 	stw	zero,60(r2)
  816260:	e0bff917 	ldw	r2,-28(fp)
  816264:	10001015 	stw	zero,64(r2)
  816268:	e0bff917 	ldw	r2,-28(fp)
  81626c:	10001115 	stw	zero,68(r2)
  816270:	e0bff917 	ldw	r2,-28(fp)
  816274:	10001215 	stw	zero,72(r2)
  816278:	e0bff917 	ldw	r2,-28(fp)
  81627c:	10001315 	stw	zero,76(r2)
  816280:	e0bff917 	ldw	r2,-28(fp)
  816284:	10001415 	stw	zero,80(r2)
  816288:	e0bff917 	ldw	r2,-28(fp)
  81628c:	10001515 	stw	zero,84(r2)
  816290:	e0bff917 	ldw	r2,-28(fp)
  816294:	10001615 	stw	zero,88(r2)
  816298:	e0bff917 	ldw	r2,-28(fp)
  81629c:	10001715 	stw	zero,92(r2)
  8162a0:	e0bff917 	ldw	r2,-28(fp)
  8162a4:	10001805 	stb	zero,96(r2)
  8162a8:	e0bff917 	ldw	r2,-28(fp)
  8162ac:	10801f04 	addi	r2,r2,124
  8162b0:	10000015 	stw	zero,0(r2)
  8162b4:	10000115 	stw	zero,4(r2)
  8162b8:	10000215 	stw	zero,8(r2)
  8162bc:	10000315 	stw	zero,12(r2)
  8162c0:	10000415 	stw	zero,16(r2)
  8162c4:	10000515 	stw	zero,20(r2)
  8162c8:	10000615 	stw	zero,24(r2)
  8162cc:	10000715 	stw	zero,28(r2)
  8162d0:	10000815 	stw	zero,32(r2)
  8162d4:	e0bff917 	ldw	r2,-28(fp)
  8162d8:	10002815 	stw	zero,160(r2)
  8162dc:	e0fff917 	ldw	r3,-28(fp)
  8162e0:	00800044 	movi	r2,1
  8162e4:	18802915 	stw	r2,164(r3)
  8162e8:	18002a15 	stw	zero,168(r3)
  8162ec:	e0fff917 	ldw	r3,-28(fp)
  8162f0:	008cc384 	movi	r2,13070
  8162f4:	18802b0d 	sth	r2,172(r3)
  8162f8:	e0fff917 	ldw	r3,-28(fp)
  8162fc:	00aaf344 	movi	r2,-21555
  816300:	18802b8d 	sth	r2,174(r3)
  816304:	e0fff917 	ldw	r3,-28(fp)
  816308:	00848d04 	movi	r2,4660
  81630c:	18802c0d 	sth	r2,176(r3)
  816310:	e0fff917 	ldw	r3,-28(fp)
  816314:	00b99b44 	movi	r2,-6547
  816318:	18802c8d 	sth	r2,178(r3)
  81631c:	e0fff917 	ldw	r3,-28(fp)
  816320:	00b7bb04 	movi	r2,-8468
  816324:	18802d0d 	sth	r2,180(r3)
  816328:	e0fff917 	ldw	r3,-28(fp)
  81632c:	00800144 	movi	r2,5
  816330:	18802d8d 	sth	r2,182(r3)
  816334:	e0fff917 	ldw	r3,-28(fp)
  816338:	008002c4 	movi	r2,11
  81633c:	18802e0d 	sth	r2,184(r3)
  816340:	e0bff917 	ldw	r2,-28(fp)
  816344:	10002f15 	stw	zero,188(r2)
  816348:	e0bff917 	ldw	r2,-28(fp)
  81634c:	10003015 	stw	zero,192(r2)
  816350:	e0bff917 	ldw	r2,-28(fp)
  816354:	10003115 	stw	zero,196(r2)
  816358:	e0bff917 	ldw	r2,-28(fp)
  81635c:	10003215 	stw	zero,200(r2)
  816360:	e0bff917 	ldw	r2,-28(fp)
  816364:	10003315 	stw	zero,204(r2)
  816368:	e0bff917 	ldw	r2,-28(fp)
  81636c:	10003415 	stw	zero,208(r2)
  816370:	e0bff917 	ldw	r2,-28(fp)
  816374:	10003e15 	stw	zero,248(r2)
  816378:	e0bff917 	ldw	r2,-28(fp)
  81637c:	10003f15 	stw	zero,252(r2)
  816380:	e0bff917 	ldw	r2,-28(fp)
  816384:	10004015 	stw	zero,256(r2)
  816388:	e0bff917 	ldw	r2,-28(fp)
  81638c:	10004115 	stw	zero,260(r2)
  816390:	e0bff917 	ldw	r2,-28(fp)
  816394:	10004215 	stw	zero,264(r2)
  816398:	e0bff917 	ldw	r2,-28(fp)
  81639c:	10004315 	stw	zero,268(r2)
  8163a0:	e0bff917 	ldw	r2,-28(fp)
  8163a4:	10004415 	stw	zero,272(r2)
  8163a8:	e0bff917 	ldw	r2,-28(fp)
  8163ac:	10004515 	stw	zero,276(r2)
  8163b0:	e0bff917 	ldw	r2,-28(fp)
  8163b4:	10004615 	stw	zero,280(r2)
  8163b8:	e0bff917 	ldw	r2,-28(fp)
  8163bc:	10004715 	stw	zero,284(r2)
  8163c0:	e0bff917 	ldw	r2,-28(fp)
  8163c4:	10003505 	stb	zero,212(r2)
  8163c8:	e0bff917 	ldw	r2,-28(fp)
  8163cc:	10003705 	stb	zero,220(r2)
  8163d0:	e0bff917 	ldw	r2,-28(fp)
  8163d4:	10003d15 	stw	zero,244(r2)
  8163d8:	e0bff917 	ldw	r2,-28(fp)
  8163dc:	10005215 	stw	zero,328(r2)
  8163e0:	e0bff917 	ldw	r2,-28(fp)
  8163e4:	10005315 	stw	zero,332(r2)
  8163e8:	e0bff917 	ldw	r2,-28(fp)
  8163ec:	10005415 	stw	zero,336(r2)
  8163f0:	e0bff917 	ldw	r2,-28(fp)
  8163f4:	10005515 	stw	zero,340(r2)
  8163f8:	e0bff917 	ldw	r2,-28(fp)
  8163fc:	1000b515 	stw	zero,724(r2)
  816400:	e0bff917 	ldw	r2,-28(fp)
  816404:	10007515 	stw	zero,468(r2)
  816408:	e0bff917 	ldw	r2,-28(fp)
  81640c:	1000b715 	stw	zero,732(r2)
  816410:	e0bff917 	ldw	r2,-28(fp)
  816414:	1000b815 	stw	zero,736(r2)
  816418:	e0bff917 	ldw	r2,-28(fp)
  81641c:	1000b915 	stw	zero,740(r2)
  816420:	e0bff917 	ldw	r2,-28(fp)
  816424:	1000ba15 	stw	zero,744(r2)
  816428:	e0bff917 	ldw	r2,-28(fp)
  81642c:	1080bb04 	addi	r2,r2,748
  816430:	1009883a 	mov	r4,r2
  816434:	01804504 	movi	r6,276
  816438:	000b883a 	mov	r5,zero
  81643c:	0805b340 	call	805b34 <memset>
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
  816440:	e0bff917 	ldw	r2,-28(fp)
  816444:	e0bffb15 	stw	r2,-20(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
  816448:	e0bffb17 	ldw	r2,-20(fp)
  81644c:	10bff304 	addi	r2,r2,-52
  816450:	e0bffa15 	stw	r2,-24(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
  816454:	e0bffa17 	ldw	r2,-24(fp)
  816458:	10c00c04 	addi	r3,r2,48
  81645c:	e0bffc17 	ldw	r2,-16(fp)
  816460:	18800015 	stw	r2,0(r3)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
  816464:	e0bffa17 	ldw	r2,-24(fp)
  816468:	10c00b04 	addi	r3,r2,44
  81646c:	e0bffd17 	ldw	r2,-12(fp)
  816470:	18800015 	stw	r2,0(r3)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
  816474:	e0bffa17 	ldw	r2,-24(fp)
  816478:	10c00a04 	addi	r3,r2,40
  81647c:	e0bff917 	ldw	r2,-28(fp)
  816480:	18800015 	stw	r2,0(r3)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
  816484:	00802074 	movhi	r2,129
  816488:	10985f04 	addi	r2,r2,24956
  81648c:	10c00104 	addi	r3,r2,4
  816490:	e0bffa17 	ldw	r2,-24(fp)
  816494:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
  816498:	e0bffa17 	ldw	r2,-24(fp)
}
  81649c:	e037883a 	mov	sp,fp
  8164a0:	dfc00117 	ldw	ra,4(sp)
  8164a4:	df000017 	ldw	fp,0(sp)
  8164a8:	dec00204 	addi	sp,sp,8
  8164ac:	f800283a 	ret

008164b0 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
  8164b0:	defffe04 	addi	sp,sp,-8
  8164b4:	df000115 	stw	fp,4(sp)
  8164b8:	df000104 	addi	fp,sp,4
  8164bc:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
  8164c0:	e037883a 	mov	sp,fp
  8164c4:	df000017 	ldw	fp,0(sp)
  8164c8:	dec00104 	addi	sp,sp,4
  8164cc:	f800283a 	ret

008164d0 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
  8164d0:	defffe04 	addi	sp,sp,-8
  8164d4:	df000115 	stw	fp,4(sp)
  8164d8:	df000104 	addi	fp,sp,4
  8164dc:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
  8164e0:	e037883a 	mov	sp,fp
  8164e4:	df000017 	ldw	fp,0(sp)
  8164e8:	dec00104 	addi	sp,sp,4
  8164ec:	f800283a 	ret

008164f0 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
  8164f0:	deffff04 	addi	sp,sp,-4
  8164f4:	df000015 	stw	fp,0(sp)
  8164f8:	d839883a 	mov	fp,sp
}
  8164fc:	e037883a 	mov	sp,fp
  816500:	df000017 	ldw	fp,0(sp)
  816504:	dec00104 	addi	sp,sp,4
  816508:	f800283a 	ret

0081650c <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
  81650c:	deffff04 	addi	sp,sp,-4
  816510:	df000015 	stw	fp,0(sp)
  816514:	d839883a 	mov	fp,sp
}
  816518:	e037883a 	mov	sp,fp
  81651c:	df000017 	ldw	fp,0(sp)
  816520:	dec00104 	addi	sp,sp,4
  816524:	f800283a 	ret

00816528 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
  816528:	deffff04 	addi	sp,sp,-4
  81652c:	df000015 	stw	fp,0(sp)
  816530:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
  816534:	e037883a 	mov	sp,fp
  816538:	df000017 	ldw	fp,0(sp)
  81653c:	dec00104 	addi	sp,sp,4
  816540:	f800283a 	ret

00816544 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
  816544:	deffff04 	addi	sp,sp,-4
  816548:	df000015 	stw	fp,0(sp)
  81654c:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
  816550:	e037883a 	mov	sp,fp
  816554:	df000017 	ldw	fp,0(sp)
  816558:	dec00104 	addi	sp,sp,4
  81655c:	f800283a 	ret

00816560 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
  816560:	deffff04 	addi	sp,sp,-4
  816564:	df000015 	stw	fp,0(sp)
  816568:	d839883a 	mov	fp,sp
}
  81656c:	e037883a 	mov	sp,fp
  816570:	df000017 	ldw	fp,0(sp)
  816574:	dec00104 	addi	sp,sp,4
  816578:	f800283a 	ret

0081657c <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
  81657c:	deffff04 	addi	sp,sp,-4
  816580:	df000015 	stw	fp,0(sp)
  816584:	d839883a 	mov	fp,sp
}
  816588:	e037883a 	mov	sp,fp
  81658c:	df000017 	ldw	fp,0(sp)
  816590:	dec00104 	addi	sp,sp,4
  816594:	f800283a 	ret

00816598 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
  816598:	defffe04 	addi	sp,sp,-8
  81659c:	df000115 	stw	fp,4(sp)
  8165a0:	df000104 	addi	fp,sp,4
  8165a4:	e13fff15 	stw	r4,-4(fp)
}
  8165a8:	e037883a 	mov	sp,fp
  8165ac:	df000017 	ldw	fp,0(sp)
  8165b0:	dec00104 	addi	sp,sp,4
  8165b4:	f800283a 	ret

008165b8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  8165b8:	defffa04 	addi	sp,sp,-24
  8165bc:	dfc00515 	stw	ra,20(sp)
  8165c0:	df000415 	stw	fp,16(sp)
  8165c4:	df000404 	addi	fp,sp,16
  8165c8:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  8165cc:	008020b4 	movhi	r2,130
  8165d0:	10a32804 	addi	r2,r2,-29536
  8165d4:	10800017 	ldw	r2,0(r2)
  8165d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8165dc:	00003306 	br	8166ac <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  8165e0:	e0bffd17 	ldw	r2,-12(fp)
  8165e4:	11000217 	ldw	r4,8(r2)
  8165e8:	08006d00 	call	8006d0 <strlen>
  8165ec:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  8165f0:	e0bffd17 	ldw	r2,-12(fp)
  8165f4:	10c00217 	ldw	r3,8(r2)
  8165f8:	e0bffc17 	ldw	r2,-16(fp)
  8165fc:	1885883a 	add	r2,r3,r2
  816600:	10bfffc4 	addi	r2,r2,-1
  816604:	10800003 	ldbu	r2,0(r2)
  816608:	10803fcc 	andi	r2,r2,255
  81660c:	1080201c 	xori	r2,r2,128
  816610:	10bfe004 	addi	r2,r2,-128
  816614:	10800bd8 	cmpnei	r2,r2,47
  816618:	1000031e 	bne	r2,zero,816628 <alt_find_file+0x70>
    {
      len -= 1;
  81661c:	e0bffc17 	ldw	r2,-16(fp)
  816620:	10bfffc4 	addi	r2,r2,-1
  816624:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  816628:	e0bffc17 	ldw	r2,-16(fp)
  81662c:	1007883a 	mov	r3,r2
  816630:	e0bffe17 	ldw	r2,-8(fp)
  816634:	1885883a 	add	r2,r3,r2
  816638:	10800003 	ldbu	r2,0(r2)
  81663c:	10803fcc 	andi	r2,r2,255
  816640:	1080201c 	xori	r2,r2,128
  816644:	10bfe004 	addi	r2,r2,-128
  816648:	10800be0 	cmpeqi	r2,r2,47
  81664c:	10000a1e 	bne	r2,zero,816678 <alt_find_file+0xc0>
  816650:	e0bffc17 	ldw	r2,-16(fp)
  816654:	1007883a 	mov	r3,r2
  816658:	e0bffe17 	ldw	r2,-8(fp)
  81665c:	1885883a 	add	r2,r3,r2
  816660:	10800003 	ldbu	r2,0(r2)
  816664:	10803fcc 	andi	r2,r2,255
  816668:	1080201c 	xori	r2,r2,128
  81666c:	10bfe004 	addi	r2,r2,-128
  816670:	1004c03a 	cmpne	r2,r2,zero
  816674:	10000a1e 	bne	r2,zero,8166a0 <alt_find_file+0xe8>
  816678:	e0bffd17 	ldw	r2,-12(fp)
  81667c:	11000217 	ldw	r4,8(r2)
  816680:	e1bffc17 	ldw	r6,-16(fp)
  816684:	e17ffe17 	ldw	r5,-8(fp)
  816688:	08168280 	call	816828 <memcmp>
  81668c:	1004c03a 	cmpne	r2,r2,zero
  816690:	1000031e 	bne	r2,zero,8166a0 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  816694:	e0bffd17 	ldw	r2,-12(fp)
  816698:	e0bfff15 	stw	r2,-4(fp)
  81669c:	00000806 	br	8166c0 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  8166a0:	e0bffd17 	ldw	r2,-12(fp)
  8166a4:	10800017 	ldw	r2,0(r2)
  8166a8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8166ac:	00c020b4 	movhi	r3,130
  8166b0:	18e32804 	addi	r3,r3,-29536
  8166b4:	e0bffd17 	ldw	r2,-12(fp)
  8166b8:	10ffc91e 	bne	r2,r3,8165e0 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  8166bc:	e03fff15 	stw	zero,-4(fp)
  8166c0:	e0bfff17 	ldw	r2,-4(fp)
}
  8166c4:	e037883a 	mov	sp,fp
  8166c8:	dfc00117 	ldw	ra,4(sp)
  8166cc:	df000017 	ldw	fp,0(sp)
  8166d0:	dec00204 	addi	sp,sp,8
  8166d4:	f800283a 	ret

008166d8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  8166d8:	defff704 	addi	sp,sp,-36
  8166dc:	dfc00815 	stw	ra,32(sp)
  8166e0:	df000715 	stw	fp,28(sp)
  8166e4:	dc000615 	stw	r16,24(sp)
  8166e8:	df000604 	addi	fp,sp,24
  8166ec:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  8166f0:	00bffa04 	movi	r2,-24
  8166f4:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
  8166f8:	008020b4 	movhi	r2,130
  8166fc:	10aa3504 	addi	r2,r2,-22316
  816700:	10800017 	ldw	r2,0(r2)
  816704:	e0bffa15 	stw	r2,-24(fp)
  816708:	e03ffb0d 	sth	zero,-20(fp)
  81670c:	e17ffb0b 	ldhu	r5,-20(fp)
  816710:	e1bffe04 	addi	r6,fp,-8
  816714:	e13ffa17 	ldw	r4,-24(fp)
  816718:	08109c00 	call	8109c0 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  81671c:	e03ffd15 	stw	zero,-12(fp)
  816720:	00002006 	br	8167a4 <alt_get_fd+0xcc>
  {
    if (!alt_fd_list[i].dev)
  816724:	e13ffd17 	ldw	r4,-12(fp)
  816728:	04002074 	movhi	r16,129
  81672c:	841e8404 	addi	r16,r16,31248
  816730:	01400304 	movi	r5,12
  816734:	08099200 	call	809920 <__mulsi3>
  816738:	1405883a 	add	r2,r2,r16
  81673c:	10800017 	ldw	r2,0(r2)
  816740:	1004c03a 	cmpne	r2,r2,zero
  816744:	1000141e 	bne	r2,zero,816798 <alt_get_fd+0xc0>
    {
      alt_fd_list[i].dev = dev;
  816748:	e13ffd17 	ldw	r4,-12(fp)
  81674c:	04002074 	movhi	r16,129
  816750:	841e8404 	addi	r16,r16,31248
  816754:	01400304 	movi	r5,12
  816758:	08099200 	call	809920 <__mulsi3>
  81675c:	1407883a 	add	r3,r2,r16
  816760:	e0bfff17 	ldw	r2,-4(fp)
  816764:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  816768:	008020b4 	movhi	r2,130
  81676c:	10a32c04 	addi	r2,r2,-29520
  816770:	10c00017 	ldw	r3,0(r2)
  816774:	e0bffd17 	ldw	r2,-12(fp)
  816778:	1880040e 	bge	r3,r2,81678c <alt_get_fd+0xb4>
      {
        alt_max_fd = i;
  81677c:	00c020b4 	movhi	r3,130
  816780:	18e32c04 	addi	r3,r3,-29520
  816784:	e0bffd17 	ldw	r2,-12(fp)
  816788:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  81678c:	e0bffd17 	ldw	r2,-12(fp)
  816790:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
  816794:	00000606 	br	8167b0 <alt_get_fd+0xd8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  816798:	e0bffd17 	ldw	r2,-12(fp)
  81679c:	10800044 	addi	r2,r2,1
  8167a0:	e0bffd15 	stw	r2,-12(fp)
  8167a4:	e0bffd17 	ldw	r2,-12(fp)
  8167a8:	10800810 	cmplti	r2,r2,32
  8167ac:	103fdd1e 	bne	r2,zero,816724 <alt_get_fd+0x4c>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
  8167b0:	008020b4 	movhi	r2,130
  8167b4:	10aa3504 	addi	r2,r2,-22316
  8167b8:	11000017 	ldw	r4,0(r2)
  8167bc:	0810db80 	call	810db8 <OSSemPost>

  return rc;
  8167c0:	e0bffc17 	ldw	r2,-16(fp)
}
  8167c4:	e037883a 	mov	sp,fp
  8167c8:	dfc00217 	ldw	ra,8(sp)
  8167cc:	df000117 	ldw	fp,4(sp)
  8167d0:	dc000017 	ldw	r16,0(sp)
  8167d4:	dec00304 	addi	sp,sp,12
  8167d8:	f800283a 	ret

008167dc <atexit>:
  8167dc:	200b883a 	mov	r5,r4
  8167e0:	000d883a 	mov	r6,zero
  8167e4:	0009883a 	mov	r4,zero
  8167e8:	000f883a 	mov	r7,zero
  8167ec:	081689c1 	jmpi	81689c <__register_exitproc>

008167f0 <exit>:
  8167f0:	defffe04 	addi	sp,sp,-8
  8167f4:	000b883a 	mov	r5,zero
  8167f8:	dc000015 	stw	r16,0(sp)
  8167fc:	dfc00115 	stw	ra,4(sp)
  816800:	2021883a 	mov	r16,r4
  816804:	08169d40 	call	8169d4 <__call_exitprocs>
  816808:	008020b4 	movhi	r2,130
  81680c:	10a32304 	addi	r2,r2,-29556
  816810:	11000017 	ldw	r4,0(r2)
  816814:	20800f17 	ldw	r2,60(r4)
  816818:	10000126 	beq	r2,zero,816820 <exit+0x30>
  81681c:	103ee83a 	callr	r2
  816820:	8009883a 	mov	r4,r16
  816824:	0816bc40 	call	816bc4 <_exit>

00816828 <memcmp>:
  816828:	00c000c4 	movi	r3,3
  81682c:	1980032e 	bgeu	r3,r6,81683c <memcmp+0x14>
  816830:	2144b03a 	or	r2,r4,r5
  816834:	10c4703a 	and	r2,r2,r3
  816838:	10000f26 	beq	r2,zero,816878 <memcmp+0x50>
  81683c:	31ffffc4 	addi	r7,r6,-1
  816840:	3000061e 	bne	r6,zero,81685c <memcmp+0x34>
  816844:	00000a06 	br	816870 <memcmp+0x48>
  816848:	39ffffc4 	addi	r7,r7,-1
  81684c:	00bfffc4 	movi	r2,-1
  816850:	21000044 	addi	r4,r4,1
  816854:	29400044 	addi	r5,r5,1
  816858:	38800526 	beq	r7,r2,816870 <memcmp+0x48>
  81685c:	20c00003 	ldbu	r3,0(r4)
  816860:	28800003 	ldbu	r2,0(r5)
  816864:	18bff826 	beq	r3,r2,816848 <memcmp+0x20>
  816868:	1885c83a 	sub	r2,r3,r2
  81686c:	f800283a 	ret
  816870:	0005883a 	mov	r2,zero
  816874:	f800283a 	ret
  816878:	180f883a 	mov	r7,r3
  81687c:	20c00017 	ldw	r3,0(r4)
  816880:	28800017 	ldw	r2,0(r5)
  816884:	18bfed1e 	bne	r3,r2,81683c <memcmp+0x14>
  816888:	31bfff04 	addi	r6,r6,-4
  81688c:	21000104 	addi	r4,r4,4
  816890:	29400104 	addi	r5,r5,4
  816894:	39bff936 	bltu	r7,r6,81687c <memcmp+0x54>
  816898:	003fe806 	br	81683c <memcmp+0x14>

0081689c <__register_exitproc>:
  81689c:	defffa04 	addi	sp,sp,-24
  8168a0:	008020b4 	movhi	r2,130
  8168a4:	10a32304 	addi	r2,r2,-29556
  8168a8:	dc000015 	stw	r16,0(sp)
  8168ac:	14000017 	ldw	r16,0(r2)
  8168b0:	dd000415 	stw	r20,16(sp)
  8168b4:	2829883a 	mov	r20,r5
  8168b8:	81405217 	ldw	r5,328(r16)
  8168bc:	dcc00315 	stw	r19,12(sp)
  8168c0:	dc800215 	stw	r18,8(sp)
  8168c4:	dc400115 	stw	r17,4(sp)
  8168c8:	dfc00515 	stw	ra,20(sp)
  8168cc:	2023883a 	mov	r17,r4
  8168d0:	3027883a 	mov	r19,r6
  8168d4:	3825883a 	mov	r18,r7
  8168d8:	28002526 	beq	r5,zero,816970 <__register_exitproc+0xd4>
  8168dc:	29000117 	ldw	r4,4(r5)
  8168e0:	008007c4 	movi	r2,31
  8168e4:	11002716 	blt	r2,r4,816984 <__register_exitproc+0xe8>
  8168e8:	8800101e 	bne	r17,zero,81692c <__register_exitproc+0x90>
  8168ec:	2105883a 	add	r2,r4,r4
  8168f0:	1085883a 	add	r2,r2,r2
  8168f4:	20c00044 	addi	r3,r4,1
  8168f8:	1145883a 	add	r2,r2,r5
  8168fc:	0009883a 	mov	r4,zero
  816900:	15000215 	stw	r20,8(r2)
  816904:	28c00115 	stw	r3,4(r5)
  816908:	2005883a 	mov	r2,r4
  81690c:	dfc00517 	ldw	ra,20(sp)
  816910:	dd000417 	ldw	r20,16(sp)
  816914:	dcc00317 	ldw	r19,12(sp)
  816918:	dc800217 	ldw	r18,8(sp)
  81691c:	dc400117 	ldw	r17,4(sp)
  816920:	dc000017 	ldw	r16,0(sp)
  816924:	dec00604 	addi	sp,sp,24
  816928:	f800283a 	ret
  81692c:	29802204 	addi	r6,r5,136
  816930:	00800044 	movi	r2,1
  816934:	110e983a 	sll	r7,r2,r4
  816938:	30c04017 	ldw	r3,256(r6)
  81693c:	2105883a 	add	r2,r4,r4
  816940:	1085883a 	add	r2,r2,r2
  816944:	1185883a 	add	r2,r2,r6
  816948:	19c6b03a 	or	r3,r3,r7
  81694c:	14802015 	stw	r18,128(r2)
  816950:	14c00015 	stw	r19,0(r2)
  816954:	00800084 	movi	r2,2
  816958:	30c04015 	stw	r3,256(r6)
  81695c:	88bfe31e 	bne	r17,r2,8168ec <__register_exitproc+0x50>
  816960:	30804117 	ldw	r2,260(r6)
  816964:	11c4b03a 	or	r2,r2,r7
  816968:	30804115 	stw	r2,260(r6)
  81696c:	003fdf06 	br	8168ec <__register_exitproc+0x50>
  816970:	008020b4 	movhi	r2,130
  816974:	10872704 	addi	r2,r2,7324
  816978:	100b883a 	mov	r5,r2
  81697c:	80805215 	stw	r2,328(r16)
  816980:	003fd606 	br	8168dc <__register_exitproc+0x40>
  816984:	00800034 	movhi	r2,0
  816988:	10800004 	addi	r2,r2,0
  81698c:	1000021e 	bne	r2,zero,816998 <__register_exitproc+0xfc>
  816990:	013fffc4 	movi	r4,-1
  816994:	003fdc06 	br	816908 <__register_exitproc+0x6c>
  816998:	01006404 	movi	r4,400
  81699c:	103ee83a 	callr	r2
  8169a0:	1007883a 	mov	r3,r2
  8169a4:	103ffa26 	beq	r2,zero,816990 <__register_exitproc+0xf4>
  8169a8:	80805217 	ldw	r2,328(r16)
  8169ac:	180b883a 	mov	r5,r3
  8169b0:	18000115 	stw	zero,4(r3)
  8169b4:	18800015 	stw	r2,0(r3)
  8169b8:	80c05215 	stw	r3,328(r16)
  8169bc:	18006215 	stw	zero,392(r3)
  8169c0:	18006315 	stw	zero,396(r3)
  8169c4:	0009883a 	mov	r4,zero
  8169c8:	883fc826 	beq	r17,zero,8168ec <__register_exitproc+0x50>
  8169cc:	003fd706 	br	81692c <__register_exitproc+0x90>

008169d0 <register_fini>:
  8169d0:	f800283a 	ret

008169d4 <__call_exitprocs>:
  8169d4:	008020b4 	movhi	r2,130
  8169d8:	10a32304 	addi	r2,r2,-29556
  8169dc:	10800017 	ldw	r2,0(r2)
  8169e0:	defff304 	addi	sp,sp,-52
  8169e4:	df000b15 	stw	fp,44(sp)
  8169e8:	d8800115 	stw	r2,4(sp)
  8169ec:	00800034 	movhi	r2,0
  8169f0:	10800004 	addi	r2,r2,0
  8169f4:	1005003a 	cmpeq	r2,r2,zero
  8169f8:	d8800215 	stw	r2,8(sp)
  8169fc:	d8800117 	ldw	r2,4(sp)
  816a00:	dd400815 	stw	r21,32(sp)
  816a04:	dd000715 	stw	r20,28(sp)
  816a08:	10805204 	addi	r2,r2,328
  816a0c:	dfc00c15 	stw	ra,48(sp)
  816a10:	ddc00a15 	stw	r23,40(sp)
  816a14:	dd800915 	stw	r22,36(sp)
  816a18:	dcc00615 	stw	r19,24(sp)
  816a1c:	dc800515 	stw	r18,20(sp)
  816a20:	dc400415 	stw	r17,16(sp)
  816a24:	dc000315 	stw	r16,12(sp)
  816a28:	282b883a 	mov	r21,r5
  816a2c:	2039883a 	mov	fp,r4
  816a30:	d8800015 	stw	r2,0(sp)
  816a34:	2829003a 	cmpeq	r20,r5,zero
  816a38:	d8800117 	ldw	r2,4(sp)
  816a3c:	14405217 	ldw	r17,328(r2)
  816a40:	88001026 	beq	r17,zero,816a84 <__call_exitprocs+0xb0>
  816a44:	ddc00017 	ldw	r23,0(sp)
  816a48:	88800117 	ldw	r2,4(r17)
  816a4c:	8c802204 	addi	r18,r17,136
  816a50:	143fffc4 	addi	r16,r2,-1
  816a54:	80000916 	blt	r16,zero,816a7c <__call_exitprocs+0xa8>
  816a58:	05bfffc4 	movi	r22,-1
  816a5c:	a000151e 	bne	r20,zero,816ab4 <__call_exitprocs+0xe0>
  816a60:	8409883a 	add	r4,r16,r16
  816a64:	2105883a 	add	r2,r4,r4
  816a68:	1485883a 	add	r2,r2,r18
  816a6c:	10c02017 	ldw	r3,128(r2)
  816a70:	a8c01126 	beq	r21,r3,816ab8 <__call_exitprocs+0xe4>
  816a74:	843fffc4 	addi	r16,r16,-1
  816a78:	85bff81e 	bne	r16,r22,816a5c <__call_exitprocs+0x88>
  816a7c:	d8800217 	ldw	r2,8(sp)
  816a80:	10003126 	beq	r2,zero,816b48 <__call_exitprocs+0x174>
  816a84:	dfc00c17 	ldw	ra,48(sp)
  816a88:	df000b17 	ldw	fp,44(sp)
  816a8c:	ddc00a17 	ldw	r23,40(sp)
  816a90:	dd800917 	ldw	r22,36(sp)
  816a94:	dd400817 	ldw	r21,32(sp)
  816a98:	dd000717 	ldw	r20,28(sp)
  816a9c:	dcc00617 	ldw	r19,24(sp)
  816aa0:	dc800517 	ldw	r18,20(sp)
  816aa4:	dc400417 	ldw	r17,16(sp)
  816aa8:	dc000317 	ldw	r16,12(sp)
  816aac:	dec00d04 	addi	sp,sp,52
  816ab0:	f800283a 	ret
  816ab4:	8409883a 	add	r4,r16,r16
  816ab8:	88c00117 	ldw	r3,4(r17)
  816abc:	2105883a 	add	r2,r4,r4
  816ac0:	1445883a 	add	r2,r2,r17
  816ac4:	18ffffc4 	addi	r3,r3,-1
  816ac8:	11800217 	ldw	r6,8(r2)
  816acc:	1c001526 	beq	r3,r16,816b24 <__call_exitprocs+0x150>
  816ad0:	10000215 	stw	zero,8(r2)
  816ad4:	303fe726 	beq	r6,zero,816a74 <__call_exitprocs+0xa0>
  816ad8:	00c00044 	movi	r3,1
  816adc:	1c06983a 	sll	r3,r3,r16
  816ae0:	90804017 	ldw	r2,256(r18)
  816ae4:	8cc00117 	ldw	r19,4(r17)
  816ae8:	1884703a 	and	r2,r3,r2
  816aec:	10001426 	beq	r2,zero,816b40 <__call_exitprocs+0x16c>
  816af0:	90804117 	ldw	r2,260(r18)
  816af4:	1884703a 	and	r2,r3,r2
  816af8:	10000c1e 	bne	r2,zero,816b2c <__call_exitprocs+0x158>
  816afc:	2105883a 	add	r2,r4,r4
  816b00:	1485883a 	add	r2,r2,r18
  816b04:	11400017 	ldw	r5,0(r2)
  816b08:	e009883a 	mov	r4,fp
  816b0c:	303ee83a 	callr	r6
  816b10:	88800117 	ldw	r2,4(r17)
  816b14:	98bfc81e 	bne	r19,r2,816a38 <__call_exitprocs+0x64>
  816b18:	b8800017 	ldw	r2,0(r23)
  816b1c:	147fd526 	beq	r2,r17,816a74 <__call_exitprocs+0xa0>
  816b20:	003fc506 	br	816a38 <__call_exitprocs+0x64>
  816b24:	8c000115 	stw	r16,4(r17)
  816b28:	003fea06 	br	816ad4 <__call_exitprocs+0x100>
  816b2c:	2105883a 	add	r2,r4,r4
  816b30:	1485883a 	add	r2,r2,r18
  816b34:	11000017 	ldw	r4,0(r2)
  816b38:	303ee83a 	callr	r6
  816b3c:	003ff406 	br	816b10 <__call_exitprocs+0x13c>
  816b40:	303ee83a 	callr	r6
  816b44:	003ff206 	br	816b10 <__call_exitprocs+0x13c>
  816b48:	88800117 	ldw	r2,4(r17)
  816b4c:	1000081e 	bne	r2,zero,816b70 <__call_exitprocs+0x19c>
  816b50:	89000017 	ldw	r4,0(r17)
  816b54:	20000726 	beq	r4,zero,816b74 <__call_exitprocs+0x1a0>
  816b58:	b9000015 	stw	r4,0(r23)
  816b5c:	8809883a 	mov	r4,r17
  816b60:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
  816b64:	bc400017 	ldw	r17,0(r23)
  816b68:	883fb71e 	bne	r17,zero,816a48 <__call_exitprocs+0x74>
  816b6c:	003fc506 	br	816a84 <__call_exitprocs+0xb0>
  816b70:	89000017 	ldw	r4,0(r17)
  816b74:	882f883a 	mov	r23,r17
  816b78:	2023883a 	mov	r17,r4
  816b7c:	883fb21e 	bne	r17,zero,816a48 <__call_exitprocs+0x74>
  816b80:	003fc006 	br	816a84 <__call_exitprocs+0xb0>

00816b84 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  816b84:	defffd04 	addi	sp,sp,-12
  816b88:	df000215 	stw	fp,8(sp)
  816b8c:	df000204 	addi	fp,sp,8
  816b90:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  816b94:	e0bfff17 	ldw	r2,-4(fp)
  816b98:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  816b9c:	e0bffe17 	ldw	r2,-8(fp)
  816ba0:	1005003a 	cmpeq	r2,r2,zero
  816ba4:	1000021e 	bne	r2,zero,816bb0 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  816ba8:	002af070 	cmpltui	zero,zero,43969
  816bac:	00000106 	br	816bb4 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  816bb0:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  816bb4:	e037883a 	mov	sp,fp
  816bb8:	df000017 	ldw	fp,0(sp)
  816bbc:	dec00104 	addi	sp,sp,4
  816bc0:	f800283a 	ret

00816bc4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  816bc4:	defffd04 	addi	sp,sp,-12
  816bc8:	dfc00215 	stw	ra,8(sp)
  816bcc:	df000115 	stw	fp,4(sp)
  816bd0:	df000104 	addi	fp,sp,4
  816bd4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  816bd8:	008020b4 	movhi	r2,130
  816bdc:	10aa3d44 	addi	r2,r2,-22283
  816be0:	10000005 	stb	zero,0(r2)

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  816be4:	e13fff17 	ldw	r4,-4(fp)
  816be8:	0816b840 	call	816b84 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  816bec:	003fff06 	br	816bec <_exit+0x28>
  816bf0:	008169d0 	cmplti	r2,zero,1447
